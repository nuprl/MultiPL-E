language: cs
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += extension;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3efbc2085694634930dc2cf2478a02c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3efbc2085694634930dc2cf2478a02c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        int strongest_extension_strength = -1;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = extension.Count(x\
    \ => char.IsUpper(x));\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03a278593ad041b5846c09453e47e839>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03a278593ad041b5846c09453e47e839>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int extension_strength\
    \ = extension2.ToUpper().Count() - extension2.ToLower().Count();\n           \
    \ if (extension_strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + \".\" + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1518a5a4c3c46f5964a1e996ecd6973>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1518a5a4c3c46f5964a1e996ecd6973>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     double strongest_extension_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_strength = extension_strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpberklirv.cs(28,38): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string strongest_extension = null;\n        foreach (string extension_name\
    \ in extensions) {\n            string extension_strength_new = extension_name.Substring(extension_name.Length\
    \ - 1).ToLower();\n            if (extension_strength_new == extension_strength)\
    \ {\n                strongest_extension = extension_name;\n            }\n  \
    \      }\n        return class_name + \".\" + strongest_extension;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ad0b5016ae9400ca6a072deaf66c599>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ad0b5016ae9400ca6a072deaf66c599>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extensions_map =\
    \ new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int extension_length = extension.Length;\n            int extension_cap\
    \ = extension_length.ToUpperInvariant().Count(x => x == x);\n            int extension_sm\
    \ = extension_length.ToLowerInvariant().Count(x => x == x);\n            int extension_strength\
    \ = extension_cap - extension_sm;\n            extensions_map.Add(extension, extension_strength);\n\
    \        }\n        string strongest_extension = extensions_map.OrderByDescending(x\
    \ => x.Value).First().Key;\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplp3e_qc1.cs(28,50): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToUpperInvariant(ReadOnlySpan<char>,
    Span<char>)''

    /tmp/tmplp3e_qc1.cs(29,49): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToLowerInvariant(ReadOnlySpan<char>,
    Span<char>)''

    '
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += extension;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b592d466a3244d38c82503580a02a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b592d466a3244d38c82503580a02a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     double max_strength = double.MaxValue;\n        foreach (string extension\
    \ in extensions) {\n            double extension_strength = GetExtensionStrength(class_name,\
    \ extension);\n            if (extension_strength > max_strength) {\n        \
    \        max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu9ox92jf.cs(28,41): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int SM = extension2.ToLowerInvariant().Count(c\
    \ => char.IsLower(c));\n            int CAP = extension2.ToUpperInvariant().Count(c\
    \ => char.IsUpper(c));\n            int strength = (CAP - SM) / CAP;\n       \
    \     if (strength > extension.ToLowerInvariant().Count(c => char.IsLower(c)))\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea0a1996e9134773b572907c3156ff28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea0a1996e9134773b572907c3156ff28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        int sm = 0;\n        int cap = 0;\n        foreach (string\
    \ extension in extensions) {\n            int s = extension.Length;\n        \
    \    sm = sm + s;\n            cap = cap + s.ToUpper().Count();\n        }\n \
    \       double strength = cap - sm;\n        if (strength > 0) {\n           \
    \ strongest_extension = class_name + extensions[0];\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7eigdcld.cs(32,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToUpper(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    '
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e0c270644004a23b5c73ae818920d20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e0c270644004a23b5c73ae818920d20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     string extension_strength = null;\n        foreach (string extension in\
    \ extensions) {\n            int extension_strength_numerator = 0;\n         \
    \   int extension_strength_denominator = 0;\n            int extension_cap = 0;\n\
    \            int extension_sm = 0;\n            int extension_length = extension.Length;\n\
    \            int extension_count_cap = 0;\n            int extension_count_sm\
    \ = 0;\n            int extension_count_length = 0;\n            int extension_count_cap_sm\
    \ = 0;\n            int extension_count_cap_length = 0;\n            int extension_count_sm_sm\
    \ = 0;\n            int extension_count_sm_length = 0;\n            int extension_count_cap_sm_length\
    \ = 0;\n            int extension_count_cap_length_sm = 0;\n            int extension_count_cap_length_sm_length\
    \ = 0;\n            int extension_count_sm_cap = 0;\n            int extension_count_sm_cap\
    \ = 0;\n            int extension_count_cap_sm_cap = 0;\n            int extension_count_cap_sm_cap\
    \ = 0;\n            int extension_count_cap_length_sm_cap = 0;\n            int\
    \ extension_count_cap_length_sm_cap = 0;\n            int extension_count_sm_cap_sm\
    \ = 0;\n            int extension_count_sm_cap_sm = 0;\n            int extension_count_cap_sm_cap_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm = 0;\n            int extension_count_cap_length_sm_cap_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm = 0;\n          \
    \  int extension_count_sm_cap_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm = 0;\n            int\
    \ extension_count_cap_sm_cap_sm_sm = 0;\n            int extension_count_cap_length_sm_cap_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm_sm = 0;\n       \
    \     int extension_count_sm_cap_sm_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm_sm = 0;\n           \
    \ int extension_count_cap_sm_cap_sm_sm_sm = 0;\n            int extension_count_cap_length_sm_cap_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm_sm_sm = 0;\n    \
    \        int extension_count_sm_cap_sm_sm_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm_sm_sm = 0;\n        \
    \    int extension_count_\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkq4lny5_.cs(70,33): error CS1002: ; expected

    /tmp/tmpkq4lny5_.cs(72,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpkq4lny5_.cs(84,2): error CS1513: } expected

    '
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string strongest_extension = class_name + extension;\n        List<string>\
    \ extensions_with_same_strength = extensions.Where(x => x.Substring(x.Length -\
    \ 1) != extension_strength).ToList();\n        if (extensions_with_same_strength.Count\
    \ > 1) {\n            extension = extensions_with_same_strength[0];\n        \
    \    extension_strength = extension.Substring(extension.Length - 1);\n       \
    \     strongest_extension = class_name + extension;\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f00a64a184cc4506bf781866a069271a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f00a64a184cc4506bf781866a069271a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42c7d8e2e4774a25b7c26be0ac2dc97b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42c7d8e2e4774a25b7c26be0ac2dc97b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extension_strength\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength.ContainsKey(extension)) {\n              \
    \  if (extension_strength[extension] < strength) {\n                    extension_strength[extension]\
    \ = strength;\n                }\n            } else {\n                extension_strength.Add(extension,\
    \ strength);\n            }\n        }\n        int max_strength = extension_strength.Values.Max();\n\
    \        string strongest_extension = class_name + extension_strength.Where(x\
    \ => x.Value == max_strength).First().Key;\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <217e4eecef744f01ada177d7519d7a4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <217e4eecef744f01ada177d7519d7a4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f79739815a04e13aa103c10d493cf47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f79739815a04e13aa103c10d493cf47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            double\
    \ strength = cap - sm;\n            if (strength > strongest_strength) {\n   \
    \             strongest_extension = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d04a481b84e40feb2d14424e6b40bca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d04a481b84e40feb2d14424e6b40bca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => c == 'A');\n            int sm = extension.Count(c\
    \ => c == 'a');\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff88d9ce56ad4b8082cb24b02b7eb7d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff88d9ce56ad4b8082cb24b02b7eb7d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + \".\" + extension;\n                } else {\n              \
    \      if (strength > strongest_extension.Length) {\n                        strongest_extension\
    \ = class_name + \".\" + extension;\n                    }\n                }\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4150eb118f0c4471ba16249210d00e50>:0 \n\nUnhandled Exception:\n\
    System.NullReferenceException: Object reference not set to an instance of an object\n\
    \  at Problem.Main (System.String[] args) [0x000c8] in <4150eb118f0c4471ba16249210d00e50>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x000c8] in <4150eb118f0c4471ba16249210d00e50>:0 \n"
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string ext in extensions) {\n            int cap = ext.ToUpper().Count();\n\
    \            int sm = ext.ToLower().Count();\n            double strength = cap\
    \ - sm;\n            if (strength > 0) {\n                extension = ext;\n \
    \               break;\n            }\n        }\n        return class_name +\
    \ \".\" + extension;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f04074ae6b04ed58f3e85095f25db7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f04074ae6b04ed58f3e85095f25db7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpperInvariant().Count() - extension.ToLowerInvariant().Count();\n\
    \            if (extension_strength_int > extension_strength.ToUpperInvariant().Count()\
    \ - extension_strength.ToLowerInvariant().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd87e4b53e124b508f0ca8a44c87e667>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd87e4b53e124b508f0ca8a44c87e667>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1, 1);\n\
    \        string extension_strength_class = extension.Substring(0, extension.Length\
    \ - 1);\n        double extension_strength_class_double = double.Parse(extension_strength_class);\n\
    \        double extension_strength_class_double_sum = extension_strength_class_double.Sum();\n\
    \        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8dj1im4u.cs(50,72): error CS1002: ; expected

    '
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    int cap = extension.Count(x => char.IsUpper(x));\n        int sm = extension.Count(x\
    \ => char.IsLower(x));\n        int strength = cap - sm;\n        extensions.Remove(extension);\n\
    \        if (extensions.Count > 0)\n            extension = extensions[0];\n \
    \       extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzeoid6pf.cs(24,26): error CS0161: ''Problem.StrongestExtension(string,
    List<string>)'': not all code paths return a value

    '
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        int strongest_extension_strength = -1;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = extension.Count(c =>\
    \ char.IsUpper(c));\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <696f326b0ba441bcb7090c79f4724288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <696f326b0ba441bcb7090c79f4724288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string ext in extensions) {\n            int cap = ext.ToUpper().Count();\n\
    \            int sm = ext.ToLower().Count();\n            int strength = cap -\
    \ sm;\n            if (strength > extension.ToUpper().Count() - ext.ToLower().Count())\
    \ {\n                extension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35d7d8d98a384972b4835d5260e64ca0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35d7d8d98a384972b4835d5260e64ca0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string class_strength = class_name.Substring(class_name.Length - 1);\n\
    \        int extension_strength_int = Convert.ToInt32(extension_strength);\n \
    \       int class_strength_int = Convert.ToInt32(class_strength);\n        int\
    \ strength = extension_strength_int - class_strength_int;\n        if (strength\
    \ > 0) {\n            extension = extensions[0];\n        }\n        return class_name\
    \ + \".\" + extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00027] in <b0597286e35748429057cafef20155e9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <b0597286e35748429057cafef20155e9>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not\
    \ in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00027] in <b0597286e35748429057cafef20155e9>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <b0597286e35748429057cafef20155e9>:0 \n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0e9bdae731f4aeb9fb33fe437442433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0e9bdae731f4aeb9fb33fe437442433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    int cap = class_name.ToUpper().Count(c => c == 'A');\n        int sm = class_name.ToLower().Count(c\
    \ => c == 'a');\n        int strength = cap - sm;\n        if (extensions.Count()\
    \ > 1) {\n            extension = extensions.OrderBy(x => x).First();\n      \
    \  }\n        return class_name + \".\" + extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c813aaf3376a4e1b90106d3d97dd4814>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c813aaf3376a4e1b90106d3d97dd4814>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int extension_strength\
    \ = extension2.ToUpper().Count() - extension.ToUpper().Count();\n            if\
    \ (extension_strength > 0) {\n                extension = extension2;\n      \
    \      }\n        }\n        return class_name + extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb381c426a09477b8706b2bc43f60744>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb381c426a09477b8706b2bc43f60744>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a833f3a32baf4b23a6f77a694a0dfb8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a833f3a32baf4b23a6f77a694a0dfb8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0e9bdae731f4aeb9fb33fe437442433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0e9bdae731f4aeb9fb33fe437442433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension = class_name + extension;\n            }\n     \
    \   }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3ae4b954aa4f5996bf4bd075e149c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3ae4b954aa4f5996bf4bd075e149c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        int strongest_extension_strength = -1;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_strength = extension_strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_kstw90.cs(29,38): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n            }\n   \
    \     }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea74531482e04da2b22588ea41c45394>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea74531482e04da2b22588ea41c45394>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_capital\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_smaller\
    \ = extension.Count(c => char.IsLower(c));\n            int extension_strength_fraction\
    \ = extension_capital - extension_smaller;\n            if (extension_strength_fraction\
    \ > extension_strength.Count(c => c == extension)) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphhamkcni.cs(30,77): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        int cap = class_name.Length;\n        int sm = class_name.ToLower().Length;\n\
    \        foreach (string extension in extensions) {\n            int cap_extension\
    \ = extension.Length;\n            int sm_extension = extension.ToLower().Length;\n\
    \            int strength = cap_extension - sm_extension;\n            if (strength\
    \ > cap - sm) {\n                strongest_extension = extension;\n          \
    \      cap = cap_extension;\n                sm = sm_extension;\n            }\n\
    \        }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <314cefd7fdae46d2b12751469aae1ba4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <314cefd7fdae46d2b12751469aae1ba4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dd27cb1f9f54fa684281acf924f3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dd27cb1f9f54fa684281acf924f3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extension_strength\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength.ContainsKey(extension)) {\n              \
    \  if (extension_strength[extension] > strength) {\n                    extension_strength[extension]\
    \ = strength;\n                }\n            } else {\n                extension_strength.Add(extension,\
    \ strength);\n            }\n        }\n        string strongest_extension = null;\n\
    \        foreach (KeyValuePair<string, int> entry in extension_strength) {\n \
    \           if (entry.Value == extension_strength.Values.Max()) {\n          \
    \      strongest_extension = entry.Key;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b44510f9bae41d3bd1869364c068f41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b44510f9bae41d3bd1869364c068f41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_cap\
    \ = extension.ToUpper().Count();\n            int extension_sm = extension.ToLower().Count();\n\
    \            int extension_strength_fraction = extension_cap - extension_sm;\n\
    \            if (extension_strength_fraction > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + extension_strength;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27ca97f3611847afb84a2ad4cff4bf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27ca97f3611847afb84a2ad4cff4bf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     string extension_strength = null;\n        foreach (string extension in\
    \ extensions) {\n            int extension_strength_int = 0;\n            int\
    \ extension_cap_int = 0;\n            int extension_sm_int = 0;\n            int\
    \ extension_length = extension.Length;\n            for (int i = 0; i < extension_length;\
    \ i++) {\n                char c = extension[i];\n                if (char.IsUpper(c))\
    \ {\n                    extension_cap_int++;\n                }\n           \
    \     else if (char.IsLower(c)) {\n                    extension_sm_int++;\n \
    \               }\n                else {\n                    extension_strength_int++;\n\
    \                }\n            }\n            double extension_strength_double\
    \ = extension_strength_int / extension_length;\n            double extension_cap_double\
    \ = extension_cap_int / extension_length;\n            double extension_sm_double\
    \ = extension_sm_int / extension_length;\n            if (extension_strength_double\
    \ > extension_cap_double && extension_strength_double > extension_sm_double) {\n\
    \                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_double.ToString();\n            }\n        }\n        if\
    \ (strongest_extension != null) {\n            return class_name + \".\" + strongest_extension;\n\
    \        }\n        else {\n            return class_name;\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b801eb5f5247268b22de013d7f8dfd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0b801eb5f5247268b22de013d7f8dfd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bc5bcaaab0543f0880ba5d90abe37b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bc5bcaaab0543f0880ba5d90abe37b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string e in extensions) {\n            int cap = e.ToUpper().Count();\n\
    \            int sm = e.ToLower().Count();\n            int strength = cap - sm;\n\
    \            if (strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                extension = e;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b21b95ddcbf46ce95a1a6310be9dd21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b21b95ddcbf46ce95a1a6310be9dd21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extension_strengths\
    \ = extensions.Select(x => x.ToUpperInvariant() - x.ToLowerInvariant()).ToList();\n\
    \        var max_strength = extension_strengths.Max();\n        var max_strength_index\
    \ = extension_strengths.IndexOf(max_strength);\n        return class_name + extensions[max_strength_index];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0bx8ix1j.cs(26,58): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659799646
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                if (strongest_extension == null)\
    \ {\n                    strongest_extension = class_name + extension;\n     \
    \           } else {\n                    int strength_of_extension = extension.Length\
    \ - strongest_extension.Length;\n                    if (strength_of_extension\
    \ > strength) {\n                        strongest_extension = class_name + extension;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08a5ecb7e9b2492eb76ea09b3181be19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08a5ecb7e9b2492eb76ea09b3181be19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + \".\" + extension;\n                } else {\n              \
    \      if (strength < strongest_extension.Length) {\n                        strongest_extension\
    \ = class_name + \".\" + extension;\n                    }\n                }\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x000c8] in <628254ddc2df4991bf7de0f17d645cac>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x000c8] in <628254ddc2df4991bf7de0f17d645cac>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension = class_name + extension;\n            }\n     \
    \   }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3ae4b954aa4f5996bf4bd075e149c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3ae4b954aa4f5996bf4bd075e149c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    int cap = extension.Count(x => char.IsUpper(x));\n        int sm = extension.Count(x\
    \ => char.IsLower(x));\n        int strength = cap - sm;\n        string result\
    \ = class_name + \".\" + extension;\n        if (extensions.Count() > 1) {\n \
    \           int i = 0;\n            while (i < extensions.Count() && extensions[i].Length\
    \ > 0) {\n                string temp = extensions[i];\n                i++;\n\
    \                if (temp.Length > 0) {\n                    int temp_cap = temp.Count(x\
    \ => char.IsUpper(x));\n                    int temp_sm= temp.Count(x => char.IsLower(x));\n\
    \                    int temp_strength = temp_cap - temp_sm;\n               \
    \     if (temp_strength > strength) {\n                        result = class_name\
    \ + \".\" + temp;\n                        strength = temp_strength;\n       \
    \             }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c48fc81994be40299e91a9b2fe0781ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension.Substring(0, extension.Length - 1);\n                break;\n \
    \           }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4d2152eddb542e8915df17025109495>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4d2152eddb542e8915df17025109495>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => Char.IsUpper(c));\n            int sm = extension.Count(c => Char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39c28145787c4c67a71ed91083f6743c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39c28145787c4c67a71ed91083f6743c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => Char.IsUpper(c));\n            int sm = extension.Count(c => Char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c44b901534d847fc8382847298035849>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c44b901534d847fc8382847298035849>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension.Substring(0, extension.Length - extension.LastIndexOf('.'));\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00089] in <6264f921c7674821aae0e62449ac0ac0>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <6264f921c7674821aae0e62449ac0ac0>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index and\
    \ length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrongestExtension (System.String\
    \ class_name, System.Collections.Generic.List`1[T] extensions) [0x00089] in <6264f921c7674821aae0e62449ac0ac0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00029] in <6264f921c7674821aae0e62449ac0ac0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799647
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                }\n                else if (strength < strongest_extension.ToUpper().Count())\
    \ {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                }\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0002e] in <78e960daa0144c03892ba0be0a318cf2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0002e] in <78e960daa0144c03892ba0be0a318cf2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += extension.Substring(0, extension.IndexOf(\"\
    .\"));\n            }\n        }\n        return strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot\
    \ be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00086] in <98dfd0663b0b459ca7d8d1fd22755fe6>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <98dfd0663b0b459ca7d8d1fd22755fe6>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00086] in <98dfd0663b0b459ca7d8d1fd22755fe6>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <98dfd0663b0b459ca7d8d1fd22755fe6>:0 \n"
  stdout: ''
  timestamp: 1659799647
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string extension_strength_fraction =\n            extension_strength.Substring(extension_strength.Length\
    \ - 1).ToLower();\n        int extension_strength_int = Convert.ToInt32(extension_strength_fraction);\n\
    \        double extension_strength_double = Convert.ToDouble(extension_strength_int);\n\
    \        double extension_strength_double_fraction =\n            extension_strength_double\
    \ - extension_strength_int;\n        double extension_strength_double_fraction_int\
    \ =\n            extension_strength_double_fraction * 100;\n        int extension_strength_double_fraction_int\
    \ = Convert.ToInt32(\n            extension_strength_double_fraction_double);\n\
    \        double extension_strength_double_fraction_double_fraction =\n       \
    \     extension_strength_double_fraction_int - extension_strength_double_fraction_int;\n\
    \        double extension_strength_double_fraction_double_fraction_int =\n   \
    \         extension_strength_double_fraction_double_fraction * 100;\n        int\
    \ extension_strength_double_fraction_double_fraction_int = Convert.ToInt32(\n\
    \            extension_strength_double_fraction_double_fraction_double);\n   \
    \     double extension_strength_double_fraction_double_fraction_double_fraction\
    \ =\n            extension_strength_double_fraction_double_fraction_int - extension_strength_double_fraction_double_fraction_int;\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_int\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction\
    \ * 100;\n        int extension_strength_double_fraction_double_fraction_double_fraction_int\
    \ = Convert.ToInt32(\n            extension_strength_double_fraction_double_fraction_double_fraction_double);\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_double_fraction\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction_int\
    \ - extension_strength_double_fraction_double_fraction_double_fraction_int;\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_int\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction_double_fraction\
    \ * 100;\n        int extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_int\
    \ = Convert.ToInt32(\n            extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_double_fraction);\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_double_fraction_int\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_double_fraction_int;\n\
    \        int extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpddmryckr.cs(57,96): error CS1002: ; expected

    '
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <461b770b66e142d3b4a5404707828375>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <461b770b66e142d3b4a5404707828375>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.Count(c\
    \ => Char.IsUpper(c));\n            int sm = extension2.Count(c => Char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           extension = extension2;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92e5b3b6119247bead9d097cdee4d61a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92e5b3b6119247bead9d097cdee4d61a>:0 \n"
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = \"\";\n        int cap = 0;\n        int sm = 0;\n        foreach (string\
    \ extension in extensions) {\n            cap = cap + extension.Count(x => char.IsUpper(x));\n\
    \            sm = sm + extension.Count(x => char.IsLower(x));\n        }\n   \
    \     double strength = cap - sm;\n        if (extensions != null && extensions.Count\
    \ > 0) {\n            strongest_extension = class_name + extensions.OrderByDescending(x\
    \ => x.Count(x => char.IsUpper(x))).FirstOrDefault();\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0b038050c3546fdb177c32d7795eef7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0b038050c3546fdb177c32d7795eef7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string extension_strength_without_cap = extension_strength.ToLower();\n\
    \        int extension_cap = extension_strength_without_cap.Length;\n        int\
    \ extension_sm = 0;\n        for (int i = 0; i < extension_strength_without_cap.Length;\
    \ i++) {\n            if (extension_strength_without_cap[i].ToUpper() == extension_strength_without_cap[i])\
    \ {\n                extension_sm++;\n            }\n        }\n        int extension_strength_without_cap_without_sm\
    \ = extension_cap - extension_sm;\n        if (extension_strength_without_cap_without_sm\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap = extension_strength_without_cap_without_sm\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap = extension_strength_without_cap_without_sm_without_cap\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap - extension_cap;\n\
    \        if (extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi18rc9h3.cs(59,194): error CS1002: ; expected

    '
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Write your code here\n        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2df8bfbd174d417693cb6566565830fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2df8bfbd174d417693cb6566565830fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.Length;\n\
    \            int sm = extension.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                extension = extension2;\n  \
    \          }\n        }\n        return class_name + extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b2a396ed1b849c0853f0553fbed4b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b2a396ed1b849c0853f0553fbed4b00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest = class_name + \"\
    .\" + extension;\n                break;\n            }\n        }\n        return\
    \ strongest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd99cf49f8d54f70a00fb7e06f383e71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd99cf49f8d54f70a00fb7e06f383e71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strongest_extension == null || strength > strongest_extension.Length)\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31ac448a2e3149ff8c9fb146f5cc9b52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31ac448a2e3149ff8c9fb146f5cc9b52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        int cap_counter = 0;\n        int sm_counter = 0;\n        foreach (string\
    \ extension in extensions) {\n            int cap_counter = cap_counter + extension.Count(x\
    \ => char.IsUpper(x));\n            int sm_counter = sm_counter + extension.Count(x\
    \ => char.IsLower(x));\n        }\n        double strength = cap_counter - sm_counter;\n\
    \        if (strength > 0) {\n            strongest_extension = class_name + extensions[0];\n\
    \        }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponha_920.cs(29,17): error CS0136: A local or parameter named ''cap_counter''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmponha_920.cs(30,17): error CS0136: A local or parameter named ''sm_counter''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmponha_920.cs(29,31): error CS0165: Use of unassigned local variable ''cap_counter''

    /tmp/tmponha_920.cs(30,30): error CS0165: Use of unassigned local variable ''sm_counter''

    '
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extension_strength\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = 0;\n            foreach (char c in extension)\
    \ {\n                if (char.IsUpper(c)) {\n                    strength++;\n\
    \                }\n                if (char.IsLower(c)) {\n                 \
    \   strength++;\n                }\n            }\n            extension_strength.Add(extension,\
    \ strength);\n        }\n        string strongest_extension = null;\n        foreach\
    \ (KeyValuePair<string, int> extension in extension_strength) {\n            if\
    \ (extension_strength.Values.Max() < extension.Value) {\n                strongest_extension\
    \ = extension.Key;\n            }\n        }\n        return class_name + \".\"\
    \ + strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80e0f4c15bb04278a0b1528db108fd9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80e0f4c15bb04278a0b1528db108fd9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e18a3379714236b8a60c063517b430>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e18a3379714236b8a60c063517b430>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + extension_strength;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eee0e045340441f2935b4c6dc631ba31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eee0e045340441f2935b4c6dc631ba31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extension_strength\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength.ContainsKey(extension)) {\n              \
    \  if (extension_strength[extension] > strength) {\n                    extension_strength[extension]\
    \ = strength;\n                }\n            } else {\n                extension_strength.Add(extension,\
    \ strength);\n            }\n        }\n        string strongest_extension = null;\n\
    \        foreach (KeyValuePair<string, int> extension_strength_pair in extension_strength)\
    \ {\n            if (extension_strength_pair.Value == extension_strength.Values.Max())\
    \ {\n                strongest_extension = extension_strength_pair.Key;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <203f30ed14fa453d94e3a8034d0bfd67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <203f30ed14fa453d94e3a8034d0bfd67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_class = class_name + extension;\n        Dictionary<string,\
    \ int> extension_strength = new Dictionary<string, int>();\n        foreach (string\
    \ extension_name in extensions) {\n            int extension_strength_counter\
    \ = 0;\n            foreach (char c in extension_name) {\n                if (char.IsUpper(c))\
    \ {\n                    extension_strength_counter++;\n                }\n  \
    \          }\n            extension_strength.Add(extension_name, extension_strength_counter);\n\
    \        }\n        int max_strength = -1;\n        foreach (KeyValuePair<string,\
    \ int> extension_strength_counter in extension_strength) {\n            if (extension_strength_counter.Value\
    \ > max_strength) {\n                max_strength = extension_strength_counter.Value;\n\
    \                extension = extension_strength_counter.Key;\n            }\n\
    \        }\n        return extension_class + extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36d6f200a054422ab68b973f58b3f5be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36d6f200a054422ab68b973f58b3f5be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension.Count(x => x == char.ToLower(x));\n          \
    \  double strength = cap - sm;\n            if (strength > strongest_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1f6633329c4f15bdadf557d2b4de31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1f6633329c4f15bdadf557d2b4de31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     string extension_strength = null;\n        foreach (string extension in\
    \ extensions) {\n            int extension_strength_numerator = 0;\n         \
    \   int extension_strength_denominator = 0;\n            int extension_strength_numerator_lower\
    \ = 0;\n            int extension_strength_denominator_lower = 0;\n          \
    \  int extension_strength_numerator_upper = 0;\n            int extension_strength_denominator_upper\
    \ = 0;\n            int extension_strength_numerator_other = 0;\n            int\
    \ extension_strength_denominator_other = 0;\n            int extension_strength_numerator_other2\
    \ = 0;\n            int extension_strength_denominator_other2 = 0;\n         \
    \   int extension_strength_numerator_other3 = 0;\n            int extension_strength_denominator_other3\
    \ = 0;\n            int extension_strength_numerator_other4 = 0;\n           \
    \ int extension_strength_denominator_other4 = 0;\n            int extension_strength_numerator_other5\
    \ = 0;\n            int extension_strength_denominator_other5 = 0;\n         \
    \   int extension_strength_numerator_other6 = 0;\n            int extension_strength_denominator_other6\
    \ = 0;\n            int extension_strength_numerator_other7 = 0;\n           \
    \ int extension_strength_denominator_other7 = 0;\n            int extension_strength_numerator_other8\
    \ = 0;\n            int extension_strength_denominator_other8 = 0;\n         \
    \   int extension_strength_numerator_other9 = 0;\n            int extension_strength_denominator_other9\
    \ = 0;\n            int extension_strength_numerator_other10 = 0;\n          \
    \  int extension_strength_denominator_other10 = 0;\n            int extension_strength_numerator_other11\
    \ = 0;\n            int extension_strength_denominator_other11 = 0;\n        \
    \    int extension_strength_numerator_other12 = 0;\n            int extension_strength_denominator_other12\
    \ = 0;\n            int extension_strength_numerator_other13 = 0;\n          \
    \  int extension_strength_denominator_other13 = 0;\n            int extension_strength_numerator_other14\
    \ = 0;\n            int extension_strength_denominator_other14 = 0;\n        \
    \    int extension_strength_numerator_other15 = 0;\n            int extension_strength_denominator_other15\
    \ = 0;\n            int extension_strength_numerator_other16 = 0;\n          \
    \  int extension_strength_denominator_other16 = 0;\n            int extension_strength_numerator_other17\
    \ = 0;\n            int extension_strength_denominator_other17 = 0;\n        \
    \    int extension_strength_numerator_other18 = 0;\n            int extension_strength_denominator_other18\
    \ = 0;\n            int extension_\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7skt2me_.cs(70,27): error CS1002: ; expected

    /tmp/tmp7skt2me_.cs(72,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp7skt2me_.cs(84,2): error CS1513: } expected

    '
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string strongest = class_name + extension;\n        foreach (string extension2\
    \ in extensions) {\n            int cap = extension2.Length;\n            int\
    \ sm = extension.Length;\n            int strength = cap - sm;\n            if\
    \ (strength > 0) {\n                strongest = class_name + extension2;\n   \
    \             break;\n            }\n        }\n        return strongest;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e5c38d710314c46b1fea2a57f21434e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e5c38d710314c46b1fea2a57f21434e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int extension_strength\
    \ = GetExtensionStrength(extension);\n            if (extension_strength > 0)\
    \ {\n                if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + extension;\n                } else {\n                    int\
    \ strength = GetExtensionStrength(strongest_extension);\n                    if\
    \ (strength > extension_strength) {\n                        strongest_extension\
    \ = class_name + extension;\n                    }\n                }\n      \
    \      }\n        }\n        return strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8g1hmea_.cs(27,38): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    /tmp/tmp8g1hmea_.cs(32,36): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => c == 'A');\n            int sm = extension.Count(c => c == 'a');\n      \
    \      int strength = cap - sm;\n            if (strength > 0) {\n           \
    \     if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + extension;\n                } else if (strength < strongest_extension.Length)\
    \ {\n                    strongest_extension = class_name + extension;\n     \
    \           }\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0002e] in <ff60d782a5aa4b0da1d67aa947657b66>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0002e] in <ff60d782a5aa4b0da1d67aa947657b66>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extensions_count\
    \ = extensions.Count();\n        var extensions_count_upper = extensions.Count(x\
    \ => x.ToUpper().Equals(x));\n        var extensions_count_lower = extensions.Count(x\
    \ => x.ToLower().Equals(x));\n        var extensions_count_diff = extensions_count_upper\
    \ - extensions_count_lower;\n        var extensions_count_diff_frac = extensions_count_diff\
    \ / extensions_count;\n        var extensions_count_diff_frac = Math.Abs(extensions_count_diff_frac);\n\
    \        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ 2);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ 0);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ 1);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -1);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -2);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -3);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -4);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -5);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -6);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -7);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -8);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -9);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -10);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -11);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -12);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -13);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -14);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -15);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -16);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -17);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -18);\n        var extensions_count_diff_frac = Math.Round(extensions_count_diff_frac,\
    \ -19);\n        var \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvkd742c_.cs(54,12): error CS1002: ; expected

    '
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47cc4c4a229c45809ba6d7d1d606faa2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47cc4c4a229c45809ba6d7d1d606faa2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => Char.IsUpper(c));\n            int sm = extension.Count(c => Char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc3561b9dcdd4172b2cc777af0c8106f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc3561b9dcdd4172b2cc777af0c8106f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extension_strengths\
    \ = extensions.Select(x => x.ToUpperInvariant().Count() - x.ToLowerInvariant().Count()).ToList();\n\
    \        var strongest_extension = extension_strengths.OrderByDescending(x =>\
    \ x).First();\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0633378986a6473fa81390cd124a1584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0633378986a6473fa81390cd124a1584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extension_strength\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = extension.Count(c => char.IsUpper(c)) -\n    \
    \                       extension.Count(c => char.IsLower(c));\n            extension_strength.Add(extension,\
    \ strength);\n        }\n        string strongest_extension = null;\n        int\
    \ max_strength = -1;\n        foreach (KeyValuePair<string, int> extension in\
    \ extension_strength) {\n            if (extension.Value > max_strength) {\n \
    \               max_strength = extension.Value;\n                strongest_extension\
    \ = extension.Key;\n            }\n        }\n        return class_name + \".\"\
    \ + strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Write your code here\n        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <358f4f7b962740aebc68995bacce02f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <358f4f7b962740aebc68995bacce02f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370e4187a46c4f43a2e280140a728eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     double strength = -1;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => c == 'A');\n            int sm\
    \ = extension.Count(c => c == 'a');\n            double strength_fraction = cap\
    \ - sm;\n            if (strength_fraction > strength) {\n                strongest_extension\
    \ = extension;\n                strength = strength_fraction;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64bd2d940a0d4e038bf73a8b2451485e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64bd2d940a0d4e038bf73a8b2451485e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e18a3379714236b8a60c063517b430>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e18a3379714236b8a60c063517b430>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions.OrderByDescending(x\
    \ => x.Length).First();\n        string result = class_name + extension;\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a92ec8f10d0b4171b6c4a4220d66c150>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a92ec8f10d0b4171b6c4a4220d66c150>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            double strength = cap - sm;\n            if\
    \ (strength > 0) {\n                strongest_extension += extension;\n      \
    \      }\n        }\n        return strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6abee83512664a04b5043493c7a47225>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6abee83512664a04b5043493c7a47225>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + extension_strength;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eee0e045340441f2935b4c6dc631ba31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eee0e045340441f2935b4c6dc631ba31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     double strength = 0;\n        foreach (string extension in extensions) {\n\
    \            int cap = extension.Count(c => char.IsUpper(c));\n            int\
    \ sm = extension.Count(c => char.IsLower(c));\n            double frac = cap -\
    \ sm;\n            if (frac > strength) {\n                strongest_extension\
    \ = extension;\n                strength = frac;\n            }\n        }\n \
    \       return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c5b16f472984a0caf3f8cecabc57472>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c5b16f472984a0caf3f8cecabc57472>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string strongest = extension;\n        foreach (string extension2 in extensions)\
    \ {\n            int extension2_cap = extension2.ToUpper().Count();\n        \
    \    int extension2_sm = extension2.ToLower().Count();\n            int extension2_strength\
    \ = extension2_cap - extension2_sm;\n            if (extension2_strength > strongest.ToUpper().Count()\
    \ - strongest.ToLower().Count()) {\n                strongest = extension2;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <911af0c7e7d5468fa16030ccf536c1e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <911af0c7e7d5468fa16030ccf536c1e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        int strongest_extension_strength = -1;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = ExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5luau30.cs(28,38): error CS0103: The name ''ExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += extension.Substring(0, extension.IndexOf('.'));\n\
    \                strongest_extension += \".\" + extension.Substring(extension.IndexOf('.'));\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot\
    \ be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00083] in <e160fa81e75c4a1ea8965677fb0099d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <e160fa81e75c4a1ea8965677fb0099d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00083] in <e160fa81e75c4a1ea8965677fb0099d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <e160fa81e75c4a1ea8965677fb0099d2>:0 \n"
  stdout: ''
  timestamp: 1659799649
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest\
    \ = string.Empty;\n        double strongest_strength = double.MaxValue;\n    \
    \    foreach (string extension in extensions) {\n            double extension_strength\
    \ = GetExtensionStrength(class_name, extension);\n            if (extension_strength\
    \ > strongest_strength) {\n                strongest = extension;\n          \
    \      strongest_strength = extension_strength;\n            }\n        }\n  \
    \      return strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpps02okej.cs(29,41): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da9812ff6f94ff6976d5b3ad15045e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        int sm = 0;\n        int cap = 0;\n        foreach (string\
    \ extension in extensions) {\n            cap = extension.Count(x => char.IsUpper(x));\n\
    \            sm = extension.Count(x => char.IsLower(x));\n            strongest_extension\
    \ = strongest_extension.Replace(extension, cap - sm);\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_v6iev0s.cs(32,63): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp_v6iev0s.cs(32,74): error CS1503: Argument 2: cannot convert from ''int''
    to ''char''

    '
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string strongest_extension = class_name + extension;\n        foreach\
    \ (string extension_name in extensions) {\n            string extension_strength_new\
    \ = extension_name.Substring(extension_name.Length - 1);\n            if (extension_strength_new\
    \ == extension_strength) {\n                strongest_extension = class_name +\
    \ extension_name;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee61b446a4b649a0aeed861b243235a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee61b446a4b649a0aeed861b243235a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <317516f9762544a799f046bb050b3f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <317516f9762544a799f046bb050b3f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     double strength = -1;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            double frac =\
    \ cap - sm;\n            if (frac > strength) {\n                strongest_extension\
    \ = extension;\n                strength = frac;\n            }\n        }\n \
    \       if (strongest_extension != null) {\n            return class_name + \"\
    .\" + strongest_extension;\n        } else {\n            return class_name;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int SM = extension2.Count(c\
    \ => c == 'A');\n            int CAP = extension2.Count(c => c == 'a');\n    \
    \        int strength = CAP - SM;\n            if (strength > 0) {\n         \
    \       extension = extension2;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c0a83d7734149a6bdfca1312835dbc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c0a83d7734149a6bdfca1312835dbc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c16bdde6a72346f4b74d29c550b619b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c16bdde6a72346f4b74d29c550b619b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => c == 'A');\n            int sm = extension.Count(c => c == 'a');\n      \
    \      int strength = cap - sm;\n            if (strength > 0) {\n           \
    \     strongest_extension += \".\" + extension;\n            }\n        }\n  \
    \      return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9e1613046c946088f2300e3a2fa2635>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9e1613046c946088f2300e3a2fa2635>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = (double)cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b0251aa7df4c53bef199d51e24d195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b0251aa7df4c53bef199d51e24d195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     double strongest_extension_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = ExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprcl2rqpi.cs(28,38): error CS0103: The name ''ExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += class_name + \".\" + extension;\n         \
    \   }\n        }\n        return strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0cbc791178c4bb08e85cfc0d3d0ee3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0cbc791178c4bb08e85cfc0d3d0ee3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            double strength = cap - sm;\n            if (strength > 0) {\n  \
    \              strongest_extension += \".\" + extension;\n            }\n    \
    \    }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf5e2c226097418193bb8789c3e62c8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf5e2c226097418193bb8789c3e62c8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e0c270644004a23b5c73ae818920d20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e0c270644004a23b5c73ae818920d20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        string strongest_extension_strength = class_name;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > strongest_extension_strength.ToUpper().Count())\
    \ {\n                strongest_extension_strength = extension;\n             \
    \   strongest_extension = class_name;\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a8e64cbc09342dc93527694456f6381>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a8e64cbc09342dc93527694456f6381>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        string extension_strength = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength.ToUpper().Count() - extension_strength.ToLower().Count();\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk70y8jr7.cs(33,38): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659799649
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     double strongest_extension_strength = double.MaxValue;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwqbwyb8y.cs(28,38): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = (double)cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6ee236f382d4b8999d287b274f8a288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6ee236f382d4b8999d287b274f8a288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_counter\
    \ = 0;\n            foreach (char c in extension) {\n                if (Char.IsUpper(c))\
    \ {\n                    extension_strength_counter++;\n                }\n  \
    \          }\n            int extension_strength_counter_lower = 0;\n        \
    \    foreach (char c in extension) {\n                if (Char.IsLower(c)) {\n\
    \                    extension_strength_counter_lower++;\n                }\n\
    \            }\n            double extension_strength_fraction = extension_strength_counter\
    \ / (double)extension_strength_counter_lower;\n            if (extension_strength_fraction\
    \ > extension_strength) {\n                extension_strength = extension_strength_fraction;\n\
    \                extension_strength_counter = extension_strength_counter_lower;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[0];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjq01kwp5.cs(40,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''double'' and ''string''

    /tmp/tmpjq01kwp5.cs(41,38): error CS0029: Cannot implicitly convert type ''double''
    to ''string''

    '
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.ToUpper().Count();\n\
    \            int sm = extension2.ToLower().Count();\n            int strength\
    \ = cap - sm;\n            if (strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84481e68828243ae80ada9b5086bae84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84481e68828243ae80ada9b5086bae84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    int strength = -1;\n        foreach (string extension_name in extensions)\
    \ {\n            int extension_strength = extension_name.ToUpper().Count() - extension_name.ToLower().Count();\n\
    \            if (extension_strength > strength) {\n                extension =\
    \ extension_name;\n                strength = extension_strength;\n          \
    \  }\n        }\n        return class_name + \".\" + extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a01434bc9ea04e1b975fb5d081a003ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a01434bc9ea04e1b975fb5d081a003ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extensions_count\
    \ = extensions.Count();\n        var extensions_count_cap = extensions.Count(x\
    \ => x.ToUpper().Count() > 0);\n        var extensions_count_sm = extensions.Count(x\
    \ => x.ToLower().Count() > 0);\n        var extensions_count_cap_sm = extensions_count_cap\
    \ - extensions_count_sm;\n        var extensions_count_cap_sm_sum = extensions_count_cap_sm.Sum();\n\
    \        var extensions_count_cap_sm_avg = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_min = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extension\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4o3ogbw2.cs(50,52): error CS1002: ; expected

    '
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = \"\";\n        double strongest_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Length;\n            int sm\
    \ = class_name.Length;\n            double strength = cap - sm;\n            if\
    \ (strength > strongest_strength) {\n                strongest_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0a2e05ea2b64132af26d332845fa6f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0a2e05ea2b64132af26d332845fa6f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions)\n        {\n     \
    \       int cap = extension.Count(x => char.IsUpper(x));\n            int sm =\
    \ extension.Count(x => char.IsLower(x));\n            int strength = cap - sm;\n\
    \            if (strength > 0)\n            {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78d7418483ad47b882a0e8787a4702da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78d7418483ad47b882a0e8787a4702da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string strongest = class_name + extension;\n        foreach (string extension2\
    \ in extensions) {\n            int cap = extension2.Length;\n            int\
    \ sm = extension.Length;\n            int strength = cap - sm;\n            if\
    \ (strength > 0) {\n                strongest = extension2;\n            }\n \
    \       }\n        return strongest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <534c3302d18949528a8f3c6190d3262d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <534c3302d18949528a8f3c6190d3262d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extension_strengths\
    \ = extensions.Select(x => x.ToUpperInvariant().Count() - x.ToLowerInvariant().Count()).ToList();\n\
    \        var max_strength = extension_strengths.Max();\n        var max_extension\
    \ = extension_strengths.Where(x => x == max_strength).FirstOrDefault();\n    \
    \    return class_name + \".\" + max_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <257b5df1b5cd4143844834b63379df7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <257b5df1b5cd4143844834b63379df7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    int cap = class_name.ToUpper().Count();\n        int sm = class_name.ToLower().Count();\n\
    \        int strength = cap - sm;\n        string strongest = class_name + extension;\n\
    \        foreach (string e in extensions) {\n            int ecap = e.ToUpper().Count();\n\
    \            int esm = e.ToLower().Count();\n            int estrength = ecap\
    \ - esm;\n            if (estrength > strength) {\n                extension =\
    \ e;\n                strength = estrength;\n            }\n        }\n      \
    \  return strongest;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d078af02dd204853a2bf2e64f647fd69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d078af02dd204853a2bf2e64f647fd69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => c == 'A');\n            int sm = extension.Count(c => c == 'a');\n      \
    \      int strength = cap - sm;\n            if (strength > 0) {\n           \
    \     strongest_extension += \".\" + extension;\n            }\n        }\n  \
    \      return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9e1613046c946088f2300e3a2fa2635>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9e1613046c946088f2300e3a2fa2635>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += extension.Substring(0, extension.Length\
    \ - 1);\n            }\n        }\n        return strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70695edca89648579830cc69103bc3ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70695edca89648579830cc69103bc3ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extensions_map =\
    \ new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = extension.Count(c => char.IsUpper(c));\n     \
    \       extensions_map.Add(extension, strength);\n        }\n        int max_strength\
    \ = extensions_map.Values.Max();\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions_map.Keys) {\n            if (extensions_map[extension]\
    \ == max_strength) {\n                strongest_extension += \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ad84560f6664553b246a04a8fddbba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ad84560f6664553b246a04a8fddbba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                }\n                else {\n                    if (strength <\
    \ strongest_extension.ToUpper().Count()) {\n                        strongest_extension\
    \ = class_name + \".\" + extension;\n                    }\n                }\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0002e] in <ba21eafaf84c4511888f854a83cb1366>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0002e] in <ba21eafaf84c4511888f854a83cb1366>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension2.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           extension = extension2;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0acdc0d3b2fc412aa8c562ac898fa298>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0acdc0d3b2fc412aa8c562ac898fa298>:0 \n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.ToUpper().Count();\n\
    \            int sm = extension2.ToLower().Count();\n            int strength\
    \ = cap - sm;\n            if (strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84481e68828243ae80ada9b5086bae84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84481e68828243ae80ada9b5086bae84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest\
    \ = null;\n        double strongest_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension.Count(x => x == char.ToLower());\n           \
    \ double strength = cap - sm;\n            if (strongest_strength < strength)\
    \ {\n                strongest = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdp94hc2u.cs(30,53): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659799649
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strongest_extension == null || strength > strongest_extension.Length)\
    \ {\n                strongest_extension = class_name + extension;\n         \
    \   }\n        }\n        return strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1013c7af5638443b9c22f78f1e2bc995>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1013c7af5638443b9c22f78f1e2bc995>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d543e9512e9476493f85e0b564da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d543e9512e9476493f85e0b564da05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <602d6d7ac7724e5d9426a6fd5342ca6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <602d6d7ac7724e5d9426a6fd5342ca6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88f65c39590a4865b1130d67f36d7537>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88f65c39590a4865b1130d67f36d7537>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2568b4b5b3f4488bef9a9dea05cf8dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    int cap = class_name.Length;\n        int sm = extension.Length;\n      \
    \  double strength = cap - sm;\n        double maxStrength = -1;\n        foreach\
    \ (string e in extensions) {\n            int ce = e.Length;\n            double\
    \ cs = cap - ce;\n            double es = es + cs;\n            if (es > maxStrength)\
    \ {\n                maxStrength = es;\n                extension = e;\n     \
    \       }\n        }\n        return class_name + \".\" + extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj9ilhf75.cs(33,25): error CS0165: Use of unassigned local variable ''es''

    '
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0e9bdae731f4aeb9fb33fe437442433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0e9bdae731f4aeb9fb33fe437442433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extension_strength\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = 0;\n            int cap = 0;\n            int\
    \ sm = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                }\n                else if (char.IsLower(c))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ int diff = cap - sm;\n            if (diff > 0) {\n                strength\
    \ = diff;\n            }\n            extension_strength.Add(extension, strength);\n\
    \        }\n        int max_strength = extension_strength.Values.Max();\n    \
    \    string strongest_extension = class_name;\n        foreach (string extension\
    \ in extension_strength.Keys) {\n            if (extension_strength[extension]\
    \ == max_strength) {\n                strongest_extension += \".\" + extension;\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2aa6b4477b134389934b9db7bf957f32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2aa6b4477b134389934b9db7bf957f32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extension_strength\
    \ = extensions.Select(x => x.ToUpper().Count() - x.ToLower().Count()).ToList();\n\
    \        var strongest_extension = extension_strength.OrderByDescending(x => x).FirstOrDefault();\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d518be246f8f4aedaaf34e8b673405aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d518be246f8f4aedaaf34e8b673405aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dd27cb1f9f54fa684281acf924f3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dd27cb1f9f54fa684281acf924f3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        int strongest_extension_strength = -1;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cd9d73b129d49eab92ead880d846767>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cd9d73b129d49eab92ead880d846767>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_capital\
    \ = extension.Count(x => char.IsUpper(x));\n            int extension_smaller\
    \ = extension.Count(x => char.IsLower(x));\n            int extension_strength_fraction\
    \ = extension_capital - extension_smaller;\n            if (extension_strength_fraction\
    \ > extension_strength.Count(x => x == extension_strength_fraction)) {\n     \
    \           extension_strength = extension;\n            }\n        }\n      \
    \  return class_name + extension_strength;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46ea2a39a55b4588941014410cd3a379>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46ea2a39a55b4588941014410cd3a379>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => c == 'A');\n            int sm = extension.Count(c => c == 'a');\n      \
    \      double strength = cap - sm;\n            if (strength > 0) {\n        \
    \        strongest_extension += extension;\n            }\n        }\n       \
    \ return strongest_extension;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10f485bfea5e41c7aea35704dbbad214>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10f485bfea5e41c7aea35704dbbad214>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f79739815a04e13aa103c10d493cf47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f79739815a04e13aa103c10d493cf47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799645
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dd27cb1f9f54fa684281acf924f3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dd27cb1f9f54fa684281acf924f3846>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799647
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        Dictionary<string, int> extension_strength_dictionary = new Dictionary<string,\
    \ int>();\n        foreach (string extension_name in extensions) {\n         \
    \   int extension_strength_int = extension_name.Substring(extension_name.Length\
    \ - 1);\n            extension_strength_dictionary.Add(extension_name, extension_strength_int);\n\
    \        }\n        int extension_strength_int = extension_strength_dictionary[extension];\n\
    \        int extension_strength_int2 = extension_strength_int;\n        int extension_strength_int3\
    \ = extension_strength_int;\n        int extension_strength_int4 = extension_strength_int;\n\
    \        int extension_strength_int5 = extension_strength_int;\n        int extension_strength_int6\
    \ = extension_strength_int;\n        int extension_strength_int7 = extension_strength_int;\n\
    \        int extension_strength_int8 = extension_strength_int;\n        int extension_strength_int9\
    \ = extension_strength_int;\n        int extension_strength_int10 = extension_strength_int;\n\
    \        int extension_strength_int11 = extension_strength_int;\n        int extension_strength_int12\
    \ = extension_strength_int;\n        int extension_strength_int13 = extension_strength_int;\n\
    \        int extension_strength_int14 = extension_strength_int;\n        int extension_strength_int15\
    \ = extension_strength_int;\n        int extension_strength_int16 = extension_strength_int;\n\
    \        int extension_strength_int17 = extension_strength_int;\n        int extension_strength_int18\
    \ = extension_strength_int;\n        int extension_strength_int19 = extension_strength_int;\n\
    \        int extension_strength_int20 = extension_strength_int;\n        int extension_strength_int21\
    \ = extension_strength_int;\n        int extension_strength_int22 = extension_strength_int;\n\
    \        int extension_strength_int23 = extension_strength_int;\n        int extension_strength_int24\
    \ = extension_strength_int;\n        int extension_strength_int25 = extension_strength_int;\n\
    \        int extension_strength_int26 = extension_strength_int;\n        int extension_strength_int27\
    \ = extension_strength_int;\n        int extension_strength_int28 = extension_strength_int;\n\
    \        int extension_strength_int29 = extension_strength_int;\n        int extension\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctzy4c_4.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.ToUpper().Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension2.ToLower().Count(x\
    \ => x == char.ToLower(x));\n            int strength = cap - sm;\n          \
    \  if (strength > 0) {\n                extension = extension2;\n            }\n\
    \        }\n        return class_name + \".\" + extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08382a371a0b4c2aacf575538b6df6d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08382a371a0b4c2aacf575538b6df6d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.Length;\n\
    \            int sm = extension.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                extension = extension2;\n  \
    \          }\n        }\n        return class_name + \".\" + extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba8c4788cf7040af8985dad31c08c83e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba8c4788cf7040af8985dad31c08c83e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += extension;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd77da10d61940bc9b16ba27691a301b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd77da10d61940bc9b16ba27691a301b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => c == 'A');\n            int sm = extension.Count(c\
    \ => c == 'a');\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8534545a58594d8da9ffa192daa749a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8534545a58594d8da9ffa192daa749a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        int sm = 0;\n        int cap = 0;\n        foreach (string\
    \ extension in extensions) {\n            cap = extension.Count(x => char.IsUpper(x));\n\
    \            sm = extension.Count(x => char.IsLower(x));\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension.Substring(0, extension.IndexOf(\".\"));\n                strongest_extension\
    \ += \".\" + extension.Substring(extension.IndexOf(\".\") + 1);\n            \
    \    break;\n            }\n        }\n        return strongest_extension;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot\
    \ be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x0008d] in <5de9d936751a49c89765c3a6d2902c1e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <5de9d936751a49c89765c3a6d2902c1e>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x0008d] in <5de9d936751a49c89765c3a6d2902c1e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <5de9d936751a49c89765c3a6d2902c1e>:0 \n"
  stdout: ''
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extension_strengths\
    \ = extensions.Select(x => x.ToUpperInvariant().Count() - x.ToLowerInvariant().Count()).ToList();\n\
    \        var max_strength = extension_strengths.Max();\n        var max_index\
    \ = extension_strengths.FindIndex(x => x == max_strength);\n        return class_name\
    \ + \".\" + extensions[max_index];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <579382779dc240d09839c0ed369f0e81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <579382779dc240d09839c0ed369f0e81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = string.Empty;\n\
    \        string extension_class_name = string.Empty;\n        string extension_class_name_with_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int extension_capital_letters = extension.Count(x => char.IsUpper(x));\n\
    \            int extension_small_letters = extension.Count(x => char.IsLower(x));\n\
    \            int extension_strength = extension_capital_letters - extension_small_letters;\n\
    \            if (extension_strength > extension_strength) {\n                extension_strength\
    \ = extension_strength;\n                extension_class_name = class_name;\n\
    \                extension_class_name_with_extension = extension;\n          \
    \  }\n        }\n        return extension_class_name + \".\" + extension_class_name_with_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzg_1_kfi.cs(31,17): error CS0136: A local or parameter named ''extension_strength''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzg_1_kfi.cs(32,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpzg_1_kfi.cs(33,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest = class_name + \"\
    .\" + extension;\n                break;\n            }\n        }\n        return\
    \ strongest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd99cf49f8d54f70a00fb7e06f383e71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd99cf49f8d54f70a00fb7e06f383e71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ea8573af23b435fac1350284c54cc8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7e18f1feb22438595848b48c190011d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7e18f1feb22438595848b48c190011d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        var extensions_count\
    \ = extensions.Count();\n        var extensions_count_upper = extensions.Count(x\
    \ => char.IsUpper(x));\n        var extensions_count_lower = extensions.Count(x\
    \ => char.IsLower(x));\n        var extensions_count_cap = extensions.Count(x\
    \ => char.IsUpper(x));\n        var extensions_count_sm = extensions.Count(x =>\
    \ char.IsLower(x));\n        var extensions_count_cap_sm = extensions.Count(x\
    \ => char.IsUpper(x));\n        var extensions_count_cap_sm_lower = extensions.Count(x\
    \ => char.IsLower(x));\n        var extensions_count_cap_sm_upper = extensions.Count(x\
    \ => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm = extensions.Count(x\
    \ => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower = extensions.Count(x\
    \ => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper_sm_lower_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_s\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9mr2tptx.cs(47,35): error CS1002: ; expected

    '
  timestamp: 1659799650
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = string.Empty;\n\
    \        string extension_strength_2 = string.Empty;\n        string extension_strength_3\
    \ = string.Empty;\n        string extension_strength_4 = string.Empty;\n     \
    \   string extension_strength_5 = string.Empty;\n        string extension_strength_6\
    \ = string.Empty;\n        string extension_strength_7 = string.Empty;\n     \
    \   string extension_strength_8 = string.Empty;\n        string extension_strength_9\
    \ = string.Empty;\n        string extension_strength_10 = string.Empty;\n    \
    \    string extension_strength_11 = string.Empty;\n        string extension_strength_12\
    \ = string.Empty;\n        string extension_strength_13 = string.Empty;\n    \
    \    string extension_strength_14 = string.Empty;\n        string extension_strength_15\
    \ = string.Empty;\n        string extension_strength_16 = string.Empty;\n    \
    \    string extension_strength_17 = string.Empty;\n        string extension_strength_18\
    \ = string.Empty;\n        string extension_strength_19 = string.Empty;\n    \
    \    string extension_strength_20 = string.Empty;\n        string extension_strength_21\
    \ = string.Empty;\n        string extension_strength_22 = string.Empty;\n    \
    \    string extension_strength_23 = string.Empty;\n        string extension_strength_24\
    \ = string.Empty;\n        string extension_strength_25 = string.Empty;\n    \
    \    string extension_strength_26 = string.Empty;\n        string extension_strength_27\
    \ = string.Empty;\n        string extension_strength_28 = string.Empty;\n    \
    \    string extension_strength_29 = string.Empty;\n        string extension_strength_30\
    \ = string.Empty;\n        string extension_strength_31 = string.Empty;\n    \
    \    string extension_strength_32 = string.Empty;\n        string extension_strength_33\
    \ = string.Empty;\n        string extension_strength_34 = string.Empty;\n    \
    \    string extension_strength_35 = string.Empty;\n        string extension_strength_36\
    \ = string.Empty;\n        string extension_strength_37 = string.Empty;\n    \
    \    string extension_strength_38 = string.Empty;\n        string extension_strength_39\
    \ = string.Empty;\n        string extension_strength_40 = string.Empty;\n    \
    \    string extension_strength_41 = string.Empty;\n        string extension_strength_42\
    \ = string.Empty;\n        string extension_strength_43 = string.Empty;\n    \
    \    string extension_strength_44 = string.Empty;\n        string \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxslt5bl.cs(69,15): error CS1001: Identifier expected

    /tmp/tmpoxslt5bl.cs(69,15): error CS1002: ; expected

    '
  timestamp: 1659799650
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += extension.Substring(0, extension.IndexOf(\"\
    .\"));\n            }\n        }\n        return strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot\
    \ be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00086] in <38e48f8520154aa6af23fcbf771edbb6>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <38e48f8520154aa6af23fcbf771edbb6>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.StrongestExtension (System.String class_name, System.Collections.Generic.List`1[T]\
    \ extensions) [0x00086] in <38e48f8520154aa6af23fcbf771edbb6>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00029] in <38e48f8520154aa6af23fcbf771edbb6>:0 \n"
  stdout: ''
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.Count(c\
    \ => c == 'A');\n            int sm = extension2.Count(c => c == 'a');\n     \
    \       int strength = cap - sm;\n            if (strength > 0) {\n          \
    \      extension = extension2;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <365d1aaa81874abd9991490590cc203e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <365d1aaa81874abd9991490590cc203e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + \".\" + extension;\n                } else {\n              \
    \      if (strength < strongest_extension.Length) {\n                        strongest_extension\
    \ = class_name + \".\" + extension;\n                    }\n                }\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x000c8] in <d60cda7ee7354be995342438c9771e04>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x000c8] in <d60cda7ee7354be995342438c9771e04>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        Dictionary<string, int> extension_strength\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int extension_strength_counter = 0;\n            foreach (char\
    \ c in extension) {\n                if (char.IsUpper(c)) {\n                \
    \    extension_strength_counter++;\n                }\n            }\n       \
    \     extension_strength.Add(extension, extension_strength_counter);\n       \
    \ }\n        string strongest_extension = class_name;\n        int strongest_strength\
    \ = extension_strength[strongest_extension];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_counter = 0;\n        \
    \    foreach (char c in extension) {\n                if (char.IsUpper(c)) {\n\
    \                    extension_strength_counter++;\n                }\n      \
    \      }\n            if (extension_strength_counter > strongest_strength) {\n\
    \                strongest_extension = extension;\n                strongest_strength\
    \ = extension_strength[strongest_extension];\n            }\n        }\n     \
    \   return strongest_extension;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key 'Watashi' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrongestExtension\
    \ (System.String class_name, System.Collections.Generic.List`1[T] extensions)\
    \ [0x00083] in <2386130303b54ab59df080876907226b>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00029] in <2386130303b54ab59df080876907226b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.Collections.Generic.KeyNotFoundException: The given key 'Watashi'\
    \ was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrongestExtension\
    \ (System.String class_name, System.Collections.Generic.List`1[T] extensions)\
    \ [0x00083] in <2386130303b54ab59df080876907226b>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00029] in <2386130303b54ab59df080876907226b>:0 \n"
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1, 1);\n\
    \        string extension_strength_str = extension_strength.ToString();\n    \
    \    string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper_sm = extension_strength_str_upper.Substring(extension_strength_str_upper.Length\
    \ - 1, 1);\n        string extension_strength_str_lower_sm = extension_strength_str_lower.Substring(extension_strength_str_lower.Length\
    \ - 1, 1);\n        int extension_strength_int;\n        if (extension_strength_str_upper_sm\
    \ == extension_strength_str_lower_sm) {\n            extension_strength_int =\
    \ 0;\n        } else {\n            extension_strength_int = Convert.ToInt32(extension_strength_str_upper_sm)\
    \ - Convert.ToInt32(extension_strength_str_lower_sm);\n        }\n        double\
    \ extension_strength_double = Convert.ToDouble(extension_strength_int);\n    \
    \    double extension_strength_double_rounded = Math.Round(extension_strength_double,\
    \ 2);\n        double extension_strength_double_rounded_rounded = Math.Round(extension_strength_double_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded = Math.Round(extension_strength_double_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded, 1);\n      \
    \  double extension_strength_double_rounded_rounded_rounded_rounded_rounded =\
    \ Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_roun\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqkaj_hco.cs(46,221): error CS1026: ) expected

    /tmp/tmpqkaj_hco.cs(46,221): error CS1002: ; expected

    '
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \        }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c334ee7286c34f7eb79c8d74dd3c043b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c334ee7286c34f7eb79c8d74dd3c043b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension += class_name\
    \ + \".\" + extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab6fa6f9734f4a7e928d54765e541644>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab6fa6f9734f4a7e928d54765e541644>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        string extension_strength = string.Empty;\n       \
    \ foreach (string extension in extensions) {\n            int CAP = extension.ToUpper().Count();\n\
    \            int SM = extension.ToLower().Count();\n            double strength\
    \ = (CAP - SM) / CAP;\n            if (strength > extension_strength) {\n    \
    \            extension_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1o6wxkb.cs(32,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''double'' and ''string''

    /tmp/tmpr1o6wxkb.cs(33,38): error CS0029: Cannot implicitly convert type ''double''
    to ''string''

    '
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension_strength = extensions[0];\n\
    \        for (int i = 1; i < extensions.Count; i++) {\n            int extension_strength_int\
    \ = extensions[i].ToUpper().Count() - extensions[i].ToLower().Count();\n     \
    \       if (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extensions[i];\n            }\n    \
    \    }\n        return class_name + \".\" + extension_strength;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1df0871a3d14719a597a5e11cd5e0fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1df0871a3d14719a597a5e11cd5e0fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string extension2 in extensions) {\n            int cap = extension2.Length;\n\
    \            int sm = extension.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                extension = extension2;\n  \
    \          }\n        }\n        return class_name + \".\" + extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba8c4788cf7040af8985dad31c08c83e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba8c4788cf7040af8985dad31c08c83e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     double strength = -1;\n        foreach (string extension in extensions)\
    \ {\n            double extension_strength = GetExtensionStrength(class_name,\
    \ extension);\n            if (extension_strength > strength) {\n            \
    \    strongest_extension = extension;\n                strength = extension_strength;\n\
    \            }\n        }\n        return strongest_extension;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpocp6t1w_.cs(28,41): error CS0103: The name ''GetExtensionStrength'' does
    not exist in the current context

    '
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a4843369b8544299253bde8038abf6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a4843369b8544299253bde8038abf6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = \"\";\n        double strongest_extension_strength = 0;\n        foreach (string\
    \ extension in extensions) {\n            int extension_length = extension.Length;\n\
    \            int class_length = class_name.Length;\n            int strength =\
    \ extension_length - class_length;\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74c6d505dd18467eb1e10b48246dd508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74c6d505dd18467eb1e10b48246dd508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     string extension_strength = null;\n        foreach (string extension in\
    \ extensions) {\n            int extension_strength_numerator = extension.Count(x\
    \ => char.IsUpper(x));\n            int extension_strength_denominator = extension.Count(x\
    \ => char.IsLower(x));\n            double extension_strength_fraction = (double)extension_strength_numerator\
    \ / (double)extension_strength_denominator;\n            if (extension_strength_fraction\
    \ > 0) {\n                if (extension_strength_fraction > strongest_extension.Length)\
    \ {\n                    strongest_extension = extension;\n                  \
    \  extension_strength = extension_strength_fraction;\n                }\n    \
    \        }\n        }\n        if (strongest_extension != null) {\n          \
    \  return class_name + \".\" + strongest_extension;\n        }\n        return\
    \ class_name;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqzqunuf.cs(34,42): error CS0029: Cannot implicitly convert type ''double''
    to ''string''

    '
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     double strongest_strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            double strength\
    \ = (double)cap - (double)sm;\n            if (strength > strongest_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <38a5f94aba4441dbbc7288e5bce00fa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <38a5f94aba4441dbbc7288e5bce00fa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799652
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <602d6d7ac7724e5d9426a6fd5342ca6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <602d6d7ac7724e5d9426a6fd5342ca6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799650
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = \"\";\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70198756b1cb4f47b80cc7b5bdcb4038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799648
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string extension_strength_number = int.Parse(extension_strength);\n \
    \       int extension_strength_number_cap = extension_strength_number / CAP;\n\
    \        int extension_strength_number_sm = extension_strength_number % CAP;\n\
    \        int extension_strength_number_cap_sm = 0;\n        if (extension_strength_number_cap\
    \ > extension_strength_number_sm) {\n            extension_strength_number_cap_sm\
    \ = extension_strength_number_cap;\n        }\n        string extension_strength_number_cap_sm_string\
    \ = extension_strength_number_cap_sm.ToString();\n        string extension_strength_number_cap_sm_string_cap\
    \ = extension_strength_number_cap_sm_string.Substring(0, 1);\n        string extension_strength_number_cap_sm_string_sm\
    \ = \"0\" + extension_strength_number_cap_sm_string.Substring(1);\n        string\
    \ extension_strength_number_cap_sm_string_cap_sm = extension_strength_number_cap_sm_string_cap\
    \ + extension_strength_number_cap_sm_string_sm;\n        string extension_strength_number_cap_sm_string_cap_sm_cap\
    \ = extension_strength_number_cap_sm_string_cap_sm.Substring(0, 1);\n        string\
    \ extension_strength_number_cap_sm_string_cap_sm_sm = \"0\" + extension_strength_number_cap_sm_string_cap_sm.Substring(1);\n\
    \        string extension_strength_number_cap_sm_string_cap_sm_cap_sm = extension_strength_number_cap_sm_string_cap_sm_cap\
    \ + extension_strength_number_cap_sm_string_cap_sm_sm;\n        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm\
    \ = extension_strength_number_cap_sm_string_cap_sm_cap_sm + extension_strength_number_cap_sm_string_cap_sm_sm;\n\
    \        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm = extension_strength_number_cap_sm_string_cap_sm_cap_sm\
    \ + extension_strength_number_cap_sm_string_cap_sm_sm;\n        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm\
    \ = extension_strength_number_cap_sm_string_cap_sm_cap_sm + extension_strength_number_cap_sm_string_cap_sm_sm;\n\
    \        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm = extension_\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgdag2xqo.cs(44,85): error CS1002: ; expected

    '
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string extension = extensions[0];\n    \
    \    foreach (string e in extensions) {\n            int cap = e.ToUpper().Count()\
    \ - e.ToLower().Count();\n            int sm = e.ToLower().Count() - e.ToUpper().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           extension = e;\n                break;\n            }\n        }\n\
    \        return class_name + \".\" + extension;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb0c84c2adf0415da6c378763ab6a752>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb0c84c2adf0415da6c378763ab6a752>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        // Your code goes here\n        string strongest_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(x => char.IsUpper(x));\n            int sm =\
    \ extension.Count(x => char.IsLower(x));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension += class_name\
    \ + \".\" + extension;\n            }\n        }\n        return strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <448ad9f03e244b7a827a1f8bfdf84592>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <448ad9f03e244b7a827a1f8bfdf84592>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799651
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
    \ List<string> extensions) {\n        string strongest_extension = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + extension;\n\
    \                } else {\n                    if (strength > strongest_extension.ToUpper().Count())\
    \ {\n                        strongest_extension = class_name + extension;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0002e] in <7069a30ad07d491da8da581bf8230ada>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0002e] in <7069a30ad07d491da8da581bf8230ada>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799651
