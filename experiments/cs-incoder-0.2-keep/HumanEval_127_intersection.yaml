name: HumanEval_127_intersection
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given two intervals,\n    // where each interval is\
  \ a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The\
  \ given intervals are closed which means that the interval (start, end)\n    //\
  \ includes both start and end.\n    // For each given interval, it is assumed that\
  \ its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n    // intersection((-1,\
  \ 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1), (-5, 5)) ==> \"YES\"\n \
  \   public static string Intersection(Tuple<long, long> interval1, Tuple<long, long>\
  \ interval2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L,\
  \ 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L,\
  \ -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L,\
  \ 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"
completions: ["        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ num = 1;\n        long p = 2;\n        while (p < length) {\n            long\
    \ q = p * p;\n            if (q > length) q = length;\n            long r = q\
    \ - p;\n            if (r > length) r = length;\n            long s = q + p;\n\
    \            if (s < length) s = length;\n            if (r + s >= length) {\n\
    \                num += 1;\n                p += 1;\n            } else {\n  \
    \              num -= 1;\n                p += 2;\n            }\n        }\n\
    \        if (num == 0) return \"NO\";\n        if (num == 1) return \"YES\";\n\
    \        return \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ prime = GetPrime(length);\n        if (prime == length) return \"YES\";\n  \
    \      return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        long\
    \ sum = 0;\n        long prime = 1;\n        while (prime <= length) {\n     \
    \       sum += prime;\n            prime++;\n        }\n        if (sum == length)\
    \ return \"YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        if (length == 2) return \"\
    YES\";\n        long start2 = Math.Min(interval1.Item2, interval2.Item2);\n  \
    \      long end2 = Math.Max(interval1.Item1, interval2.Item1);\n        long length2\
    \ = end2 - start2;\n        if (length2 == 0) return \"NO\";\n        if (length2\
    \ == 1) return \"YES\";\n        if (length2 == 2) return \"YES\";\n        long\
    \ start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long end3 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length3 = end3 - start3;\n        if (length3\
    \ == 0) return \"NO\";\n        if (length3 == 1) return \"YES\";\n        if\
    \ (length3 == 2) return \"YES\";\n        long start4 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end4 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        if (length4 == 1) return \"YES\";\n        if (length4 == 2) return\
    \ \"YES\";\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length5 = end5 - start5;\n        if (length5 == 0) return \"NO\";\n       \
    \ if (length5 == 1) return \"YES\";\n        if (length5 == 2) return \"YES\"\
    ;\n        long start6 = Math.Min(interval1.Item2, interval2.Item2);\n       \
    \ long end6 = Math.Max(interval1.Item1, interval2.Item1);\n        long length6\
    \ = end6 - start6;\n        if (length6 == 0) return \"NO\";\n        if (length6\
    \ == 1) return \"YES\";\n        if (length6 == 2) return \"YES\";\n        long\
    \ start7 = Math.Min(interval1.Item1, interval2.Item1);\n        long end7 = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length7 = end7 - start7;\n        if (length7\
    \ == 0) return \"NO\";\n        if (length7 == 1) return \"YES\";\n        if\
    \ (length7 == 2) return \"YES\";\n        long start8 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end8 = Math.Max(interval1.Item", "        long\
    \ start = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long start2 = Math.Min(interval2.Item1, interval1.Item1);\n\
    \        long end2 = Math.Max(interval2.Item2, interval1.Item2);\n        long\
    \ length2 = end2 - start2;\n        if (length2 == 0) return \"NO\";\n       \
    \ long start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long end3\
    \ = Math.Max(interval1.Item2, interval2.Item2);\n        long length3 = end3 -\
    \ start3;\n        if (length3 == 0) return \"NO\";\n        long start4 = Math.Min(interval2.Item1,\
    \ interval1.Item1);\n        long end4 = Math.Max(interval2.Item2, interval1.Item2);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0) return \"NO\"\
    ;\n        long start5 = Math.Min(interval1.Item1, interval2.Item1);\n       \
    \ long end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long length5\
    \ = end5 - start5;\n        if (length5 == 0) return \"NO\";\n        long start6\
    \ = Math.Min(interval2.Item1, interval1.Item1);\n        long end6 = Math.Max(interval2.Item2,\
    \ interval1.Item2);\n        long length6 = end6 - start6;\n        if (length6\
    \ == 0) return \"NO\";\n        long start7 = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length7 = end7 - start7;\n        if (length7 == 0) return \"NO\";\n       \
    \ long start8 = Math.Min(interval2.Item1, interval1.Item1);\n        long end8\
    \ = Math.Max(interval2.Item2, interval1.Item2);\n        long length8 = end8 -\
    \ start8;\n        if (length8 == 0) return \"NO\";\n        long start9 = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end9 = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length9 = end9 - start9;\n        if (length9 == 0) return \"NO\"\
    ;\n        long start10 = Math.Min(interval2.Item1, interval1.Item1);\n      \
    \  long end10 = Math.Max(interval2.Item2, interval1.Item2);\n        long length10\
    \ = end10 - start10;\n        if (length10 == 0) return \"NO\";\n        long\
    \ start11", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        bool\
    \ isPrime = true;\n        long prime = 2;\n        while (isPrime && prime <=\
    \ length) {\n            if (length % prime == 0) {\n                isPrime =\
    \ false;\n            }\n            else {\n                prime++;\n      \
    \      }\n        }\n        if (isPrime) return \"YES\";\n        else return\
    \ \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        if (length == 1)\n            return \"YES\";\n        long mid = start\
    \ + (end - start) / 2;\n        bool isPrime = true;\n        long prime = 2;\n\
    \        while (isPrime) {\n            isPrime = false;\n            long test\
    \ = 2;\n            while (test < length) {\n                if (mid % test ==\
    \ 0) {\n                    isPrime = true;\n                    break;\n    \
    \            }\n                test += 2;\n            }\n            if (isPrime)\n\
    \                prime++;\n        }\n        if (prime == length)\n         \
    \   return \"YES\";\n        return \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        if (length == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long mid = start + (end - start) / 2;\n        long count = 0;\n    \
    \    long prime = 1;\n        while (prime < max) {\n            long test = (long)Math.Sqrt(prime);\n\
    \            if (test > length) test = length;\n            long test2 = mid -\
    \ test;\n            if (test2 > 0) count++;\n            prime++;\n        }\n\
    \        if (count == 0) return \"NO\";\n        if (count == 1) return \"YES\"\
    ;\n        long max2 = (long)Math.Sqrt(count);\n        long mid2 = start + (end\
    \ - start) / 2;\n        long count2 = 0;\n        long prime2 = 1;\n        while\
    \ (prime2 < max2) {\n            long test2 = (long)Math.Sqrt(prime2);\n     \
    \       if (test2 > length) test2 = length;\n            long test3 = mid2 - test2;\n\
    \            if (test3 > 0) count2++;\n            prime2++;\n        }\n    \
    \    if (count2 == 0) return \"NO\";\n        if (count2 == 1) return \"YES\"\
    ;\n        long max3 = (long)Math.Sqrt(count2);\n        long mid3 = start + (end\
    \ - start) / 2;\n        long count3 = 0;\n        long prime3 = 1;\n        while\
    \ (prime3 < max3) {\n            long test3 = (long)Math.Sqrt(prime3);\n     \
    \       if (test3 > length) test3 = length;\n            long test4 = mid3 - test3;\n\
    \            if (test4 > 0) count3++;\n            prime3++;\n        }\n    \
    \    if (count3 == 0) return \"NO\";\n        if (count3 == 1) return \"YES\"\
    ;\n        long max4 = (long)Math.Sqrt(count3);\n        long mid4 = start + (end\
    \ - start) / 2;\n        long count4 = 0;\n        long prime4 = 1;\n        while\
    \ (prime4 < max4) {\n            long test4 = (long)Math.Sqrt(prime4);\n     \
    \       if (test4 > length) test4 = length;\n            long test5 = mid4 - test4;\n\
    \            if (test5 > 0) count4++;\n            prime4++;\n        }\n    \
    \    if (count4 == 0) return \"NO\";\n        if (count4 == 1) return \"YES\"\
    ;\n        long max5 = (long)Math.Sqrt(count4);\n        long mid5 = start + (end\
    \ - start) / 2;\n        long count5 = 0;\n        long prime5 = 1;\n        while\
    \ (prime5 < max", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        bool\
    \ isPrime = true;\n        long prime = 2;\n        while (isPrime) {\n      \
    \      if (length == prime) isPrime = false;\n            else {\n           \
    \     long nextPrime = prime + 1;\n                while (nextPrime <= length)\
    \ {\n                    if (length == nextPrime) break;\n                   \
    \ if (length % nextPrime == 0) break;\n                    nextPrime++;\n    \
    \            }\n                if (nextPrime > length) isPrime = false;\n   \
    \             else {\n                    prime = nextPrime;\n               \
    \     length = (length / prime) * prime;\n                }\n            }\n \
    \       }\n        if (isPrime) return \"YES\";\n        return \"NO\";", "  \
    \      long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0)\n            return \"NO\";\n        if (length\
    \ == 1)\n            return \"YES\";\n        long prime = GetPrime(length);\n\
    \        if (prime == 0)\n            return \"NO\";\n        if (prime == 1)\n\
    \            return \"YES\";\n        long inter = start - prime;\n        if\
    \ (inter > 0)\n            return \"NO\";\n        if (inter < 0)\n          \
    \  return \"YES\";\n        return \"YES\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        bool isPrime = true;\n        long prime = length / 2;\n  \
    \      while (prime > 1) {\n            if (length % prime == 0) {\n         \
    \       isPrime = false;\n                break;\n            }\n            prime--;\n\
    \        }\n        if (isPrime)\n            return \"YES\";\n        return\
    \ \"NO\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0) return \"NO\";\n        if (length\
    \ == 1) return \"YES\";\n        long max = (long)Math.Sqrt(length);\n       \
    \ long max2 = max / 2;\n        long max3 = max * max;\n        long max4 = max3\
    \ * max;\n        long max5 = max4 * max;\n        long max6 = max5 * max;\n \
    \       long max7 = max6 * max;\n        long max8 = max7 * max;\n        long\
    \ max9 = max8 * max;\n        long max10 = max9 * max;\n        long max11 = max10\
    \ * max;\n        long max12 = max11 * max;\n        long max13 = max12 * max;\n\
    \        long max14 = max13 * max;\n        long max15 = max14 * max;\n      \
    \  long max16 = max15 * max;\n        long max17 = max16 * max;\n        long\
    \ max18 = max17 * max;\n        long max19 = max18 * max;\n        long max20\
    \ = max19 * max;\n        long max21 = max20 * max;\n        long max22 = max21\
    \ * max;\n        long max23 = max22 * max;\n        long max24 = max23 * max;\n\
    \        long max25 = max24 * max;\n        long max26 = max25 * max;\n      \
    \  long max27 = max26 * max;\n        long max28 = max27 * max;\n        long\
    \ max29 = max28 * max;\n        long max30 = max29 * max;\n        long max31\
    \ = max30 * max;\n        long max32 = max31 * max;\n        long max33 = max32\
    \ * max;\n        long max34 = max33 * max;\n        long max35 = max34 * max;\n\
    \        long max36 = max35 * max;\n        long max37 = max36 * max;\n      \
    \  long max38 = max37 * max;\n        long max39 = max38 * max;\n        long\
    \ max40 = max39 * max;\n        long max41 = max40 * max;\n        long max42\
    \ = max41 * max;\n        long max43 = max42 * max;\n        long max44", "  \
    \      long start = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Max(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start;\n        if (length == 0)\n            return \"NO\";\n        if (length\
    \ == 1)\n            return \"YES\";\n        long start2 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end2 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long length2 = end2 - start2;\n        if (length2 == 0)\n          \
    \  return \"NO\";\n        if (length2 == 1)\n            return \"YES\";\n  \
    \      long start3 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end3 = Math.Max(interval1.Item2, interval2.Item2);\n        long length3 = end3\
    \ - start3;\n        if (length3 == 0)\n            return \"NO\";\n        if\
    \ (length3 == 1)\n            return \"YES\";\n        long start4 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end4 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long length4 = end4 - start4;\n        if (length4 == 0)\n          \
    \  return \"NO\";\n        if (length4 == 1)\n            return \"YES\";\n  \
    \      long start5 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end5 = Math.Max(interval1.Item2, interval2.Item2);\n        long length5 = end5\
    \ - start5;\n        if (length5 == 0)\n            return \"NO\";\n        if\
    \ (length5 == 1)\n            return \"YES\";\n        long start6 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end6 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long length6 = end6 - start6;\n        if (length6 == 0)\n          \
    \  return \"NO\";\n        if (length6 == 1)\n            return \"YES\";\n  \
    \      long start7 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end7 = Math.Max(interval1.Item2, interval2.Item2);\n        long length7 = end7\
    \ - start7;\n        if (length7 == 0)\n            return \"NO\";\n        if\
    \ (length7 == 1)\n            return \"YES\";\n        long start8 = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long end8 = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long length8 = end8 - start8;\n        if (length8 == 0)\n          \
    \  return \"NO\";\n        if (length8 == 1)\n            return \"YES\";\n  \
    \      long start9 = Math.Min(interval1.Item1, interval2.Item1);\n        long\
    \ end9 = Math.Max(interval1.Item2, interval2.Item2);", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        long num = 1;\n        while (start <= end) {\n           \
    \ long mid = (start + end) / 2;\n            if (mid * mid > length)\n       \
    \         end = mid - 1;\n            else if (mid * mid < length)\n         \
    \       start = mid + 1;\n            else\n                num++;\n        }\n\
    \        if (num == 2)\n            return \"YES\";\n        else\n          \
    \  return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        long sum = 0;\n        for (int i = start; i <= end; i++)\n         \
    \   sum += i;\n        if (sum % length != 0)\n            return \"NO\";\n  \
    \      return \"YES\";", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Max(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start;\n        if (length == 0)\n            return \"NO\";\n\
    \        if (length == 1)\n            return \"YES\";\n        long max = (long)Math.Sqrt(length);\n\
    \        long max2 = max * max;\n        long max3 = max2 * max;\n        long\
    \ max4 = max3 * max;\n        long max5 = max4 * max;\n        long max6 = max5\
    \ * max;\n        long max7 = max6 * max;\n        long max8 = max7 * max;\n \
    \       long max9 = max8 * max;\n        long max10 = max9 * max;\n        long\
    \ max11 = max10 * max;\n        long max12 = max11 * max;\n        long max13\
    \ = max12 * max;\n        long max14 = max13 * max;\n        long max15 = max14\
    \ * max;\n        long max16 = max15 * max;\n        long max17 = max16 * max;\n\
    \        long max18 = max17 * max;\n        long max19 = max18 * max;\n      \
    \  long max20 = max19 * max;\n        long max21 = max20 * max;\n        long\
    \ max22 = max21 * max;\n        long max23 = max22 * max;\n        long max24\
    \ = max23 * max;\n        long max25 = max24 * max;\n        long max26 = max25\
    \ * max;\n        long max27 = max26 * max;\n        long max28 = max27 * max;\n\
    \        long max29 = max28 * max;\n        long max30 = max29 * max;\n      \
    \  long max31 = max30 * max;\n        long max32 = max31 * max;\n        long\
    \ max33 = max32 * max;\n        long max34 = max33 * max;\n        long max35\
    \ = max34 * max;\n        long max36 = max35 * max;\n        long max37 = max36\
    \ * max;\n        long max38 = max37 * max;\n        long max39 = max38 * max;\n\
    \        long max40 = max39 * max;\n        long max41 = max40 * max;\n      \
    \  long max42 = max41 * max;\n        long max43 = max42 * max;\n        long\
    \ max", "        long start = Math.Min(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Max(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start;\n        if (length == 0) return \"NO\";\n        long prime\
    \ = length / 2;\n        bool isPrime = true;\n        for (long i = 2; i <= prime;\
    \ i++) {\n            if (length % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) return\
    \ \"YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0) return \"NO\";\n\
    \        long prime = GetPrime(length);\n        if (prime == length) return \"\
    YES\";\n        if (prime == 0) return \"NO\";\n        long inter = start - prime;\n\
    \        if (inter == 0) return \"NO\";\n        if (inter == length) return \"\
    YES\";\n        return \"NO\";", "        long start = Math.Min(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Max(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        if (length == 1)\n            return \"YES\";\n        long\
    \ max = (long)Math.Sqrt(length);\n        long min = (long)Math.Sqrt(length +\
    \ 1);\n        long mid = start + (end - start) / 2;\n        long count = 0;\n\
    \        long count2 = 0;\n        long count3 = 0;\n        long count4 = 0;\n\
    \        long count5 = 0;\n        long count6 = 0;\n        long count7 = 0;\n\
    \        long count8 = 0;\n        long count9 = 0;\n        long count10 = 0;\n\
    \        long count11 = 0;\n        long count12 = 0;\n        long count13 =\
    \ 0;\n        long count14 = 0;\n        long count15 = 0;\n        long count16\
    \ = 0;\n        long count17 = 0;\n        long count18 = 0;\n        long count19\
    \ = 0;\n        long count20 = 0;\n        long count21 = 0;\n        long count22\
    \ = 0;\n        long count23 = 0;\n        long count24 = 0;\n        long count25\
    \ = 0;\n        long count26 = 0;\n        long count27 = 0;\n        long count28\
    \ = 0;\n        long count29 = 0;\n        long count30 = 0;\n        long count31\
    \ = 0;\n        long count32 = 0;\n        long count33 = 0;\n        long count34\
    \ = 0;\n        long count35 = 0;\n        long count36 = 0;\n        long count37\
    \ = 0;\n        long count38 = 0;\n        long count39 = 0;\n        long count40\
    \ = 0;\n        long count41 = 0;\n        long count42 = 0;\n        long count43\
    \ = 0;\n        long count44 = 0;\n        long count45 = 0;\n        long count46\
    \ = 0;\n        long count47 = 0;\n        long count48 = 0;\n        long count49\
    \ = 0;\n        long count50 = 0;\n        long count51 = 0;\n        long count52\
    \ = 0;\n        long count53 = 0;\n        long count54 = 0;\n        long count55\
    \ = 0;\n        long count56 = 0;\n        long count57 = 0;\n        long count58\
    \ = 0;\n        long count59 = 0;\n        long count60 = 0;\n        long count61\
    \ = 0;\n        long count62 = 0;\n        long count63 = 0;\n        long count64\
    \ = 0;\n        long count65 = 0;\n        long count66 = 0;\n        long count67\
    \ = 0;\n        long count68 = 0;\n        long count69 = 0;\n        long count70\
    \ = 0;\n        long count71 = 0;\n        long count72", "        long start\
    \ = Math.Min(interval1.Item1, interval2.Item1);\n        long end = Math.Max(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start;\n        if (length ==\
    \ 0) return \"NO\";\n        long inter = length / 2;\n        if (length == inter)\
    \ return \"YES\";\n        if (length < inter) return \"NO\";\n        long count\
    \ = 0;\n        long sum = 0;\n        long temp;\n        while (inter > 0) {\n\
    \            temp = inter;\n            inter = inter / 2;\n            sum +=\
    \ temp;\n            count++;\n        }\n        if (sum == length) return \"\
    YES\";\n        return \"NO\";"]
stop_tokens:
- "\n    }\n"
