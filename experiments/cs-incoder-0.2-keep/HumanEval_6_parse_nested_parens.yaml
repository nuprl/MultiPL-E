name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
  \ paren_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        long level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            else if (c == ')') {\n                in_paren = false;\n\
    \                level--;\n            }\n            else if (in_paren) {\n \
    \               sb.Append(c);\n            }\n        }\n        string s = sb.ToString();\n\
    \        char[] chars = s.ToCharArray();\n        foreach (char c in chars) {\n\
    \            if (c == '(') {\n                level++;\n            }\n      \
    \      else if (c == ')') {\n                level--;\n            }\n       \
    \ }\n        levels.Add(level);\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n    \
    \            }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0) {\n                    levels.Add(stack.Count);\n         \
    \       }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long level_of_nesting = stack.Count - 1;\n                if (level_of_nesting\
    \ > level) {\n                    levels.Add(level_of_nesting);\n            \
    \    }\n                stack.Pop();\n            }\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (stack.Count > 0\
    \ && stack.Peek() == level) {\n                    levels.Add(level);\n      \
    \          }\n            } else if (c == ' ') {\n                if (stack.Count\
    \ > 0) {\n                    levels.Add(level);\n                }\n        \
    \    }\n        }\n        if (stack.Count > 0) {\n            levels.Add(level);\n\
    \        }\n        return levels;", "        List<long> result = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long popped = stack.Pop();\n\
    \                if (popped == level) {\n                    result.Add(level);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> levels_stack =\
    \ new Stack<long>();\n        long level = 0;\n        bool in_paren = false;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             in_paren = true;\n                levels_stack.Push(level);\n  \
    \              level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (levels_stack.Count > level) {\n                    levels.Add(levels_stack.Pop());\n\
    \                }\n                in_paren = false;\n            } else if (in_paren)\
    \ {\n                level++;\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                stack.Add(0);\n\
    \            } else if (c == ')') {\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    levels.Add(level);\n\
    \                    level--;\n                }\n            }\n            sb.Append(c);\n\
    \        }\n        long level = stack.Pop();\n        while (level > 0) {\n \
    \           levels.Add(level);\n            level--;\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        bool in_group = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.Add(level);\n            } else if (c == ')') {\n              \
    \  in_paren = false;\n                level = (long)stack.Pop();\n           \
    \ } else if (c == '(') {\n                in_group = true;\n            } else\
    \ if (c == ')') {\n                in_group = false;\n            } else if (in_group)\
    \ {\n                level++;\n            } else if (in_paren) {\n          \
    \      level--;\n            }\n            levels.Add(level);\n        }\n  \
    \      return levels;", "        List<long> levels = new List<long>();\n     \
    \   Stack<long> stack = new Stack<long>();\n        long level = 0;\n        bool\
    \ is_open = false;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                is_open = true;\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                is_open = false;\n      \
    \          level = (stack.Count > 0) ? stack.Pop() : -1;\n            } else if\
    \ (is_open) {\n                level++;\n            }\n            levels.Add(level);\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long new_level = stack.Pop();\n\
    \                if (new_level > level) {\n                    levels[levels.Count\
    \ - 1] = new_level;\n                }\n            }\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.RemoveAt(stack.Count - 1);\n\
    \            } else if (c == ' ') {\n                level = 0;\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0)\n  \
    \                  levels.Add(stack.Count);\n                else\n          \
    \          stack.Pop();\n            }\n        }\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            } else if (c == ' ') {\n                if (level\
    \ > 0) {\n                    levels.Add(stack.Count);\n                }\n  \
    \          }\n        }\n        return levels;", "        List<long> levels =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n                level++;\n      \
    \      } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0)\n                    levels.Add(stack.Count);\n                else\n\
    \                    stack.Pop();\n            } else if (c == ' ') {\n      \
    \          if (level > 0)\n                    stack.Pop();\n            }\n \
    \       }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0) {\n\
    \                    levels.Add(stack.Count);\n                }\n           \
    \ } else if (c == ' ') {\n                if (level == 0) {\n                \
    \    levels.Add(stack.Count);\n                }\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        long level = 0;\n       \
    \ long paren_level = 0;\n        bool in_paren = false;\n        bool in_bracket\
    \ = false;\n        bool in_brace = false;\n        bool in_curly_bracket = false;\n\
    \        bool in_curly_brace = false;\n        bool in_square_bracket = false;\n\
    \        bool in_square_brace = false;\n        bool in_curly_square_bracket =\
    \ false;\n        bool in_curly_square_brace = false;\n        bool in_square_curly_bracket\
    \ = false;\n        bool in_square_curly_brace = false;\n        bool in_curly_square_curly_bracket\
    \ = false;\n        bool in_curly_square_curly_brace = false;\n        bool in_square_curly_square_bracket\
    \ = false;\n        bool in_square_curly_square_brace = false;\n        bool in_curly_square_curly_square_bracket\
    \ = false;\n        bool in_curly_square_curly_square_brace = false;\n       \
    \ bool in_square_curly_square_curly_bracket = false;\n        bool in_square_curly_square_curly_brace\
    \ = false;\n        bool in_curly_square_curly_square_curly_bracket = false;\n\
    \        bool in_curly_square_curly_square_curly_brace = false;\n        bool\
    \ in_square_curly_square_curly_square_bracket = false;\n        bool in_square_curly_square_curly_square_brace\
    \ = false;\n        bool in_curly_square_curly_square_curly_square_bracket = false;\n\
    \        bool in_curly_square_curly_square_curly_square_brace = false;\n     \
    \   bool in_square_curly_square_curly_square_curly_bracket = false;\n        bool\
    \ in_square_curly_square_curly_square_curly_brace = false;\n        bool in_curly_square_curly_square_curly_square_curly_bracket\
    \ = false;\n        bool in_square_curly_square_curly_square_curly_brace = false;\n\
    \        bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n\
    \        bool in_square_curly_square_curly_square_curly_brace = false;\n     \
    \   bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n  \
    \      bool in_square_curly_square_curly_square_curly_brace = false;\n       \
    \ bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n    \
    \    bool in_square_curly_square", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long level_of_nesting\
    \ = stack.Count > 0 ? stack.Pop() : -1;\n                if (level_of_nesting\
    \ > level) {\n                    levels.Add(level);\n                }\n    \
    \        }\n        }\n        return levels;", "        List<long> levels = new\
    \ List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n                level++;\n      \
    \      } else if (c == ')') {\n                level--;\n                long\
    \ new_level = stack.Pop();\n                if (new_level > level) {\n       \
    \             levels.Add(new_level);\n                }\n            }\n     \
    \   }\n        return levels;", "        List<long> result = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n            } else if (c == ')') {\n           \
    \     long popped = stack.Pop();\n                if (popped > level) {\n    \
    \                result.Add(level);\n                }\n                level\
    \ = popped;\n            } else {\n                level++;\n            }\n \
    \       }\n        return result;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool has_opening_paren = false;\n        bool has_closing_paren = false;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(level);\n                level++;\n                has_opening_paren\
    \ = true;\n            }\n            else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -1)\n                   \
    \ throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -2)\n                    throw new Exception(\"Unbalanced parenthesis\");\n\
    \                else if (level == -3)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -4)\n          \
    \          throw new Exception(\"Unbalanced parenthesis\");\n                else\
    \ if (level == -5)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -6)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -7)\n          \
    \          throw new Exception(\"Unbalanced parenthesis\");\n                else\
    \ if (level == -8)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -9)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -10)\n         \
    \           throw new Exception(\"Unbalanced parenthesis\");\n               \
    \ else if (level == -11)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -12)\n                  \
    \  throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -13)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -14)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -15)\n         \
    \           throw new Exception(\"Unbalanced parenthesis\");\n               \
    \ else if (level == -16)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -17)\n                  \
    \  throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -18)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -19)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -20)\n         \
    \           throw new Exception(\"Unbalanced parenthesis\");\n               \
    \ else if (level == -21)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -22)\n                  \
    \  throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -23)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -24)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        long level_count = 0;\n        bool in_paren\
    \ = false;\n        bool in_paren_group = false;\n        bool in_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group = false;\n        bool\
    \ in_paren_group_with_paren_group_with_paren = false;\n        bool in_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level--;\n            } else if (c == ' ') {\n   \
    \             level++;\n            } else if (c == '(' || c == ')') {\n     \
    \           level++;\n            } else if (c == '(') {\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n            } else\
    \ if (c == '(' || c == ')') {\n                level--;\n            }\n     \
    \       if (in_paren) {\n                level++;\n            }\n        }\n\
    \        levels.Add(level);\n        while (stack.Count > 0) {\n            levels.Add(stack.Pop());\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new\
    \ StringBuilder();\n        bool in_paren = false;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                in_paren = true;\n\
    \                stack.Add(0);\n            } else if (c == ')') {\n         \
    \       long level = stack.Pop();\n                levels.Add(level);\n      \
    \          in_paren = false;\n            } else if (c == ' ') {\n           \
    \     while (stack.Count > 0) {\n                    long level = stack.Pop();\n\
    \                    levels.Add(level);\n                }\n            } else\
    \ if (c == '(' || c == '[' || c == '{') {\n                sb.Append(c);\n   \
    \         } else if (c == '}') {\n                while (stack.Count > 0) {\n\
    \                    long level = stack.Pop();\n                    levels.Add(level);\n\
    \                }\n                sb.Append(c);\n            } else if (c ==\
    \ ']') {\n                while (stack.Count > 0) {\n                    long\
    \ level = stack.Pop();\n                    levels.Add(level);\n             \
    \   }\n                sb.Append(c);\n            } else if (c == ',') {\n   \
    \             while (stack.Count > 0) {\n                    long level = stack.Pop();\n\
    \                    levels.Add(level);\n                }\n                sb.Append(c);\n\
    \            }\n        }\n        while (stack.Count > 0) {\n            long\
    \ level = stack.Pop();\n            levels.Add(level);\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long paren_level\
    \ = 0;\n        bool in_paren = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       paren_level++;\n                stack.Add(level);\n            } else\
    \ if (c == ')') {\n                in_paren = false;\n                level--;\n\
    \                paren_level--;\n                while (paren_level > 0) {\n \
    \                   level--;\n                    paren_level--;\n           \
    \     }\n                stack.Pop();\n            } else if (c == ' ') {\n  \
    \              level++;\n            }\n        }\n        while (stack.Count\
    \ > 0) {\n            levels.Add(stack.Pop());\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        bool in_paren = false;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           in_paren = true;\n                stack.Add(level);\n            \
    \    level++;\n            } else if (c == ')') {\n                in_paren =\
    \ false;\n                level--;\n            } else if (c == ' ' && in_paren)\
    \ {\n                level++;\n            }\n            if (level > 0) {\n \
    \               levels.Add(level);\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool in_paren = false;\n        bool in_group = false;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            else if (c == ')') {\n                in_paren = false;\n\
    \                level--;\n            }\n            else if (c == ' ') {\n \
    \               if (in_paren) {\n                    level++;\n              \
    \  }\n            }\n            else if (c == '(') {\n                in_group\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            else if (c == ')') {\n                in_group = false;\n\
    \                level--;\n            }\n            else if (c == ' ') {\n \
    \               if (in_group) {\n                    level++;\n              \
    \  }\n            }\n        }\n        if (stack.Count > 0) {\n            levels\
    \ = stack;\n        }\n        return levels;", "        List<long> levels = new\
    \ List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n                level++;\n      \
    \      } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0) {\n                    levels.Add(stack.Count);\n                }\n \
    \               stack.Pop();\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        bool in_paren = false;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           in_paren = true;\n                stack.Add(level);\n            \
    \    level++;\n            }\n            else if (c == ')') {\n             \
    \   in_paren = false;\n                level -= stack.Pop();\n            }\n\
    \            else if (in_paren) {\n                level++;\n            }\n \
    \       }\n        levels.Add(level);\n        return levels;", "        List<long>\
    \ result = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Push(level);\n                level++;\n\
    \            } else if (c == ')') {\n                long popped = stack.Pop();\n\
    \                if (popped == level) {\n                    level--;\n      \
    \          }\n            }\n        }\n        result.Add(level);\n        return\
    \ result;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        var paren_stack = new Stack<long>();\n\
    \        var paren_levels = new List<long>();\n        foreach (var paren in paren_string.Split('\
    \ '))\n        {\n            if (paren.Length > 0)\n            {\n         \
    \       paren_stack.Add(paren.Length);\n            }\n            else\n    \
    \        {\n                paren_levels.Add(paren_stack.Last());\n          \
    \      paren_stack.RemoveAt(paren_stack.Count - 1);\n            }\n        }\n\
    \        return paren_levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool in_paren = false;\n        foreach (char c in paren_string) {\n   \
    \         if (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               level--;\n                long new_level = stack.Pop();\n    \
    \            if (level > new_level) {\n                    levels.Add(level);\n\
    \                }\n                in_paren = false;\n            }\n       \
    \     else if (in_paren) {\n                level++;\n            }\n        }\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  bool in_paren = false;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \                in_paren = true;\n            } else if (c == ')') {\n      \
    \          level--;\n                in_paren = false;\n            } else if\
    \ (c == ' ' && in_paren) {\n                level++;\n            }\n        \
    \    if (level > 0 && level < stack.Count) {\n                levels.Add(stack[stack.Count\
    \ - level]);\n            }\n        }\n        return levels;", "        List<long>\
    \ result = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n            } else if\
    \ (c == ')') {\n                long popped = stack.Pop();\n                if\
    \ (popped > level) {\n                    result.Add(level);\n               \
    \ }\n                level = popped;\n            } else {\n                level++;\n\
    \            }\n        }\n        return result;", "        var paren_stack =\
    \ new Stack<long>();\n        var paren_levels = new List<long>();\n        paren_levels.Add(0);\n\
    \        paren_stack.Add(0);\n        foreach (var c in paren_string) {\n    \
    \        if (c == '(') {\n                paren_levels[paren_stack.Last()] = paren_levels[paren_stack.Last()]\
    \ + 1;\n                paren_stack.Add(paren_stack.Last());\n            }\n\
    \            else if (c == ')') {\n                paren_levels[paren_stack.Last()]\
    \ = Math.Max(paren_levels[paren_stack.Last()], paren_stack.Last() - 1);\n    \
    \            paren_stack.RemoveAt(paren_stack.Last());\n            }\n      \
    \  }\n        return paren_levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool has_opening_paren = false;\n        bool has_closing_paren = false;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             has_opening_paren = true;\n                stack.Add(level);\n \
    \           } else if (c == ')') {\n                has_closing_paren = true;\n\
    \                long level_of_nesting = stack.Pop();\n                if (level_of_nesting\
    \ > level) {\n                    level = level_of_nesting;\n                }\n\
    \            } else if (c == ' ') {\n                if (has_opening_paren) {\n\
    \                    level++;\n                } else if (has_closing_paren) {\n\
    \                    level--;\n                }\n            }\n        }\n \
    \       levels.Add(level);\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            }\n        }\n     \
    \   return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool inParen =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                inParen = true;\n                stack.Add(level);\n    \
    \            level++;\n            }\n            if (c == ')') {\n          \
    \      inParen = false;\n                level--;\n            }\n           \
    \ if (inParen) {\n                level++;\n            }\n        }\n       \
    \ foreach (long l in stack) {\n            levels.Add(l);\n        }\n       \
    \ return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n            } else if (c == ')')\
    \ {\n                level -= stack.Pop();\n                level += 1;\n    \
    \            in_paren = false;\n            } else if (c == ' ') {\n         \
    \       level += 1;\n            } else if (c == '(' || c == '[' || c == '{')\
    \ {\n                level += 1;\n            }\n            if (in_paren) {\n\
    \                level += 1;\n            }\n        }\n        level -= stack.Pop();\n\
    \        level += 1;\n        levels.Add(level);\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            }\n            else if (c == ')') {\n         \
    \       level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \            }\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            }\n        }\n     \
    \   return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        List<long> result = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                long top = stack.Pop();\n                if (top\
    \ > level) {\n                    result.Add(level);\n                }\n    \
    \            level = top;\n            } else {\n                level--;\n  \
    \          }\n        }\n        return result;", "        List<long> levels =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n                level++;\n      \
    \      } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0) {\n                    levels.Add(stack.Count);\n                }\n \
    \               stack.Pop();\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        long max_level = 0;\n     \
    \   foreach (char c in paren_string) {\n            if (c == '(') {\n        \
    \        stack.Add(level);\n                level++;\n            } else if (c\
    \ == ')') {\n                level--;\n                if (level == 0)\n     \
    \               max_level = stack.Pop();\n                else\n             \
    \       stack.Push(level);\n            }\n        }\n        levels.Add(max_level);\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n                level++;\n            } else if (c\
    \ == ')') {\n                level--;\n                if (level == 0) {\n   \
    \                 levels.Add(stack.Count);\n                }\n            } else\
    \ if (c == ' ') {\n                level = 0;\n            }\n        }\n    \
    \    return levels;", "        List<long> levels = new List<long>();\n       \
    \ Stack<long> stack = new Stack<long>();\n        long level = 0;\n        long\
    \ paren_level = 0;\n        bool in_paren = false;\n        bool in_brace = false;\n\
    \        bool in_brace2 = false;\n        bool in_brace3 = false;\n        bool\
    \ in_brace4 = false;\n        bool in_brace5 = false;\n        bool in_brace6\
    \ = false;\n        bool in_brace7 = false;\n        bool in_brace8 = false;\n\
    \        bool in_brace9 = false;\n        bool in_brace10 = false;\n        bool\
    \ in_brace11 = false;\n        bool in_brace12 = false;\n        bool in_brace13\
    \ = false;\n        bool in_brace14 = false;\n        bool in_brace15 = false;\n\
    \        bool in_brace16 = false;\n        bool in_brace17 = false;\n        bool\
    \ in_brace18 = false;\n        bool in_brace19 = false;\n        bool in_brace20\
    \ = false;\n        bool in_brace21 = false;\n        bool in_brace22 = false;\n\
    \        bool in_brace23 = false;\n        bool in_brace24 = false;\n        bool\
    \ in_brace25 = false;\n        bool in_brace26 = false;\n        bool in_brace27\
    \ = false;\n        bool in_brace28 = false;\n        bool in_brace29 = false;\n\
    \        bool in_brace30 = false;\n        bool in_brace31 = false;\n        bool\
    \ in_brace32 = false;\n        bool in_brace33 = false;\n        bool in_brace34\
    \ = false;\n        bool in_brace35 = false;\n        bool in_brace36 = false;\n\
    \        bool in_brace37 = false;\n        bool in_brace38 = false;\n        bool\
    \ in_brace39 = false;\n        bool in_brace40 = false;\n        bool in_brace41\
    \ = false;\n        bool in_brace42 = false;\n        bool in_brace43 = false;\n\
    \        bool in_brace44 = false;\n        bool in_brace45 = false;\n        bool\
    \ in_brace46 = false;\n        bool in_brace47 = false;\n        bool in_brace48\
    \ = false;\n        bool in_brace49 = false;\n        bool in_brace50 = false;\n\
    \        bool in_brace51 = false;\n        bool in_brace52 = false;\n        bool\
    \ in_brace53 = false;\n        bool in_brace54 = false;\n        bool in_brace55\
    \ = false;\n        bool in_brace56 = false;\n        bool in_brace57 = false;\n\
    \        bool in_brace58 = false;\n        bool in_brace59 = false;\n        bool\
    \ in_brace60 = false;\n        bool in_brace61 = false;\n        bool in_brace62\
    \ = false;\n        bool in_brace63 = false;\n        bool in_brace64 = false;\n\
    \        bool in_brace65 = false;\n        bool in_brace66", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0) {\n                    levels.Add(stack.Count);\n         \
    \       }\n            }\n        }\n        return levels;", "        var paren_stack\
    \ = new Stack<long>();\n        var paren_levels = new List<long>();\n       \
    \ var paren_level = 0;\n        var paren_level_count = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                paren_stack.Add(paren_level);\n\
    \                paren_level_count++;\n            } else if (c == ')') {\n  \
    \              paren_level_count--;\n                if (paren_level_count ==\
    \ 0) {\n                    paren_level_count = paren_stack.Pop();\n         \
    \           paren_level_count--;\n                }\n                paren_level_count++;\n\
    \                paren_levels.Add(paren_level_count);\n            }\n       \
    \ }\n        return paren_levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n            } else if (c == ')') {\n           \
    \     level -= stack.Pop();\n            } else if (c == ' ') {\n            \
    \    level++;\n            }\n            levels.Add(level);\n        }\n    \
    \    return levels;", "        List<long> levels = new List<long>();\n       \
    \ Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.Add(0);\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                long level = stack.Pop();\n                while (level\
    \ > 0) {\n                    level--;\n                    stack.Pop();\n   \
    \             }\n                levels.Add(level);\n            } else if (c\
    \ == ' ') {\n                if (in_paren) {\n                    sb.Append(c);\n\
    \                }\n            } else {\n                sb.Append(c);\n    \
    \        }\n        }\n        string s = sb.ToString();\n        List<long> result\
    \ = new List<long>();\n        foreach (char c in s) {\n            if (c == '(')\
    \ {\n                result.Add(0);\n            } else if (c == ')') {\n    \
    \            long level = stack.Pop();\n                while (level > 0) {\n\
    \                    level--;\n                    stack.Pop();\n            \
    \    }\n                result.Add(level);\n            }\n        }\n       \
    \ return result;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_group = false;\n        bool\
    \ in_quote = false;\n        bool in_escape = false;\n        bool in_group_bracket\
    \ = false;\n        bool in_group_escape = false;\n        bool in_group_quote\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool ", "        List<long> levels = new List<long>();\n \
    \       Stack<long> stack = new Stack<long>();\n        long level = 0;\n    \
    \    bool in_paren = false;\n        foreach (char c in paren_string) {\n    \
    \        if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \                in_paren = true;\n            } else if (c == ')') {\n      \
    \          level--;\n                in_paren = false;\n            } else if\
    \ (c == ' ') {\n                if (in_paren) {\n                    level++;\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Unexpected character \" + c + \" at position \" + paren_string.IndexOf(c));\n\
    \            }\n        }\n        stack.Pop();\n        levels.Add(level);\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n            } else if (c == ')') {\n              \
    \  level = (long)stack.Pop();\n                levels.Add(level);\n          \
    \  }\n        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long level_of_nesting\
    \ = stack.Count > 0 ? stack.Peek() : 0L;\n                if (level > level_of_nesting)\
    \ {\n                    levels.Add(level);\n                }\n             \
    \   stack.Pop();\n            }\n        }\n        return levels;", "       \
    \ List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            else if (c == ')') {\n                level--;\n      \
    \          if (level == 0)\n                    levels.Add(stack.Count);\n   \
    \             else\n                    stack.RemoveAt(stack.Count - 1);\n   \
    \         }\n            else if (in_paren) {\n                level++;\n    \
    \        }\n        }\n        return levels;", "        List<long> levels = new\
    \ List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        bool in_paren = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.Add(level);\n                level++;\n            }\n         \
    \   else if (c == ')') {\n                level--;\n                if (level\
    \ == 0)\n                    levels.Add(stack.Count);\n                else\n\
    \                    stack.Remove(stack.Count - 1);\n            }\n         \
    \   else if (in_paren) {\n                level++;\n            }\n        }\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n                level++;\n            } else if (c\
    \ == ')') {\n                level--;\n                if (level == 0)\n     \
    \               levels.Add(stack.Count);\n                else\n             \
    \       stack.Pop();\n            }\n        }\n        return levels;", "   \
    \     List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        long level_count = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level_count++;\n            } else if (c == ')') {\n        \
    \        level_count--;\n                if (level_count == 0) {\n           \
    \         level_count = stack.Count;\n                    level = (long)stack.Pop();\n\
    \                }\n            }\n        }\n        levels.Add(level);\n   \
    \     return levels;", "        List<long> levels = new List<long>();\n      \
    \  Stack<long> stack = new Stack<long>();\n        long level = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                level = (long)stack.Pop();\n\
    \                levels.Add(level);\n            }\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               level--;\n                if (level == 0)\n                  \
    \  levels.Add(stack.Count);\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ in_paren = false;\n        bool in_bracket = false;\n        bool in_brace =\
    \ false;\n        bool in_curly_brace = false;\n        bool in_curly_bracket\
    \ = false;\n        bool in_square_bracket = false;\n        bool in_square_brace\
    \ = false;\n        bool in_curly_square_brace = false;\n        bool in_curly_square_bracket\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long popped = stack.Pop();\n                if (level > popped) {\n       \
    \             levels.Add(level);\n                }\n            } else {\n  \
    \              level++;\n            }\n        }\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ in_paren = false;\n        bool in_group = false;\n        bool in_quote = false;\n\
    \        bool in_group2 = false;\n        bool in_group3 = false;\n        bool\
    \ in_group4 = false;\n        bool in_group5 = false;\n        bool in_group6\
    \ = false;\n        bool in_group7 = false;\n        bool in_group8 = false;\n\
    \        bool in_group9 = false;\n        bool in_group10 = false;\n        bool\
    \ in_group11 = false;\n        bool in_group12 = false;\n        bool in_group13\
    \ = false;\n        bool in_group14 = false;\n        bool in_group15 = false;\n\
    \        bool in_group16 = false;\n        bool in_group17 = false;\n        bool\
    \ in_group18 = false;\n        bool in_group19 = false;\n        bool in_group20\
    \ = false;\n        bool in_group21 = false;\n        bool in_group22 = false;\n\
    \        bool in_group23 = false;\n        bool in_group24 = false;\n        bool\
    \ in_group25 = false;\n        bool in_group26 = false;\n        bool in_group27\
    \ = false;\n        bool in_group28 = false;\n        bool in_group29 = false;\n\
    \        bool in_group30 = false;\n        bool in_group31 = false;\n        bool\
    \ in_group32 = false;\n        bool in_group33 = false;\n        bool in_group34\
    \ = false;\n        bool in_group35 = false;\n        bool in_group36 = false;\n\
    \        bool in_group37 = false;\n        bool in_group38 = false;\n        bool\
    \ in_group39 = false;\n        bool in_group40 = false;\n        bool in_group41\
    \ = false;\n        bool in_group42 = false;\n        bool in_group43 = false;\n\
    \        bool in_group44 = false;\n        bool in_group45 = false;\n        bool\
    \ in_group46 = false;\n        bool in_group47 = false;\n        bool in_group48\
    \ = false;\n        bool in_group49 = false;\n        bool in_group50 = false;\n\
    \        bool in_group51 = false;\n        bool in_group52 = false;\n        bool\
    \ in_group53 = false;\n        bool in_group54 = false;\n        bool in_group55\
    \ = false;\n        bool in_group56 = false;\n        bool in_group57 = false;\n\
    \        bool in_group58 = false;\n        bool in_group59 = false;\n        bool\
    \ in_group60 = false;\n        bool in_group61 = false;\n        bool in_group62\
    \ = false;\n        bool in_group63 = false;\n        bool in_group64 = false;\n\
    \        bool in_group65 = false;\n        bool ", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0) {\n                    levels.Add(stack.Count);\n         \
    \       }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       } else if (c == ')') {\n                in_paren = false;\n          \
    \      level--;\n            } else if (c == ' ') {\n                if (in_paren)\
    \ {\n                    level++;\n                }\n            }\n        }\n\
    \        stack.Pop();\n        levels.Add(level);\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (stack.Count == 0) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(0);\n            }\
    \ else if (c == ')') {\n                long level = stack.Pop();\n          \
    \      while (level > 0) {\n                    levels.Add(level);\n         \
    \           level--;\n                }\n                sb.Append(c);\n     \
    \       } else if (c == ' ') {\n                sb.Append(c);\n            } else\
    \ {\n                sb.Append(c);\n                stack.Add(sb.Length);\n  \
    \          }\n        }\n        long level = stack.Pop();\n        while (level\
    \ > 0) {\n            levels.Add(level);\n            level--;\n        }\n  \
    \      return levels;", "        List<long> levels = new List<long>();\n     \
    \   Stack<long> stack = new Stack<long>();\n        long level = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     long max_level = 0;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    max_level = stack.Count;\n           \
    \     else\n                    stack.Pop();\n            } else if (c == ' ')\
    \ {\n                level = 0;\n            }\n        }\n        levels.Add(max_level);\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_quote = false;\n        bool\
    \ in_escape = false;\n        bool in_escaped = false;\n        bool in_escaped_quote\
    \ = false;\n        bool in_escaped_escape = false;\n        bool in_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_quote = false;\n        bool in_escaped_escaped_escape\
    \ = false;\n        bool in_escaped_escaped_escaped = false;\n        bool in_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped = false;\n       \
    \ bool in_escaped_escaped_escaped_escaped = false;\n        bool in_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped = false;\n\
    \        bool in_escaped_escaped_escaped_escaped_escaped = false;\n        bool\
    \ in_escaped_escaped_escaped_escaped_escaped_quote = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped =\
    \ false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        ", "        List<long> levels = new List<long>();\n      \
    \  Stack<long> stack = new Stack<long>();\n        long level = 0;\n        bool\
    \ in_paren = false;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \                in_paren = true;\n            } else if (c == ')') {\n      \
    \          level--;\n                in_paren = false;\n            } else if\
    \ (c == ' ') {\n                if (in_paren) {\n                    level++;\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Unexpected character: \" + c);\n            }\n        }\n        stack.Pop();\n\
    \        levels.Add(level);\n        while (stack.Count > 0) {\n            levels.Add(stack.Pop());\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0) {\n\
    \                    levels.Add(stack.Count);\n                }\n           \
    \ }\n        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0)\n  \
    \                  levels.Add(stack.Count);\n                else\n          \
    \          stack.Pop();\n            }\n        }\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        bool in_paren = false;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           in_paren = true;\n                stack.Add(level);\n            \
    \    level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                    in_paren = false;\n                }\n            } else\
    \ if (c == ' ') {\n                if (in_paren) {\n                    level--;\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            }\n        }\n     \
    \   return levels;", "        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long new_level = stack.Pop();\n\
    \                if (new_level > level) {\n                    level = new_level;\n\
    \                }\n            }\n        }\n        result.Add(level);\n   \
    \     return result;", "        List<long> levels = new List<long>();\n      \
    \  Stack<long> stack = new Stack<long>();\n        long level = 0;\n        bool\
    \ in_paren = false;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                in_paren = false;\n     \
    \           level = (long)stack.Pop();\n            } else if (c == ' ') {\n \
    \               level++;\n            }\n        }\n        levels.Add(level);\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  bool in_paren = false;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                in_paren = false;\n     \
    \           level = (long)stack.Pop();\n                levels.Add(level);\n \
    \           } else if (c == ' ') {\n                level++;\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0) {\n\
    \                    levels.Add(stack.Count);\n                }\n           \
    \     stack.Pop();\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        long level_count = 0;\n        bool in_paren\
    \ = false;\n        bool in_paren_group = false;\n        bool in_paren_group_open\
    \ = false;\n        bool in_paren_group_close = false;\n        bool in_paren_group_open2\
    \ = false;\n        bool in_paren_group_close2 = false;\n        bool in_paren_group_open3\
    \ = false;\n        bool in_paren_group_close3 = false;\n        bool in_paren_group_open4\
    \ = false;\n        bool in_paren_group_close4 = false;\n        bool in_paren_group_open5\
    \ = false;\n        bool in_paren_group_close5 = false;\n        bool in_paren_group_open6\
    \ = false;\n        bool in_paren_group_close6 = false;\n        bool in_paren_group_open7\
    \ = false;\n        bool in_paren_group_close7 = false;\n        bool in_paren_group_open8\
    \ = false;\n        bool in_paren_group_close8 = false;\n        bool in_paren_group_open9\
    \ = false;\n        bool in_paren_group_close9 = false;\n        bool in_paren_group_open10\
    \ = false;\n        bool in_paren_group_close10 = false;\n        bool in_paren_group_open11\
    \ = false;\n        bool in_paren_group_close11 = false;\n        bool in_paren_group_open12\
    \ = false;\n        bool in_paren_group_close12 = false;\n        bool in_paren_group_open13\
    \ = false;\n        bool in_paren_group_close13 = false;\n        bool in_paren_group_open14\
    \ = false;\n        bool in_paren_group_close14 = false;\n        bool in_paren_group_open15\
    \ = false;\n        bool in_paren_group_close15 = false;\n        bool in_paren_group_open16\
    \ = false;\n        bool in_paren_group_close16 = false;\n        bool in_paren_group_open17\
    \ = false;\n        bool in_paren_group_close17 = false;\n        bool in_paren_group_open18\
    \ = false;\n        bool in_paren_group_close18 = false;\n        bool in_paren_group_open19\
    \ = false;\n        bool in_paren_group_close19 = false;\n        bool in_paren_group_open20\
    \ = false;\n        bool in_paren_group_close20 = false;\n        bool in_paren_group_open21\
    \ = false;\n        bool in_paren_group_close21 = false;\n        bool in_paren_group_open22\
    \ = false;\n        bool in_paren_group_close22 = false;\n        bool in_paren_group_open23\
    \ = false;\n        bool in_paren_group_close23 = false;\n        bool in_paren_",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        bool in_paren = false;\n  \
    \      bool in_square = false;\n        bool in_curly_bracket = false;\n     \
    \   bool in_square_bracket = false;\n        bool in_curly_bracket2 = false;\n\
    \        bool in_square_bracket2 = false;\n        bool in_curly_bracket3 = false;\n\
    \        bool in_square_bracket3 = false;\n        bool in_curly_bracket4 = false;\n\
    \        bool in_square_bracket4 = false;\n        bool in_curly_bracket5 = false;\n\
    \        bool in_square_bracket5 = false;\n        bool in_curly_bracket6 = false;\n\
    \        bool in_square_bracket6 = false;\n        bool in_curly_bracket7 = false;\n\
    \        bool in_square_bracket7 = false;\n        bool in_curly_bracket8 = false;\n\
    \        bool in_square_bracket8 = false;\n        bool in_curly_bracket9 = false;\n\
    \        bool in_square_bracket9 = false;\n        bool in_curly_bracket10 = false;\n\
    \        bool in_square_bracket10 = false;\n        bool in_curly_bracket11 =\
    \ false;\n        bool in_square_bracket11 = false;\n        bool in_curly_bracket12\
    \ = false;\n        bool in_square_bracket12 = false;\n        bool in_curly_bracket13\
    \ = false;\n        bool in_square_bracket13 = false;\n        bool in_curly_bracket14\
    \ = false;\n        bool in_square_bracket14 = false;\n        bool in_curly_bracket15\
    \ = false;\n        bool in_square_bracket15 = false;\n        bool in_curly_bracket16\
    \ = false;\n        bool in_square_bracket16 = false;\n        bool in_curly_bracket17\
    \ = false;\n        bool in_square_bracket17 = false;\n        bool in_curly_bracket18\
    \ = false;\n        bool in_square_bracket18 = false;\n        bool in_curly_bracket19\
    \ = false;\n        bool in_square_bracket19 = false;\n        bool in_curly_bracket20\
    \ = false;\n        bool in_square_bracket20 = false;\n        bool in_curly_bracket21\
    \ = false;\n        bool in_square_bracket21 = false;\n        bool in_curly_bracket22\
    \ = false;\n        bool in_square_bracket22 = false;\n        bool in_curly_bracket23\
    \ = false;\n        bool in_square_bracket23 = false;\n        bool in_curly_bracket24\
    \ = false;\n        bool in_square_bracket24 = false;\n        bool in_curly_bracket25\
    \ = false;\n        bool in_square_bracket25", "        List<long> levels = new\
    \ List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        bool in_paren = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.Add(level);\n            } else if (c == ')') {\n              \
    \  in_paren = false;\n                level = (long)stack.Pop();\n           \
    \     levels.Add(level);\n            } else if (c == ' ') {\n               \
    \ level++;\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0) {\n                    levels.Add(stack.Count);\n         \
    \       }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            }\n        }\n     \
    \   return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n            }\n            sb.Append(c);\n        }\n        long level\
    \ = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       } else if (c == ')') {\n                in_paren = false;\n          \
    \      level = (long)stack.Pop();\n                levels.Add(level);\n      \
    \      } else if (c == ' ') {\n                if (in_paren) {\n             \
    \       level = (long)stack.Pop();\n                    levels.Add(level);\n \
    \               }\n            }\n        }\n        return levels;", "      \
    \  List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long new_level = stack[stack.Count - 1];\n                if (new_level > level)\
    \ {\n                    levels.Add(level);\n                }\n             \
    \   stack.Pop();\n            } else if (c == ' ') {\n                level =\
    \ 0;\n            }\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            } else if (c == ' ')\
    \ {\n                level = 0;\n            }\n        }\n        return levels;",
  "        List<long> result = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            }\n            else if (c == ')') {\n         \
    \       level--;\n                if (stack.Count > 0) {\n                   \
    \ result.Add(stack[stack.Count - 1]);\n                }\n            }\n    \
    \    }\n        return result;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     long level_count = 0;\n        foreach (char c in paren_string) {\n    \
    \        if (c == '(') {\n                stack.Add(level);\n                level_count++;\n\
    \            } else if (c == ')') {\n                level_count--;\n        \
    \        if (level_count == 0) {\n                    level = stack.Pop();\n \
    \               }\n            }\n        }\n        levels.Add(level);\n    \
    \    while (level_count > 0) {\n            level_count--;\n            level\
    \ = stack.Pop();\n            levels.Add(level);\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else {\n\
    \                level = 0;\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \    } else if (c == ')') {\n                while (stack.Count > 0) {\n     \
    \               levels.Add(stack.Pop());\n                }\n                level\
    \ = 0;\n            } else {\n                level++;\n            }\n      \
    \  }\n        while (stack.Count > 0) {\n            levels.Add(stack.Pop());\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0) {\n\
    \                    levels.Add(stack.Count);\n                }\n           \
    \ }\n        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0)\n  \
    \                  levels.Add(stack.Count);\n                else\n          \
    \          stack.Pop();\n            } else if (c == ' ') {\n                level\
    \ = 0;\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            }\n        }\n     \
    \   return levels;", "        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long level = stack.Pop();\n\
    \                result.Add(level);\n            }\n        }\n        return\
    \ result;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                level -= stack.Pop();\n    \
    \            in_paren = false;\n            } else if (c == ' ') {\n         \
    \       level++;\n            }\n            if (in_paren) {\n               \
    \ level++;\n            }\n        }\n        levels.Add(level);\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long popped_level = stack.Pop();\n              \
    \  if (level > popped_level) {\n                    levels.Add(level);\n     \
    \           }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Remove(stack.Count - 1);\n            }\
    \ else if (c == ' ') {\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          }\n        }\n        return levels;", "        List<long> levels =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        bool in_paren = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n                in_paren = true;\n            } else if (c\
    \ == ')') {\n                level--;\n                in_paren = false;\n   \
    \         } else if (c == ' ') {\n                level = 0;\n            }\n\
    \            if (in_paren) {\n                level++;\n            }\n      \
    \  }\n        stack.Pop();\n        foreach (long l in stack) {\n            levels.Add(l);\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long new_level = stack.Pop();\n\
    \                if (new_level > level) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        long paren_level = 0;\n        long paren_level_max\
    \ = 0;\n        bool in_paren = false;\n        bool in_paren_group = false;\n\
    \        bool in_paren_group_max = false;\n        bool in_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group = false;\n        bool\
    \ in_paren_group_max_paren_group_max = false;\n        bool in_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group = false;\n\
    \        bool in_paren_group_max_paren_group_max_paren_group_max = false;\n  \
    \      bool in_paren_group_max_paren_group_max_paren_group_max_paren = false;\n\
    \        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group =\
    \ false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                level\
    \ -= stack.Pop();\n                in_paren = false;\n            } else if (c\
    \ == ' ') {\n                if (in_paren) {\n                    level -= stack.Pop();\n\
    \                }\n            }\n        }\n        levels.Add(level);\n   \
    \     return levels;", "        List<long> levels = new List<long>();\n      \
    \  Stack<long> stack = new Stack<long>();\n        long level = 0;\n        bool\
    \ in_paren = false;\n        bool in_paran = false;\n        bool in_paran2 =\
    \ false;\n        bool in_paran3 = false;\n        bool in_paran4 = false;\n \
    \       bool in_paran5 = false;\n        bool in_paran6 = false;\n        bool\
    \ in_paran7 = false;\n        bool in_paran8 = false;\n        bool in_paran9\
    \ = false;\n        bool in_paran10 = false;\n        bool in_paran11 = false;\n\
    \        bool in_paran12 = false;\n        bool in_paran13 = false;\n        bool\
    \ in_paran14 = false;\n        bool in_paran15 = false;\n        bool in_paran16\
    \ = false;\n        bool in_paran17 = false;\n        bool in_paran18 = false;\n\
    \        bool in_paran19 = false;\n        bool in_paran20 = false;\n        bool\
    \ in_paran21 = false;\n        bool in_paran22 = false;\n        bool in_paran23\
    \ = false;\n        bool in_paran24 = false;\n        bool in_paran25 = false;\n\
    \        bool in_paran26 = false;\n        bool in_paran27 = false;\n        bool\
    \ in_paran28 = false;\n        bool in_paran29 = false;\n        bool in_paran30\
    \ = false;\n        bool in_paran31 = false;\n        bool in_paran32 = false;\n\
    \        bool in_paran33 = false;\n        bool in_paran34 = false;\n        bool\
    \ in_paran35 = false;\n        bool in_paran36 = false;\n        bool in_paran37\
    \ = false;\n        bool in_paran38 = false;\n        bool in_paran39 = false;\n\
    \        bool in_paran40 = false;\n        bool in_paran41 = false;\n        bool\
    \ in_paran42 = false;\n        bool in_paran43 = false;\n        bool in_paran44\
    \ = false;\n        bool in_paran45 = false;\n        bool in_paran46 = false;\n\
    \        bool in_paran47 = false;\n        bool in_paran48 = false;\n        bool\
    \ in_paran49 = false;\n        bool in_paran50 = false;\n        bool in_paran51\
    \ = false;\n        bool in_paran52 = false;\n        bool in_paran53 = false;\n\
    \        bool in_paran54 = false;\n        bool in_paran55 = false;\n        bool\
    \ in_paran56 = false;\n        bool in_paran57 = false;\n        bool in_paran58\
    \ = false;\n        bool in_paran59", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n            } else if (c == ')') {\n           \
    \     level = (long)stack.Pop();\n                levels.Add(level);\n       \
    \     }\n        }\n        return levels;", "        List<long> levels = new\
    \ List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n                level++;\n      \
    \      } else if (c == ')') {\n                level--;\n                long\
    \ new_level = stack.Pop();\n                if (new_level > level) {\n       \
    \             levels.Add(new_level);\n                }\n            }\n     \
    \   }\n        return levels;", "        List<long> result = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                long level_at_top = stack.Pop();\n           \
    \     if (level_at_top != level) {\n                    throw new Exception(\"\
    Mismatched parentheses at \" + level);\n                }\n                level--;\n\
    \            } else {\n                throw new Exception(\"Unexpected character\
    \ \" + c);\n            }\n        }\n        result.Add(level);\n        return\
    \ result;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else {\n\
    \                level = 0;\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0)\n  \
    \                  levels.Add(stack.Count);\n                else\n          \
    \          stack.Pop();\n            }\n        }\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level -=\
    \ stack.Pop();\n            } else if (c == ' ') {\n                level = 0;\n\
    \            }\n            levels.Add(level);\n        }\n        return levels;",
  "        List<long> result = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \    } else if (c == ')') {\n                long level = stack.Pop();\n     \
    \           if (level > result.Count) {\n                    result.Add(level);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(0);\n            }\
    \ else if (c == ')') {\n                long level = stack.Pop();\n          \
    \      while (level > 0) {\n                    levels.Add(level);\n         \
    \           level--;\n                }\n            } else if (c == '(') {\n\
    \                stack.Add(1);\n            } else if (c == ')') {\n         \
    \       long level = stack.Pop();\n                while (level > 0) {\n     \
    \               levels.Add(level);\n                    level--;\n           \
    \     }\n            }\n            sb.Append(c);\n        }\n        long level\
    \ = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long popped_level = stack.Pop();\n                if (level != popped_level)\
    \ {\n                    throw new Exception(\"Mismatched parentheses\");\n  \
    \              }\n                levels.Add(level);\n            } else {\n \
    \               throw new Exception(\"Invalid parentheses\");\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new\
    \ StringBuilder();\n        bool inParen = false;\n        bool inBracket = false;\n\
    \        bool inBrace = false;\n        bool inQuote = false;\n        bool inSpace\
    \ = false;\n        bool inComma = false;\n        bool inCommaOrSpace = false;\n\
    \        bool inCommaOrQuote = false;\n        bool inCommaOrBracket = false;\n\
    \        bool inCommaOrBrace = false;\n        bool inCommaOrSpaceOrQuote = false;\n\
    \        bool inCommaOrSpaceOrBracket = false;\n        bool inCommaOrSpaceOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracket = false;\n        bool\
    \ inCommaOrSpaceOrQuoteOrBrace = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBrace = false;\n    \
    \    bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpace = false;\n        bool\
    \ inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpace = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuote\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracket\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuote\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracket\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpace",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ in_paren = false;\n        bool in_quote = false;\n        bool in_escape =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(0);\n       \
    \     }\n            else if (c == ')') {\n                in_paren = false;\n\
    \                long level = stack.Pop();\n                while (level > 0)\
    \ {\n                    level--;\n                    stack.Push(level);\n  \
    \              }\n            }\n            else if (c == '\"') {\n         \
    \       in_quote = true;\n            }\n            else if (c == '\\\\') {\n\
    \                in_escape = true;\n            }\n            else if (in_quote\
    \ && c == '\"') {\n                in_quote = false;\n            }\n        \
    \    else if (in_escape && c == '\\\\') {\n                in_escape = false;\n\
    \            }\n            else if (in_paren) {\n                if (c == '(')\
    \ {\n                    stack.Add(0);\n                }\n                else\
    \ if (c == ')') {\n                    long level = stack.Pop();\n           \
    \         while (level > 0) {\n                        level--;\n            \
    \            stack.Push(level);\n                    }\n                }\n  \
    \              else if (c == '\"') {\n                    in_quote = true;\n \
    \               }\n                else if (c == '\\\\') {\n                 \
    \   in_escape = true;\n                }\n                else if (in_quote &&\
    \ c == '\"') {\n                    in_quote = false;\n                }\n   \
    \             else if (in_escape && c == '\\\\') {\n                    in_escape\
    \ = false;\n                }\n            }\n            else {\n           \
    \     sb.Append(c);\n            }\n        }\n        string s = sb.ToString();\n\
    \        char[] chars = s.ToCharArray();\n        List<long> result = new List<long>();\n\
    \        foreach (char c in chars) {\n            if (c == '(') {\n          \
    \      result.Add(0);\n            }\n            else if (c == ')') {\n     \
    \           long level = stack.Pop();\n                while (level > 0) {\n \
    \                   level--;\n                    stack.Push(level);\n       \
    \         }\n            }\n            else if (c == '\"') {\n              \
    \  in_quote = true;\n            }\n            else if (c == '\\\\') {\n    \
    \            in_escape = true;\n            }\n            else if (in_quote &&\
    \ c == '\"') {\n                in_quote = false;\n            }\n           \
    \ else if (in_escape && c == '\\\\') {\n                in_escape = false;\n \
    \           }\n            else {\n                result.Add(long.Parse(s.Substring(0,\
    \ s.IndexOf(c))));\n                s = s.Substring(s.IndexOf(c) + 1);\n     \
    \       }\n        }\n        return result;", "        List<long> levels = new\
    \ List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n                level++;\n      \
    \      } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0) {\n                    levels.Add(stack.Count);\n                    stack.Pop();\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> result = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n            } else if (c == ')')\
    \ {\n                in_paren = false;\n                long new_level = stack.Pop();\n\
    \                if (new_level > level) {\n                    level = new_level;\n\
    \                }\n            } else if (in_paren) {\n                level++;\n\
    \            }\n        }\n        result.Add(level);\n        return result;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        long nesting_level = 0;\n \
    \       foreach (char c in paren_string) {\n            if (c == '(') {\n    \
    \            stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                nesting_level = stack.Pop();\n\
    \                levels.Add(nesting_level);\n            }\n        }\n      \
    \  return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Pop();\n          \
    \      if (level_of_nesting > level) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            }\n        }\n     \
    \   return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level -= stack.Pop();\n            }\n        }\n        levels.Add(level);\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n                level++;\n            } else if (c\
    \ == ')') {\n                level--;\n                if (level == 0)\n     \
    \               levels.Add(stack.Count);\n                else\n             \
    \       stack.RemoveAt(stack.Count - 1);\n            }\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long paren_level\
    \ = 0;\n        bool in_paren = false;\n        bool in_group = false;\n     \
    \   bool in_group_open = false;\n        bool in_group_close = false;\n      \
    \  bool in_group_open_brace = false;\n        bool in_group_close_brace = false;\n\
    \        bool in_group_open_brace_or_close_brace = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_bra",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        long level = 0;\n       \
    \ foreach (char c in paren_string) {\n            if (c == '(') {\n          \
    \      stack.Add(level);\n                level++;\n            } else if (c ==\
    \ ')') {\n                level--;\n                if (level == 0)\n        \
    \            levels.Add(stack.Count);\n                else\n                \
    \    stack.Pop();\n            }\n        }\n        return levels;", "      \
    \  List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        StringBuilder sb = new StringBuilder();\n        long level = 0;\n  \
    \      bool in_paren = false;\n        foreach (char c in paren_string) {\n  \
    \          if (c == '(') {\n                in_paren = true;\n               \
    \ stack.Add(level);\n                level++;\n            }\n            if (c\
    \ == ')') {\n                in_paren = false;\n                level--;\n   \
    \         }\n            if (in_paren) {\n                sb.Append(c);\n    \
    \        }\n        }\n        level = 0;\n        foreach (char c in sb.ToString())\
    \ {\n            if (c == '(') {\n                level++;\n            }\n  \
    \          if (c == ')') {\n                level--;\n            }\n        \
    \    levels.Add(level);\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0) {\n                    levels.Add(stack.Last());\n                   \
    \ stack.Pop();\n                }\n            } else if (c == ' ') {\n      \
    \          if (in_paren) {\n                    stack.Pop();\n               \
    \ }\n            }\n        }\n        return levels;", "        var paren_stack\
    \ = new Stack<long>();\n        var levels = new List<long>();\n        var level\
    \ = 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                paren_stack.Push(level);\n                level++;\n        \
    \    } else if (c == ')') {\n                level--;\n                if (paren_stack.Count\
    \ > 0 && paren_stack.Peek() == level) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        if (paren_stack.Count >\
    \ 0) {\n            levels.Add(level);\n        }\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ in_paren = false;\n        bool in_group = false;\n        bool in_group2 =\
    \ false;\n        bool in_group3 = false;\n        bool in_group4 = false;\n \
    \       bool in_group5 = false;\n        bool in_group6 = false;\n        bool\
    \ in_group7 = false;\n        bool in_group8 = false;\n        bool in_group9\
    \ = false;\n        bool in_group10 = false;\n        bool in_group11 = false;\n\
    \        bool in_group12 = false;\n        bool in_group13 = false;\n        bool\
    \ in_group14 = false;\n        bool in_group15 = false;\n        bool in_group16\
    \ = false;\n        bool in_group17 = false;\n        bool in_group18 = false;\n\
    \        bool in_group19 = false;\n        bool in_group20 = false;\n        bool\
    \ in_group21 = false;\n        bool in_group22 = false;\n        bool in_group23\
    \ = false;\n        bool in_group24 = false;\n        bool in_group25 = false;\n\
    \        bool in_group26 = false;\n        bool in_group27 = false;\n        bool\
    \ in_group28 = false;\n        bool in_group29 = false;\n        bool in_group30\
    \ = false;\n        bool in_group31 = false;\n        bool in_group32 = false;\n\
    \        bool in_group33 = false;\n        bool in_group34 = false;\n        bool\
    \ in_group35 = false;\n        bool in_group36 = false;\n        bool in_group37\
    \ = false;\n        bool in_group38 = false;\n        bool in_group39 = false;\n\
    \        bool in_group40 = false;\n        bool in_group41 = false;\n        bool\
    \ in_group42 = false;\n        bool in_group43 = false;\n        bool in_group44\
    \ = false;\n        bool in_group45 = false;\n        bool in_group46 = false;\n\
    \        bool in_group47 = false;\n        bool in_group48 = false;\n        bool\
    \ in_group49 = false;\n        bool in_group50 = false;\n        bool in_group51\
    \ = false;\n        bool in_group52 = false;\n        bool in_group53 = false;\n\
    \        bool in_group54 = false;\n        bool in_group55 = false;\n        bool\
    \ in_group56 = false;\n        bool in_group57 = false;\n        bool in_group58\
    \ = false;\n        bool in_group59 = false;\n        bool in_group60 = false;\n\
    \        bool in_group61 = false;\n        bool in_group62 = false;\n        bool\
    \ in_group63 = false;\n        bool in_group64 = false;\n        bool in_group65\
    \ = false;\n        bool in_group66 = false;\n        ", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        bool in_paren = false;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                in_paren = true;\n\
    \                stack.Add(level);\n            } else if (c == ')') {\n     \
    \           in_paren = false;\n                level = (long)Math.Max(stack.Pop(),\
    \ level);\n            } else if (c == ' ') {\n                level++;\n    \
    \        }\n        }\n        level = (long)Math.Max(stack.Pop(), level);\n \
    \       levels.Add(level);\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0) {\n                    levels.Add(stack.Count);\n         \
    \       }\n                stack.Pop();\n            }\n        }\n        return\
    \ levels;", "        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    result.Add(stack.Count);\n\
    \                else\n                    result.Add(stack.Count - stack.Peek());\n\
    \                stack.Pop();\n            }\n        }\n        return result;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          } else if (c == ' ') {\n                level = 0;\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool in_paren = false;\n        foreach (char c in paren_string) {\n   \
    \         if (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  in_paren = false;\n                level--;\n            } else if (c == '\
    \ ' && in_paren) {\n                level++;\n            }\n        }\n     \
    \   stack.Pop();\n        levels.Add(level);\n        while (stack.Count > 0)\
    \ {\n            levels.Add(stack.Pop());\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        long level_of_nesting = 0;\n\
    \        bool in_paren = false;\n        bool in_paren_group = false;\n      \
    \  bool in_paren_group_with_paren = false;\n        bool in_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren = false;\n\
    \        bool in_paren_group_with_paren_group_with_paren_group = false;\n    \
    \    bool in_paren_group_with_paren_group_with_paren_group_with_paren = false;\n\
    \        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool in_paren = false;\n        foreach (char c in paren_string) {\n   \
    \         if (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  in_paren = false;\n                level -= stack.Pop();\n            } else\
    \ if (c == ' ') {\n                if (in_paren) {\n                    level--;\n\
    \                }\n            }\n        }\n        levels.Add(level);\n   \
    \     return levels;", "        List<long> levels = new List<long>();\n      \
    \  Stack<long> stack = new Stack<long>();\n        long level = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Count > 0 ? stack.Pop()\
    \ : -1;\n                levels.Add(level_of_nesting);\n            }\n      \
    \  }\n        return levels;", "        var paren_stack = new Stack<long>();\n\
    \        var paren_levels = new List<long>();\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.Push(paren_levels.Count);\n\
    \                paren_levels.Add(0);\n            } else if (c == ')') {\n  \
    \              var level = paren_stack.Pop();\n                paren_levels.RemoveAt(level);\n\
    \            }\n        }\n        return paren_levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            }\n            else if (c == ')') {\n                level--;\n \
    \               if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        List<long> result = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool inParen = false;\n        foreach (char c in paren_string) {\n    \
    \        if (c == '(') {\n                inParen = true;\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                inParen = false;\n      \
    \          long level = stack.Pop();\n                if (level > 0) {\n     \
    \               result.Add(level);\n                }\n            } else if (inParen)\
    \ {\n                level++;\n            }\n        }\n        return result;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        bool\
    \ in_paren = false;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                in_paren = true;\n                stack.Add(0);\n\
    \            }\n            else if (c == ')') {\n                long level =\
    \ stack.Pop();\n                while (level > 0) {\n                    level--;\n\
    \                    stack.Push(level);\n                }\n                in_paren\
    \ = false;\n            }\n            else if (in_paren) {\n                sb.Append(c);\n\
    \            }\n        }\n        string s = sb.ToString();\n        long level\
    \ = 0;\n        foreach (char c in s) {\n            if (c == '(') {\n       \
    \         level++;\n            }\n            else if (c == ')') {\n        \
    \        level--;\n            }\n            else if (level == 0) {\n       \
    \         levels.Add(level);\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        bool inParen = false;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          inParen = true;\n                stack.Add(level);\n            } else\
    \ if (c == ')') {\n                inParen = false;\n                level = (long)stack.Pop();\n\
    \            } else if (inParen) {\n                level++;\n            }\n\
    \        }\n        levels.Add(level);\n        return levels;", "        List<long>\
    \ result = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool inParen = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                inParen =\
    \ true;\n                stack.Add(level);\n                level++;\n       \
    \     } else if (c == ')') {\n                inParen = false;\n             \
    \   long level = stack.Pop();\n                while (level > 0) {\n         \
    \           result.Add(level);\n                    level--;\n               \
    \ }\n            } else if (c == ' ') {\n                inParen = false;\n  \
    \          } else if (c == '(' || c == ')') {\n                inParen = false;\n\
    \            } else if (c == '[') {\n                inParen = true;\n       \
    \     } else if (c == ']') {\n                inParen = false;\n            }\
    \ else if (c == '{') {\n                inParen = true;\n            } else if\
    \ (c == '}') {\n                inParen = false;\n            } else if (c ==\
    \ '+') {\n                inParen = true;\n            } else if (c == '-') {\n\
    \                inParen = true;\n            } else if (c == '*') {\n       \
    \         inParen = true;\n            } else if (c == '/') {\n              \
    \  inParen = true;\n            } else if (c == '%') {\n                inParen\
    \ = true;\n            } else if (c == '!') {\n                inParen = true;\n\
    \            } else if (c == '=') {\n                inParen = true;\n       \
    \     } else if (c == '<') {\n                inParen = true;\n            } else\
    \ if (c == '>') {\n                inParen = true;\n            } else if (c ==\
    \ '|') {\n                inParen = true;\n            } else if (c == '&') {\n\
    \                inParen = true;\n            } else if (c == '~') {\n       \
    \         inParen = true;\n            } else if (c == '^') {\n              \
    \  inParen = true;\n            } else if (c == '%') {\n                inParen\
    \ = true;\n            } else if (c == '~') {\n                inParen = true;\n\
    \            } else if (c == '=') {\n                inParen = true;\n       \
    \     } else if (c == '<') {\n                inParen = true;\n            } else\
    \ if (c == '>') {\n                inParen = true;\n            } else if (c ==\
    \ '|') {\n                inParen = true;\n            } else if (c == '&') {\n\
    \                inParen = true;\n            } else if (c == '~') {\n       \
    \         inParen = true;\n            } else if (c == '^') {\n              \
    \  inParen = true;\n            } else if (c == '%') {\n                inParen\
    \ = true;\n            } else if (c == '~') {\n                inParen = true;\n\
    \            } else if (c == '=') {\n                inParen = true;\n       \
    \     } else if (c == '<') {\n                inParen = true;\n            } else\
    \ if (c == '>') {\n                inParen = true;\n            } else if (c ==\
    \ '|') {\n                inParen = true;\n            } else if (c == '&') {\n\
    \                inParen = true;\n            } else if (c == '~') {\n       \
    \         inParen = true;\n            } else if (c == '^') {\n              \
    \  inParen = true;\n            } else if (c == '%') {\n", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        long level2 = 0;\n        bool inParen = false;\n\
    \        bool inBrace = false;\n        bool inBracket = false;\n        bool\
    \ inBrace2 = false;\n        bool inBracket2 = false;\n        bool inBrace3 =\
    \ false;\n        bool inBracket3 = false;\n        bool inBrace4 = false;\n \
    \       bool inBracket4 = false;\n        bool inBrace5 = false;\n        bool\
    \ inBracket5 = false;\n        bool inBrace6 = false;\n        bool inBracket6\
    \ = false;\n        bool inBrace7 = false;\n        bool inBracket7 = false;\n\
    \        bool inBrace8 = false;\n        bool inBracket8 = false;\n        bool\
    \ inBrace9 = false;\n        bool inBracket9 = false;\n        bool inBrace10\
    \ = false;\n        bool inBracket10 = false;\n        bool inBrace11 = false;\n\
    \        bool inBracket11 = false;\n        bool inBrace12 = false;\n        bool\
    \ inBracket12 = false;\n        bool inBrace13 = false;\n        bool inBracket13\
    \ = false;\n        bool inBrace14 = false;\n        bool inBracket14 = false;\n\
    \        bool inBrace15 = false;\n        bool inBracket15 = false;\n        bool\
    \ inBrace16 = false;\n        bool inBracket16 = false;\n        bool inBrace17\
    \ = false;\n        bool inBracket17 = false;\n        bool inBrace18 = false;\n\
    \        bool inBracket18 = false;\n        bool inBrace19 = false;\n        bool\
    \ inBracket19 = false;\n        bool inBrace20 = false;\n        bool inBracket20\
    \ = false;\n        bool inBrace21 = false;\n        bool inBracket21 = false;\n\
    \        bool inBrace22 = false;\n        bool inBracket22 = false;\n        bool\
    \ inBrace23 = false;\n        bool inBracket23 = false;\n        bool inBrace24\
    \ = false;\n        bool inBracket24 = false;\n        bool inBrace25 = false;\n\
    \        bool inBracket25 = false;\n        bool inBrace26 = false;\n        bool\
    \ inBracket26 = false;\n        bool inBrace27 = false;\n        bool inBracket27\
    \ = false;\n        bool inBrace28 = false;\n        bool inBracket28 = false;\n\
    \        bool inBrace29 = false;\n        bool inBracket29 = false;\n        bool\
    \ inBrace30 = false;\n        bool ", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level -= stack.Pop();\n            }\n       \
    \     levels.Add(level);\n        }\n        return levels;", "        List<long>\
    \ result = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Push(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long popped = stack.Pop();\n                if (popped == level) {\n      \
    \              result.Add(level);\n                }\n            }\n        }\n\
    \        return result;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n            } else if (c == ')') {\n              \
    \  levels.Add(stack.Pop());\n            }\n            level++;\n        }\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n                level++;\n            } else if (c\
    \ == ')') {\n                level--;\n                long new_level = stack.Pop();\n\
    \                if (new_level > level) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            } else if (c == ' ')\
    \ {\n                level--;\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.RemoveAt(stack.Count - 1);\n\
    \            }\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0) {\n                    levels.Add(stack.Count);\n         \
    \       }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long popped_level = stack.Pop();\n                if (level > popped_level)\
    \ {\n                    levels.Add(level);\n                }\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new\
    \ StringBuilder();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                if (stack.Count > 0)\n                    stack.Pop();\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        if (stack.Count > 0)\n            stack.Pop();\n        if (sb.Length\
    \ > 0)\n            levels.Add(stack.Count);\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n                in_paren = true;\n            } else\
    \ if (c == ')') {\n                level--;\n                in_paren = false;\n\
    \            } else if (in_paren) {\n                level++;\n            }\n\
    \        }\n        stack.Pop();\n        levels.Add(level);\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        StringBuilder sb = new StringBuilder();\n        bool in_paren = false;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             in_paren = true;\n                stack.Add(0);\n            } else\
    \ if (c == ')') {\n                long level = stack.Pop();\n               \
    \ levels.Add(level);\n                in_paren = false;\n            } else if\
    \ (c == ' ') {\n                if (in_paren) {\n                    sb.Append(c);\n\
    \                } else {\n                    long level = stack.Pop();\n   \
    \                 levels.Add(level);\n                    sb.Append(c);\n    \
    \            }\n            } else if (c == '(') {\n                stack.Add(0);\n\
    \            } else if (c == ')') {\n                long level = stack.Pop();\n\
    \                levels.Add(level);\n                sb.Append(c);\n         \
    \   }\n        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool inParen = false;\n        bool inBrace = false;\n        bool inBracket\
    \ = false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                inParen = true;\n                stack.Add(level);\n    \
    \            level++;\n            }\n            if (c == ')') {\n          \
    \      inParen = false;\n                level--;\n                long level\
    \ = stack.Pop();\n                while (level > 0) {\n                    level--;\n\
    \                    levels.Add(level);\n                }\n            }\n  \
    \          if (c == '[') {\n                inBracket = true;\n              \
    \  stack.Add(level);\n                level++;\n            }\n            if\
    \ (c == ']') {\n                inBracket = false;\n                level--;\n\
    \                long level = stack.Pop();\n                while (level > 0)\
    \ {\n                    level--;\n                    levels.Add(level);\n  \
    \              }\n            }\n            if (c == '{') {\n               \
    \ inBrace = true;\n                stack.Add(level);\n                level++;\n\
    \            }\n            if (c == '}') {\n                inBrace = false;\n\
    \                level--;\n                long level = stack.Pop();\n       \
    \         while (level > 0) {\n                    level--;\n                \
    \    levels.Add(level);\n                }\n            }\n        }\n       \
    \ return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n            }\n            sb.Append(c);\n        }\n        long level\
    \ = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            else if (c == ')') {\n                in_paren = false;\n\
    \                level--;\n            }\n            else if (in_paren) {\n \
    \               level++;\n            }\n            else {\n                level--;\n\
    \            }\n            if (level == 0) {\n                levels.Add(stack.Count);\n\
    \            }\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n    \
    \            }\n            } else {\n                level = 0;\n           \
    \ }\n        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0)\n  \
    \                  levels.Add(stack.Count);\n                else\n          \
    \          stack.Pop();\n            } else {\n                stack.Pop();\n\
    \            }\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long level_of_nesting = stack[stack.Count - 1];\n                if (level_of_nesting\
    \ > level) {\n                    levels.Add(level);\n                }\n    \
    \            stack.Pop();\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n\
    \                }\n            }\n        }\n        return levels;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            }\n        }\n     \
    \   return levels;", "        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level2 = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(level);\n                level++;\n            } else\
    \ if (c == ')') {\n                level2 = stack.Pop();\n                if (level2\
    \ > level) {\n                    result.Add(level2);\n                }\n   \
    \             level--;\n            }\n        }\n        return result;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        long level = 0;\n       \
    \ foreach (char c in paren_string) {\n            if (c == '(') {\n          \
    \      stack.Add(level);\n                level++;\n            } else if (c ==\
    \ ')') {\n                level--;\n                long level_of_nesting = stack.Count\
    \ - 1;\n                if (level_of_nesting > levels.Count) {\n             \
    \       levels.Add(level_of_nesting);\n                }\n                stack.Pop();\n\
    \            }\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        bool in_paren = false;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                in_paren = true;\n\
    \                stack.Add(level);\n                level++;\n            } else\
    \ if (c == ')') {\n                in_paren = false;\n                level -=\
    \ stack.Pop();\n            } else if (c == ' ') {\n                level = 0;\n\
    \            } else if (c == '(' || c == '[' || c == '{') {\n                level++;\n\
    \            }\n        }\n        levels[level] = stack.Count;\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level_count\
    \ = 0;\n        bool in_paren = false;\n        bool in_group = false;\n     \
    \   bool in_group_open = false;\n        bool in_group_close = false;\n      \
    \  bool in_group_closed = false;\n        bool in_group_opener = false;\n    \
    \    bool in_group_closer = false;\n        bool in_group_opener_close = false;\n\
    \        bool in_group_closer_close = false;\n        bool in_group_opener_closed\
    \ = false;\n        bool in_group_closer_open = false;\n        bool in_group_closer_closed\
    \ = false;\n        bool in_group_opener_open = false;\n        bool in_group_closer_opener\
    \ = false;\n        bool in_group_closer_closer = false;\n        bool in_group_opener_opener\
    \ = false;\n        bool in_group_closer_opener_close = false;\n        bool in_group_closer_closer_close\
    \ = false;\n        bool in_group_opener_opener_close = false;\n        bool in_group_closer_opener_open\
    \ = false;\n        bool in_group_closer_closer_opener = false;\n        bool\
    \ in_group_closer_closer_closer = false;\n        bool in_group_opener_opener_open\
    \ = false;\n        bool in_group_closer_opener_opener = false;\n        bool\
    \ in_group_closer_closer_opener_close = false;\n        bool in_group_closer_closer_closer_close\
    \ = false;\n        bool in_group_opener_opener_open = false;\n        bool in_group_closer_opener_opener\
    \ = false;\n        bool in_group_closer_closer_opener_open = false;\n       \
    \ bool in_group_closer_closer_closer_opener = false;\n        bool in_group_closer_closer_closer_closer\
    \ = false;\n        bool in_group_opener_opener_opener = false;\n        bool\
    \ in_group_closer_opener_opener_open = false;\n        bool in_group_closer_closer_opener_opener\
    \ = false;\n        bool in_group_closer_closer_closer_opener_close = false;\n\
    \        bool in_group_closer_closer_closer_closer_close = false;\n        bool\
    \ in_group_opener_opener_opener = false;\n        bool in_group_closer_opener_opener_open\
    \ = false;\n        bool in_group_closer_closer_opener_opener = false;\n     \
    \   bool in_group_closer_closer_closer_opener_close = false;\n        bool in_group_closer_closer_closer_closer_close\
    \ = false;\n        bool in_group_opener_opener_opener_close = false;\n      \
    \  bool in_group_closer_opener_opener_opener = false;\n", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n    \
    \            }\n            } else if (c == ' ') {\n                level = 0;\n\
    \            }\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  long level = 0;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Remove(stack.Count - 1);\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long level_of_nesting\
    \ = stack.Pop();\n                if (level_of_nesting > level) {\n          \
    \          levels.Add(level);\n                }\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        long level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       } else if (c == ')') {\n                in_paren = false;\n          \
    \      level--;\n            } else if (c == ' ') {\n                if (in_paren)\
    \ {\n                    sb.Append(c);\n                }\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        string s\
    \ = sb.ToString();\n        char[] chars = s.ToCharArray();\n        long max_level\
    \ = 0;\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i]\
    \ == '(') {\n                level++;\n            } else if (chars[i] == ')')\
    \ {\n                level--;\n            }\n            if (level > max_level)\
    \ {\n                max_level = level;\n            }\n        }\n        levels.Add(max_level);\n\
    \        return levels;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n                level++;\n            } else if (c\
    \ == ')') {\n                level--;\n                if (level == 0) {\n   \
    \                 levels.Add(stack.Count);\n                }\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long level_of_nesting\
    \ = stack.Pop();\n                if (level_of_nesting > level) {\n          \
    \          levels.Add(level);\n                }\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        long level = 0;\n       \
    \ bool in_paren = false;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \                level++;\n            }\n            if (c == ')') {\n      \
    \          level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                    in_paren = false;\n                }\n            }\n   \
    \     }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Add(0);\n            } else if (c == ')')\
    \ {\n                long level = stack.Pop();\n                while (level >\
    \ 0) {\n                    levels.Add(level);\n                    level--;\n\
    \                }\n            }\n            sb.Append(c);\n        }\n    \
    \    long level = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            if (c == ')') {\n                in_paren = false;\n  \
    \              level--;\n            }\n            if (in_paren) {\n        \
    \        level++;\n            }\n        }\n        levels.Add(level);\n    \
    \    while (stack.Count > 0) {\n            levels[stack.Count-1]--;\n       \
    \     stack.Pop();\n        }\n        return levels;", "        List<long> levels\
    \ = new List<long>();\n        Stack<long> stack = new Stack<long>();\n      \
    \  StringBuilder sb = new StringBuilder();\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(0);\n            }\
    \ else if (c == ')') {\n                long level = stack.Pop();\n          \
    \      while (level > 0) {\n                    levels.Add(level);\n         \
    \           level--;\n                }\n                sb.Append(c);\n     \
    \       } else if (c == '(') {\n                stack.Add(1);\n            } else\
    \ if (c == ')') {\n                long level = stack.Pop();\n               \
    \ while (level > 0) {\n                    levels.Add(level);\n              \
    \      level--;\n                }\n                sb.Append(c);\n          \
    \  } else {\n                sb.Append(c);\n            }\n        }\n       \
    \ long level = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        StringBuilder sb = new StringBuilder();\n        bool in_paren = false;\n\
    \        bool in_brace = false;\n        bool in_brace2 = false;\n        bool\
    \ in_brace3 = false;\n        bool in_brace4 = false;\n        bool in_brace5\
    \ = false;\n        bool in_brace6 = false;\n        bool in_brace7 = false;\n\
    \        bool in_brace8 = false;\n        bool in_brace9 = false;\n        bool\
    \ in_brace10 = false;\n        bool in_brace11 = false;\n        bool in_brace12\
    \ = false;\n        bool in_brace13 = false;\n        bool in_brace14 = false;\n\
    \        bool in_brace15 = false;\n        bool in_brace16 = false;\n        bool\
    \ in_brace17 = false;\n        bool in_brace18 = false;\n        bool in_brace19\
    \ = false;\n        bool in_brace20 = false;\n        bool in_brace21 = false;\n\
    \        bool in_brace22 = false;\n        bool in_brace23 = false;\n        bool\
    \ in_brace24 = false;\n        bool in_brace25 = false;\n        bool in_brace26\
    \ = false;\n        bool in_brace27 = false;\n        bool in_brace28 = false;\n\
    \        bool in_brace29 = false;\n        bool in_brace30 = false;\n        bool\
    \ in_brace31 = false;\n        bool in_brace32 = false;\n        bool in_brace33\
    \ = false;\n        bool in_brace34 = false;\n        bool in_brace35 = false;\n\
    \        bool in_brace36 = false;\n        bool in_brace37 = false;\n        bool\
    \ in_brace38 = false;\n        bool in_brace39 = false;\n        bool in_brace40\
    \ = false;\n        bool in_brace41 = false;\n        bool in_brace42 = false;\n\
    \        bool in_brace43 = false;\n        bool in_brace44 = false;\n        bool\
    \ in_brace45 = false;\n        bool in_brace46 = false;\n        bool in_brace47\
    \ = false;\n        bool in_brace48 = false;\n        bool in_brace49 = false;\n\
    \        bool in_brace50 = false;\n        bool in_brace51 = false;\n        bool\
    \ in_brace52 = false;\n        bool in_brace53 = false;\n        bool in_brace54\
    \ = false;\n        bool in_brace55 = false;\n        bool in_brace56 = false;\n\
    \        bool in_brace57 = false;\n        bool in_brace58 = false;\n        bool\
    \ in_brace59 = false;\n        bool in_brace60 = false;\n        bool in_brace61\
    \ = false;\n        bool in_brace62 = false;\n        bool in_brace63 = false;\n\
    \        bool in_brace64 = false;\n        bool in_brace65 = false;\n        bool\
    \ in_brace66 = false;\n        ", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new\
    \ StringBuilder();\n        bool in_paren = false;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                in_paren = true;\n\
    \                stack.Add(0);\n            }\n            else if (c == ')')\
    \ {\n                long level = stack.Pop();\n                while (level >\
    \ 0) {\n                    level--;\n                    stack.Push(level);\n\
    \                }\n                in_paren = false;\n            }\n       \
    \     else if (in_paren) {\n                sb.Append(c);\n            }\n   \
    \     }\n        string s = sb.ToString();\n        char[] chars = s.ToCharArray();\n\
    \        List<long> result = new List<long>();\n        foreach (char c in chars)\
    \ {\n            if (c == '(') {\n                result.Add(0);\n           \
    \ }\n            else if (c == ')') {\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    level--;\n         \
    \           stack.Push(level);\n                }\n            }\n           \
    \ else {\n                long level = stack.Pop();\n                while (level\
    \ > 0) {\n                    level--;\n                    stack.Push(level);\n\
    \                }\n                result.Add(1);\n            }\n        }\n\
    \        return result;", "        List<long> levels = new List<long>();\n   \
    \     Stack<long> stack = new Stack<long>();\n        long level = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       stack.Add(level);\n                level++;\n            }\n         \
    \   else if (c == ')') {\n                level--;\n                if (level\
    \ == 0) {\n                    levels.Add(stack.Count);\n                }\n \
    \               stack.Pop();\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        var levels = new List<long>();\n    \
    \    var stack = new Stack<long>();\n        var level = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Push(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                stack.Pop();\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> level = new\
    \ Stack<long>();\n        long level_count = 0;\n        bool is_open = false;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             is_open = true;\n                level.Add(level_count);\n     \
    \           level_count++;\n            } else if (c == ')') {\n             \
    \   is_open = false;\n                long level_top = level.Count;\n        \
    \        while (level_top > 0 && level[level_top - 1] == level_top) {\n      \
    \              level_top--;\n                }\n                level_count =\
    \ level[level_top];\n                levels.Add(level_count);\n              \
    \  level.RemoveAt(level_top);\n            } else if (is_open) {\n           \
    \     level_count++;\n            }\n        }\n        return levels;", "   \
    \     List<long> levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else if (level == stack.Count)\n                    levels.Add(level);\n\
    \                else\n                    levels.Add(stack.Count);\n        \
    \        stack.Pop();\n            }\n        }\n        return levels;", "  \
    \      List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          }\n        }\n        return levels;", "        List<long> result =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n            } else if (c == ')')\
    \ {\n                long level = stack.Pop();\n                if (level > result.Count)\
    \ {\n                    result.Add(level);\n                }\n            }\n\
    \        }\n        return result;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     bool in_paren = false;\n        foreach (char c in paren_string) {\n   \
    \         if (c == '(') {\n                in_paren = true;\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  in_paren = false;\n                long new_level = stack.Pop();\n        \
    \        if (new_level != level) {\n                    throw new Exception(\"\
    Mismatched parentheses\");\n                }\n                level--;\n    \
    \        } else if (c == ' ') {\n                if (in_paren) {\n           \
    \         throw new Exception(\"Mismatched parentheses\");\n                }\n\
    \            } else {\n                throw new Exception(\"Invalid character\"\
    );\n            }\n        }\n        if (stack.Count != 0) {\n            throw\
    \ new Exception(\"Mismatched parentheses\");\n        }\n        return levels;"]
stop_tokens:
- "\n    }\n"
