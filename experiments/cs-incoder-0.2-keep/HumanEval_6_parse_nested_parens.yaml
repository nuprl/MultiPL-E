name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
  \ paren_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        long level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            else if (c == ')') {\n                in_paren = false;\n\
    \                level--;\n            }\n            else if (in_paren) {\n \
    \               sb.Append(c);\n            }\n        }\n        string s = sb.ToString();\n\
    \        char[] chars = s.ToCharArray();\n        foreach (char c in chars) {\n\
    \            if (c == '(') {\n                level++;\n            }\n      \
    \      else if (c == ')') {\n                level--;\n            }\n       \
    \ }\n        levels.Add(level);\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n    \
    \            }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0) {\n                    levels.Add(stack.Count);\n         \
    \       }\n            }\n        }\n        return levels;", "        List<long>\
    \ levels = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  long level_of_nesting = stack.Count - 1;\n                if (level_of_nesting\
    \ > level) {\n                    levels.Add(level_of_nesting);\n            \
    \    }\n                stack.Pop();\n            }\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (stack.Count > 0\
    \ && stack.Peek() == level) {\n                    levels.Add(level);\n      \
    \          }\n            } else if (c == ' ') {\n                if (stack.Count\
    \ > 0) {\n                    levels.Add(level);\n                }\n        \
    \    }\n        }\n        if (stack.Count > 0) {\n            levels.Add(level);\n\
    \        }\n        return levels;", "        List<long> result = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long popped = stack.Pop();\n\
    \                if (popped == level) {\n                    result.Add(level);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> levels = new List<long>();\n        Stack<long> levels_stack =\
    \ new Stack<long>();\n        long level = 0;\n        bool in_paren = false;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             in_paren = true;\n                levels_stack.Push(level);\n  \
    \              level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (levels_stack.Count > level) {\n                    levels.Add(levels_stack.Pop());\n\
    \                }\n                in_paren = false;\n            } else if (in_paren)\
    \ {\n                level++;\n            }\n        }\n        return levels;",
  "        List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                stack.Add(0);\n\
    \            } else if (c == ')') {\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    levels.Add(level);\n\
    \                    level--;\n                }\n            }\n            sb.Append(c);\n\
    \        }\n        long level = stack.Pop();\n        while (level > 0) {\n \
    \           levels.Add(level);\n            level--;\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        bool in_group = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.Add(level);\n            } else if (c == ')') {\n              \
    \  in_paren = false;\n                level = (long)stack.Pop();\n           \
    \ } else if (c == '(') {\n                in_group = true;\n            } else\
    \ if (c == ')') {\n                in_group = false;\n            } else if (in_group)\
    \ {\n                level++;\n            } else if (in_paren) {\n          \
    \      level--;\n            }\n            levels.Add(level);\n        }\n  \
    \      return levels;", "        List<long> levels = new List<long>();\n     \
    \   Stack<long> stack = new Stack<long>();\n        long level = 0;\n        bool\
    \ is_open = false;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                is_open = true;\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                is_open = false;\n      \
    \          level = (stack.Count > 0) ? stack.Pop() : -1;\n            } else if\
    \ (is_open) {\n                level++;\n            }\n            levels.Add(level);\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long new_level = stack.Pop();\n\
    \                if (new_level > level) {\n                    levels[levels.Count\
    \ - 1] = new_level;\n                }\n            }\n        }\n        return\
    \ levels;", "        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.RemoveAt(stack.Count - 1);\n\
    \            } else if (c == ' ') {\n                level = 0;\n            }\n\
    \        }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0)\n  \
    \                  levels.Add(stack.Count);\n                else\n          \
    \          stack.Pop();\n            }\n        }\n        return levels;", " \
    \       List<long> levels = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long level = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Add(level);\n        \
    \        level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            } else if (c == ' ') {\n                if (level\
    \ > 0) {\n                    levels.Add(stack.Count);\n                }\n  \
    \          }\n        }\n        return levels;", "        List<long> levels =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ level = 0;\n        foreach (char c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Add(level);\n                level++;\n      \
    \      } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0)\n                    levels.Add(stack.Count);\n                else\n\
    \                    stack.Pop();\n            } else if (c == ' ') {\n      \
    \          if (level > 0)\n                    stack.Pop();\n            }\n \
    \       }\n        return levels;", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                if (level == 0) {\n\
    \                    levels.Add(stack.Count);\n                }\n           \
    \ } else if (c == ' ') {\n                if (level == 0) {\n                \
    \    levels.Add(stack.Count);\n                }\n            }\n        }\n \
    \       return levels;", "        List<long> levels = new List<long>();\n    \
    \    Stack<long> stack = new Stack<long>();\n        long level = 0;\n       \
    \ long paren_level = 0;\n        bool in_paren = false;\n        bool in_bracket\
    \ = false;\n        bool in_brace = false;\n        bool in_curly_bracket = false;\n\
    \        bool in_curly_brace = false;\n        bool in_square_bracket = false;\n\
    \        bool in_square_brace = false;\n        bool in_curly_square_bracket =\
    \ false;\n        bool in_curly_square_brace = false;\n        bool in_square_curly_bracket\
    \ = false;\n        bool in_square_curly_brace = false;\n        bool in_curly_square_curly_bracket\
    \ = false;\n        bool in_curly_square_curly_brace = false;\n        bool in_square_curly_square_bracket\
    \ = false;\n        bool in_square_curly_square_brace = false;\n        bool in_curly_square_curly_square_bracket\
    \ = false;\n        bool in_curly_square_curly_square_brace = false;\n       \
    \ bool in_square_curly_square_curly_bracket = false;\n        bool in_square_curly_square_curly_brace\
    \ = false;\n        bool in_curly_square_curly_square_curly_bracket = false;\n\
    \        bool in_curly_square_curly_square_curly_brace = false;\n        bool\
    \ in_square_curly_square_curly_square_bracket = false;\n        bool in_square_curly_square_curly_square_brace\
    \ = false;\n        bool in_curly_square_curly_square_curly_square_bracket = false;\n\
    \        bool in_curly_square_curly_square_curly_square_brace = false;\n     \
    \   bool in_square_curly_square_curly_square_curly_bracket = false;\n        bool\
    \ in_square_curly_square_curly_square_curly_brace = false;\n        bool in_curly_square_curly_square_curly_square_curly_bracket\
    \ = false;\n        bool in_square_curly_square_curly_square_curly_brace = false;\n\
    \        bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n\
    \        bool in_square_curly_square_curly_square_curly_brace = false;\n     \
    \   bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n  \
    \      bool in_square_curly_square_curly_square_curly_brace = false;\n       \
    \ bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n    \
    \    bool in_square_curly_square", "        List<long> levels = new List<long>();\n\
    \        Stack<long> stack = new Stack<long>();\n        long level = 0;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          stack.Add(level);\n                level++;\n            } else if\
    \ (c == ')') {\n                level--;\n                long level_of_nesting\
    \ = stack.Count > 0 ? stack.Pop() : -1;\n                if (level_of_nesting\
    \ > level) {\n                    levels.Add(level);\n                }\n    \
    \        }\n        }\n        return levels;"]
stop_tokens:
- "\n    }\n"
