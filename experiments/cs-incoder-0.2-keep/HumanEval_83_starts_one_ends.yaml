name: HumanEval_83_starts_one_ends
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return the count of the numbers\
  \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
  \ long StartsOneEnds(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
  \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
  \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
  \ == (18000L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        long limit = n;\n        long start\
    \ = 1;\n        long end = 1;\n        while (limit > 0) {\n            long remainder\
    \ = limit % 10;\n            limit = limit / 10;\n            if (remainder ==\
    \ 1) {\n                count++;\n                if (start == 1) {\n        \
    \            start = limit;\n                } else {\n                    end\
    \ = limit;\n                }\n            }\n        }\n        return count;",
  "        long count = 0;\n        long digit = n;\n        while (digit > 0) {\n\
    \            count++;\n            digit /= 10;\n        }\n        digit = n;\n\
    \        while (digit > 0) {\n            if (digit % 10 == 1) {\n           \
    \     count++;\n            }\n            digit /= 10;\n        }\n        return\
    \ count;", "        long count = 0;\n        long start = 1;\n        while (start\
    \ <= n) {\n            long end = start;\n            while (end < n) {\n    \
    \            end *= 10;\n            }\n            if (start == end) {\n    \
    \            count++;\n            }\n            start++;\n        }\n      \
    \  return count;", "        long count = 0;\n        long limit = n;\n       \
    \ while (limit > 0) {\n            long digit = limit % 10;\n            if (digit\
    \ == 1) {\n                count++;\n            }\n            limit /= 10;\n\
    \        }\n        return count;", "        long count = 0;\n        long limit\
    \ = Math.Pow(10, n);\n        long start = 1;\n        long end = 1;\n       \
    \ while (start <= limit) {\n            long temp = start;\n            while\
    \ (temp < end) {\n                count++;\n                temp++;\n        \
    \    }\n            temp = end;\n            while (temp > start) {\n        \
    \        count++;\n                temp--;\n            }\n            start++;\n\
    \            end++;\n        }\n        return count;", "        long count =\
    \ 0;\n        long limit = n;\n        while (limit > 0) {\n            long digit\
    \ = limit % 10;\n            if (digit == 1) {\n                count++;\n   \
    \         }\n            limit = limit / 10;\n        }\n        return count;",
  "        long count = 0;\n        long ones = 0;\n        long tens = 0;\n     \
    \   long hundreds = 0;\n        long thousands = 0;\n        long tenThousands\
    \ = 0;\n        long oneThousands = 0;\n        long oneHundreds = 0;\n      \
    \  long oneThousandHundreds = 0;\n        long oneHundredThousands = 0;\n    \
    \    long oneHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundred",
  "        long count = 0;\n        long m = n;\n        while (m > 0) {\n       \
    \     long r = m % 10;\n            if (r == 1) {\n                count++;\n\
    \            }\n            m = m / 10;\n        }\n        return count;", " \
    \       long count = 0;\n        long limit = n;\n        long last = 1;\n   \
    \     while (limit > 0) {\n            long digit = limit % 10;\n            if\
    \ (digit == 1) {\n                count++;\n            }\n            limit =\
    \ limit / 10;\n        }\n        return count;", "        long count = 0;\n \
    \       long limit = n;\n        while (limit > 0) {\n            long digit =\
    \ limit % 10;\n            if (digit == 1) {\n                count++;\n     \
    \       }\n            limit /= 10;\n        }\n        return count;", "    \
    \    long count = 0;\n        long limit = n;\n        while (limit > 0) {\n \
    \           long digit = limit % 10;\n            if (digit == 1) {\n        \
    \        count++;\n            }\n            limit = limit / 10;\n        }\n\
    \        return count;", "        long count = 0;\n        long start = 1;\n \
    \       long end = 1;\n        while (n > 1) {\n            long temp = n;\n \
    \           while (temp > 1) {\n                temp = temp / 10;\n          \
    \  }\n            if (temp == 1) {\n                count++;\n               \
    \ end = temp;\n            }\n            else {\n                start = temp;\n\
    \            }\n            n = n - 1;\n        }\n        return count;", " \
    \       long count = 0;\n        long lastDigit = n % 10;\n        long lastDigitCount\
    \ = 1;\n        long lastDigitCountDigit = 1;\n        long lastDigitCountDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigitDigitDigit\
    \ = 1;\n        long lastDigitCountDigitDigitDigit = 1;\n        long lastDigitCountDigit",
  "        long count = 0;\n        long digit = n;\n        while (digit > 0) {\n\
    \            long remainder = digit % 10;\n            if (remainder == 1) {\n\
    \                count++;\n            }\n            digit = digit / 10;\n  \
    \      }\n        return count;", "        long count = 0;\n        long digit\
    \ = n;\n        while (digit > 0) {\n            count++;\n            digit /=\
    \ 10;\n        }\n        return count;", "        long count = 0;\n        long\
    \ x = n;\n        while (x > 0) {\n            long y = x % 10;\n            if\
    \ (y == 1) {\n                count++;\n            }\n            x = x / 10;\n\
    \        }\n        return count;", "        long count = 0;\n        long start\
    \ = 1;\n        long end = 1;\n        while (n > 0) {\n            if (n % 10\
    \ == 1) {\n                count++;\n                end = start * 10;\n     \
    \           start = end + 1;\n            } else {\n                end = end\
    \ * 10 + 1;\n            }\n            n /= 10;\n        }\n        return count;",
  "        long count = 0;\n        long lastDigit = n % 10;\n        long lastDigitCount\
    \ = 0;\n        long lastDigitStart = 0;\n        long lastDigitEnd = 0;\n   \
    \     long lastDigitStartOne = 0;\n        long lastDigitEndOne = 0;\n       \
    \ long lastDigitStartTwo = 0;\n        long lastDigitEndTwo = 0;\n        long\
    \ lastDigitStartThree = 0;\n        long lastDigitEndThree = 0;\n        long\
    \ lastDigitStartFour = 0;\n        long lastDigitEndFour = 0;\n        long lastDigitStartFive\
    \ = 0;\n        long lastDigitEndFive = 0;\n        long lastDigitStartSix = 0;\n\
    \        long lastDigitEndSix = 0;\n        long lastDigitStartSeven = 0;\n  \
    \      long lastDigitEndSeven = 0;\n        long lastDigitStartEight = 0;\n  \
    \      long lastDigitEndEight = 0;\n        long lastDigitStartNine = 0;\n   \
    \     long lastDigitEndNine = 0;\n        long lastDigitStartTen = 0;\n      \
    \  long lastDigitEndTen = 0;\n        long lastDigitStartEleven = 0;\n       \
    \ long lastDigitEndEleven = 0;\n        long lastDigitStartTwelve = 0;\n     \
    \   long lastDigitEndTwelve = 0;\n        long lastDigitStartThirteen = 0;\n \
    \       long lastDigitEndThirteen = 0;\n        long lastDigitStartFourteen =\
    \ 0;\n        long lastDigitEndFourteen = 0;\n        long lastDigitStartFifteen\
    \ = 0;\n        long lastDigitEndFifteen = 0;\n        long lastDigitStartSixteen\
    \ = 0;\n        long lastDigitEndSixteen = 0;\n        long lastDigitStartSeventeen\
    \ = 0;\n        long lastDigitEndSeventeen = 0;\n        long lastDigitStartEighteen\
    \ = 0;\n        long lastDigitEndEighteen = 0;\n        long lastDigitStartNineteen\
    \ = 0;\n        long lastDigitEndNineteen = 0;\n        long lastDigitStartTwenty\
    \ = 0;\n        long lastDigitEndTwenty = 0;\n        long lastDigitStartThirty\
    \ = 0;\n        long lastDigitEndThirty = 0;\n        long lastDigitStartForty\
    \ = 0;\n        long lastDigitEndForty = 0;\n        long lastDigitStartFifty\
    \ = 0;\n        long lastDigitEndFifty = 0;\n        long lastDigitStartSixty\
    \ = 0;\n        long lastDigitEndSixty = 0;\n        long lastDigitStartSeventy\
    \ = 0;\n        long lastDigitEndSeventy = 0;\n        long lastDigitStartEighty\
    \ = 0;\n        long lastDigitEndEighty = 0;", "        long count = 0;\n    \
    \    long start = 1;\n        while (start <= n) {\n            if (n % start\
    \ == 0) {\n                count++;\n            }\n            start++;\n   \
    \     }\n        return count;", "        long count = 0;\n        long one =\
    \ 1;\n        while (n > 1) {\n            count += (n/one);\n            n -=\
    \ (n/one)*one;\n            one = one * 10;\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
