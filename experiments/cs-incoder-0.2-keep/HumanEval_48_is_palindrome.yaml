name: HumanEval_48_is_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n\
  \    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
  \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    public static\
  \ bool IsPalindrome(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
  \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
  \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
  \    }\n\n}\n"
completions: ["        if (string.IsNullOrEmpty(text))\n            return true;\n\
    \        char[] charArray = text.ToCharArray();\n        int length = charArray.Length;\n\
    \        int half = length / 2;\n        for (int i = 0; i < half; i++) {\n  \
    \          if (charArray[i] != charArray[length - 1 - i])\n                return\
    \ false;\n        }\n        return true;", "        if (text == null || text.Length\
    \ <= 1)\n            return true;\n        var firstChar = text[0];\n        var\
    \ lastChar = text[text.Length - 1];\n        return firstChar == lastChar\n  \
    \          ? IsPalindrome(text.Substring(1, text.Length - 1))\n            : false;",
  "        if (text == null || text.Length <= 1)\n            return true;\n     \
    \   var firstChar = text[0];\n        var lastChar = text[text.Length - 1];\n\
    \        if (firstChar == lastChar)\n            return true;\n        if (firstChar\
    \ != lastChar)\n            return false;\n        return IsPalindrome(text.Substring(1,\
    \ text.Length - 2));", "        string reversed = new StringBuilder(text).Reverse().ToString();\n\
    \        return text == reversed;", "        if (text == null || text.Length <=\
    \ 1)\n            return true;\n        char[] charArray = text.ToCharArray();\n\
    \        Array.Reverse(charArray);\n        return string.Join(\"\", charArray)\
    \ == text;", "        if (text == null || text.Length <= 1)\n            return\
    \ true;\n        if (text.Length == 1)\n            return true;\n        if (text.Length\
    \ == 2)\n            return true;\n        if (text.Length % 2 == 0)\n       \
    \     return true;\n        string reverse = text.Reverse().ToString();\n    \
    \    if (text == reverse)\n            return true;\n        return false;", " \
    \       char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        string reverse = new string(charArray);\n        return text == reverse;",
  "        if (string.IsNullOrEmpty(text))\n            return true;\n        var\
    \ reversed = new StringBuilder(text).Reverse().ToString();\n        return text\
    \ == reversed;", "        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return charArray.SequenceEqual(text);", "        if (string.IsNullOrEmpty(text))\n\
    \            return true;\n        int length = text.Length;\n        int half\
    \ = length / 2;\n        for (int i = 0; i < half; i++)\n            if (text[i]\
    \ != text[length - 1 - i])\n                return false;\n        return true;",
  "        if (text == null)\n            return false;\n        int length = text.Length;\n\
    \        if (length < 2)\n            return true;\n        if (length == 1)\n\
    \            return true;\n        if (text.Length % 2 == 0)\n            return\
    \ false;\n        string leftHalf = text.Substring(0, length / 2);\n        string\
    \ rightHalf = text.Substring(length / 2, length);\n        return leftHalf ==\
    \ rightHalf;", "        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        string reverse = new string(charArray);\n        return text == reverse;",
  "        if (text == null || text.Length <= 1)\n            return true;\n     \
    \   var reversed = new StringBuilder(text);\n        reversed.Reverse();\n   \
    \     return text == reversed.ToString();", "        if (text == null || text.Length\
    \ <= 1) {\n            return true;\n        }\n        char[] charArray = text.ToCharArray();\n\
    \        Array.Reverse(charArray);\n        string reverse = new string(charArray);\n\
    \        return text == reverse;", "        if (text == null || text.Length <=\
    \ 1)\n            return true;\n        char[] chars = text.ToCharArray();\n \
    \       Array.Sort(chars);\n        string reverse = new string(chars);\n    \
    \    return text == reverse;", "        if (string.IsNullOrEmpty(text))\n    \
    \        return true;\n        var reversed = new StringBuilder(text);\n     \
    \   reversed.Reverse();\n        return text == reversed.ToString();", "     \
    \   if (string.IsNullOrEmpty(text))\n            return true;\n        if (text.Length\
    \ == 1)\n            return true;\n        if (text.Length == 2)\n           \
    \ return text[0] == text[1];\n        bool isPalindrome = true;\n        char[]\
    \ chars = text.ToCharArray();\n        for (int i = 0; i < chars.Length / 2; i++)\
    \ {\n            if (chars[i] != chars[chars.Length - i - 1]) {\n            \
    \    isPalindrome = false;\n                break;\n            }\n        }\n\
    \        return isPalindrome;", "        if (string.IsNullOrEmpty(text))\n   \
    \         return true;\n        var reversed = new StringBuilder(text);\n    \
    \    reversed.Reverse();\n        return text == reversed.ToString();", "    \
    \    if (text == null || text.Length <= 1)\n            return true;\n       \
    \ char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return charArray.SequenceEqual(charArray);", "        if (string.IsNullOrEmpty(text))\n\
    \            return true;\n        var chars = text.ToCharArray();\n        var\
    \ reverse = new StringBuilder();\n        foreach (var c in chars)\n         \
    \   reverse.Append(c);\n        return string.Compare(reverse.ToString(), text,\
    \ StringComparison.OrdinalIgnoreCase) == 0;"]
stop_tokens:
- "\n    }\n"
