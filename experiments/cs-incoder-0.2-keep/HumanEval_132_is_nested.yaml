name: HumanEval_132_is_nested
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a string as input which contains\
  \ only square brackets.\n    // The function should return True if and only if there\
  \ is a valid subsequence of brackets \n    // where at least one bracket in the\
  \ subsequence is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
  \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]') \u279E\
  \ False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[') \u279E\
  \ True\n    public static bool IsNested(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"\
  [[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n\
  \    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"\
  []\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n   \
  \ Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n  \
  \  Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n  \
  \  Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\"\
  )) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\
  \n}\n"
completions: ["        bool isNested = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        isNested = true;\n                 \
    \   }\n                }\n            }\n        }\n        return isNested;",
  "        bool isNested = true;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top != '[') {\n                        isNested = false;\n                \
    \    }\n                }\n            }\n        }\n        return isNested;",
  "        bool result = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        stack.Push(c);\n                   \
    \ } else if (top == ']') {\n                        result = true;\n         \
    \               break;\n                    }\n                }\n           \
    \ }\n        }\n        return result;", "        bool result = false;\n     \
    \   Stack<char> stack = new Stack<char>();\n        foreach (char c in str) {\n\
    \            if (c == '[') {\n                stack.Push(c);\n            } else\
    \ if (c == ']') {\n                if (stack.Count > 0) {\n                  \
    \  char top = stack.Pop();\n                    if (top == '[') {\n          \
    \              stack.Push(c);\n                    } else if (top == ']') {\n\
    \                        result = true;\n                    }\n             \
    \   }\n            }\n        }\n        return result;", "        bool isNested\
    \ = true;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count == 0) {\n\
    \                    isNested = false;\n                    break;\n         \
    \       }\n                char top = stack.Pop();\n                if (top !=\
    \ '[') {\n                    isNested = false;\n                    break;\n\
    \                }\n                stack.Remove(top);\n            } else {\n\
    \                isNested = false;\n                break;\n            }\n  \
    \      }\n        return isNested;", "        // Your code here\n        bool\
    \ result = false;\n        Stack<char> stack = new Stack<char>();\n        foreach\
    \ (char c in str) {\n            if (c == '[') {\n                stack.Push(c);\n\
    \            } else if (c == ']') {\n                if (stack.Count > 0) {\n\
    \                    char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        result = true;\n                    }\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  bool result = false;\n        Stack<char> stack = new Stack<char>();\n    \
    \    foreach (char c in str) {\n            if (c == '[') {\n                stack.Push(c);\n\
    \            } else if (c == ']') {\n                if (stack.Count > 0) {\n\
    \                    char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else {\n  \
    \                      result = true;\n                    }\n               \
    \ }\n            } else if (stack.Count > 0) {\n                char top = stack.Pop();\n\
    \                if (top == ']') {\n                    stack.Push(c);\n     \
    \           } else {\n                    result = true;\n                }\n\
    \            }\n        }\n        return result;", "        bool result = false;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == ']') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top == '[') {\n   \
    \                     stack.Push(c);\n                    } else if (top == ']')\
    \ {\n                        result = true;\n                    }\n         \
    \       }\n            }\n        }\n        return result;", "        Stack<char>\
    \ stack = new Stack<char>();\n        bool found = false;\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        found = true;\n                    }\n          \
    \      }\n            }\n        }\n        return found;", "        bool isNested\
    \ = false;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        isNested = true;\n                    }\n       \
    \         }\n            }\n        }\n        return isNested;", "        bool\
    \ result = false;\n        Stack<char> stack = new Stack<char>();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            if (str[i] == '[') {\n     \
    \           stack.push('[');\n            }\n            if (str[i] == ']') {\n\
    \                if (stack.Count == 0) {\n                    result = true;\n\
    \                } else {\n                    stack.pop();\n                }\n\
    \            }\n        }\n        return result;", "        Stack<char> stack\
    \ = new Stack<char>();\n        bool result = false;\n        foreach (char c\
    \ in str) {\n            if (c == '[') {\n                stack.Push(c);\n   \
    \         } else if (c == ']') {\n                if (stack.Count > 0) {\n   \
    \                 char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        Stack<char> stack = new Stack<char>();\n        bool isNested\
    \ = true;\n        foreach (char c in str) {\n            if (c == '[') {\n  \
    \              stack.Push(c);\n            } else if (c == ']') {\n          \
    \      if (stack.Count > 0) {\n                    char top = stack.Pop();\n \
    \                   if (top != '[') {\n                        isNested = false;\n\
    \                    }\n                }\n            } else {\n            \
    \    if (stack.Count > 0) {\n                    char top = stack.Pop();\n   \
    \                 if (top != '[' && top != ']') {\n                        isNested\
    \ = false;\n                    }\n                }\n                stack.Push(c);\n\
    \            }\n        }\n        return isNested;", "        bool result = false;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == ']') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top == '[') {\n   \
    \                     stack.Push(top);\n                    } else if (top ==\
    \ ']') {\n                        result = true;\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        bool\
    \ result = false;\n        Stack<char> stack = new Stack<char>();\n        foreach\
    \ (char c in str) {\n            if (c == '[') {\n                stack.Push(c);\n\
    \            } else if (c == ']') {\n                if (stack.Count > 0) {\n\
    \                    char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else {\n  \
    \                      result = true;\n                    }\n               \
    \ }\n            }\n        }\n        return result;", "        bool result =\
    \ false;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        bool isNested = false;\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in str) {\n            if (c == '[') {\n            \
    \    stack.Push(c);\n            } else if (c == ']') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '[') {\n                        isNested = true;\n                 \
    \   } else if (top == ']') {\n                        isNested = false;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ isNested;", "        if (str == null || str.Length == 0)\n            return\
    \ false;\n        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in str) {\n            if (c == '[') {\n                stack.Push(c);\n \
    \           } else if (c == ']') {\n                if (stack.Count > 0) {\n \
    \                   char top = stack.Pop();\n                    if (top == '[')\
    \ {\n                        stack.Push(c);\n                    } else if (top\
    \ == ']') {\n                        stack.Push(c);\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;", "        if (str == null || str.Length == 0) return false;\n\
    \        bool found = false;\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (str[i] == '[') {\n                found = true;\n           \
    \ }\n            if (str[i] == ']') {\n                if (found) {\n        \
    \            found = false;\n                } else {\n                    return\
    \ false;\n                }\n            }\n        }\n        return found;",
  "        Stack<char> stack = new Stack<char>();\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                stack.Push(c);\n           \
    \ } else if (c == ']') {\n                if (stack.Count > 0) {\n           \
    \         char top = stack.Pop();\n                    if (top == '[') {\n   \
    \                     return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
