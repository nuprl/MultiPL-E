name: HumanEval_21_rescale_to_unit
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given list of numbers (of at least two elements), apply a linear\
  \ transform to that list,\n    // such that the smallest number will become 0 and\
  \ the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
  \    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static List<float> RescaleToUnit(List<float>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)2.0f, (float)49.9f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new\
  \ float[]{(float)100.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)1.0f,\
  \ (float)0.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))));\n\
  \    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)1.0f,\
  \ (float)5.0f, (float)3.0f, (float)4.0f}))).Equals((new List<float>(new float[]{(float)0.25f,\
  \ (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
  \ (float)14.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f,\
  \ (float)1.0f, (float)0.5f, (float)0.75f}))));\n    }\n\n}\n"
completions: ["        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    The list must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>(numbers);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            result.Set(i,\
    \ numbers[i] * scale);\n        }\n        return result;", "        if (numbers.Count\
    \ < 2) {\n            throw new ArgumentException(\"List must have at least two\
    \ elements\");\n        }\n        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = (float)Math.Sqrt(range);\n\
    \        List<float> rescaled = new List<float>(numbers);\n        rescaled.ForEach(x\
    \ => rescaled.Remove(x));\n        rescaled.Add(0.0);\n        rescaled.Add(1.0);\n\
    \        rescaled.ForEach(x => rescaled.Add(x / scale));\n        return rescaled;",
  "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"At\
    \ least two numbers are required\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / (numbers.Count\
    \ - 1);\n        List<float> result = new List<float>(numbers.Count);\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]\
    \ * scale);\n        }\n        return result;", "        List<float> result =\
    \ new List<float>();\n        float smallest = numbers.Min();\n        float largest\
    \ = numbers.Max();\n        float range = largest - smallest;\n        float scale\
    \ = 1.0f / range;\n        foreach (float number in numbers) {\n            result.Add(number\
    \ * scale);\n        }\n        return result;", "        if (numbers.Count <\
    \ 2) {\n            return numbers;\n        }\n        var min = numbers.Min();\n\
    \        var max = numbers.Max();\n        var range = max - min;\n        var\
    \ scale = (float)range / numbers.Count;\n        var result = new List<float>();\n\
    \        foreach (var number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)range / numbers.Count;\n        List<float> scaled = new List<float>(numbers);\n\
    \        foreach (float number in scaled) {\n            number -= min;\n    \
    \        number *= scale;\n            number += min;\n        }\n        return\
    \ scaled;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = (max - min);\n        float newMin = min - range * 0.5;\n\
    \        float newMax = max + range * 0.5;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number -\
    \ newMin);\n            result.Add(number - newMax);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (max - min) / (numbers.Count - 1);\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * (max - min) / (max - min));\n  \
    \      }\n        return result;", "        float min = numbers.Min();\n     \
    \   float max = numbers.Max();\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ (max - min) / (max - min));\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = 1.0f / range;\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  List<float> result = new List<float>();\n        float smallest = numbers.Min();\n\
    \        float largest = numbers.Max();\n        float range = largest - smallest;\n\
    \        float scale = (float) range / numbers.Count;\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        if (numbers.Count < 2) {\n            throw\
    \ new ArgumentException(\"At least two numbers are required\");\n        }\n \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>(numbers.Count);\n        foreach (float number in numbers)\
    \ {\n            result.Add(number * scale);\n        }\n        return result;",
  "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"At\
    \ least two numbers are required\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>(numbers);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            result.Set(i,\
    \ numbers[i] * scale);\n        }\n        return result;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float range =\
    \ max - min;\n        float scale = 1.0f / range;\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = (float)Math.Pow(range, 1.0\
    \ / numbers.size);\n        List<float> result = new List<float>();\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float scale = (max - min) / (float)numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        List<float> result = new List<float>();\n        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float range =\
    \ max - min;\n        float scale = (float)Math.Sqrt(1.0f / range);\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float range = max - min;\n        float scale\
    \ = (float)Math.Pow(range, 0.5);\n        float scaled = new List<float>();\n\
    \        foreach (float number in numbers) {\n            scaled.Add(number *\
    \ scale);\n        }\n        return scaled;", "        List<float> result = new\
    \ List<float>();\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (max - min) / (numbers.Count\
    \ - 1);\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = (float)Math.Pow(range,\
    \ 1.0 / numbers.Count);\n        List<float> result = new List<float>(numbers);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ (max - min) / (max - min));\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = 1.0f / range;\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ range = max - min;\n        float scale = (float)range / numbers.Count;\n  \
    \      List<float> scaled = new List<float>(numbers.Count);\n        foreach (float\
    \ number in numbers) {\n            scaled.Add(number * scale);\n        }\n \
    \       return scaled;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = 1.0f\
    \ / range;\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        List<float> result = new List<float>();\n        foreach\
    \ (float number in numbers) {\n            result.Add(Math.Min(Math.Max(number,\
    \ min), max));\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)range / numbers.Count;\n        List<float> scaled = new\
    \ List<float>();\n        foreach (float number in numbers) {\n            scaled.Add(number\
    \ * scale);\n        }\n        return scaled;", "        if (numbers.Count <\
    \ 2) {\n            throw new ArgumentException(\"List must have at least two\
    \ elements\");\n        }\n        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = (float)Math.Sqrt(1.0f\
    \ / range);\n        List<float> result = new List<float>(numbers);\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        List<float> result = new List<float>();\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    float range = max - min;\n        float scale = (float)range / (float)numbers.Count;\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Pow(range, 1.0 / numbers.size);\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       List<float> result = new List<float>();\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        foreach (float number in numbers) {\n\
    \            result.Add(number * scale);\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        List<float> result = new List<float>();\n        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float range =\
    \ max - min;\n        float scale = 1.0f / range;\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        List<float> result = new List<float>();\n        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float range =\
    \ max - min;\n        float scale = 1.0f / range;\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (max - min) / (numbers.Count - 1);\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = (max - min);\n        float newMin = 0;\n        float newMax\
    \ = 1;\n        if (range == 0) {\n            return numbers;\n        }\n  \
    \      float newRange = (newMax - newMin);\n        float newValue = 0;\n    \
    \    float newRangeValue = 0;\n        float newRangeValue2 = 0;\n        float\
    \ newRangeValue3 = 0;\n        float newRangeValue4 = 0;\n        float newRangeValue5\
    \ = 0;\n        float newRangeValue6 = 0;\n        float newRangeValue7 = 0;\n\
    \        float newRangeValue8 = 0;\n        float newRangeValue9 = 0;\n      \
    \  float newRangeValue10 = 0;\n        float newRangeValue11 = 0;\n        float\
    \ newRangeValue12 = 0;\n        float newRangeValue13 = 0;\n        float newRangeValue14\
    \ = 0;\n        float newRangeValue15 = 0;\n        float newRangeValue16 = 0;\n\
    \        float newRangeValue17 = 0;\n        float newRangeValue18 = 0;\n    \
    \    float newRangeValue19 = 0;\n        float newRangeValue20 = 0;\n        float\
    \ newRangeValue21 = 0;\n        float newRangeValue22 = 0;\n        float newRangeValue23\
    \ = 0;\n        float newRangeValue24 = 0;\n        float newRangeValue25 = 0;\n\
    \        float newRangeValue26 = 0;\n        float newRangeValue27 = 0;\n    \
    \    float newRangeValue28 = 0;\n        float newRangeValue29 = 0;\n        float\
    \ newRangeValue30 = 0;\n        float newRangeValue31 = 0;\n        float newRangeValue32\
    \ = 0;\n        float newRangeValue33 = 0;\n        float newRangeValue34 = 0;\n\
    \        float newRangeValue35 = 0;\n        float newRangeValue36 = 0;\n    \
    \    float newRangeValue37 = 0;\n        float newRangeValue38 = 0;\n        float\
    \ newRangeValue39 = 0;\n        float newRangeValue40 = 0;\n        float newRangeValue41\
    \ = 0;\n        float newRangeValue42 = 0;\n        float newRangeValue43 = 0;\n\
    \        float newRangeValue44 = 0;\n        float newRangeValue45 = 0;\n    \
    \    float newRangeValue46 = 0;\n        float newRangeValue47 = 0;\n        float\
    \ newRangeValue48 = 0;\n        float newRangeValue49 = 0;\n        float newRangeValue50\
    \ = 0;\n        float newRangeValue51 = 0;\n        float newRangeValue52 = 0;\n\
    \        float newRangeValue53 = 0;\n        float newRangeValue54 = 0;\n    \
    \    float newRangeValue55 = 0;\n        float newRangeValue56 = 0;\n        float\
    \ newRangeValue57", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    At least two numbers are required\");\n        }\n\n        var min = numbers.Min();\n\
    \        var max = numbers.Max();\n        var range = max - min;\n        var\
    \ newMin = min - range * 0.5;\n        var newMax = max + range * 0.5;\n\n   \
    \     var newNumbers = new List<float>();\n        foreach (var number in numbers)\
    \ {\n            newNumbers.Add(number * (newMax - newMin) / range + newMin);\n\
    \        }\n        return newNumbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n        List<float>\
    \ result = new List<float>(numbers);\n        foreach (float number in numbers)\
    \ {\n            result.Add(number * scale);\n        }\n        return result;",
  "        List<float> result = new List<float>();\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)range / numbers.Count;\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)Math.Pow(range,\
    \ 1.0 / numbers.size);\n        List<float> result = new List<float>();\n    \
    \    foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)range / numbers.Count;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        List<float> result = new\
    \ List<float>();\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        if (numbers.Count < 2) {\n     \
    \       throw new ArgumentException(\"List must have at least two elements\");\n\
    \        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>(numbers);\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = 1.0f\
    \ / range;\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        List<float> result = new List<float>();\n  \
    \      float smallest = numbers.Min();\n        float largest = numbers.Max();\n\
    \        float range = largest - smallest;\n        float scale = 1.0f / range;\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            return numbers;\n        }\n        List<float> result = new\
    \ List<float>();\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = 1.0f / range;\n        List<float> result = new List<float>();\n   \
    \     foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)Math.Pow(range, 1.0 / numbers.size);\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  if (numbers.Count < 2) {\n            return numbers;\n        }\n        var\
    \ min = numbers.Min();\n        var max = numbers.Max();\n        var scale =\
    \ (max - min) / (numbers.Count - 1);\n        var result = new List<float>();\n\
    \        foreach (var number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)Math.Pow(range, 1.0 / numbers.size);\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  if (numbers.Count < 2) {\n            throw new ArgumentException(\"At least\
    \ two numbers are required\");\n        }\n        List<float> rescaled = new\
    \ List<float>(numbers.Count);\n        float smallest = numbers[0];\n        float\
    \ largest = numbers[0];\n        foreach (float number in numbers) {\n       \
    \     rescaled.Add(smallest * (number / largest));\n            smallest = Mathf.Min(smallest,\
    \ number);\n            largest = Mathf.Max(largest, number);\n        }\n   \
    \     return rescaled;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        List<float> result = new List<float>();\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * (max - min) / (max\
    \ - min));\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n        List<float>\
    \ scaled = new List<float>();\n        foreach (float number in numbers) {\n \
    \           scaled.Add(number * scale);\n        }\n        return scaled;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = (max - min);\n        float scale = range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    At least two numbers are required\");\n        }\n        List<float> result =\
    \ new List<float>();\n        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float range = max - min;\n        float scale = 1.0f\
    \ / range;\n        foreach (float number in numbers) {\n            result.Add(number\
    \ * scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ (max - min) / (max - min));\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = 1.0f / range;\n        List<float> scaled\
    \ = new List<float>(numbers);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            scaled.Set(i, numbers[i] * scale);\n        }\n        return\
    \ scaled;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)Math.Pow(range,\
    \ 1.0 / numbers.Count);\n        List<float> result = new List<float>();\n   \
    \     foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)range / numbers.Count;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            return numbers;\n        }\n        List<float> result = new\
    \ List<float>();\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        if (numbers.Count < 2) {\n     \
    \       throw new ArgumentException(\"List must have at least two elements\");\n\
    \        }\n\n        List<float> result = new List<float>(numbers);\n       \
    \ float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ range = max - min;\n\n        float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n\n        return result;", "        if (numbers.Count <\
    \ 2) {\n            throw new ArgumentException(\"At least two numbers are required\"\
    );\n        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>(numbers.Count);\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float range = max - min;\n        float scale\
    \ = (float)range / (float)numbers.Count;\n        List<float> result = new List<float>(numbers.Count);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)range / (float)numbers.Count;\n        List<float> result\
    \ = new List<float>(numbers);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            result.Set(i, (float)(numbers[i] - min) * scale + min);\n   \
    \     }\n        return result;", "        if (numbers.Count < 2) {\n        \
    \    throw new ArgumentException(\"At least two numbers are required\");\n   \
    \     }\n        List<float> result = new List<float>(numbers);\n        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            result.Set(i,\
    \ numbers[i] * scale);\n        }\n        return result;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float range =\
    \ max - min;\n        float scale = 1.0f / range;\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ range = max - min;\n        float scale = (float)Math.Sqrt(1.0f / range);\n\
    \        List<float> scaled = new List<float>(numbers);\n        foreach (float\
    \ number in scaled) {\n            number -= min;\n            number *= scale;\n\
    \            number += min;\n        }\n        return scaled;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = (float)range / numbers.Count;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)Math.Pow(range,\
    \ 0.5);\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = 1.0f\
    \ / range;\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        if (numbers.Count < 2) {\n            throw\
    \ new ArgumentException(\"At least two numbers are required\");\n        }\n \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       if (numbers.Count < 2) {\n            throw new ArgumentException(\"List\
    \ must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> rescaled = new List<float>(numbers);\n\
    \        foreach (float number in rescaled) {\n            rescaled.Add(number\
    \ * scale);\n        }\n        return rescaled;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float newMin = min - range * 0.5;\n        float newMax = max + range * 0.5;\n\
    \        List<float> newNumbers = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            newNumbers.Add(number - newMin);\n            newNumbers.Add(number\
    \ - newMax);\n        }\n        return newNumbers;", "        if (numbers.Count\
    \ < 2) {\n            throw new ArgumentException(\"List must have at least two\
    \ elements\");\n        }\n        var min = numbers.Min();\n        var max =\
    \ numbers.Max();\n        var scale = (max - min) / (float)numbers.Count;\n  \
    \      var result = new List<float>();\n        foreach (var n in numbers) {\n\
    \            result.Add(n * scale);\n        }\n        return result;", "   \
    \     if (numbers.Count < 2) {\n            throw new ArgumentException(\"List\
    \ must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       if (numbers.Count < 2) {\n            return numbers;\n        }\n   \
    \     List<float> result = new List<float>();\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)range / numbers.Count;\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        List<float> result = new List<float>();\n        float smallest\
    \ = numbers.Min();\n        float largest = numbers.Max();\n        float range\
    \ = largest - smallest;\n        float scale = 1.0f / range;\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        if (numbers.Count < 2) {\n          \
    \  return numbers;\n        }\n\n        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n\n        float scale = (max - min) / (numbers.Count -\
    \ 1);\n        List<float> result = new List<float>(numbers.Count);\n\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]\
    \ * scale);\n        }\n\n        return result;", "        if (numbers.Count\
    \ < 2) {\n            return numbers;\n        }\n        List<float> result =\
    \ new List<float>();\n        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float range = max - min;\n        float scale = 1.0f\
    \ / range;\n        foreach (float number in numbers) {\n            result.Add(number\
    \ * scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = (max - min);\n    \
    \    float scale = (float)range / numbers.Count;\n        List<float> result =\
    \ new List<float>();\n        foreach (float number in numbers) {\n          \
    \  result.Add(number * scale);\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = 1.0f / range;\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  List<float> result = new List<float>();\n        float smallest = numbers.Min();\n\
    \        float largest = numbers.Max();\n        float range = largest - smallest;\n\
    \        float scale = 1.0f / range;\n        foreach (float number in numbers)\
    \ {\n            result.Add(number * scale);\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float scale = (max - min) / (numbers.Count - 1);\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ range = max - min;\n        float scale = (float)range / numbers.Count;\n  \
    \      List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = (max - min);\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)Math.Pow(range,\
    \ 1.0 / numbers.size);\n        List<float> result = new List<float>();\n    \
    \    foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)range / numbers.Count;\n        List<float> result = new List<float>(numbers);\n\
    \        foreach (float number in numbers) {\n            float scaled = (number\
    \ - min) * scale;\n            result.Add(scaled);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = (max - min);\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> scaled = new List<float>(numbers);\n        foreach (float\
    \ number in numbers) {\n            scaled.Add(number * scale);\n        }\n \
    \       return scaled;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = (float)Math.Sqrt(1.0f\
    \ / range);\n        List<float> result = new List<float>();\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        if (numbers.Count < 2) {\n          \
    \  return numbers;\n        }\n        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float range = max - min;\n        float scale\
    \ = (float)Math.Pow(range, 1.0 / numbers.Count);\n        List<float> result =\
    \ new List<float>();\n        foreach (float number in numbers) {\n          \
    \  result.Add(number * scale);\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = (float)range / numbers.Count;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       if (numbers.Count < 2) {\n            throw new ArgumentException(\"List\
    \ must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>(numbers);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            result[i] = numbers[i]\
    \ * scale;\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            return numbers;\n        }\n        var min = numbers.Min();\n\
    \        var max = numbers.Max();\n        var scale = (max - min) / (float)numbers.Count;\n\
    \        var result = new List<float>();\n        foreach (var number in numbers)\
    \ {\n            result.Add(number * scale);\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       if (numbers.Count < 2) {\n            throw new ArgumentException(\"List\
    \ must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> scaled = new List<float>(numbers);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            scaled[i] = (scaled[i]\
    \ - min) * scale;\n        }\n        return scaled;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = (max - min);\n    \
    \    float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ (max - min) / (max - min));\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = 1.0f / range;\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * (max - min) / (max - min));\n        }\n     \
    \   return result;", "        if (numbers.Count < 2) {\n            return numbers;\n\
    \        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (max - min) / (float)numbers.Count;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       List<float> result = new List<float>();\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        foreach (float number in numbers) {\n\
    \            result.Add(number * scale);\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       List<float> result = new List<float>();\n        float smallest = numbers.Min();\n\
    \        float largest = numbers.Max();\n        float range = largest - smallest;\n\
    \        float scale = (float)range / numbers.Count;\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    At least two numbers are required\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>(numbers);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            return numbers;\n        }\n        List<float> result = new\
    \ List<float>();\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        List<float> result = new List<float>();\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    float range = max - min;\n        float scale = 1.0f / range;\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        if (numbers.Count < 2) {\n          \
    \  throw new ArgumentException(\"The list must have at least two elements\");\n\
    \        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>(numbers);\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)Math.Pow(range,\
    \ 1.0 / numbers.Count);\n        List<float> result = new List<float>();\n   \
    \     foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        if (numbers.Count < 2) {\n     \
    \       return numbers;\n        }\n        float min = numbers.Min();\n     \
    \   float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  if (numbers.Count < 2) return numbers;\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = (max - min);\n    \
    \    float scale = (float)range / numbers.Count;\n        List<float> result =\
    \ new List<float>(numbers);\n        for (int i = 0; i < numbers.Count; i++) {\n\
    \            result[i] = numbers[i] * scale;\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float range = (max - min);\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    Must have at least two numbers to rescale\");\n        }\n        float min =\
    \ numbers.Min();\n        float max = numbers.Max();\n        float range = max\
    \ - min;\n        float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n\
    \        List<float> scaled = new List<float>(numbers);\n        for (int i =\
    \ 0; i < scaled.Count; i++) {\n            scaled[i] = (scaled[i] - min) * scale;\n\
    \        }\n        return scaled;", "        if (numbers.Count < 2) {\n     \
    \       throw new ArgumentException(\"Must have at least two numbers to rescale\"\
    );\n        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = (max - min);\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> rescaled = new List<float>(numbers);\n        foreach (float\
    \ number in rescaled) {\n            rescaled = (float)(number * scale) + min;\n\
    \        }\n        return rescaled;", "        float min = numbers.Min();\n \
    \       float max = numbers.Max();\n        float range = max - min;\n       \
    \ float scale = (float)Math.Sqrt(1.0f / range);\n        List<float> result =\
    \ new List<float>();\n        foreach (float number in numbers) {\n          \
    \  result.Add(number * scale);\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = (float)range / numbers.Count;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = (float)Math.Pow(range, 1.0\
    \ / numbers.Count);\n        List<float> result = new List<float>();\n       \
    \ foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ (max - min) / (max - min));\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n\
    \        List<float> result = new List<float>(numbers);\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        float scale = (float)range\
    \ / numbers.Count;\n        List<float> result = new List<float>();\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        List<float> result = new List<float>();\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    float range = max - min;\n        float scale = 1.0f / range;\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        List<float> result = new List<float>();\n\
    \        float minValue = numbers.Min();\n        float maxValue = numbers.Max();\n\
    \        float range = maxValue - minValue;\n        float scale = (float)range\
    \ / numbers.Count;\n        foreach (float number in numbers) {\n            result.Add(number\
    \ * scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            throw new ArgumentException(\"List must have at least two elements\"\
    );\n        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    List must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Pow(range, 1.0 / numbers.size);\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       if (numbers.Count < 2) {\n            return numbers;\n        }\n   \
    \     List<float> rescaled = new List<float>();\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        foreach (float number in numbers) {\n\
    \            rescaled.Add(number * scale);\n        }\n        return rescaled;",
  "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"List\
    \ must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n        List<float>\
    \ result = new List<float>(numbers);\n        foreach (float number in numbers)\
    \ {\n            result.Add(number * scale);\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number - min) / (max - min);\n       \
    \ }\n        return result;", "        if (numbers.Count < 2) {\n            return\
    \ numbers;\n        }\n        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float range = max - min;\n        float scale = (float)Math.Pow(range,\
    \ 1.0 / numbers.Count);\n        List<float> result = new List<float>(numbers.Count);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            throw new ArgumentException(\"List must have at least two elements\"\
    );\n        }\n        var min = numbers.Min();\n        var max = numbers.Max();\n\
    \        var scale = (max - min) / (numbers.Count - 1);\n        var result =\
    \ new List<float>();\n        foreach (var number in numbers) {\n            result.Add(number\
    \ * scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> scaled = new List<float>(numbers);\n\
    \        foreach (float number in numbers) {\n            scaled.Add(number *\
    \ scale);\n        }\n        return scaled;", "        List<float> result = new\
    \ List<float>();\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = 1.0f / range;\n        List<float> result = new List<float>();\n   \
    \     foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        if (numbers.Count < 2) {\n     \
    \       return numbers;\n        }\n        float min = numbers.Min();\n     \
    \   float max = numbers.Max();\n        float scale = (max - min) / (numbers.Count\
    \ - 1);\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        if (numbers.Count < 2) return numbers;\n   \
    \     float min = numbers.Min();\n        float max = numbers.Max();\n       \
    \ float scale = (max - min) / (numbers.Count - 1);\n        List<float> result\
    \ = new List<float>();\n        foreach (float number in numbers) {\n        \
    \    result.Add(number * scale);\n        }\n        return result;", "      \
    \  List<float> result = new List<float>();\n        float smallest = numbers.Min();\n\
    \        float largest = numbers.Max();\n        float range = largest - smallest;\n\
    \        float scale = 1.0f / range;\n        foreach (float number in numbers)\
    \ {\n            result.Add(number * scale);\n        }\n        return result;",
  "        if (numbers.Count < 2) {\n            return numbers;\n        }\n    \
    \    List<float> rescaled = new List<float>();\n        float smallest = numbers[0];\n\
    \        float largest = numbers[0];\n        foreach (float number in numbers)\
    \ {\n            rescaled.Add(smallest);\n            rescaled.Add(number);\n\
    \            rescaled.Add(largest);\n            smallest = number;\n        \
    \    largest = number;\n        }\n        return rescaled;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float range =\
    \ max - min;\n        float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    List must have at least two elements\");\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>(numbers);\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            throw new ArgumentException(\"The list must have at least two\
    \ elements\");\n        }\n        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / (numbers.Count - 1);\n\
    \        List<float> result = new List<float>(numbers);\n        for (int i =\
    \ 0; i < numbers.Count; i++) {\n            result.Set(i, numbers[i] * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = 1.0f / range;\n        List<float> result = new List<float>();\n   \
    \     foreach (float number in numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = (max - min);\n       \
    \ float newMin = min - range * 0.5;\n        float newMax = max + range * 0.5;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(newMin + (number - min) / range * (newMax\
    \ - newMin));\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ (max - min) / (max - min));\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        List<float> result = new List<float>();\n        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float range =\
    \ max - min;\n        float scale = (float)range / numbers.Count;\n        foreach\
    \ (float number in numbers) {\n            result.Add(number * scale);\n     \
    \   }\n        return result;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float range = max - min;\n        float scale\
    \ = (float)range / numbers.Count;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Pow(range, 1.0 / numbers.Count);\n        List<float>\
    \ result = new List<float>(numbers);\n        foreach (float number in numbers)\
    \ {\n            result.Add(number * scale);\n        }\n        return result;",
  "        if (numbers.Count < 2) {\n            return numbers;\n        }\n    \
    \    float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       List<float> result = new List<float>();\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)range / numbers.Count;\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2) {\n            throw new ArgumentException(\"\
    Must have at least two numbers to rescale\");\n        }\n        var min = numbers.Min();\n\
    \        var max = numbers.Max();\n        var range = max - min;\n        var\
    \ newMin = min - range * 0.5;\n        var newMax = max + range * 0.5;\n     \
    \   var newRange = newMax - newMin;\n        var newNumbers = new List<float>(numbers);\n\
    \        newNumbers.ForEach(n => n = ((n - min) / newRange) * newRange + newMin);\n\
    \        return newNumbers;", "        if (numbers.Count < 2) {\n            throw\
    \ new ArgumentException(\"At least two numbers are required\");\n        }\n\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n\n  \
    \      List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(Math.Min(Math.Max(number, min), max));\n\
    \        }\n\n        return result;", "        float min = numbers.Min();\n \
    \       float max = numbers.Max();\n        float range = max - min;\n       \
    \ float scale = (float)range / numbers.Count;\n        List<float> result = new\
    \ List<float>();\n        foreach (float number in numbers) {\n            result.Add(number\
    \ * scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            return numbers;\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / (numbers.Count\
    \ - 1);\n        List<float> result = new List<float>();\n        foreach (float\
    \ number in numbers) {\n            result.Add(number * scale);\n        }\n \
    \       return result;", "        if (numbers.Count < 2) {\n            return\
    \ numbers;\n        }\n        List<float> rescaled = new List<float>();\n   \
    \     float smallest = numbers.Min();\n        float largest = numbers.Max();\n\
    \        float range = largest - smallest;\n        float scale = (float) range\
    \ / numbers.Count;\n        foreach (float number in numbers) {\n            rescaled.Add(number\
    \ * scale);\n        }\n        return rescaled;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = (max - min);\n    \
    \    float scale = (float)Math.Pow(range, 0.5);\n        List<float> result =\
    \ new List<float>();\n        foreach (float number in numbers) {\n          \
    \  result.Add(number * scale);\n        }\n        return result;", "        if\
    \ (numbers.Count < 2) {\n            throw new ArgumentException(\"At least two\
    \ numbers are required\");\n        }\n        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = 1.0f / range;\n        List<float> result = new List<float>(numbers);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            result[i] = numbers[i]\
    \ * scale;\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Sqrt(range);\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        List<float> result = new List<float>();\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            return numbers;\n        }\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = (float)Math.Sqrt(1.0f / range);\n        List<float> scaled =\
    \ new List<float>();\n        foreach (float number in numbers) {\n          \
    \  scaled.Add(number * scale);\n        }\n        return scaled;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float range\
    \ = max - min;\n        float newMin = min - range * 0.5;\n        float newMax\
    \ = max + range * 0.5;\n        List<float> result = new List<float>();\n    \
    \    foreach (float number in numbers) {\n            result.Add(number - newMin);\n\
    \            result.Add(number - newMax);\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float scale = (max - min) / (float)numbers.Count;\n        List<float> result\
    \ = new List<float>(numbers);\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float range = max - min;\n        float scale = 1.0f / range;\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       if (numbers.Count < 2) {\n            return numbers;\n        }\n   \
    \     float min = numbers.Min();\n        float max = numbers.Max();\n       \
    \ float scale = (max - min) / (numbers.Count - 1);\n        List<float> result\
    \ = new List<float>(numbers.Count);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            result.Add(numbers[i] * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (max - min) / (numbers.Count - 1);\n        List<float>\
    \ result = new List<float>();\n        foreach (float number in numbers) {\n \
    \           result.Add(number * scale);\n        }\n        return result;", " \
    \       List<float> result = new List<float>();\n        float smallest = numbers.Min();\n\
    \        float largest = numbers.Max();\n        float scale = largest - smallest;\n\
    \        foreach (float number in numbers) {\n            result.Add(number *\
    \ scale);\n        }\n        return result;", "        if (numbers.Count < 2)\
    \ {\n            throw new ArgumentException(\"At least two numbers are required\"\
    );\n        }\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   List<float> result = new List<float>();\n        foreach (float number in\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = (float)range / numbers.Count;\n\
    \        List<float> result = new List<float>();\n        foreach (float number\
    \ in numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
