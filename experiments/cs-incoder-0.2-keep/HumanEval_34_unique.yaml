name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    // >>> unique([5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long x in l) {\n            if\
    \ (!set.Contains(x)) {\n                result.Add(x);\n                set.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Contains(i)) {\n          \
    \      result.Add(i);\n                set.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!result.Contains(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long x in l) {\n            if (set.Add(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Add(i)) {\n               \
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long x in l) {\n            if (!set.Add(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l)\n            if (!unique.Contains(i))\n\
    \                unique.Add(i);\n        return unique;", "        List<long>\
    \ result = new List<long>();\n        long lastValue = long.MinValue;\n      \
    \  foreach (long value in l) {\n            if (value != lastValue) {\n      \
    \          result.Add(value);\n                lastValue = value;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!unique.Contains(i)) {\n   \
    \             unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!unique.Contains(i)) {\n   \
    \             unique.Add(i);\n            }\n        }\n        unique.Sort();\n\
    \        return unique;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (!hs.Contains(i)) {\n                hs.Add(i);\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (set.Add(i)) {\n                result.Add(i);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long prev = 0;\n        foreach (long x in l) {\n   \
    \         if (x != prev) {\n                result.Add(x);\n                prev\
    \ = x; \n            }\n        }\n        return result;", "        List<long>\
    \ unique = new List<long>();\n        foreach (long n in l)\n            if (unique.Contains(n))\n\
    \                continue;\n            unique.Add(n);\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long x in l)\n\
    \        {\n            if (!result.Contains(x))\n            {\n            \
    \    result.Add(x);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long x in l) {\n            if (!set.Add(x)) {\n           \
    \     result.Add(x);\n            }\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l)\n \
    \           if (result.Contains(x))\n                continue;\n            result.Add(x);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long temp;\n        foreach (long i in l) {\n            temp = i;\n   \
    \         while (result.Contains(temp)) {\n                temp = temp * 10 +\
    \ i;\n            }\n            result.Add(temp);\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long x in l) {\n            if\
    \ (!set.Add(x)) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Add(i)) {\n                result.Add(i);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long x in l) {\n            if (set.Add(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> unique = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!unique.Contains(i)) {\n      \
    \          unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result.OrderBy(i => i).ToList();", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> ret = new List<long>();\n        foreach (long i in l) {\n \
    \           if (!ret.Contains(i)) {\n                ret.Add(i);\n           \
    \ }\n        }\n        return ret;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n        \
    \        result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long x in l) {\n            if\
    \ (!set.Add(x)) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!result.Contains(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                set.Add(i);\n                result.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ prev;\n        foreach (long i in l) {\n            if (i == prev) {\n     \
    \           continue;\n            }\n            result.Add(i);\n           \
    \ prev = i;\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n       \
    \ foreach (long i in l) {\n            if (!hs.Contains(i)) {\n              \
    \  hs.Add(i);\n                result.Add(i);\n            }\n        }\n    \
    \    return result;", "        List<long> ret = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (!ret.Contains(i)) {\n                ret.Add(i);\n\
    \            }\n        }\n        return ret;", "        List<long> result =\
    \ new List<long>();\n        foreach (long i in l)\n            if (result.Contains(i))\n\
    \                continue;\n            result.Add(i);\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result.OrderBy(i => i).ToList();", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!hs.Contains(i)) {\n       \
    \         hs.Add(i);\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Contains(i)) {\n                result.Add(i);\n   \
    \             set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastValue\
    \ = long.MinValue;\n        foreach (long value in l) {\n            if (value\
    \ != lastValue) {\n                result.Add(value);\n                lastValue\
    \ = value;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l) {\n            if\
    \ (!result.Contains(i)) {\n                result.Add(i);\n            }\n   \
    \     }\n        return result.OrderBy(i => i).ToList();", "        List<long>\
    \ unique = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          unique.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return unique;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> ret = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (!ret.Contains(i)) {\n                ret.Add(i);\n\
    \            }\n        }\n        return ret;", "        List<long> result =\
    \ new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> unique = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!unique.Contains(i)) {\n      \
    \          unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> unique = new List<long>();\n        foreach (long n in l)\n\
    \            if (unique.Contains(n))\n                continue;\n            unique.Add(n);\n\
    \        return unique;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!result.Contains(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> unique = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!unique.Contains(i)) {\n      \
    \          unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long x in l) {\n            if (!set.Add(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hs = new HashSet<long>();\n        foreach (long i in l) {\n            if (!hs.Contains(i))\
    \ {\n                hs.Add(i);\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!unique.Contains(i)) {\n   \
    \             unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> ret = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!ret.Contains(i))\
    \ {\n                ret.Add(i);\n            }\n        }\n        return ret;",
  "        List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long n in l)\n            if (unique.Contains(n))\n\
    \                continue;\n            unique.Add(n);\n        return unique;",
  "        List<long> ret = new List<long>();\n        foreach (long x in l) {\n \
    \           if (!ret.Contains(x)) {\n                ret.Add(x);\n           \
    \ }\n        }\n        return ret;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (set.Add(i)) {\n                result.Add(i);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (!hs.Contains(i)) {\n                hs.Add(i);\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> ret = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!hs.Contains(i)) {\n       \
    \         hs.Add(i);\n                ret.Add(i);\n            }\n        }\n\
    \        return ret;", "        List<long> ret = new List<long>();\n        long\
    \ lastval = l[0];\n        foreach (long val in l) {\n            if (val != lastval)\
    \ {\n                ret.Add(lastval);\n                lastval = val;\n     \
    \       }\n        }\n        ret.Add(lastval);\n        return ret;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (set.Add(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    foreach (long i in l) {\n            if (!result.Contains(i)) {\n       \
    \         result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result.OrderBy(i => i).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l) {\n            if (!result.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> ret = new List<long>();\n      \
    \  List<long> seen = new List<long>();\n        foreach (long x in l) {\n    \
    \        if (!seen.Contains(x)) {\n                ret.Add(x);\n             \
    \   seen.Add(x);\n            }\n        }\n        return ret;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l) {\n            if\
    \ (!result.Contains(i)) {\n                result.Add(i);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastValue = long.MinValue;\n        foreach (long value in l) {\n\
    \            if (value != lastValue) {\n                result.Add(value);\n \
    \               lastValue = value;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long prev = 0;\n       \
    \ foreach (long i in l) {\n            if (i != prev) {\n                result.Add(i);\n\
    \                prev = i;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long x in l) {\n            if (set.Add(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Contains(i)) {\n                result.Add(i);\n   \
    \             set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!unique.Contains(i)) {\n   \
    \             unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (set.Add(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Add(i)) {\n               \
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long lastValue = long.MinValue;\n        foreach (long\
    \ value in l) {\n            if (value != lastValue) {\n                result.Add(value);\n\
    \                lastValue = value;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> unique = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        long prev = 0;\n        foreach (long i in l) {\n\
    \            if (i == prev) {\n                continue;\n            }\n    \
    \        result.Add(i);\n            prev = i;\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long x in l)\n            if (!unique.Contains(x))\n\
    \                unique.Add(x);\n        return unique;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l) {\n            if\
    \ (!result.Contains(i)) {\n                result.Add(i);\n            }\n   \
    \     }\n        return result.OrderBy(i => i).ToList();", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach (long x in l) {\n            if (!hs.Contains(x)) {\n       \
    \         hs.Add(x);\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> unique = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!unique.Contains(i)) {\n      \
    \          unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result.OrderBy(i => i).ToList();", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                set.Add(i);\n   \
    \             result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!hs.Contains(i)) {\n       \
    \         hs.Add(i);\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (!hs.Contains(i)) {\n                hs.Add(i);\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long x in l)\n        {\n            if (!set.Add(x))\n    \
    \        {\n                result.Add(x);\n            }\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!result.Contains(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result.OrderBy(i => i).ToList();", " \
    \       List<long> unique = new List<long>();\n        foreach (long i in l)\n\
    \        {\n            if (!unique.Contains(i))\n            {\n            \
    \    unique.Add(i);\n            }\n        }\n        return unique;", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (set.Add(i)) {\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result.OrderBy(i => i).ToList();", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long x in l) {\n            if (!set.Add(x)) {\n           \
    \     result.Add(x);\n            }\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> ret = new List<long>();\n \
    \       HashSet<long> set = new HashSet<long>();\n        foreach (long x in l)\
    \ {\n            if (set.Add(x)) {\n                ret.Add(x);\n            }\n\
    \        }\n        return ret;", "        List<long> result = new List<long>();\n\
    \        long lastValue = long.MinValue;\n        foreach (long value in l) {\n\
    \            if (value != lastValue) {\n                result.Add(value);\n \
    \               lastValue = value;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long x in l)\n        {\n     \
    \       if (!set.Contains(x))\n            {\n                set.Add(x);\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long prev = 0;\n       \
    \ foreach (long x in l) {\n            if (x == prev) {\n                continue;\n\
    \            }\n            result.Add(x);\n            prev = x; // update prev\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n        \
    \        result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result.OrderBy(i => i).ToList();", "   \
    \     List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (set.Add(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l)\n        {\n            if\
    \ (!result.Contains(x))\n            {\n                result.Add(x);\n     \
    \       }\n        }\n        return result.OrderBy(x => x).ToList();", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Add(i)) {\n                result.Add(i);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!result.Contains(x)) {\n   \
    \             result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!hs.Contains(i)) {\n       \
    \         hs.Add(i);\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Contains(i)) {\n                result.Add(i);\n   \
    \             set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> unique = new List<long>();\n        foreach (long x in l) {\n\
    \            if (!unique.Contains(x)) {\n                unique.Add(x);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (set.Add(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Contains(i)) {\n          \
    \      result.Add(i);\n                set.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long prev = 0;\n        foreach (long i in l) {\n            if (i == prev)\
    \ {\n                continue;\n            }\n            result.Add(i);\n  \
    \          prev = i;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n        \
    \        result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        long lastValue = long.MinValue;\n        foreach (long\
    \ value in l) {\n            if (value != lastValue) {\n                result.Add(value);\n\
    \                lastValue = value;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l)\n        {\n            if (!result.Contains(x))\n            {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Contains(i)) {\n          \
    \      result.Add(i);\n                set.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!result.Contains(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> unique = new List<long>();\n        foreach (long i in l)\n\
    \            if (!unique.Contains(i))\n                unique.Add(i);\n      \
    \  return unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Add(i)) {\n               \
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
