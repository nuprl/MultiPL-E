name: HumanEval_42_incr_list
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
  \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
  \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    public static List<long> IncrList(List<long>\
  \ l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IncrList((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(IncrList((new List<long>(new\
  \ long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)3L, (long)2L}))));\n    Debug.Assert(IncrList((new List<long>(new long[]{(long)5L,\
  \ (long)2L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L}))).Equals((new\
  \ List<long>(new long[]{(long)6L, (long)3L, (long)6L, (long)3L, (long)4L, (long)4L,\
  \ (long)10L, (long)1L, (long)124L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ n in l) {\n            result.Add(n + 1);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            result.Add(i + 1);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long prev = 0;\n        foreach\
    \ (long n in l) {\n            long next = n + 1;\n            if (next > prev)\
    \ {\n                result.Add(next);\n                prev = next;\n       \
    \     }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long current = 1;\n        foreach (long x in l) {\n\
    \            result.Add(current + x);\n            current += x;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l) {\n            result.Add(x + 1);\n        }\n   \
    \     return result;", "        List<long> ret = new List<long>();\n        foreach\
    \ (long i in l) {\n            ret.Add(i + 1);\n        }\n        return ret;",
  "        List<long> result = new List<long>();\n        long prev = 0;\n       \
    \ foreach (long i in l) {\n            prev = i;\n            result.Add(prev\
    \ + 1);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l) {\n            result.Add(x + 1);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long i in l) {\n            sum += i;\n\
    \            result.Add(sum);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l) {\n            result.Add(i\
    \ + 1);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long last = 0;\n        foreach (long i in l) {\n   \
    \         last += i;\n            result.Add(last);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            result.Add(i + 1);\n        }\n        return result;",
  "        List<long> ret = new List<long>();\n        foreach (long x in l) {\n \
    \           ret.Add(x + 1);\n        }\n        return ret;", "        List<long>\
    \ ret = new List<long>();\n        long last = 0;\n        foreach (long i in\
    \ l) {\n            ret.Add(last + 1);\n            last = i;\n        }\n   \
    \     return ret;", "        List<long> result = new List<long>();\n        long\
    \ prev = 0;\n        foreach (long i in l) {\n            prev = i;\n        \
    \    result.Add(prev + 1);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long prev = 0;\n        foreach (long i\
    \ in l) {\n            prev = i;\n            result.Add(prev + 1);\n        }\n\
    \        return result;", "        List<long> ret = new List<long>();\n      \
    \  foreach (long x in l) {\n            ret.Add(x + 1);\n        }\n        return\
    \ ret;", "        List<long> ret = new List<long>();\n        foreach (var i in\
    \ l) {\n            ret.Add(i + 1);\n        }\n        return ret;", "      \
    \  List<long> result = new List<long>();\n        foreach (long i in l) {\n  \
    \          result.Add(i + 1);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l) {\n            result.Add(i\
    \ + 1);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
