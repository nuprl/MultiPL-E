language: cs
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring))\n
    \           return 0;\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        long len = 0;\n        bool found = false;\n        do {\n            found
    = false;\n            start = str.IndexOf(substring, start);\n            if (start
    == -1)\n                break;\n            end = str.IndexOf(substring, start
    + 1);\n            if (end == -1)\n                end = str.Length;\n            len
    = end - start + 1;\n            count += 1;\n            found = true;\n        }
    while (found && len > 0);\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpksmj77hc.cs(26,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpksmj77hc.cs(26,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpksmj77hc.cs(29,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpksmj77hc.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        do {\n            start = str.IndexOf(substring, start);\n
    \           if (start == -1) break;\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1) break;\n            found = true;\n            count
    += end - start + 1;\n            start = end + 1;\n        } while (start < str.Length);\n
    \       if (!found) return 0;\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcq0rrjvd.cs(22,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpcq0rrjvd.cs(22,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpcq0rrjvd.cs(24,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpcq0rrjvd.cs(24,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long len = 0;\n        bool found = false;\n
    \       do {\n            found = false;\n            start = str.IndexOf(substring,
    start);\n            if (start == -1) {\n                break;\n            }\n
    \           end = str.IndexOf(substring, start + 1);\n            if (end == -1)
    {\n                end = str.Length;\n            }\n            len = end - start
    + 1;\n            count += 1;\n            found = true;\n        } while (end
    != -1);\n        return count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdbe0sk6d.cs(27,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpdbe0sk6d.cs(27,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpdbe0sk6d.cs(31,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpdbe0sk6d.cs(31,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpdbe0sk6d.cs(24,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) > -1 ? 1 : 0;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.Length - substring.Length);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n"
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool foundStart = false;\n        bool
    foundEnd = false;\n        bool foundLength = false;\n        bool foundSub =
    false;\n        bool foundSubStart = false;\n        bool foundSubEnd = false;\n
    \       bool foundSubLength = false;\n        bool foundSubSub = false;\n        bool
    foundSubSubStart = false;\n        bool foundSubSubEnd = false;\n        bool
    foundSubSubLength = false;\n        bool foundSubSubSub = false;\n        bool
    foundSubSubSubStart = false;\n        bool foundSubSubSubEnd = false;\n        bool
    foundSubSubSubLength = false;\n        bool foundSubSubSubSub = false;\n        bool
    foundSubSubSubSubStart = false;\n        bool foundSubSubSubSubEnd = false;\n
    \       bool foundSubSubSubSubLength = false;\n        bool foundSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEn\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphefpv9xa.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = str.Length - substring.Length;\n        long current
    = 0;\n        bool found = false;\n        do {\n            current = str.IndexOf(substring,
    start);\n            if (current == -1) {\n                break;\n            }\n
    \           found = true;\n            start = current + 1;\n            while
    (current < end && str[current] == substring[substring.Length]) {\n                current++;\n
    \           }\n            count++;\n        } while (current < end);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rlfqe9w.cs(26,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp5rlfqe9w.cs(26,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5rlfqe9w.cs(32,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5rlfqe9w.cs(24,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        bool startFound = false;\n        bool
    endFound = false;\n        bool lenFound = false;\n        bool startFoundOverlap
    = false;\n        bool endFoundOverlap = false;\n        bool lenFoundOverlap
    = false;\n        bool startFoundOverlapOverlap = false;\n        bool endFoundOverlapOverlap
    = false;\n        bool lenFoundOverlapOverlap = false;\n        bool startFoundOverlapOverlapOverlap
    = false;\n        bool endFoundOverlapOverlapOverlap = false;\n        bool lenFoundOverlapOverlapOverlap
    = false;\n        bool startFoundOverlapOverlapOverlapOverlap = false;\n        bool
    endFoundOverlapOverlapOverlapOverlap = false;\n        bool lenFoundOverlapOverlapOverlapOverlap
    = false;\n        bool startFoundOverlapOverlapOverlapOverlapOverlap = false;\n
    \       bool endFoundOverlapOverlapOverlapOverlapOverlap = false;\n        bool
    lenFoundOverlapOverlapOverlapOverlapOverlap = false;\n        bool startFoundOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool endFoundOverlapOverlapOverlapOverlapOverlap = false;\n
    \       bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n        bool
    startFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n        bool endFoundOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n
    \       bool startFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n        bool
    endFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n        bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool startFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool endFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool startFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool endFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool startFoundOverlapOverlapOverlap\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3xqpzxfs.cs(55,45): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long start2 = 0;\n        long end2 = 0;\n
    \       long start3 = 0;\n        long end3 = 0;\n        bool found = false;\n
    \       bool found2 = false;\n        bool found3 = false;\n        bool found4
    = false;\n        bool found5 = false;\n        bool found6 = false;\n        bool
    found7 = false;\n        bool found8 = false;\n        bool found9 = false;\n
    \       bool found10 = false;\n        bool found11 = false;\n        bool found12
    = false;\n        bool found13 = false;\n        bool found14 = false;\n        bool
    found15 = false;\n        bool found16 = false;\n        bool found17 = false;\n
    \       bool found18 = false;\n        bool found19 = false;\n        bool found20
    = false;\n        bool found21 = false;\n        bool found22 = false;\n        bool
    found23 = false;\n        bool found24 = false;\n        bool found25 = false;\n
    \       bool found26 = false;\n        bool found27 = false;\n        bool found28
    = false;\n        bool found29 = false;\n        bool found30 = false;\n        bool
    found31 = false;\n        bool found32 = false;\n        bool found33 = false;\n
    \       bool found34 = false;\n        bool found35 = false;\n        bool found36
    = false;\n        bool found37 = false;\n        bool found38 = false;\n        bool
    found39 = false;\n        bool found40 = false;\n        bool found41 = false;\n
    \       bool found42 = false;\n        bool found43 = false;\n        bool found44
    = false;\n        bool found45 = false;\n        bool found46 = false;\n        bool
    found47 = false;\n        bool found48 = false;\n        bool found49 = false;\n
    \       bool found50 = false;\n        bool found51 = false;\n        bool found52
    = false;\n        bool found53 = false;\n        bool found54 = false;\n        bool
    found55 = false;\n        bool found56 = false;\n        bool found57 = false;\n
    \       bool found58 = false;\n        bool found59 = false;\n        bool found60
    = false;\n        bool found61 = false;\n        bool found62 = false;\n        bool
    found63 = false;\n        bool found64 = false;\n        bool found65 = false;\n
    \       bool found66 = false;\n        bool found67 = false;\n        bool found68
    = false;\n        bool found69 = false;\n        bool found70 = false;\n        bool
    found71 = false;\n        bool found72 = false;\n        bool found73 = false;\n
    \       bool found\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0rs8k8to.cs(100,19): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool found2 = false;\n        bool
    found3 = false;\n        bool found4 = false;\n        bool found5 = false;\n
    \       bool found6 = false;\n        bool found7 = false;\n        bool found8
    = false;\n        bool found9 = false;\n        bool found10 = false;\n        bool
    found11 = false;\n        bool found12 = false;\n        bool found13 = false;\n
    \       bool found14 = false;\n        bool found15 = false;\n        bool found16
    = false;\n        bool found17 = false;\n        bool found18 = false;\n        bool
    found19 = false;\n        bool found20 = false;\n        bool found21 = false;\n
    \       bool found22 = false;\n        bool found23 = false;\n        bool found24
    = false;\n        bool found25 = false;\n        bool found26 = false;\n        bool
    found27 = false;\n        bool found28 = false;\n        bool found29 = false;\n
    \       bool found30 = false;\n        bool found31 = false;\n        bool found32
    = false;\n        bool found33 = false;\n        bool found34 = false;\n        bool
    found35 = false;\n        bool found36 = false;\n        bool found37 = false;\n
    \       bool found38 = false;\n        bool found39 = false;\n        bool found40
    = false;\n        bool found41 = false;\n        bool found42 = false;\n        bool
    found43 = false;\n        bool found44 = false;\n        bool found45 = false;\n
    \       bool found46 = false;\n        bool found47 = false;\n        bool found48
    = false;\n        bool found49 = false;\n        bool found50 = false;\n        bool
    found51 = false;\n        bool found52 = false;\n        bool found53 = false;\n
    \       bool found54 = false;\n        bool found55 = false;\n        bool found56
    = false;\n        bool found57 = false;\n        bool found58 = false;\n        bool
    found59 = false;\n        bool found60 = false;\n        bool found61 = false;\n
    \       bool found62 = false;\n        bool found63 = false;\n        bool found64
    = false;\n        bool found65 = false;\n        bool found66 = false;\n        bool
    found67 = false;\n        bool found68 = false;\n        bool found69 = false;\n
    \       bool found70 = false;\n        bool found71 = false;\n        bool found72
    = false;\n        bool found73 = false;\n        bool found74 = false;\n        bool
    found75 = false;\n        bool found76 = false;\n        bool found77 = false;\n
    \       bool found78 = false;\n        bool found79 = false;\n        bool found\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1czkja97.cs(100,19): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring))\n
    \           return 0;\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        long length = 0;\n        bool found = false;\n        do {\n
    \           found = false;\n            start = str.IndexOf(substring, start);\n
    \           if (start == -1)\n                break;\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1)\n                end = str.Length;\n            length
    = end - start + 1;\n            count += length;\n            found = true;\n
    \           start++;\n        } while (found && start < str.Length);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz3ppzs6j.cs(26,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpz3ppzs6j.cs(26,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpz3ppzs6j.cs(29,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpz3ppzs6j.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long index = 0;\n        bool found = false;\n        do
    {\n            index = str.IndexOf(substring, start);\n            if (index ==
    -1) {\n                break;\n            }\n            found = true;\n            start
    = index + 1;\n            end = str.IndexOf(substring, start + 1);\n            length
    = end - start + 1;\n            count += length;\n        } while (end != -1);\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcnvt5tbv.cs(24,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpcnvt5tbv.cs(24,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpcnvt5tbv.cs(30,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpcnvt5tbv.cs(30,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpcnvt5tbv.cs(22,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else if (substring.IndexOf(c) != -1) {\n
    \               count += HowManyTimes(str.Substring(0, str.IndexOf(c)), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc2045fc937f48e7b0ff982f7462fcd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc2045fc937f48e7b0ff982f7462fcd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long len = 0;\n        bool found = false;\n
    \       bool first = true;\n        do {\n            found = false;\n            start
    = str.IndexOf(substring, start);\n            end = str.IndexOf(substring, start
    + 1);\n            if (start == -1 || end == -1) {\n                return count;\n
    \           }\n            len = end - start + 1;\n            if (len > 0) {\n
    \               found = true;\n                count += 1;\n            }\n            start
    = end + 1;\n        } while (found == true && start < str.Length);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjausiohl.cs(28,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpjausiohl.cs(28,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpjausiohl.cs(29,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpjausiohl.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpjausiohl.cs(25,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool first = true;\n        bool
    last = true;\n        bool firstLast = true;\n        bool lastFirst = true;\n
    \       bool firstLastLast = true;\n        bool lastFirstLast = true;\n        bool
    firstLastFirst = true;\n        bool lastFirstFirst = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53oq_sd1.cs(84,32): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) - str.IndexOf(substring, 0);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = str.Length
    - substring.Length;\n        while (start < end) {\n            long middle =
    start + (end - start) / 2;\n            if (str.Substring(middle, substring.Length)
    == substring) {\n                count++;\n                start = middle + 1;\n
    \           } else {\n                end = middle;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_l84gqn.cs(22,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = str.Length
    - substring.Length;\n        long pos = 0;\n        while (start < end) {\n            pos
    = str.IndexOf(substring, start);\n            if (pos == -1) break;\n            count
    += 1;\n            start = pos + 1;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc27v7ac7.cs(22,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpc27v7ac7.cs(22,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.IndexOf(substring) + 1) != -1 ? 1 : 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93567723173d4aaba59d9a04a6102479>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93567723173d4aaba59d9a04a6102479>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        do {\n            start = str.IndexOf(substring, start);\n
    \           end = str.IndexOf(substring, start + 1);\n            if (start !=
    -1 && end != -1) {\n                found = true;\n                count++;\n
    \           }\n            start++;\n        } while (start != -1 && end != -1
    && !found);\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp46f_xr3l.cs(22,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp46f_xr3l.cs(22,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp46f_xr3l.cs(23,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp46f_xr3l.cs(23,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1), substring);\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91ec6b74dc6840178c46fe60be2a2d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91ec6b74dc6840178c46fe60be2a2d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        bool overlap = false;\n        do
    {\n            found = false;\n            overlap = false;\n            start
    = str.IndexOf(substring, start);\n            if (start == -1) {\n                break;\n
    \           }\n            end = str.IndexOf(substring, start + 1);\n            if
    (end == -1) {\n                end = str.Length;\n            }\n            len
    = end - start + 1;\n            if (len > 0) {\n                found = true;\n
    \               count += 1;\n            }\n            while (end < str.Length)
    {\n                end = str.IndexOf(substring, end + 1);\n                if
    (end == -1) {\n                    end = str.Length;\n                }\n                len
    = end - start + 1;\n                if (len > 0) {\n                    found
    = true;\n                    count += 1;\n                }\n                overlap
    = true;\n            }\n            start = end + 1;\n        } while (start <
    str.Length);\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkswsrxma.cs(26,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpkswsrxma.cs(26,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkswsrxma.cs(30,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpkswsrxma.cs(30,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkswsrxma.cs(40,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpkswsrxma.cs(40,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkswsrxma.cs(21,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    /tmp/tmpkswsrxma.cs(22,14): warning CS0219: The variable ''overlap'' is assigned
    but its value is never used

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        bool startFound = false;\n        bool
    endFound = false;\n        bool lenFound = false;\n        bool startFoundLen
    = false;\n        bool endFoundLen = false;\n        bool lenFoundLen = false;\n
    \       bool startFoundEndLen = false;\n        bool endFoundStartLen = false;\n
    \       bool lenFoundEndLen = false;\n        bool startFoundLenEndLen = false;\n
    \       bool endFoundStartLenLen = false;\n        bool lenFoundLenEndLen = false;\n
    \       bool startFoundEndLenLen = false;\n        bool endFoundStartLenLen =
    false;\n        bool lenFoundEndLenLen = false;\n        bool startFoundLenEndLenLen
    = false;\n        bool endFoundStartLenLenLen = false;\n        bool lenFoundLenEndLenLen
    = false;\n        bool startFoundEndLenLenLen = false;\n        bool endFoundStartLenLenLen
    = false;\n        bool lenFoundEndLenLenLen = false;\n        bool startFoundLenEndLenLen
    = false;\n        bool endFoundStartLenLenLen = false;\n        bool lenFoundLenEndLenLenLen
    = false;\n        bool startFoundEndLenLenLen = false;\n        bool endFoundStartLenLenLen
    = false;\n        bool lenFoundLenEndLenLenLen = false;\n        bool startFoundEndLenLenLen
    = false;\n        bool endFoundStartLenLenLen = false;\n        bool lenFoundLenEndLenLenLen
    = false;\n        bool startFoundEndLenLenLen = false;\n        bool endFoundStartLenLenLen
    = false;\n        bool lenFoundLenEndLenLenLen = false;\n        bool startFoundEndLenLenLen
    = false;\n        bool endFoundStartLenLenLen = false;\n        bool lenFoundLenEndLenLenLen
    = false;\n        bool startFoundEndLenLenLen = false;\n        bool endFoundStartLenLenLen
    = false;\n        bool lenFoundLenEndLenLenLen = false;\n        bool startFoundEndLenLenLen
    = false;\n        bool endFoundStartLenLenLen = false;\n        bool lenFoundLenEndLenLenLen
    = false;\n        bool startFoundEndLenLenLen = false;\n        bool endFoundStartLenLenLen
    = false;\n        bool lenFoundLenEndLenLenLen = false;\n        bool startFoundEndLenLenLen
    = false;\n        bool endFoundStartLenLenLen = false;\n        bool lenFoundLenEndLenLenLen
    = false;\n        bool startFoundEndLenLenLen = false;\n        bool endFoundStartLenLenLen
    = false;\n        bool lenFoundLenEndLenLenLen = false;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw70uusa9.cs(35,14): error CS0128: A local variable or function named ''endFoundStartLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(41,14): error CS0128: A local variable or function named ''endFoundStartLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(43,14): error CS0128: A local variable or function named ''startFoundLenEndLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(44,14): error CS0128: A local variable or function named ''endFoundStartLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(46,14): error CS0128: A local variable or function named ''startFoundEndLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(47,14): error CS0128: A local variable or function named ''endFoundStartLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(48,14): error CS0128: A local variable or function named ''lenFoundLenEndLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(49,14): error CS0128: A local variable or function named ''startFoundEndLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(50,14): error CS0128: A local variable or function named ''endFoundStartLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(51,14): error CS0128: A local variable or function named ''lenFoundLenEndLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(52,14): error CS0128: A local variable or function named ''startFoundEndLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(53,14): error CS0128: A local variable or function named ''endFoundStartLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(54,14): error CS0128: A local variable or function named ''lenFoundLenEndLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(55,14): error CS0128: A local variable or function named ''startFoundEndLenLenLen''
    is already defined in this scope

    /tmp/tmpw70uusa9.cs(56,14): err'
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long length = 0;\n        bool found = false;\n
    \       bool startFound = false;\n        bool endFound = false;\n        bool
    foundOverlap = false;\n        bool foundOverlap2 = false;\n        bool foundOverlap3
    = false;\n        bool foundOverlap4 = false;\n        bool foundOverlap5 = false;\n
    \       bool foundOverlap6 = false;\n        bool foundOverlap7 = false;\n        bool
    foundOverlap8 = false;\n        bool foundOverlap9 = false;\n        bool foundOverlap10
    = false;\n        bool foundOverlap11 = false;\n        bool foundOverlap12 =
    false;\n        bool foundOverlap13 = false;\n        bool foundOverlap14 = false;\n
    \       bool foundOverlap15 = false;\n        bool foundOverlap16 = false;\n        bool
    foundOverlap17 = false;\n        bool foundOverlap18 = false;\n        bool foundOverlap19
    = false;\n        bool foundOverlap20 = false;\n        bool foundOverlap21 =
    false;\n        bool foundOverlap22 = false;\n        bool foundOverlap23 = false;\n
    \       bool foundOverlap24 = false;\n        bool foundOverlap25 = false;\n        bool
    foundOverlap26 = false;\n        bool foundOverlap27 = false;\n        bool foundOverlap28
    = false;\n        bool foundOverlap29 = false;\n        bool foundOverlap30 =
    false;\n        bool foundOverlap31 = false;\n        bool foundOverlap32 = false;\n
    \       bool foundOverlap33 = false;\n        bool foundOverlap34 = false;\n        bool
    foundOverlap35 = false;\n        bool foundOverlap36 = false;\n        bool foundOverlap37
    = false;\n        bool foundOverlap38 = false;\n        bool foundOverlap39 =
    false;\n        bool foundOverlap40 = false;\n        bool foundOverlap41 = false;\n
    \       bool foundOverlap42 = false;\n        bool foundOverlap43 = false;\n        bool
    foundOverlap44 = false;\n        bool foundOverlap45 = false;\n        bool foundOverlap46
    = false;\n        bool foundOverlap47 = false;\n        bool foundOverlap48 =
    false;\n        bool foundOverlap49 = false;\n        bool foundOverlap50 = false;\n
    \       bool foundOverlap51 = false;\n        bool foundOverlap52 = false;\n        bool
    foundOverlap53 = false;\n        bool foundOverlap54 = false;\n        bool foundOverlap55
    = false;\n        bool foundOverlap5\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rif1und.cs(82,27): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = str.Length - substring.Length;\n        long startIndex
    = str.IndexOf(substring, start);\n        while (startIndex != -1) {\n            count
    += end - start;\n            start = startIndex + substring.Length;\n            startIndex
    = str.IndexOf(substring, start);\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9cenyeoe.cs(23,39): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp9cenyeoe.cs(23,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp9cenyeoe.cs(27,38): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp9cenyeoe.cs(27,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.Length - substring.Length) + 1;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <a6d05151e0d347ebb15dbe90623c964f>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <a6d05151e0d347ebb15dbe90623c964f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <a6d05151e0d347ebb15dbe90623c964f>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <a6d05151e0d347ebb15dbe90623c964f>:0
    \n"
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        string pattern = string.Concat(substring,
    string.Empty);\n        string pattern2 = string.Concat(substring, string.Empty);\n
    \       string pattern3 = string.Concat(substring, string.Empty);\n        string
    pattern4 = string.Concat(substring, string.Empty);\n        string pattern5 =
    string.Concat(substring, string.Empty);\n        string pattern6 = string.Concat(substring,
    string.Empty);\n        string pattern7 = string.Concat(substring, string.Empty);\n
    \       string pattern8 = string.Concat(substring, string.Empty);\n        string
    pattern9 = string.Concat(substring, string.Empty);\n        string pattern10 =
    string.Concat(substring, string.Empty);\n        string pattern11 = string.Concat(substring,
    string.Empty);\n        string pattern12 = string.Concat(substring, string.Empty);\n
    \       string pattern13 = string.Concat(substring, string.Empty);\n        string
    pattern14 = string.Concat(substring, string.Empty);\n        string pattern15
    = string.Concat(substring, string.Empty);\n        string pattern16 = string.Concat(substring,
    string.Empty);\n        string pattern17 = string.Concat(substring, string.Empty);\n
    \       string pattern18 = string.Concat(substring, string.Empty);\n        string
    pattern19 = string.Concat(substring, string.Empty);\n        string pattern20
    = string.Concat(substring, string.Empty);\n        string pattern21 = string.Concat(substring,
    string.Empty);\n        string pattern22 = string.Concat(substring, string.Empty);\n
    \       string pattern23 = string.Concat(substring, string.Empty);\n        string
    pattern24 = string.Concat(substring, string.Empty);\n        string pattern25
    = string.Concat(substring, string.Empty);\n        string pattern26 = string.Concat(substring,
    string.Empty);\n        string pattern27 = string.Concat(substring, string.Empty);\n
    \       string pattern28 = string.Concat(substring, string.Empty);\n        string
    pattern29 = string.Concat(substring, string.Empty);\n        string pattern30
    = string.Concat(substring, string.Empty);\n        string pattern31 = string.Concat(substring,
    string.Empty);\n        string pattern32 = string.Concat(substring, string.Empty);\n
    \       string pattern33 = string.Concat(substring, string.Empty);\n        string
    pattern34 = string.Concat(substring, string.Empty);\n        string pattern35
    = string.Concat(substring, string.Empty);\n        string pattern36 = string.Concat(substring,
    string.Empty);\n        string pattern37 = string.Concat(substring, string.Empty);\n
    \       string \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3jnyo_y.cs(55,15): error CS1001: Identifier expected

    /tmp/tmpx3jnyo_y.cs(55,15): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) > -1 ? 1 : 0;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1), substring);\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91ec6b74dc6840178c46fe60be2a2d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91ec6b74dc6840178c46fe60be2a2d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        long i = 0;\n        bool found = false;\n        do {\n            found
    = false;\n            len = str.Length;\n            end = str.IndexOf(substring,
    start);\n            if (end == -1) {\n                end = len;\n            }\n
    \           while (end > start) {\n                if (str.Substring(start, end
    - start).Equals(substring)) {\n                    found = true;\n                    break;\n
    \               }\n                start = end + 1;\n                end = str.IndexOf(substring,
    start);\n                if (end == -1) {\n                    end = len;\n                }\n
    \           }\n            if (found) {\n                count++;\n            }\n
    \           start = end + 1;\n        } while (end != len);\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplo2ctqu8.cs(26,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmplo2ctqu8.cs(26,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmplo2ctqu8.cs(31,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmplo2ctqu8.cs(31,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmplo2ctqu8.cs(36,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmplo2ctqu8.cs(36,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmplo2ctqu8.cs(21,14): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.Length - substring.Length);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n"
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) > -1 ? 1 : 0;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        do {\n            start = str.IndexOf(substring, start);\n
    \           if (start == -1) break;\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1) break;\n            found = true;\n            count++;\n
    \           start++;\n        } while (end != -1);\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhpr1cky.cs(22,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpjhpr1cky.cs(22,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpjhpr1cky.cs(24,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpjhpr1cky.cs(24,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpjhpr1cky.cs(20,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long index = 0;\n        bool found = false;\n        do
    {\n            index = str.IndexOf(substring, start);\n            if (index >=
    0) {\n                found = true;\n                end = index + 1;\n                length
    = end - start;\n                count += length;\n                start = end
    + 1;\n            } else {\n                found = false;\n            }\n        }
    while (found == true);\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqm2lt782.cs(24,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpqm2lt782.cs(24,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        bool found2 = false;\n        bool
    found3 = false;\n        bool found4 = false;\n        bool found5 = false;\n
    \       bool found6 = false;\n        bool found7 = false;\n        bool found8
    = false;\n        bool found9 = false;\n        bool found10 = false;\n        bool
    found11 = false;\n        bool found12 = false;\n        bool found13 = false;\n
    \       bool found14 = false;\n        bool found15 = false;\n        bool found16
    = false;\n        bool found17 = false;\n        bool found18 = false;\n        bool
    found19 = false;\n        bool found20 = false;\n        bool found21 = false;\n
    \       bool found22 = false;\n        bool found23 = false;\n        bool found24
    = false;\n        bool found25 = false;\n        bool found26 = false;\n        bool
    found27 = false;\n        bool found28 = false;\n        bool found29 = false;\n
    \       bool found30 = false;\n        bool found31 = false;\n        bool found32
    = false;\n        bool found33 = false;\n        bool found34 = false;\n        bool
    found35 = false;\n        bool found36 = false;\n        bool found37 = false;\n
    \       bool found38 = false;\n        bool found39 = false;\n        bool found40
    = false;\n        bool found41 = false;\n        bool found42 = false;\n        bool
    found43 = false;\n        bool found44 = false;\n        bool found45 = false;\n
    \       bool found46 = false;\n        bool found47 = false;\n        bool found48
    = false;\n        bool found49 = false;\n        bool found50 = false;\n        bool
    found51 = false;\n        bool found52 = false;\n        bool found53 = false;\n
    \       bool found54 = false;\n        bool found55 = false;\n        bool found56
    = false;\n        bool found57 = false;\n        bool found58 = false;\n        bool
    found59 = false;\n        bool found60 = false;\n        bool found61 = false;\n
    \       bool found62 = false;\n        bool found63 = false;\n        bool found64
    = false;\n        bool found65 = false;\n        bool found66 = false;\n        bool
    found67 = false;\n        bool found68 = false;\n        bool found69 = false;\n
    \       bool found70 = false;\n        bool found71 = false;\n        bool found72
    = false;\n        bool found73 = false;\n        bool found74 = false;\n        bool
    found75 = false;\n        bool found76 = false;\n        bool found77 = false;\n
    \       bool found78 = false;\n        bool found79 = false;\n        bool found\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp40rme5oa.cs(100,19): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1), substring);\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91ec6b74dc6840178c46fe60be2a2d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91ec6b74dc6840178c46fe60be2a2d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) - str.IndexOf(substring, 0);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null)\n            throw new ArgumentNullException();\n
    \       if (str.Length == 0)\n            return 0;\n        if (substring.Length
    == 0)\n            return str.Length;\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        bool found = false;\n        do {\n            found
    = false;\n            start = str.IndexOf(substring, start);\n            if (start
    == -1)\n                break;\n            end = str.IndexOf(substring, start
    + 1);\n            if (end == -1)\n                end = str.Length;\n            found
    = true;\n            count += end - start + 1;\n        } while (found);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp76sg542m.cs(29,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp76sg542m.cs(29,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp76sg542m.cs(32,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp76sg542m.cs(32,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring))\n
    \           return 0;\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        long length = 0;\n        bool found = false;\n        do {\n
    \           found = false;\n            start = str.IndexOf(substring, start);\n
    \           if (start == -1)\n                break;\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1)\n                end = str.Length;\n            length
    = end - start + 1;\n            count += length;\n            found = true;\n
    \           start++;\n        } while (found && start < str.Length);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz3ppzs6j.cs(26,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpz3ppzs6j.cs(26,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpz3ppzs6j.cs(29,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpz3ppzs6j.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        do {\n            found = false;\n
    \           start = str.IndexOf(substring, start);\n            if (start == -1)
    {\n                break;\n            }\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1) {\n                end = str.Length;\n
    \           }\n            length = end - start + 1;\n            count += 1;\n
    \           found = true;\n        } while (found && end != str.Length);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5bw4pzyc.cs(24,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp5bw4pzyc.cs(24,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5bw4pzyc.cs(28,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp5bw4pzyc.cs(28,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        do {\n            found = false;\n
    \           start = str.IndexOf(substring, start);\n            if (start != -1)
    {\n                end = str.IndexOf(substring, start + 1);\n                if
    (end != -1) {\n                    len = end - start + 1;\n                    found
    = true;\n                }\n            }\n            count++;\n            start++;\n
    \       } while (found == false);\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5k6ipqqk.cs(24,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp5k6ipqqk.cs(24,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5k6ipqqk.cs(26,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp5k6ipqqk.cs(26,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) return
    0;\n        long count = 0;\n        long start = 0;\n        long end = 0;\n
    \       long len = str.Length;\n        long sublen = substring.Length;\n        long
    substart = 0;\n        long subend = 0;\n        bool found = false;\n        bool
    foundSub = false;\n        bool foundSubSub = false;\n        bool foundSubSubSub
    = false;\n        bool foundSubSubSubSub = false;\n        bool foundSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSubSub\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc0ysfj9s.cs(57,49): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null) {\n            throw new ArgumentNullException();\n
    \       }\n        long count = 0;\n        long start = 0;\n        long end
    = 0;\n        long len = 0;\n        bool found = false;\n        bool startFound
    = false;\n        bool endFound = false;\n        bool foundOverlap = false;\n
    \       bool startOverlap = false;\n        bool endOverlap = false;\n        bool
    startFoundOverlap = false;\n        bool endFoundOverlap = false;\n        bool
    startOverlapOverlap = false;\n        bool endOverlapOverlap = false;\n        bool
    startFoundOverlapOverlap = false;\n        bool endFoundOverlapOverlap = false;\n
    \       bool startOverlapOverlapOverlap = false;\n        bool endOverlapOverlapOverlap
    = false;\n        bool startFoundOverlapOverlapOverlap = false;\n        bool
    endFoundOverlapOverlapOverlap = false;\n        bool startOverlapOverlapOverlapOverlap
    = false;\n        bool endOverlapOverlapOverlapOverlap = false;\n        bool
    startFoundOverlapOverlapOverlap = false;\n        bool endFoundOverlapOverlapOverlap
    = false;\n        bool startOverlapOverlapOverlapOverlap = false;\n        bool
    endOverlapOverlapOverlapOverlap = false;\n        bool startFoundOverlapOverlapOverlapOverlap
    = false;\n        bool endFoundOverlapOverlapOverlapOverlap = false;\n        bool
    startOverlapOverlapOverlapOverlapOverlap = false;\n        bool endOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool startFoundOverlapOverlapOverlapOverlap = false;\n        bool
    endFoundOverlapOverlapOverlapOverlap = false;\n        bool startOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool endOverlapOverlapOverlapOverlapOverlap = false;\n        bool
    startFoundOverlapOverlapOverlapOverlapOverlap = false;\n        bool endFoundOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool startOverlapOverlapOverlapOverlapOverlapOverlap = false;\n
    \       bool endOverlapOverlapOverlapOverlapOverlapOverlap = false;\n        bool
    startFoundOverlapOverlapOverlapOverlapOverlap = false;\n        bool endFoundOverlapOverlapOverlapOverlapOverlap
    = false;\n        bool startOverlapOverlapOverlapOverlapOverlapOverlap = false;\n
    \       bool endOverlapOverlapOverlapOverlapOverlapOverlap = false;\n        bool
    startFoundOverlapOverlapOverlapOverlapOver\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx2qakujz.cs(62,56): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long i = 0;\n        bool found = false;\n        do {\n
    \           found = false;\n            end = str.IndexOf(substring, start);\n
    \           if (end == -1) {\n                end = length;\n            }\n            length
    = end - start;\n            count = count + 1;\n            start = end + 1;\n
    \           i++;\n        } while (found == false && i < str.Length);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3s7lba0j.cs(25,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp3s7lba0j.cs(25,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c) != -1 ? 1 : 0;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd77ee4ec82249fab3b034902d2d9c3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd77ee4ec82249fab3b034902d2d9c3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.Length - substring.Length);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n"
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else if (str.IndexOf(c, 0) == str.IndexOf(substring,
    0)) {\n                count += HowManyTimes(str.Substring(1, str.Length - 1),
    substring);\n            }\n            else if (str.IndexOf(c, str.Length - 1)
    == str.IndexOf(substring, str.Length - 1)) {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring);\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0acd575ba24848a3a8c8b6eccf5ce8cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0acd575ba24848a3a8c8b6eccf5ce8cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) return
    0;\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc354dba27a74952bc5288b2fd6548d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc354dba27a74952bc5288b2fd6548d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        long startIndex = 0;\n        long endIndex = 0;\n        long
    length = 0;\n        bool foundSubstring = false;\n        long index = 0;\n        bool
    foundIndex = false;\n        bool foundSubstringIndex = false;\n        bool foundIndexIndex
    = false;\n        bool foundSubstringIndexIndex = false;\n        bool foundIndexSubstring
    = false;\n        bool foundSubstringIndexSubstring = false;\n        bool foundIndexSubstringIndex
    = false;\n        bool foundSubstringIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n        bool
    foundSubstringIndexIndexIndexSubstring = false;\n        bool foundSubstringIndexIndexIndexSubstring
    = false;\n        bool foundSubstringIndexIndexIndexSubstring = false;\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuswxpxeg.cs(35,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(36,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(37,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(38,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(39,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(40,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(41,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(42,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(43,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(44,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(45,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(46,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSubstring''
    is already defined in this scope

    /tmp/tmpuswxpxeg.cs(47,14): error CS0128: A local variable or function named ''foundSubstringIndexIndexIndexSu'
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool found2 = false;\n        bool
    found3 = false;\n        bool found4 = false;\n        bool found5 = false;\n
    \       bool found6 = false;\n        bool found7 = false;\n        bool found8
    = false;\n        bool found9 = false;\n        bool found10 = false;\n        bool
    found11 = false;\n        bool found12 = false;\n        bool found13 = false;\n
    \       bool found14 = false;\n        bool found15 = false;\n        bool found16
    = false;\n        bool found17 = false;\n        bool found18 = false;\n        bool
    found19 = false;\n        bool found20 = false;\n        bool found21 = false;\n
    \       bool found22 = false;\n        bool found23 = false;\n        bool found24
    = false;\n        bool found25 = false;\n        bool found26 = false;\n        bool
    found27 = false;\n        bool found28 = false;\n        bool found29 = false;\n
    \       bool found30 = false;\n        bool found31 = false;\n        bool found32
    = false;\n        bool found33 = false;\n        bool found34 = false;\n        bool
    found35 = false;\n        bool found36 = false;\n        bool found37 = false;\n
    \       bool found38 = false;\n        bool found39 = false;\n        bool found40
    = false;\n        bool found41 = false;\n        bool found42 = false;\n        bool
    found43 = false;\n        bool found44 = false;\n        bool found45 = false;\n
    \       bool found46 = false;\n        bool found47 = false;\n        bool found48
    = false;\n        bool found49 = false;\n        bool found50 = false;\n        bool
    found51 = false;\n        bool found52 = false;\n        bool found53 = false;\n
    \       bool found54 = false;\n        bool found55 = false;\n        bool found56
    = false;\n        bool found57 = false;\n        bool found58 = false;\n        bool
    found59 = false;\n        bool found60 = false;\n        bool found61 = false;\n
    \       bool found62 = false;\n        bool found63 = false;\n        bool found64
    = false;\n        bool found65 = false;\n        bool found66 = false;\n        bool
    found67 = false;\n        bool found68 = false;\n        bool found69 = false;\n
    \       bool found70 = false;\n        bool found71 = false;\n        bool found72
    = false;\n        bool found73 = false;\n        bool found74 = false;\n        bool
    found75 = false;\n        bool found76 = false;\n        bool found77 = false;\n
    \       bool found78 = false;\n        bool found79 = false;\n        bool found\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1czkja97.cs(100,19): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.Length - substring.Length, StringComparison.OrdinalIgnoreCase)
    >= 0;\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8bc4wc_w.cs(19,68): error CS1503: Argument 3: cannot convert from ''System.StringComparison''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        do {\n            start = str.IndexOf(substring, start);\n
    \           if (start == -1) break;\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1) break;\n            found = true;\n            count++;\n
    \           start = end + 1;\n        } while (start < str.Length);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1mqf776v.cs(22,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp1mqf776v.cs(22,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp1mqf776v.cs(24,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp1mqf776v.cs(24,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp1mqf776v.cs(20,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring))\n
    \           return 0;\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        long len = str.Length;\n        long sublen = substring.Length;\n
    \       long maxlen = Math.Max(len, sublen);\n        long minlen = Math.Min(len,
    sublen);\n        long mid = maxlen / 2;\n        bool found = false;\n        bool
    done = false;\n        bool first = true;\n        while (start < maxlen) {\n
    \           end = str.IndexOf(substring, start);\n            if (end == -1)\n
    \               break;\n            count++;\n            if (first) {\n                start
    = end + 1;\n                first = false;\n            } else {\n                start
    = end + 1;\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3jfv26r9.cs(31,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp3jfv26r9.cs(31,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp3jfv26r9.cs(27,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    /tmp/tmp3jfv26r9.cs(28,14): warning CS0219: The variable ''done'' is assigned
    but its value is never used

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) - str.IndexOf(substring, 0);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long len = 0;\n        bool found = false;\n
    \       bool isOverlap = false;\n        do {\n            found = false;\n            isOverlap
    = false;\n            len = str.Length;\n            end = str.IndexOf(substring,
    start);\n            if (end == -1) {\n                end = len;\n                found
    = true;\n            }\n            start = end + 1;\n            while (end <
    len) {\n                if (str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (end < len && str.Substring(end, 1) == substring) {\n                    count++;\n
    \                   found = true;\n                }\n                end++;\n
    \               if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpey5ro4b7.cs(112,21): error CS1525: Invalid expression term ''}''

    /tmp/tmpey5ro4b7.cs(112,21): error CS1026: ) expected

    /tmp/tmpey5ro4b7.cs(112,21): error CS1002: ; expected

    /tmp/tmpey5ro4b7.cs(114,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpey5ro4b7.cs(121,2): error CS1003: Syntax error, ''while'' expected

    /tmp/tmpey5ro4b7.cs(121,2): error CS1003: Syntax error, ''('' expected

    /tmp/tmpey5ro4b7.cs(121,2): error CS1733: Expected expression

    /tmp/tmpey5ro4b7.cs(121,2): error CS1026: ) expected

    /tmp/tmpey5ro4b7.cs(121,2): error CS1002: ; expected

    /tmp/tmpey5ro4b7.cs(121,2): error CS1513: } expected

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool startFound = false;\n        bool
    endFound = false;\n        bool lengthFound = false;\n        bool foundStartFound
    = false;\n        bool foundEndFound = false;\n        bool foundLengthFound =
    false;\n        bool foundStartFoundEndFoundLengthFound = false;\n        bool
    foundStartFoundEndFoundLengthFoundLengthFound = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound
    = false;\n        bool foundStartFoundEndFoundLengthFoundLengthFoundLengthFoundLengthFoundLengthFound\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp93g7pgd0.cs(46,92): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        string tempStr = str;\n        string tempSub
    = substring;\n        bool found = false;\n        do {\n            found = false;\n
    \           int start = 0;\n            int end = 0;\n            while (end <
    tempStr.Length) {\n                end = tempStr.IndexOf(tempSub, start);\n                if
    (end == -1) {\n                    break;\n                }\n                string
    sub = tempStr.Substring(start, end - start);\n                if (sub.Equals(tempSub))
    {\n                    found = true;\n                    break;\n                }\n
    \               start = end + 1;\n            }\n            if (found) {\n                count++;\n
    \           }\n            tempStr = tempStr.Substring(0, end);\n            tempSub
    = tempSub.Substring(0, end);\n        } while (tempStr.Length > 0);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00076]
    in <7610c2532bc545e79f17d692142c9064>:0 \n  at Problem.Main (System.String[] args)
    [0x0001a] in <7610c2532bc545e79f17d692142c9064>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Length cannot be less than zero.\nParameter
    name: length\n  at System.String.Substring (System.Int32 startIndex, System.Int32
    length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes
    (System.String str, System.String substring) [0x00076] in <7610c2532bc545e79f17d692142c9064>:0
    \n  at Problem.Main (System.String[] args) [0x0001a] in <7610c2532bc545e79f17d692142c9064>:0
    \n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null) {\n            throw new ArgumentNullException();\n
    \       }\n        if (str.Length == 0 || substring.Length == 0) {\n            return
    0;\n        }\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        long length = str.Length;\n        long substringLength = substring.Length;\n
    \       while (start < length) {\n            end = str.IndexOf(substring, start);\n
    \           if (end == -1) {\n                break;\n            }\n            count
    += end - start;\n            start = end + substringLength;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaqsxh5t0.cs(29,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpaqsxh5t0.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) > -1 ? 1 : 0;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring))\n
    \           return 0;\n        var count = new Dictionary<char, int>();\n        foreach
    (var c in substring)\n            count[c] = count.ContainsKey(c) ? count[c] +
    1 : 1;\n        var res = 0;\n        foreach (var c in str)\n            if (count.ContainsKey(c))\n
    \               count[c]--;\n                \n            else\n                count[c]
    = 1;\n            \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n            \n            \n            \n
    \           \n            \n            \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfbehnsx.cs(22,13): warning CS0219: The variable ''res'' is assigned but
    its value is never used

    /tmp/tmpbfbehnsx.cs(16,24): error CS0161: ''Problem.HowManyTimes(string, string)'':
    not all code paths return a value

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        long start2 = 0;\n        long end2 = 0;\n        bool
    found2 = false;\n        long start3 = 0;\n        long end3 = 0;\n        bool
    found3 = false;\n        long start4 = 0;\n        long end4 = 0;\n        bool
    found4 = false;\n        long start5 = 0;\n        long end5 = 0;\n        bool
    found5 = false;\n        long start6 = 0;\n        long end6 = 0;\n        bool
    found6 = false;\n        long start7 = 0;\n        long end7 = 0;\n        bool
    found7 = false;\n        long start8 = 0;\n        long end8 = 0;\n        bool
    found8 = false;\n        long start9 = 0;\n        long end9 = 0;\n        bool
    found9 = false;\n        long start10 = 0;\n        long end10 = 0;\n        bool
    found10 = false;\n        long start11 = 0;\n        long end11 = 0;\n        bool
    found11 = false;\n        long start12 = 0;\n        long end12 = 0;\n        bool
    found12 = false;\n        long start13 = 0;\n        long end13 = 0;\n        bool
    found13 = false;\n        long start14 = 0;\n        long end14 = 0;\n        bool
    found14 = false;\n        long start15 = 0;\n        long end15 = 0;\n        bool
    found15 = false;\n        long start16 = 0;\n        long end16 = 0;\n        bool
    found16 = false;\n        long start17 = 0;\n        long end17 = 0;\n        bool
    found17 = false;\n        long start18 = 0;\n        long end18 = 0;\n        bool
    found18 = false;\n        long start19 = 0;\n        long end19 = 0;\n        bool
    found19 = false;\n        long start20 = 0;\n        long end20 = 0;\n        bool
    found20 = false;\n        long start21 = 0;\n        long end21 = 0;\n        bool
    found21 = false;\n        long start22 = 0;\n        long end22 = 0;\n        bool
    found22 = false;\n        long start23 = 0;\n        long end23 = 0;\n        bool
    found23 = false;\n        long start24 = 0;\n        long end24 = 0;\n        bool
    found24 = false;\n        long start25 = 0;\n        long end25 = 0;\n        bool
    found25 = false;\n        long start26 = 0;\n        long end26 = 0;\n        bool
    found26 = false;\n        long start27 = 0;\n        long end27 = 0;\n        bool
    found27 = false;\n        long start28 = 0;\n        long end28 = 0;\n        bool
    found28 = false;\n        long start29 = 0;\n        long end29 = 0;\n        bool
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppxszpq2q.cs(104,13): error CS1001: Identifier expected

    /tmp/tmppxszpq2q.cs(104,13): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) return
    0;\n        long count = 0;\n        long start = 0;\n        long end = 0;\n
    \       long len = 0;\n        bool found = false;\n        do {\n            found
    = false;\n            start = str.IndexOf(substring, start);\n            if (start
    == -1) break;\n            end = str.IndexOf(substring, start + 1);\n            if
    (end == -1) end = str.Length;\n            len = end - start + 1;\n            count
    += 1;\n            found = true;\n        } while (found && start != -1);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9y19m_vd.cs(25,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp9y19m_vd.cs(25,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp9y19m_vd.cs(27,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp9y19m_vd.cs(27,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.IndexOf(substring) + 1);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c1555e3274e44c698161234a102af25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c1555e3274e44c698161234a102af25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long index = 0;\n        bool found = false;\n        do
    {\n            found = false;\n            index = str.IndexOf(substring, start);\n
    \           if (index != -1) {\n                found = true;\n                end
    = index;\n                length = end - start + 1;\n            }\n            start++;\n
    \       } while (!found && start < str.Length);\n        if (found) {\n            count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz5sozqk7.cs(25,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpz5sozqk7.cs(25,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long i = 0;\n        bool found = false;\n        do {\n
    \           found = false;\n            start = i;\n            end = i + 1;\n
    \           length = str.Length - end;\n            while (end < str.Length) {\n
    \               if (str[end] == substring[start]) {\n                    found
    = true;\n                    break;\n                }\n                end++;\n
    \           }\n            if (found) {\n                count++;\n                i
    += length;\n            }\n        } while (i < str.Length);\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmdcqphi4.cs(29,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpmdcqphi4.cs(29,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null) {\n            throw new ArgumentNullException();\n
    \       }\n        long count = 0;\n        long start = 0;\n        long end
    = 0;\n        long len = str.Length;\n        long sublen = substring.Length;\n
    \       long max = (long)Math.Pow(2, 32);\n        long min = (long)Math.Pow(2,
    32);\n        while (start < len) {\n            end = start + sublen;\n            if
    (end > len) {\n                end = len;\n            }\n            long sub
    = Convert.ToInt64(Math.Floor(Math.Log(end - start, 2) / Math.Log(max, 2)));\n
    \           if (sub > max) {\n                sub = max;\n            }\n            if
    (sub < min) {\n                sub = min;\n            }\n            long sub2
    = Convert.ToInt64(Math.Floor(Math.Log(end - start, 2) / Math.Log(min, 2)));\n
    \           if (sub2 > max) {\n                sub2 = max;\n            }\n            if
    (sub2 < min) {\n                sub2 = min;\n            }\n            if (sub
    == sub2) {\n                count++;\n            }\n            start = end +
    1;\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e53ea11b03a448d3859ca18a23ec61f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e53ea11b03a448d3859ca18a23ec61f0>:0
    \n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool foundStart = false;\n        bool
    foundEnd = false;\n        bool foundLength = false;\n        bool foundSub =
    false;\n        bool foundSubStart = false;\n        bool foundSubEnd = false;\n
    \       bool foundSubLength = false;\n        bool foundSubSub = false;\n        bool
    foundSubSubStart = false;\n        bool foundSubSubEnd = false;\n        bool
    foundSubSubLength = false;\n        bool foundSubSubSub = false;\n        bool
    foundSubSubSubStart = false;\n        bool foundSubSubSubEnd = false;\n        bool
    foundSubSubSubLength = false;\n        bool foundSubSubSubSub = false;\n        bool
    foundSubSubSubSubStart = false;\n        bool foundSubSubSubSubEnd = false;\n
    \       bool foundSubSubSubSubLength = false;\n        bool foundSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd
    = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEn\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphefpv9xa.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c) != -1 ? 1 : 0;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd77ee4ec82249fab3b034902d2d9c3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd77ee4ec82249fab3b034902d2d9c3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = str.Length;\n        long sublen = substring.Length;\n        long maxlen
    = Math.Max(len, sublen);\n        long minlen = Math.Min(len, sublen);\n        bool
    found = false;\n        long startpos = 0;\n        long endpos = 0;\n        bool
    foundsub = false;\n        bool foundsub2 = false;\n        bool foundsub3 = false;\n
    \       bool foundsub4 = false;\n        bool foundsub5 = false;\n        bool
    foundsub6 = false;\n        bool foundsub7 = false;\n        bool foundsub8 =
    false;\n        bool foundsub9 = false;\n        bool foundsub10 = false;\n        bool
    foundsub11 = false;\n        bool foundsub12 = false;\n        bool foundsub13
    = false;\n        bool foundsub14 = false;\n        bool foundsub15 = false;\n
    \       bool foundsub16 = false;\n        bool foundsub17 = false;\n        bool
    foundsub18 = false;\n        bool foundsub19 = false;\n        bool foundsub20
    = false;\n        bool foundsub21 = false;\n        bool foundsub22 = false;\n
    \       bool foundsub23 = false;\n        bool foundsub24 = false;\n        bool
    foundsub25 = false;\n        bool foundsub26 = false;\n        bool foundsub27
    = false;\n        bool foundsub28 = false;\n        bool foundsub29 = false;\n
    \       bool foundsub30 = false;\n        bool foundsub31 = false;\n        bool
    foundsub32 = false;\n        bool foundsub33 = false;\n        bool foundsub34
    = false;\n        bool foundsub35 = false;\n        bool foundsub36 = false;\n
    \       bool foundsub37 = false;\n        bool foundsub38 = false;\n        bool
    foundsub39 = false;\n        bool foundsub40 = false;\n        bool foundsub41
    = false;\n        bool foundsub42 = false;\n        bool foundsub43 = false;\n
    \       bool foundsub44 = false;\n        bool foundsub45 = false;\n        bool
    foundsub46 = false;\n        bool foundsub47 = false;\n        bool foundsub48
    = false;\n        bool foundsub49 = false;\n        bool foundsub50 = false;\n
    \       bool foundsub51 = false;\n        bool foundsub52 = false;\n        bool
    foundsub53 = false;\n        bool foundsub54 = false;\n        bool foundsub55
    = false;\n        bool foundsub56 = false;\n        bool foundsub57 = false;\n
    \       bool foundsub58 = false;\n        bool foundsub59 = false;\n        bool
    foundsub60 = false;\n        bool foundsub61 = false;\n        bool foundsub62
    = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgrva6y23.cs(88,26): error CS1525: Invalid expression term ''}''

    /tmp/tmpgrva6y23.cs(88,26): error CS1002: ; expected

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool found2 = false;\n        bool
    found3 = false;\n        bool found4 = false;\n        bool found5 = false;\n
    \       bool found6 = false;\n        bool found7 = false;\n        bool found8
    = false;\n        bool found9 = false;\n        bool found10 = false;\n        bool
    found11 = false;\n        bool found12 = false;\n        bool found13 = false;\n
    \       bool found14 = false;\n        bool found15 = false;\n        bool found16
    = false;\n        bool found17 = false;\n        bool found18 = false;\n        bool
    found19 = false;\n        bool found20 = false;\n        bool found21 = false;\n
    \       bool found22 = false;\n        bool found23 = false;\n        bool found24
    = false;\n        bool found25 = false;\n        bool found26 = false;\n        bool
    found27 = false;\n        bool found28 = false;\n        bool found29 = false;\n
    \       bool found30 = false;\n        bool found31 = false;\n        bool found32
    = false;\n        bool found33 = false;\n        bool found34 = false;\n        bool
    found35 = false;\n        bool found36 = false;\n        bool found37 = false;\n
    \       bool found38 = false;\n        bool found39 = false;\n        bool found40
    = false;\n        bool found41 = false;\n        bool found42 = false;\n        bool
    found43 = false;\n        bool found44 = false;\n        bool found45 = false;\n
    \       bool found46 = false;\n        bool found47 = false;\n        bool found48
    = false;\n        bool found49 = false;\n        bool found50 = false;\n        bool
    found51 = false;\n        bool found52 = false;\n        bool found53 = false;\n
    \       bool found54 = false;\n        bool found55 = false;\n        bool found56
    = false;\n        bool found57 = false;\n        bool found58 = false;\n        bool
    found59 = false;\n        bool found60 = false;\n        bool found61 = false;\n
    \       bool found62 = false;\n        bool found63 = false;\n        bool found64
    = false;\n        bool found65 = false;\n        bool found66 = false;\n        bool
    found67 = false;\n        bool found68 = false;\n        bool found69 = false;\n
    \       bool found70 = false;\n        bool found71 = false;\n        bool found72
    = false;\n        bool found73 = false;\n        bool found74 = false;\n        bool
    found75 = false;\n        bool found76 = false;\n        bool found77 = false;\n
    \       bool found78 = false;\n        bool found79 = false;\n        bool found\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1czkja97.cs(100,19): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || str == \"\" || substring == null || substring ==
    \"\") {\n            return 0;\n        }\n        long count = 0;\n        long
    start = 0;\n        long end = 0;\n        bool found = false;\n        long startPos
    = 0;\n        long endPos = 0;\n        bool foundPos = false;\n        long startPos2
    = -1;\n        long endPos2 = -1;\n        bool foundPos2 = false;\n        long
    startPos3 = -1;\n        long endPos3 = -1;\n        bool foundPos3 = false;\n
    \       long startPos4 = -1;\n        long endPos4 = -1;\n        bool foundPos4
    = false;\n        long startPos5 = -1;\n        long endPos5 = -1;\n        bool
    foundPos5 = false;\n        long startPos6 = -1;\n        long endPos6 = -1;\n
    \       bool foundPos6 = false;\n        long startPos7 = -1;\n        long endPos7
    = -1;\n        bool foundPos7 = false;\n        long startPos8 = -1;\n        long
    endPos8 = -1;\n        bool foundPos8 = false;\n        long startPos9 = -1;\n
    \       long endPos9 = -1;\n        bool foundPos9 = false;\n        long startPos10
    = -1;\n        long endPos10 = -1;\n        bool foundPos10 = false;\n        long
    startPos11 = -1;\n        long endPos11 = -1;\n        bool foundPos11 = false;\n
    \       long startPos12 = -1;\n        long endPos12 = -1;\n        bool foundPos12
    = false;\n        long startPos13 = -1;\n        long endPos13 = -1;\n        bool
    foundPos13 = false;\n        long startPos14 = -1;\n        long endPos14 = -1;\n
    \       bool foundPos14 = false;\n        long startPos15 = -1;\n        long
    endPos15 = -1;\n        bool foundPos15 = false;\n        long startPos16 = -1;\n
    \       long endPos16 = -1;\n        bool foundPos16 = false;\n        long startPos17
    = -1;\n        long endPos17 = -1;\n        bool foundPos17 = false;\n        long
    startPos18 = -1;\n        long endPos18 = -1;\n        bool foundPos18 = false;\n
    \       long startPos19 = -1;\n        long endPos19 = -1;\n        bool foundPos19
    = false;\n        long startPos20 = -1;\n        long endPos20 = -1;\n        bool
    foundPos20 = false;\n        long startPos21 = -1;\n        long endPos21 = -1;\n
    \       bool foundPos21 = false;\n        long startPos22 = -1;\n        long
    endPos22\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj9vkxz7o.cs(88,22): error CS1002: ; expected

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null)\n            throw new ArgumentNullException();\n
    \       if (str.Length == 0 || substring.Length == 0)\n            return 0;\n
    \       long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        bool found2 = false;\n        bool
    found3 = false;\n        bool found4 = false;\n        bool found5 = false;\n
    \       bool found6 = false;\n        bool found7 = false;\n        bool found8
    = false;\n        bool found9 = false;\n        bool found10 = false;\n        bool
    found11 = false;\n        bool found12 = false;\n        bool found13 = false;\n
    \       bool found14 = false;\n        bool found15 = false;\n        bool found16
    = false;\n        bool found17 = false;\n        bool found18 = false;\n        bool
    found19 = false;\n        bool found20 = false;\n        bool found21 = false;\n
    \       bool found22 = false;\n        bool found23 = false;\n        bool found24
    = false;\n        bool found25 = false;\n        bool found26 = false;\n        bool
    found27 = false;\n        bool found28 = false;\n        bool found29 = false;\n
    \       bool found30 = false;\n        bool found31 = false;\n        bool found32
    = false;\n        bool found33 = false;\n        bool found34 = false;\n        bool
    found35 = false;\n        bool found36 = false;\n        bool found37 = false;\n
    \       bool found38 = false;\n        bool found39 = false;\n        bool found40
    = false;\n        bool found41 = false;\n        bool found42 = false;\n        bool
    found43 = false;\n        bool found44 = false;\n        bool found45 = false;\n
    \       bool found46 = false;\n        bool found47 = false;\n        bool found48
    = false;\n        bool found49 = false;\n        bool found50 = false;\n        bool
    found51 = false;\n        bool found52 = false;\n        bool found53 = false;\n
    \       bool found54 = false;\n        bool found55 = false;\n        bool found56
    = false;\n        bool found57 = false;\n        bool found58 = false;\n        bool
    found59 = false;\n        bool found60 = false;\n        bool found61 = false;\n
    \       bool found62 = false;\n        bool found63 = false;\n        bool found64
    = false;\n        bool found65 = false;\n        bool found66 = false;\n        bool
    found67 = false;\n        bool found68 = false;\n        bool found69 = false;\n
    \       bool found70 = false;\n        bool found71 = false;\n        bool found72
    = false;\n        bool found73 = false;\n        bool found74 = false;\n        bool
    found75\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_uf2qts0.cs(99,21): error CS1002: ; expected

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null)\n            throw new ArgumentNullException();\n
    \       if (str.Length == 0)\n            return 0;\n        if (substring.Length
    == 0)\n            return str.Length;\n        if (str.Length < substring.Length)\n
    \           return 0;\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        bool found = false;\n        do {\n            found = false;\n
    \           end = str.IndexOf(substring, start);\n            if (end == -1)\n
    \               return count;\n            start = end + 1;\n            found
    = str.IndexOf(substring, start) != end;\n            if (found)\n                count++;\n
    \       } while (found);\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdqlswf02.cs(31,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpdqlswf02.cs(31,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpdqlswf02.cs(35,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpdqlswf02.cs(35,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool found2 = false;\n        bool
    found3 = false;\n        bool found4 = false;\n        bool found5 = false;\n
    \       bool found6 = false;\n        bool found7 = false;\n        bool found8
    = false;\n        bool found9 = false;\n        bool found10 = false;\n        bool
    found11 = false;\n        bool found12 = false;\n        bool found13 = false;\n
    \       bool found14 = false;\n        bool found15 = false;\n        bool found16
    = false;\n        bool found17 = false;\n        bool found18 = false;\n        bool
    found19 = false;\n        bool found20 = false;\n        bool found21 = false;\n
    \       bool found22 = false;\n        bool found23 = false;\n        bool found24
    = false;\n        bool found25 = false;\n        bool found26 = false;\n        bool
    found27 = false;\n        bool found28 = false;\n        bool found29 = false;\n
    \       bool found30 = false;\n        bool found31 = false;\n        bool found32
    = false;\n        bool found33 = false;\n        bool found34 = false;\n        bool
    found35 = false;\n        bool found36 = false;\n        bool found37 = false;\n
    \       bool found38 = false;\n        bool found39 = false;\n        bool found40
    = false;\n        bool found41 = false;\n        bool found42 = false;\n        bool
    found43 = false;\n        bool found44 = false;\n        bool found45 = false;\n
    \       bool found46 = false;\n        bool found47 = false;\n        bool found48
    = false;\n        bool found49 = false;\n        bool found50 = false;\n        bool
    found51 = false;\n        bool found52 = false;\n        bool found53 = false;\n
    \       bool found54 = false;\n        bool found55 = false;\n        bool found56
    = false;\n        bool found57 = false;\n        bool found58 = false;\n        bool
    found59 = false;\n        bool found60 = false;\n        bool found61 = false;\n
    \       bool found62 = false;\n        bool found63 = false;\n        bool found64
    = false;\n        bool found65 = false;\n        bool found66 = false;\n        bool
    found67 = false;\n        bool found68 = false;\n        bool found69 = false;\n
    \       bool found70 = false;\n        bool found71 = false;\n        bool found72
    = false;\n        bool found73 = false;\n        bool found74 = false;\n        bool
    found75 = false;\n        bool found76 = false;\n        bool found77 = false;\n
    \       bool found78 = false;\n        bool found79 = false;\n        bool found\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1czkja97.cs(100,19): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        bool found = false;\n        bool first = true;\n        bool
    last = true;\n        bool firstLast = true;\n        bool lastFirst = true;\n
    \       bool firstLastLast = true;\n        bool lastFirstLast = true;\n        bool
    firstLastFirst = true;\n        bool lastFirstFirst = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst
    = true;\n        bool lastFirstLastFirst = true;\n        bool firstLastLastLast
    = true;\n        bool lastFirstLastLast = true;\n        bool firstLastFirstLast
    = true;\n        bool lastFirstFirstLast = true;\n        bool firstLastLastFirst\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53oq_sd1.cs(84,32): error CS1002: ; expected

    '
  timestamp: 1659797744
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = str.Length - substring.Length;\n        long substring_length
    = substring.Length;\n        bool found = false;\n        while (start < end)
    {\n            long index = str.IndexOf(substring, start);\n            if (index
    == -1) {\n                break;\n            }\n            found = str.IndexOf(substring,
    index) == index;\n            count += found ? 1 : 0;\n            start += substring_length;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9op2u29y.cs(26,38): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp9op2u29y.cs(26,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp9op2u29y.cs(30,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp9op2u29y.cs(30,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) > -1 ? 1 : 0;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d31d8c5be84446ea68f1c1c06959107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) - str.IndexOf(substring, 0);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) return
    0;\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc354dba27a74952bc5288b2fd6548d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc354dba27a74952bc5288b2fd6548d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        do {\n            found = false;\n
    \           start = str.IndexOf(substring, start);\n            if (start == -1)
    {\n                break;\n            }\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1) {\n                end = str.Length;\n
    \           }\n            len = end - start + 1;\n            count += 1;\n            found
    = true;\n        } while (end != -1 && end != str.Length);\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygf7q4c4.cs(24,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpygf7q4c4.cs(24,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpygf7q4c4.cs(28,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpygf7q4c4.cs(28,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpygf7q4c4.cs(21,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        bool found = false;\n        bool found2 = false;\n        bool
    found3 = false;\n        bool found4 = false;\n        bool found5 = false;\n
    \       bool found6 = false;\n        bool found7 = false;\n        bool found8
    = false;\n        bool found9 = false;\n        bool found10 = false;\n        bool
    found11 = false;\n        bool found12 = false;\n        bool found13 = false;\n
    \       bool found14 = false;\n        bool found15 = false;\n        bool found16
    = false;\n        bool found17 = false;\n        bool found18 = false;\n        bool
    found19 = false;\n        bool found20 = false;\n        bool found21 = false;\n
    \       bool found22 = false;\n        bool found23 = false;\n        bool found24
    = false;\n        bool found25 = false;\n        bool found26 = false;\n        bool
    found27 = false;\n        bool found28 = false;\n        bool found29 = false;\n
    \       bool found30 = false;\n        bool found31 = false;\n        bool found32
    = false;\n        bool found33 = false;\n        bool found34 = false;\n        bool
    found35 = false;\n        bool found36 = false;\n        bool found37 = false;\n
    \       bool found38 = false;\n        bool found39 = false;\n        bool found40
    = false;\n        bool found41 = false;\n        bool found42 = false;\n        bool
    found43 = false;\n        bool found44 = false;\n        bool found45 = false;\n
    \       bool found46 = false;\n        bool found47 = false;\n        bool found48
    = false;\n        bool found49 = false;\n        bool found50 = false;\n        bool
    found51 = false;\n        bool found52 = false;\n        bool found53 = false;\n
    \       bool found54 = false;\n        bool found55 = false;\n        bool found56
    = false;\n        bool found57 = false;\n        bool found58 = false;\n        bool
    found59 = false;\n        bool found60 = false;\n        bool found61 = false;\n
    \       bool found62 = false;\n        bool found63 = false;\n        bool found64
    = false;\n        bool found65 = false;\n        bool found66 = false;\n        bool
    found67 = false;\n        bool found68 = false;\n        bool found69 = false;\n
    \       bool found70 = false;\n        bool found71 = false;\n        bool found72
    = false;\n        bool found73 = false;\n        bool found74 = false;\n        bool
    found75 = false;\n        bool found76 = false;\n        bool found77 = false;\n
    \       bool found78 = false;\n        bool found79 = false;\n        bool found\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp40rme5oa.cs(100,19): error CS1002: ; expected

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4765dc5d6b7f4e68b084bf109ecf301b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long index = 0;\n        bool found = false;\n        do
    {\n            found = false;\n            index = str.IndexOf(substring, start);\n
    \           if (index == -1) {\n                end = str.Length;\n            }
    else {\n                end = index + 1;\n                found = true;\n            }\n
    \           length = end - start;\n            count += length;\n            start
    = end + 1;\n        } while (found && index < str.Length);\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsue66ddz.cs(25,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpsue66ddz.cs(25,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.Length - substring.Length);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n"
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            if
    (str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08197b97e6f1468c8175822df508a622>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08197b97e6f1468c8175822df508a622>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = str.Length
    - substring.Length;\n        long pos = 0;\n        bool found = false;\n        while
    (pos < str.Length) {\n            while (pos < str.Length && str[pos] == substring[pos])
    {\n                pos++;\n            }\n            if (pos == str.Length) {\n
    \               found = true;\n                break;\n            }\n            while
    (pos < str.Length && str[pos] == substring[pos]) {\n                pos++;\n                count++;\n
    \           }\n            if (found) {\n                break;\n            }\n
    \           while (pos < str.Length && str[pos] != substring[pos]) {\n                pos++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj3q8c8ia.cs(23,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpj3q8c8ia.cs(23,62): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpj3q8c8ia.cs(30,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpj3q8c8ia.cs(30,62): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpj3q8c8ia.cs(37,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpj3q8c8ia.cs(37,62): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpj3q8c8ia.cs(18,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, str.Length - substring.Length);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: startIndex\n  at System.String.IndexOf (System.Char value, System.Int32
    startIndex, System.Int32 count) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.IndexOf (System.Char value, System.Int32 startIndex) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.HowManyTimes (System.String
    str, System.String substring) [0x00023] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4d26decd591f4639b2b73eda8294fbcb>:0
    \n"
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long index = 0;\n        bool found = false;\n        bool
    endFound = false;\n        bool startFound = false;\n        bool startFound2
    = false;\n        bool endFound2 = false;\n        bool startFound3 = false;\n
    \       bool endFound3 = false;\n        bool startFound4 = false;\n        bool
    endFound4 = false;\n        bool startFound5 = false;\n        bool endFound5
    = false;\n        bool startFound6 = false;\n        bool endFound6 = false;\n
    \       bool startFound7 = false;\n        bool endFound7 = false;\n        bool
    startFound8 = false;\n        bool endFound8 = false;\n        bool startFound9
    = false;\n        bool endFound9 = false;\n        bool startFound10 = false;\n
    \       bool endFound10 = false;\n        bool startFound11 = false;\n        bool
    endFound11 = false;\n        bool startFound12 = false;\n        bool endFound12
    = false;\n        bool startFound13 = false;\n        bool endFound13 = false;\n
    \       bool startFound14 = false;\n        bool endFound14 = false;\n        bool
    startFound15 = false;\n        bool endFound15 = false;\n        bool startFound16
    = false;\n        bool endFound16 = false;\n        bool startFound17 = false;\n
    \       bool endFound17 = false;\n        bool startFound18 = false;\n        bool
    endFound18 = false;\n        bool startFound19 = false;\n        bool endFound19
    = false;\n        bool startFound20 = false;\n        bool endFound20 = false;\n
    \       bool startFound21 = false;\n        bool endFound21 = false;\n        bool
    startFound22 = false;\n        bool endFound22 = false;\n        bool startFound23
    = false;\n        bool endFound23 = false;\n        bool startFound24 = false;\n
    \       bool endFound24 = false;\n        bool startFound25 = false;\n        bool
    endFound25 = false;\n        bool startFound26 = false;\n        bool endFound26
    = false;\n        bool startFound27 = false;\n        bool endFound27 = false;\n
    \       bool startFound28 = false;\n        bool endFound28 = false;\n        bool
    startFound29 = false;\n        bool endFound29 = false;\n        bool startFound30
    = false;\n        bool endFound30 = false;\n        bool startFound31 = false;\n
    \       bool endFound31 = false;\n        bool startFound32 = false;\n        bool
    endFound32 = false;\n        bool startFound33 = false;\n        bool endFound33
    = false;\n        bool startFound34 = false;\n        bool endFound34 = false;\n
    \       bool startFound35\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp96x1li00.cs(91,26): error CS1002: ; expected

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long len = 0;\n        bool found = false;\n
    \       do {\n            found = false;\n            start = str.IndexOf(substring,
    start + 1);\n            if (start == -1) {\n                break;\n            }\n
    \           end = str.IndexOf(substring, start + substring.Length);\n            if
    (end == -1) {\n                break;\n            }\n            len = end -
    start + 1;\n            count++;\n            found = true;\n        } while (true);\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps49xrjl1.cs(27,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmps49xrjl1.cs(27,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmps49xrjl1.cs(31,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmps49xrjl1.cs(31,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmps49xrjl1.cs(24,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        do {\n            start = str.IndexOf(substring, start);\n
    \           if (start == -1) break;\n            end = str.IndexOf(substring,
    start + 1);\n            if (end == -1) break;\n            found = true;\n            count++;\n
    \           start++;\n        } while (end != -1);\n        if (!found) return
    0;\n        return count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5a33bghv.cs(22,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp5a33bghv.cs(22,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5a33bghv.cs(24,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp5a33bghv.cs(24,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    len = 0;\n        long i = 0;\n        bool found = false;\n        do {\n            found
    = false;\n            start = i;\n            end = i + 1;\n            len =
    str.Length;\n            while (end < len) {\n                if (str[end] ==
    substring[start]) {\n                    found = true;\n                    break;\n
    \               }\n                end++;\n            }\n            if (found)
    {\n                count++;\n                i += end - start + 1;\n            }\n
    \           i++;\n        } while (i < str.Length);\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo7ize803.cs(29,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpo7ize803.cs(29,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long length = 0;\n        bool found = false;\n
    \       bool first = true;\n        bool last = true;\n        bool firstLast
    = true;\n        bool lastFirst = true;\n        bool firstLastLast = true;\n
    \       bool lastFirstLast = true;\n        bool firstLastFirst = true;\n        bool
    lastFirstFirst = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n        bool firstLastFirstLast = true;\n        bool
    lastFirstFirstLast = true;\n        bool firstLastLastFirst = true;\n        bool
    lastFirstLastFirst = true;\n        bool firstLastLastLast = true;\n        bool
    lastFirstLastLast = true;\n\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl03okerw.cs(39,14): error CS0128: A local variable or function named ''firstLastLastFirst''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(40,14): error CS0128: A local variable or function named ''lastFirstLastFirst''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(41,14): error CS0128: A local variable or function named ''firstLastLastLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(42,14): error CS0128: A local variable or function named ''lastFirstLastLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(43,14): error CS0128: A local variable or function named ''firstLastFirstLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(44,14): error CS0128: A local variable or function named ''lastFirstFirstLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(45,14): error CS0128: A local variable or function named ''firstLastLastFirst''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(46,14): error CS0128: A local variable or function named ''lastFirstLastFirst''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(47,14): error CS0128: A local variable or function named ''firstLastLastLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(48,14): error CS0128: A local variable or function named ''lastFirstLastLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(49,14): error CS0128: A local variable or function named ''firstLastFirstLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(50,14): error CS0128: A local variable or function named ''lastFirstFirstLast''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(51,14): error CS0128: A local variable or function named ''firstLastLastFirst''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(52,14): error CS0128: A local variable or function named ''lastFirstLastFirst''
    is already defined in this scope

    /tmp/tmpl03okerw.cs(53,14): error CS0128: A local variable or function named ''firstLastLast'
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        long len = str.Length;\n        long sublen
    = substring.Length;\n        long mid;\n        bool found = false;\n        while
    (start < len) {\n            mid = start + (end - start) / 2;\n            found
    = str.IndexOf(substring, mid, StringComparison.OrdinalIgnoreCase) >= 0;\n            if
    (found) {\n                start = mid + 1;\n                end = start + sublen;\n
    \               count++;\n            } else {\n                start = mid +
    1;\n            }\n        }\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzu1_6fua.cs(29,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpzu1_6fua.cs(29,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpzu1_6fua.cs(29,49): error CS1503: Argument 3: cannot convert from ''System.StringComparison''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        do {\n            start = str.IndexOf(substring, start);\n
    \           end = str.IndexOf(substring, start + 1);\n            if (start !=
    -1 && end != -1) {\n                found = true;\n                count++;\n
    \               start = end + 1;\n            } else {\n                found
    = false;\n            }\n        } while (found == false);\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpskon00uc.cs(22,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpskon00uc.cs(22,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpskon00uc.cs(23,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpskon00uc.cs(23,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        string pattern = string.Join(\"\", Enumerable.Repeat(substring,
    str.Length));\n        Regex regex = new Regex(pattern, RegexOptions.IgnoreCase);\n
    \       MatchCollection matches = regex.Matches(str);\n        foreach (Match
    match in matches) {\n            count += match.Groups.Count;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyew4_pg2.cs(19,9): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpyew4_pg2.cs(19,27): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpyew4_pg2.cs(19,42): error CS0103: The name ''RegexOptions'' does not exist
    in the current context

    /tmp/tmpyew4_pg2.cs(20,9): error CS0246: The type or namespace name ''MatchCollection''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpyew4_pg2.cs(21,18): error CS0246: The type or namespace name ''Match''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        string str2 = str.ToLower();\n        string
    str3 = substring.ToLower();\n        foreach (char c in str2) {\n            if
    (str3.Contains(c)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d81edcfad6442ae87fb406a56f100af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d81edcfad6442ae87fb406a56f100af>:0
    \n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = str.Length
    - substring.Length;\n        long current = 0;\n        bool found = false;\n
    \       do {\n            current = str.IndexOf(substring, start);\n            if
    (current == -1) {\n                found = true;\n                break;\n            }\n
    \           count++;\n            start = current + 1;\n        } while (current
    != -1 && !found);\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwy93il5.cs(23,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmplwy93il5.cs(23,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, 0) - str.IndexOf(substring, 0);\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f98f4d02c16449297024656f4ce9bc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c) != -1 ? 1 : 0;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd77ee4ec82249fab3b034902d2d9c3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd77ee4ec82249fab3b034902d2d9c3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        string lowerSubstring = substring.ToLower();\n
    \       string lowerStr = str.ToLower();\n        foreach (char c in lowerStr)
    {\n            if (lowerSubstring.Contains(c)) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78a1830beacd440285c44ea526d7b946>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78a1830beacd440285c44ea526d7b946>:0
    \n"
  stdout: ''
  timestamp: 1659797747
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long start2 = 0;\n        long end2 = 0;\n        long length2
    = 0;\n        long start3 = 0;\n        long end3 = 0;\n        long length3 =
    0;\n        long start4 = 0;\n        long end4 = 0;\n        long length4 = 0;\n
    \       long start5 = 0;\n        long end5 = 0;\n        long length5 = 0;\n
    \       long start6 = 0;\n        long end6 = 0;\n        long length6 = 0;\n
    \       long start7 = 0;\n        long end7 = 0;\n        long length7 = 0;\n
    \       long start8 = 0;\n        long end8 = 0;\n        long length8 = 0;\n
    \       long start9 = 0;\n        long end9 = 0;\n        long length9 = 0;\n
    \       long start10 = 0;\n        long end10 = 0;\n        long length10 = 0;\n
    \       long start11 = 0;\n        long end11 = 0;\n        long length11 = 0;\n
    \       long start12 = 0;\n        long end12 = 0;\n        long length12 = 0;\n
    \       long start13 = 0;\n        long end13 = 0;\n        long length13 = 0;\n
    \       long start14 = 0;\n        long end14 = 0;\n        long length14 = 0;\n
    \       long start15 = 0;\n        long end15 = 0;\n        long length15 = 0;\n
    \       long start16 = 0;\n        long end16 = 0;\n        long length16 = 0;\n
    \       long start17 = 0;\n        long end17 = 0;\n        long length17 = 0;\n
    \       long start18 = 0;\n        long end18 = 0;\n        long length18 = 0;\n
    \       long start19 = 0;\n        long end19 = 0;\n        long length19 = 0;\n
    \       long start20 = 0;\n        long end20 = 0;\n        long length20 = 0;\n
    \       long start21 = 0;\n        long end21 = 0;\n        long length21 = 0;\n
    \       long start22 = 0;\n        long end22 = 0;\n        long length22 = 0;\n
    \       long start23 = 0;\n        long end23 = 0;\n        long length23 = 0;\n
    \       long start24 = 0;\n        long end24 = 0;\n        long length24 = 0;\n
    \       long start25 = 0;\n        long end25 = 0;\n        long length25 = 0;\n
    \       long start26 = 0;\n        long end26 = 0;\n        long length26 = 0;\n
    \       long start27 = 0;\n        long end27 = 0;\n        long length27 = 0;\n
    \       long start28 = 0;\n        long end28 = 0;\n        long length28 = 0;\n
    \       long start29 = 0;\n        long end29 = 0;\n        long length29 = 0;\n
    \       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpanznmjiw.cs(17,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(18,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(19,14): warning CS0219: The variable ''end'' is assigned but
    its value is never used

    /tmp/tmpanznmjiw.cs(20,14): warning CS0219: The variable ''length'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(21,14): warning CS0219: The variable ''start2'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(22,14): warning CS0219: The variable ''end2'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(23,14): warning CS0219: The variable ''length2'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(24,14): warning CS0219: The variable ''start3'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(25,14): warning CS0219: The variable ''end3'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(26,14): warning CS0219: The variable ''length3'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(27,14): warning CS0219: The variable ''start4'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(28,14): warning CS0219: The variable ''end4'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(29,14): warning CS0219: The variable ''length4'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(30,14): warning CS0219: The variable ''start5'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(31,14): warning CS0219: The variable ''end5'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(32,14): warning CS0219: The variable ''length5'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(33,14): warning CS0219: The variable ''start6'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(34,14): warning CS0219: The variable ''end6'' is assigned
    but its value is never used

    /tmp/tmpanznmjiw.cs(35,1'
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null) {\n            throw new ArgumentNullException();\n
    \       }\n        if (str.Length == 0 || substring.Length == 0) {\n            return
    0;\n        }\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        long current = 0;\n        long index = 0;\n        bool found
    = false;\n        do {\n            found = false;\n            index = str.IndexOf(substring,
    start);\n            if (index == -1) {\n                end = str.Length;\n            }
    else {\n                end = index;\n                current = index;\n                found
    = true;\n            }\n            count++;\n            start++;\n        }
    while (found && start < end);\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) ==
    (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpty07h7f2.cs(31,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpty07h7f2.cs(31,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61100fc86b5f4d30a61ee20ce539bfaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring))\n
    \           return 0;\n\n        long count = 0;\n        long start = 0;\n        long
    end = str.Length - substring.Length;\n\n        do {\n            start = str.IndexOf(substring,
    start);\n            if (start == -1)\n                break;\n\n            end
    = str.IndexOf(substring, end + 1);\n            if (end == -1)\n                end
    = str.Length;\n\n            count += end - start + 1;\n        } while (true);\n\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7vm2rk3y.cs(25,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp7vm2rk3y.cs(25,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp7vm2rk3y.cs(29,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp7vm2rk3y.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        foreach (char
    c in substring) {\n            count += str.IndexOf(c, StringComparison.OrdinalIgnoreCase)
    >= 0;\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"),
    (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\"))
    == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj402s7xg.cs(22,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797747
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    found = false;\n        do {\n            start = str.IndexOf(substring, start);\n
    \           end = str.IndexOf(substring, start + 1);\n            if (start !=
    -1 && end != -1) {\n                found = true;\n                count++;\n
    \               start = end + 1;\n            } else {\n                found
    = false;\n            }\n        } while (found == true);\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33ym3w5s.cs(22,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp33ym3w5s.cs(22,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp33ym3w5s.cs(23,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmp33ym3w5s.cs(23,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797747
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\"))
    == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ee1953129e4862bde493a5256e2039>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = str.Length
    - substring.Length;\n        long current = 0;\n        while (current < end)
    {\n            current = str.IndexOf(substring, start);\n            if (current
    == -1) break;\n            count++;\n            start = current + 1;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyrn0ty53.cs(22,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpyrn0ty53.cs(22,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797747
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1), substring);\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n
    \   Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),
    (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57ab70d49534bd69bc06c4278c915f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797746
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in str) {\n            if
    (c == substring[0]) {\n                count += HowManyTimes(str.Substring(1,
    str.Length - 1), substring);\n            }\n            else if (c == substring[substring.Length
    - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length - 1),
    substring);\n            }\n            else {\n                count += HowManyTimes(str.Substring(0,
    str.Length - 1), substring) + HowManyTimes(str, substring);\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659797752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (str == null || substring == null) {\n            throw new ArgumentNullException();\n
    \       }\n        if (str.Length == 0 || substring.Length == 0) {\n            return
    0;\n        }\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        bool found = false;\n        bool foundSub = false;\n        bool
    foundSubSub = false;\n        bool foundSubSubSub = false;\n        bool foundSubSubSubSub
    = false;\n        bool foundSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSubSubSubSubSubSub = false;\n        bool foundSubSubSubSubSubSubSubSubSub
    = false;\n        bool foundSubSubSubSubSubSubSubSubSub = false;\n        bool
    foundSubSubSubSub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ygjbmfd.cs(62,31): error CS1002: ; expected

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        foreach (char c in substring) {\n            count
    += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupe0y570.cs(19,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659797745
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        bool found = false;\n        do {\n            found
    = false;\n            start = str.IndexOf(substring, start);\n            if (start
    >= 0) {\n                end = str.IndexOf(substring, start + 1);\n                if
    (end >= 0) {\n                    count++;\n                    found = true;\n
    \               }\n            }\n        } while (found && start >= 0);\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptzskmean.cs(26,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmptzskmean.cs(26,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmptzskmean.cs(28,35): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmptzskmean.cs(28,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797747
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        long count = 0;\n        long start = 0;\n        long end = 0;\n        long
    length = 0;\n        long index = 0;\n        long startIndex = 0;\n        long
    endIndex = 0;\n        bool found = false;\n        bool startFound = false;\n
    \       bool endFound = false;\n        bool foundStartIndex = false;\n        bool
    foundEndIndex = false;\n        bool foundLength = false;\n        bool foundIndex
    = false;\n        bool foundSubstring = false;\n        bool foundSubstringIndex
    = false;\n        bool foundSubstringLength = false;\n        bool foundSubstringIndexLength
    = false;\n        bool foundSubstringIndexStartIndex = false;\n        bool foundSubstringIndexEndIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndex = false;\n        bool
    foundSubstringIndexStartIndexEndIndexLength = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLength
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLength
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLength
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLength
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndex
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLength
    = false;\n        bool foundSubstringIndexStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndexLengthStartIndexEndIndex\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpir3xj_d0.cs(52,123): error CS1002: ; expected

    '
  timestamp: 1659797746
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n
    \   // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',
    'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)
    {\n        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring)) {\n
    \           return 0;\n        }\n        long count = 0;\n        long start
    = 0;\n        long end = 0;\n        bool found = false;\n        do {\n            start
    = str.IndexOf(substring, start);\n            if (start == -1) {\n                break;\n
    \           }\n            end = str.IndexOf(substring, start + 1);\n            if
    (end == -1) {\n                end = str.Length;\n            }\n            found
    = true;\n            count += end - start + 1;\n        } while (start != -1);\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"),
    (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n
    \   Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john
    doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxckfadv.cs(25,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpmxckfadv.cs(25,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpmxckfadv.cs(29,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpmxckfadv.cs(29,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpmxckfadv.cs(23,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659797747
