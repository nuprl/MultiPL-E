name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) ==\
  \ 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
  \ List<string> extensions) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        string strongest_extension = class_name;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        // Your code goes here\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension;\n            }\n        }\n    \
    \    return strongest_extension;", "        // Your code here\n        string\
    \ strongest_extension = string.Empty;\n        int strongest_extension_strength\
    \ = -1;\n        foreach (string extension in extensions) {\n            int extension_strength\
    \ = extension.Count(x => char.IsUpper(x));\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int extension_strength = extension2.ToUpper().Count()\
    \ - extension2.ToLower().Count();\n            if (extension_strength > extension.ToUpper().Count()\
    \ - extension.ToLower().Count()) {\n                extension = extension2;\n\
    \            }\n        }\n        return class_name + \".\" + extension;", " \
    \       string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string strongest_extension = \"\
    \";\n        double strongest_extension_strength = 0;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_strength = extension_strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string strongest_extension = null;\n        foreach (string extension_name\
    \ in extensions) {\n            string extension_strength_new = extension_name.Substring(extension_name.Length\
    \ - 1).ToLower();\n            if (extension_strength_new == extension_strength)\
    \ {\n                strongest_extension = extension_name;\n            }\n  \
    \      }\n        return class_name + \".\" + strongest_extension;", "       \
    \ Dictionary<string, int> extensions_map = new Dictionary<string, int>();\n  \
    \      foreach (string extension in extensions) {\n            int extension_length\
    \ = extension.Length;\n            int extension_cap = extension_length.ToUpperInvariant().Count(x\
    \ => x == x);\n            int extension_sm = extension_length.ToLowerInvariant().Count(x\
    \ => x == x);\n            int extension_strength = extension_cap - extension_sm;\n\
    \            extensions_map.Add(extension, extension_strength);\n        }\n \
    \       string strongest_extension = extensions_map.OrderByDescending(x => x.Value).First().Key;\n\
    \        return class_name + \".\" + strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension;\n            }\n        }\n    \
    \    return strongest_extension;", "        string strongest_extension = null;\n\
    \        double max_strength = double.MaxValue;\n        foreach (string extension\
    \ in extensions) {\n            double extension_strength = GetExtensionStrength(class_name,\
    \ extension);\n            if (extension_strength > max_strength) {\n        \
    \        max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int SM = extension2.ToLowerInvariant().Count(c =>\
    \ char.IsLower(c));\n            int CAP = extension2.ToUpperInvariant().Count(c\
    \ => char.IsUpper(c));\n            int strength = (CAP - SM) / CAP;\n       \
    \     if (strength > extension.ToLowerInvariant().Count(c => char.IsLower(c)))\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + extension;", "        // Your code here\n        string\
    \ strongest_extension = class_name;\n        int sm = 0;\n        int cap = 0;\n\
    \        foreach (string extension in extensions) {\n            int s = extension.Length;\n\
    \            sm = sm + s;\n            cap = cap + s.ToUpper().Count();\n    \
    \    }\n        double strength = cap - sm;\n        if (strength > 0) {\n   \
    \         strongest_extension = class_name + extensions[0];\n        }\n     \
    \   return strongest_extension;", "        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension = class_name + extension;\n            }\n     \
    \   }\n        return strongest_extension;", "        string strongest_extension\
    \ = null;\n        string extension_strength = null;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_numerator = 0;\n\
    \            int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            int extension_count_cap = 0;\n            int\
    \ extension_count_sm = 0;\n            int extension_count_length = 0;\n     \
    \       int extension_count_cap_sm = 0;\n            int extension_count_cap_length\
    \ = 0;\n            int extension_count_sm_sm = 0;\n            int extension_count_sm_length\
    \ = 0;\n            int extension_count_cap_sm_length = 0;\n            int extension_count_cap_length_sm\
    \ = 0;\n            int extension_count_cap_length_sm_length = 0;\n          \
    \  int extension_count_sm_cap = 0;\n            int extension_count_sm_cap = 0;\n\
    \            int extension_count_cap_sm_cap = 0;\n            int extension_count_cap_sm_cap\
    \ = 0;\n            int extension_count_cap_length_sm_cap = 0;\n            int\
    \ extension_count_cap_length_sm_cap = 0;\n            int extension_count_sm_cap_sm\
    \ = 0;\n            int extension_count_sm_cap_sm = 0;\n            int extension_count_cap_sm_cap_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm = 0;\n            int extension_count_cap_length_sm_cap_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm = 0;\n          \
    \  int extension_count_sm_cap_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm = 0;\n            int\
    \ extension_count_cap_sm_cap_sm_sm = 0;\n            int extension_count_cap_length_sm_cap_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm_sm = 0;\n       \
    \     int extension_count_sm_cap_sm_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm_sm = 0;\n           \
    \ int extension_count_cap_sm_cap_sm_sm_sm = 0;\n            int extension_count_cap_length_sm_cap_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm_sm_sm = 0;\n    \
    \        int extension_count_sm_cap_sm_sm_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm_sm_sm = 0;\n        \
    \    int extension_count_", "        string extension = extensions[0];\n     \
    \   string extension_strength = extension.Substring(extension.Length - 1);\n \
    \       string strongest_extension = class_name + extension;\n        List<string>\
    \ extensions_with_same_strength = extensions.Where(x => x.Substring(x.Length -\
    \ 1) != extension_strength).ToList();\n        if (extensions_with_same_strength.Count\
    \ > 1) {\n            extension = extensions_with_same_strength[0];\n        \
    \    extension_strength = extension.Substring(extension.Length - 1);\n       \
    \     strongest_extension = class_name + extension;\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        Dictionary<string,\
    \ int> extension_strength = new Dictionary<string, int>();\n        foreach (string\
    \ extension in extensions) {\n            int strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength.ContainsKey(extension))\
    \ {\n                if (extension_strength[extension] < strength) {\n       \
    \             extension_strength[extension] = strength;\n                }\n \
    \           } else {\n                extension_strength.Add(extension, strength);\n\
    \            }\n        }\n        int max_strength = extension_strength.Values.Max();\n\
    \        string strongest_extension = class_name + extension_strength.Where(x\
    \ => x.Value == max_strength).First().Key;\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code here\n\
    \        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            double strength = cap - sm;\n            if\
    \ (strength > strongest_strength) {\n                strongest_extension = extension;\n\
    \                strongest_strength = strength;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code goes here\n        string strongest_extension = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => c == 'A');\n            int sm = extension.Count(c => c == 'a');\n      \
    \      int strength = cap - sm;\n            if (strength > 0) {\n           \
    \     strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = null;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                } else {\n                    if (strength > strongest_extension.Length)\
    \ {\n                        strongest_extension = class_name + \".\" + extension;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ strongest_extension;", "        string extension = extensions[0];\n        foreach\
    \ (string ext in extensions) {\n            int cap = ext.ToUpper().Count();\n\
    \            int sm = ext.ToLower().Count();\n            double strength = cap\
    \ - sm;\n            if (strength > 0) {\n                extension = ext;\n \
    \               break;\n            }\n        }\n        return class_name +\
    \ \".\" + extension;", "        string extension_strength = extensions[0];\n \
    \       foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpperInvariant().Count() - extension.ToLowerInvariant().Count();\n\
    \            if (extension_strength_int > extension_strength.ToUpperInvariant().Count()\
    \ - extension_strength.ToLowerInvariant().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1, 1);\n       \
    \ string extension_strength_class = extension.Substring(0, extension.Length -\
    \ 1);\n        double extension_strength_class_double = double.Parse(extension_strength_class);\n\
    \        double extension_strength_class_double_sum = extension_strength_class_double.Sum();\n\
    \        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_max = extension_strength_class_double_sum\
    \ / extensions.Count;\n        double extension_strength_class_double_min = extension_strength",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension = extensions[0];\n        int cap = extension.Count(x\
    \ => char.IsUpper(x));\n        int sm = extension.Count(x => char.IsLower(x));\n\
    \        int strength = cap - sm;\n        extensions.Remove(extension);\n   \
    \     if (extensions.Count > 0)\n            extension = extensions[0];\n    \
    \    extensions.Remove(extension);\n        extensions.Remove(extension);\n  \
    \      extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);\n\
    \        extensions.Remove(extension);\n        extensions.Remove(extension);",
  "        string strongest_extension = class_name;\n        int strongest_extension_strength\
    \ = -1;\n        foreach (string extension in extensions) {\n            int extension_strength\
    \ = extension.Count(c => char.IsUpper(c));\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return strongest_extension;", "        string extension\
    \ = extensions[0];\n        foreach (string ext in extensions) {\n           \
    \ int cap = ext.ToUpper().Count();\n            int sm = ext.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > extension.ToUpper().Count()\
    \ - ext.ToLower().Count()) {\n                extension = ext;\n            }\n\
    \        }\n        return class_name + \".\" + extension;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string class_strength = class_name.Substring(class_name.Length\
    \ - 1);\n        int extension_strength_int = Convert.ToInt32(extension_strength);\n\
    \        int class_strength_int = Convert.ToInt32(class_strength);\n        int\
    \ strength = extension_strength_int - class_strength_int;\n        if (strength\
    \ > 0) {\n            extension = extensions[0];\n        }\n        return class_name\
    \ + \".\" + extension;", "        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string extension\
    \ = extensions[0];\n        int cap = class_name.ToUpper().Count(c => c == 'A');\n\
    \        int sm = class_name.ToLower().Count(c => c == 'a');\n        int strength\
    \ = cap - sm;\n        if (extensions.Count() > 1) {\n            extension =\
    \ extensions.OrderBy(x => x).First();\n        }\n        return class_name +\
    \ \".\" + extension;", "        string extension = extensions[0];\n        foreach\
    \ (string extension2 in extensions) {\n            int extension_strength = extension2.ToUpper().Count()\
    \ - extension.ToUpper().Count();\n            if (extension_strength > 0) {\n\
    \                extension = extension2;\n            }\n        }\n        return\
    \ class_name + extension;", "        // Your code goes here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_int = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        string strongest_extension = class_name;\n  \
    \      foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;", "        // Your code here\n      \
    \  string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Length;\n            int sm\
    \ = class_name.Length;\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \        }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            int strength = cap - sm;\n       \
    \     if (strength > 0) {\n                strongest_extension = class_name +\
    \ \".\" + extension;\n                break;\n            }\n        }\n     \
    \   return strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        int strongest_extension_strength = -1;\n        foreach\
    \ (string extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_strength = extension_strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n            }\n   \
    \     }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_capital = extension.Count(c => char.IsUpper(c));\n     \
    \       int extension_smaller = extension.Count(c => char.IsLower(c));\n     \
    \       int extension_strength_fraction = extension_capital - extension_smaller;\n\
    \            if (extension_strength_fraction > extension_strength.Count(c => c\
    \ == extension)) {\n                extension_strength = extension;\n        \
    \    }\n        }\n        return class_name + \".\" + extension_strength;", " \
    \       string strongest_extension = class_name;\n        int cap = class_name.Length;\n\
    \        int sm = class_name.ToLower().Length;\n        foreach (string extension\
    \ in extensions) {\n            int cap_extension = extension.Length;\n      \
    \      int sm_extension = extension.ToLower().Length;\n            int strength\
    \ = cap_extension - sm_extension;\n            if (strength > cap - sm) {\n  \
    \              strongest_extension = extension;\n                cap = cap_extension;\n\
    \                sm = sm_extension;\n            }\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;",
  "        Dictionary<string, int> extension_strength = new Dictionary<string, int>();\n\
    \        foreach (string extension in extensions) {\n            int strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength.ContainsKey(extension)) {\n                if (extension_strength[extension]\
    \ > strength) {\n                    extension_strength[extension] = strength;\n\
    \                }\n            } else {\n                extension_strength.Add(extension,\
    \ strength);\n            }\n        }\n        string strongest_extension = null;\n\
    \        foreach (KeyValuePair<string, int> entry in extension_strength) {\n \
    \           if (entry.Value == extension_strength.Values.Max()) {\n          \
    \      strongest_extension = entry.Key;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string extension_strength\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_cap = extension.ToUpper().Count();\n            int extension_sm\
    \ = extension.ToLower().Count();\n            int extension_strength_fraction\
    \ = extension_cap - extension_sm;\n            if (extension_strength_fraction\
    \ > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + extension_strength;", "        string strongest_extension\
    \ = null;\n        string extension_strength = null;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_int = 0;\n  \
    \          int extension_cap_int = 0;\n            int extension_sm_int = 0;\n\
    \            int extension_length = extension.Length;\n            for (int i\
    \ = 0; i < extension_length; i++) {\n                char c = extension[i];\n\
    \                if (char.IsUpper(c)) {\n                    extension_cap_int++;\n\
    \                }\n                else if (char.IsLower(c)) {\n            \
    \        extension_sm_int++;\n                }\n                else {\n    \
    \                extension_strength_int++;\n                }\n            }\n\
    \            double extension_strength_double = extension_strength_int / extension_length;\n\
    \            double extension_cap_double = extension_cap_int / extension_length;\n\
    \            double extension_sm_double = extension_sm_int / extension_length;\n\
    \            if (extension_strength_double > extension_cap_double && extension_strength_double\
    \ > extension_sm_double) {\n                strongest_extension = extension;\n\
    \                extension_strength = extension_strength_double.ToString();\n\
    \            }\n        }\n        if (strongest_extension != null) {\n      \
    \      return class_name + \".\" + strongest_extension;\n        }\n        else\
    \ {\n            return class_name;\n        }", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension = extensions[0];\n        foreach (string e in extensions) {\n   \
    \         int cap = e.ToUpper().Count();\n            int sm = e.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > extension.ToUpper().Count()\
    \ - extension.ToLower().Count()) {\n                extension = e;\n         \
    \   }\n        }\n        return class_name + \".\" + extension;", "        //\
    \ Your code here\n        var extension_strengths = extensions.Select(x => x.ToUpperInvariant()\
    \ - x.ToLowerInvariant()).ToList();\n        var max_strength = extension_strengths.Max();\n\
    \        var max_strength_index = extension_strengths.IndexOf(max_strength);\n\
    \        return class_name + extensions[max_strength_index];", "        string\
    \ strongest_extension = null;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Length;\n            int sm = class_name.Length;\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + extension;\n                } else {\n                    int\
    \ strength_of_extension = extension.Length - strongest_extension.Length;\n   \
    \                 if (strength_of_extension > strength) {\n                  \
    \      strongest_extension = class_name + extension;\n                    }\n\
    \                }\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                } else {\n                    if (strength < strongest_extension.Length)\
    \ {\n                        strongest_extension = class_name + \".\" + extension;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension = class_name + extension;\n            }\n     \
    \   }\n        return strongest_extension;", "        string extension = extensions[0];\n\
    \        int cap = extension.Count(x => char.IsUpper(x));\n        int sm = extension.Count(x\
    \ => char.IsLower(x));\n        int strength = cap - sm;\n        string result\
    \ = class_name + \".\" + extension;\n        if (extensions.Count() > 1) {\n \
    \           int i = 0;\n            while (i < extensions.Count() && extensions[i].Length\
    \ > 0) {\n                string temp = extensions[i];\n                i++;\n\
    \                if (temp.Length > 0) {\n                    int temp_cap = temp.Count(x\
    \ => char.IsUpper(x));\n                    int temp_sm= temp.Count(x => char.IsLower(x));\n\
    \                    int temp_strength = temp_cap - temp_sm;\n               \
    \     if (temp_strength > strength) {\n                        result = class_name\
    \ + \".\" + temp;\n                        strength = temp_strength;\n       \
    \             }\n                }\n            }\n        }\n        return result;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension.Substring(0, extension.Length - 1);\n                break;\n \
    \           }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => Char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => Char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => Char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => Char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension.Substring(0, extension.Length - extension.LastIndexOf('.'));\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = null;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            int strength = cap - sm;\n       \
    \     if (strength > 0) {\n                if (strongest_extension == null) {\n\
    \                    strongest_extension = class_name + \".\" + extension;\n \
    \               }\n                else if (strength < strongest_extension.ToUpper().Count())\
    \ {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                }\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension.Substring(0, extension.IndexOf(\"\
    .\"));\n            }\n        }\n        return strongest_extension;", "    \
    \    string extension = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1).ToLower();\n        string extension_strength_fraction =\n            extension_strength.Substring(extension_strength.Length\
    \ - 1).ToLower();\n        int extension_strength_int = Convert.ToInt32(extension_strength_fraction);\n\
    \        double extension_strength_double = Convert.ToDouble(extension_strength_int);\n\
    \        double extension_strength_double_fraction =\n            extension_strength_double\
    \ - extension_strength_int;\n        double extension_strength_double_fraction_int\
    \ =\n            extension_strength_double_fraction * 100;\n        int extension_strength_double_fraction_int\
    \ = Convert.ToInt32(\n            extension_strength_double_fraction_double);\n\
    \        double extension_strength_double_fraction_double_fraction =\n       \
    \     extension_strength_double_fraction_int - extension_strength_double_fraction_int;\n\
    \        double extension_strength_double_fraction_double_fraction_int =\n   \
    \         extension_strength_double_fraction_double_fraction * 100;\n        int\
    \ extension_strength_double_fraction_double_fraction_int = Convert.ToInt32(\n\
    \            extension_strength_double_fraction_double_fraction_double);\n   \
    \     double extension_strength_double_fraction_double_fraction_double_fraction\
    \ =\n            extension_strength_double_fraction_double_fraction_int - extension_strength_double_fraction_double_fraction_int;\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_int\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction\
    \ * 100;\n        int extension_strength_double_fraction_double_fraction_double_fraction_int\
    \ = Convert.ToInt32(\n            extension_strength_double_fraction_double_fraction_double_fraction_double);\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_double_fraction\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction_int\
    \ - extension_strength_double_fraction_double_fraction_double_fraction_int;\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_int\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction_double_fraction\
    \ * 100;\n        int extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_int\
    \ = Convert.ToInt32(\n            extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_double_fraction);\n\
    \        double extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_double_fraction_int\
    \ =\n            extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_double_fraction_int;\n\
    \        int extension_strength_double_fraction_double_fraction_double_fraction_double_fraction_",
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            int strength = cap - sm;\n       \
    \     if (strength > 0) {\n                strongest_extension = class_name +\
    \ extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        string extension = extensions[0];\n        foreach\
    \ (string extension2 in extensions) {\n            int cap = extension2.Count(c\
    \ => Char.IsUpper(c));\n            int sm = extension2.Count(c => Char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           extension = extension2;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        // Your code goes here\n     \
    \   string strongest_extension = \"\";\n        int cap = 0;\n        int sm =\
    \ 0;\n        foreach (string extension in extensions) {\n            cap = cap\
    \ + extension.Count(x => char.IsUpper(x));\n            sm = sm + extension.Count(x\
    \ => char.IsLower(x));\n        }\n        double strength = cap - sm;\n     \
    \   if (extensions != null && extensions.Count > 0) {\n            strongest_extension\
    \ = class_name + extensions.OrderByDescending(x => x.Count(x => char.IsUpper(x))).FirstOrDefault();\n\
    \        }\n        return strongest_extension;", "        string extension =\
    \ extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1);\n        string extension_strength_without_cap = extension_strength.ToLower();\n\
    \        int extension_cap = extension_strength_without_cap.Length;\n        int\
    \ extension_sm = 0;\n        for (int i = 0; i < extension_strength_without_cap.Length;\
    \ i++) {\n            if (extension_strength_without_cap[i].ToUpper() == extension_strength_without_cap[i])\
    \ {\n                extension_sm++;\n            }\n        }\n        int extension_strength_without_cap_without_sm\
    \ = extension_cap - extension_sm;\n        if (extension_strength_without_cap_without_sm\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap = extension_strength_without_cap_without_sm\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap = extension_strength_without_cap_without_sm_without_cap\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap - extension_cap;\n\
    \        if (extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap\
    \ - extension_cap;\n        if (extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap_without_cap\
    \ == 0) {\n            return class_name + extension;\n        }\n        int\
    \ extension_strength_without_cap_without_sm_without_cap_without_cap_without_cap_without_cap_without_cap_without_cap\
    \ = extension_strength_without_cap_without_sm_without_cap_without_cap", "    \
    \    // Write your code here\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension;\n            }\n        }\n    \
    \    return strongest_extension;", "        string extension = extensions[0];\n\
    \        foreach (string extension2 in extensions) {\n            int cap = extension2.Length;\n\
    \            int sm = extension.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                extension = extension2;\n  \
    \          }\n        }\n        return class_name + extension;", "        //\
    \ Your code here\n        string strongest = string.Empty;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest;", "        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strongest_extension == null || strength > strongest_extension.Length)\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        string\
    \ strongest_extension = class_name;\n        int cap_counter = 0;\n        int\
    \ sm_counter = 0;\n        foreach (string extension in extensions) {\n      \
    \      int cap_counter = cap_counter + extension.Count(x => char.IsUpper(x));\n\
    \            int sm_counter = sm_counter + extension.Count(x => char.IsLower(x));\n\
    \        }\n        double strength = cap_counter - sm_counter;\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + extensions[0];\n    \
    \    }\n        return strongest_extension;", "        Dictionary<string, int>\
    \ extension_strength = new Dictionary<string, int>();\n        foreach (string\
    \ extension in extensions) {\n            int strength = 0;\n            foreach\
    \ (char c in extension) {\n                if (char.IsUpper(c)) {\n          \
    \          strength++;\n                }\n                if (char.IsLower(c))\
    \ {\n                    strength++;\n                }\n            }\n     \
    \       extension_strength.Add(extension, strength);\n        }\n        string\
    \ strongest_extension = null;\n        foreach (KeyValuePair<string, int> extension\
    \ in extension_strength) {\n            if (extension_strength.Values.Max() <\
    \ extension.Value) {\n                strongest_extension = extension.Key;\n \
    \           }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            double strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extension;\n            }\n        }\n\
    \        return class_name + extension_strength;", "        Dictionary<string,\
    \ int> extension_strength = new Dictionary<string, int>();\n        foreach (string\
    \ extension in extensions) {\n            int strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength.ContainsKey(extension))\
    \ {\n                if (extension_strength[extension] > strength) {\n       \
    \             extension_strength[extension] = strength;\n                }\n \
    \           } else {\n                extension_strength.Add(extension, strength);\n\
    \            }\n        }\n        string strongest_extension = null;\n      \
    \  foreach (KeyValuePair<string, int> extension_strength_pair in extension_strength)\
    \ {\n            if (extension_strength_pair.Value == extension_strength.Values.Max())\
    \ {\n                strongest_extension = extension_strength_pair.Key;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension = extensions[0];\n        string extension_class = class_name\
    \ + extension;\n        Dictionary<string, int> extension_strength = new Dictionary<string,\
    \ int>();\n        foreach (string extension_name in extensions) {\n         \
    \   int extension_strength_counter = 0;\n            foreach (char c in extension_name)\
    \ {\n                if (char.IsUpper(c)) {\n                    extension_strength_counter++;\n\
    \                }\n            }\n            extension_strength.Add(extension_name,\
    \ extension_strength_counter);\n        }\n        int max_strength = -1;\n  \
    \      foreach (KeyValuePair<string, int> extension_strength_counter in extension_strength)\
    \ {\n            if (extension_strength_counter.Value > max_strength) {\n    \
    \            max_strength = extension_strength_counter.Value;\n              \
    \  extension = extension_strength_counter.Key;\n            }\n        }\n   \
    \     return extension_class + extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Count(x => x == char.ToUpper(x));\n            int sm = extension.Count(x\
    \ => x == char.ToLower(x));\n            double strength = cap - sm;\n       \
    \     if (strength > strongest_strength) {\n                strongest_extension\
    \ = extension;\n                strongest_strength = strength;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   string strongest_extension = null;\n        string extension_strength = null;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = 0;\n            int extension_strength_denominator = 0;\n            int extension_strength_numerator_lower\
    \ = 0;\n            int extension_strength_denominator_lower = 0;\n          \
    \  int extension_strength_numerator_upper = 0;\n            int extension_strength_denominator_upper\
    \ = 0;\n            int extension_strength_numerator_other = 0;\n            int\
    \ extension_strength_denominator_other = 0;\n            int extension_strength_numerator_other2\
    \ = 0;\n            int extension_strength_denominator_other2 = 0;\n         \
    \   int extension_strength_numerator_other3 = 0;\n            int extension_strength_denominator_other3\
    \ = 0;\n            int extension_strength_numerator_other4 = 0;\n           \
    \ int extension_strength_denominator_other4 = 0;\n            int extension_strength_numerator_other5\
    \ = 0;\n            int extension_strength_denominator_other5 = 0;\n         \
    \   int extension_strength_numerator_other6 = 0;\n            int extension_strength_denominator_other6\
    \ = 0;\n            int extension_strength_numerator_other7 = 0;\n           \
    \ int extension_strength_denominator_other7 = 0;\n            int extension_strength_numerator_other8\
    \ = 0;\n            int extension_strength_denominator_other8 = 0;\n         \
    \   int extension_strength_numerator_other9 = 0;\n            int extension_strength_denominator_other9\
    \ = 0;\n            int extension_strength_numerator_other10 = 0;\n          \
    \  int extension_strength_denominator_other10 = 0;\n            int extension_strength_numerator_other11\
    \ = 0;\n            int extension_strength_denominator_other11 = 0;\n        \
    \    int extension_strength_numerator_other12 = 0;\n            int extension_strength_denominator_other12\
    \ = 0;\n            int extension_strength_numerator_other13 = 0;\n          \
    \  int extension_strength_denominator_other13 = 0;\n            int extension_strength_numerator_other14\
    \ = 0;\n            int extension_strength_denominator_other14 = 0;\n        \
    \    int extension_strength_numerator_other15 = 0;\n            int extension_strength_denominator_other15\
    \ = 0;\n            int extension_strength_numerator_other16 = 0;\n          \
    \  int extension_strength_denominator_other16 = 0;\n            int extension_strength_numerator_other17\
    \ = 0;\n            int extension_strength_denominator_other17 = 0;\n        \
    \    int extension_strength_numerator_other18 = 0;\n            int extension_strength_denominator_other18\
    \ = 0;\n            int extension_", "        string extension = extensions[0];\n\
    \        string strongest = class_name + extension;\n        foreach (string extension2\
    \ in extensions) {\n            int cap = extension2.Length;\n            int\
    \ sm = extension.Length;\n            int strength = cap - sm;\n            if\
    \ (strength > 0) {\n                strongest = class_name + extension2;\n   \
    \             break;\n            }\n        }\n        return strongest;", " \
    \       string strongest_extension = null;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + extension;\n\
    \                } else {\n                    int strength = GetExtensionStrength(strongest_extension);\n\
    \                    if (strength > extension_strength) {\n                  \
    \      strongest_extension = class_name + extension;\n                    }\n\
    \                }\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Length;\n            int sm\
    \ = class_name.Length;\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(c => c == 'A');\n     \
    \       int sm = extension.Count(c => c == 'a');\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + extension;\n\
    \                } else if (strength < strongest_extension.Length) {\n       \
    \             strongest_extension = class_name + extension;\n                }\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        var extensions_count = extensions.Count();\n        var extensions_count_upper\
    \ = extensions.Count(x => x.ToUpper().Equals(x));\n        var extensions_count_lower\
    \ = extensions.Count(x => x.ToLower().Equals(x));\n        var extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower;\n        var extensions_count_diff_frac\
    \ = extensions_count_diff / extensions_count;\n        var extensions_count_diff_frac\
    \ = Math.Abs(extensions_count_diff_frac);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, 2);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, 0);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, 1);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -1);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -2);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -3);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -4);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -5);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -6);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -7);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -8);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -9);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -10);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -11);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -12);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -13);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -14);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -15);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -16);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -17);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -18);\n        var extensions_count_diff_frac\
    \ = Math.Round(extensions_count_diff_frac, -19);\n        var ", "        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => Char.IsUpper(c));\n\
    \            int sm = extension.Count(c => Char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        var extension_strengths = extensions.Select(x\
    \ => x.ToUpperInvariant().Count() - x.ToLowerInvariant().Count()).ToList();\n\
    \        var strongest_extension = extension_strengths.OrderByDescending(x =>\
    \ x).First();\n        return class_name + \".\" + strongest_extension;", "  \
    \      Dictionary<string, int> extension_strength = new Dictionary<string, int>();\n\
    \        foreach (string extension in extensions) {\n            int strength\
    \ = extension.Count(c => char.IsUpper(c)) -\n                           extension.Count(c\
    \ => char.IsLower(c));\n            extension_strength.Add(extension, strength);\n\
    \        }\n        string strongest_extension = null;\n        int max_strength\
    \ = -1;\n        foreach (KeyValuePair<string, int> extension in extension_strength)\
    \ {\n            if (extension.Value > max_strength) {\n                max_strength\
    \ = extension.Value;\n                strongest_extension = extension.Key;\n \
    \           }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Write your code here\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n            }\n   \
    \     }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            int strength = cap - sm;\n       \
    \     if (strength > 0) {\n                strongest_extension = class_name +\
    \ extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = null;\n       \
    \ double strength = -1;\n        foreach (string extension in extensions) {\n\
    \            int cap = extension.Count(c => c == 'A');\n            int sm = extension.Count(c\
    \ => c == 'a');\n            double strength_fraction = cap - sm;\n          \
    \  if (strength_fraction > strength) {\n                strongest_extension =\
    \ extension;\n                strength = strength_fraction;\n            }\n \
    \       }\n        return class_name + \".\" + strongest_extension;", "      \
    \  string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            double strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string extension = extensions.OrderByDescending(x\
    \ => x.Length).First();\n        string result = class_name + extension;\n   \
    \     return result;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            double strength = cap - sm;\n            if\
    \ (strength > 0) {\n                strongest_extension += extension;\n      \
    \      }\n        }\n        return strongest_extension;", "        string extension_strength\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_strength_int = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + extension_strength;",
  "        string strongest_extension = \"\";\n        double strength = 0;\n    \
    \    foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            double frac = cap - sm;\n            if (frac > strength) {\n   \
    \             strongest_extension = extension;\n                strength = frac;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension = extensions[0];\n\
    \        string strongest = extension;\n        foreach (string extension2 in\
    \ extensions) {\n            int extension2_cap = extension2.ToUpper().Count();\n\
    \            int extension2_sm = extension2.ToLower().Count();\n            int\
    \ extension2_strength = extension2_cap - extension2_sm;\n            if (extension2_strength\
    \ > strongest.ToUpper().Count() - strongest.ToLower().Count()) {\n           \
    \     strongest = extension2;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        string strongest_extension = class_name;\n \
    \       int strongest_extension_strength = -1;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = ExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension.Substring(0, extension.IndexOf('.'));\n\
    \                strongest_extension += \".\" + extension.Substring(extension.IndexOf('.'));\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code goes here\n        string strongest = string.Empty;\n        double strongest_strength\
    \ = double.MaxValue;\n        foreach (string extension in extensions) {\n   \
    \         double extension_strength = GetExtensionStrength(class_name, extension);\n\
    \            if (extension_strength > strongest_strength) {\n                strongest\
    \ = extension;\n                strongest_strength = extension_strength;\n   \
    \         }\n        }\n        return strongest;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = class_name;\n        int sm\
    \ = 0;\n        int cap = 0;\n        foreach (string extension in extensions)\
    \ {\n            cap = extension.Count(x => char.IsUpper(x));\n            sm\
    \ = extension.Count(x => char.IsLower(x));\n            strongest_extension =\
    \ strongest_extension.Replace(extension, cap - sm);\n        }\n        return\
    \ strongest_extension;", "        string extension = extensions[0];\n        string\
    \ extension_strength = extension.Substring(extension.Length - 1);\n        string\
    \ strongest_extension = class_name + extension;\n        foreach (string extension_name\
    \ in extensions) {\n            string extension_strength_new = extension_name.Substring(extension_name.Length\
    \ - 1);\n            if (extension_strength_new == extension_strength) {\n   \
    \             strongest_extension = class_name + extension_name;\n           \
    \ }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        double strength = -1;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            double frac = cap - sm;\n            if (frac > strength) {\n   \
    \             strongest_extension = extension;\n                strength = frac;\n\
    \            }\n        }\n        if (strongest_extension != null) {\n      \
    \      return class_name + \".\" + strongest_extension;\n        } else {\n  \
    \          return class_name;\n        }", "        string extension = extensions[0];\n\
    \        foreach (string extension2 in extensions) {\n            int SM = extension2.Count(c\
    \ => c == 'A');\n            int CAP = extension2.Count(c => c == 'a');\n    \
    \        int strength = CAP - SM;\n            if (strength > 0) {\n         \
    \       extension = extension2;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => c == 'A');\n            int sm = extension.Count(c\
    \ => c == 'a');\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            double strength = (double)cap - sm;\n            if (strength > 0)\
    \ {\n                strongest_extension = class_name + \".\" + extension;\n \
    \               break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        double strongest_extension_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int extension_strength\
    \ = ExtensionStrength(extension);\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string strongest_extension = \"\";\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += class_name + \".\" + extension;\n         \
    \   }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            double strength = cap - sm;\n            if\
    \ (strength > 0) {\n                strongest_extension += \".\" + extension;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Length;\n            int sm = class_name.Length;\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n            }\n   \
    \     }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        string strongest_extension_strength = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > strongest_extension_strength.ToUpper().Count())\
    \ {\n                strongest_extension_strength = extension;\n             \
    \   strongest_extension = class_name;\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = class_name;\n \
    \       string extension_strength = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength.ToUpper().Count() - extension_strength.ToLower().Count();\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = null;\n        double strongest_extension_strength = double.MaxValue;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength\
    \ = GetExtensionStrength(extension);\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        string strongest_extension = \"\";\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = (double)cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension_strength\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int extension_strength_counter = 0;\n            foreach (char c in extension)\
    \ {\n                if (Char.IsUpper(c)) {\n                    extension_strength_counter++;\n\
    \                }\n            }\n            int extension_strength_counter_lower\
    \ = 0;\n            foreach (char c in extension) {\n                if (Char.IsLower(c))\
    \ {\n                    extension_strength_counter_lower++;\n               \
    \ }\n            }\n            double extension_strength_fraction = extension_strength_counter\
    \ / (double)extension_strength_counter_lower;\n            if (extension_strength_fraction\
    \ > extension_strength) {\n                extension_strength = extension_strength_fraction;\n\
    \                extension_strength_counter = extension_strength_counter_lower;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[0];",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int cap = extension2.ToUpper().Count();\n       \
    \     int sm = extension2.ToLower().Count();\n            int strength = cap -\
    \ sm;\n            if (strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + extension;", "        string extension = extensions[0];\n\
    \        int strength = -1;\n        foreach (string extension_name in extensions)\
    \ {\n            int extension_strength = extension_name.ToUpper().Count() - extension_name.ToLower().Count();\n\
    \            if (extension_strength > strength) {\n                extension =\
    \ extension_name;\n                strength = extension_strength;\n          \
    \  }\n        }\n        return class_name + \".\" + extension;", "        //\
    \ Your code here\n        var extensions_count = extensions.Count();\n       \
    \ var extensions_count_cap = extensions.Count(x => x.ToUpper().Count() > 0);\n\
    \        var extensions_count_sm = extensions.Count(x => x.ToLower().Count() >\
    \ 0);\n        var extensions_count_cap_sm = extensions_count_cap - extensions_count_sm;\n\
    \        var extensions_count_cap_sm_sum = extensions_count_cap_sm.Sum();\n  \
    \      var extensions_count_cap_sm_avg = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_min = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm_sum / extensions_count_cap;\n\
    \        var extensions_count_cap_sm_max = extension", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code goes here\n        string strongest_extension = \"\";\n  \
    \      double strongest_strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Length;\n            int sm = class_name.Length;\n\
    \            double strength = cap - sm;\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;", "        // Your code here\n      \
    \  string strongest_extension = \"\";\n        foreach (string extension in extensions)\n\
    \        {\n            int cap = extension.Count(x => char.IsUpper(x));\n   \
    \         int sm = extension.Count(x => char.IsLower(x));\n            int strength\
    \ = cap - sm;\n            if (strength > 0)\n            {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string extension = extensions[0];\n\
    \        string strongest = class_name + extension;\n        foreach (string extension2\
    \ in extensions) {\n            int cap = extension2.Length;\n            int\
    \ sm = extension.Length;\n            int strength = cap - sm;\n            if\
    \ (strength > 0) {\n                strongest = extension2;\n            }\n \
    \       }\n        return strongest;", "        // Your code here\n        var\
    \ extension_strengths = extensions.Select(x => x.ToUpperInvariant().Count() -\
    \ x.ToLowerInvariant().Count()).ToList();\n        var max_strength = extension_strengths.Max();\n\
    \        var max_extension = extension_strengths.Where(x => x == max_strength).FirstOrDefault();\n\
    \        return class_name + \".\" + max_extension;", "        string extension\
    \ = extensions[0];\n        int cap = class_name.ToUpper().Count();\n        int\
    \ sm = class_name.ToLower().Count();\n        int strength = cap - sm;\n     \
    \   string strongest = class_name + extension;\n        foreach (string e in extensions)\
    \ {\n            int ecap = e.ToUpper().Count();\n            int esm = e.ToLower().Count();\n\
    \            int estrength = ecap - esm;\n            if (estrength > strength)\
    \ {\n                extension = e;\n                strength = estrength;\n \
    \           }\n        }\n        return strongest;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => c == 'A');\n            int sm = extension.Count(c\
    \ => c == 'a');\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        string strongest_extension = class_name;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension.Substring(0, extension.Length - 1);\n            }\n        }\n\
    \        return strongest_extension;", "        Dictionary<string, int> extensions_map\
    \ = new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = extension.Count(c => char.IsUpper(c));\n     \
    \       extensions_map.Add(extension, strength);\n        }\n        int max_strength\
    \ = extensions_map.Values.Max();\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions_map.Keys) {\n            if (extensions_map[extension]\
    \ == max_strength) {\n                strongest_extension += \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.ToUpper().Count();\n        \
    \    int sm = extension.ToLower().Count();\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                if (strongest_extension == null)\
    \ {\n                    strongest_extension = class_name + \".\" + extension;\n\
    \                }\n                else {\n                    if (strength <\
    \ strongest_extension.ToUpper().Count()) {\n                        strongest_extension\
    \ = class_name + \".\" + extension;\n                    }\n                }\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension = extensions[0];\n        foreach (string extension2 in extensions)\
    \ {\n            int cap = extension2.Count(c => char.IsUpper(c));\n         \
    \   int sm = extension2.Count(c => char.IsLower(c));\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                extension = extension2;\n\
    \            }\n        }\n        return class_name + \".\" + extension;", " \
    \       string extension = extensions[0];\n        foreach (string extension2\
    \ in extensions) {\n            int cap = extension2.ToUpper().Count();\n    \
    \        int sm = extension2.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > extension.ToUpper().Count() - extension.ToLower().Count())\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + extension;", "        // Your code here\n        string\
    \ strongest = null;\n        double strongest_strength = 0;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(x => x ==\
    \ char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower());\n\
    \            double strength = cap - sm;\n            if (strongest_strength <\
    \ strength) {\n                strongest = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        string strongest_extension = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.ToUpper().Count();\n        \
    \    int sm = extension.ToLower().Count();\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest_extension;", "        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strongest_extension == null || strength > strongest_extension.Length)\
    \ {\n                strongest_extension = class_name + extension;\n         \
    \   }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        string strongest_extension = string.Empty;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;", "        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.Count(x => x == char.ToUpper(x));\n            int sm = extension.Count(x\
    \ => x == char.ToLower(x));\n            int strength = cap - sm;\n          \
    \  if (strength > 0) {\n                strongest_extension = class_name + \"\
    .\" + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension = extensions[0];\n\
    \        int cap = class_name.Length;\n        int sm = extension.Length;\n  \
    \      double strength = cap - sm;\n        double maxStrength = -1;\n       \
    \ foreach (string e in extensions) {\n            int ce = e.Length;\n       \
    \     double cs = cap - ce;\n            double es = es + cs;\n            if\
    \ (es > maxStrength) {\n                maxStrength = es;\n                extension\
    \ = e;\n            }\n        }\n        return class_name + \".\" + extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_int = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength_int > extension_strength.ToUpper().Count()\
    \ - extension_strength.ToLower().Count()) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ extension_strength;", "        Dictionary<string, int> extension_strength =\
    \ new Dictionary<string, int>();\n        foreach (string extension in extensions)\
    \ {\n            int strength = 0;\n            int cap = 0;\n            int\
    \ sm = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                }\n                else if (char.IsLower(c))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ int diff = cap - sm;\n            if (diff > 0) {\n                strength\
    \ = diff;\n            }\n            extension_strength.Add(extension, strength);\n\
    \        }\n        int max_strength = extension_strength.Values.Max();\n    \
    \    string strongest_extension = class_name;\n        foreach (string extension\
    \ in extension_strength.Keys) {\n            if (extension_strength[extension]\
    \ == max_strength) {\n                strongest_extension += \".\" + extension;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        var extension_strength = extensions.Select(x => x.ToUpper().Count()\
    \ - x.ToLower().Count()).ToList();\n        var strongest_extension = extension_strength.OrderByDescending(x\
    \ => x).FirstOrDefault();\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.ToUpper().Count();\n        \
    \    int sm = extension.ToLower().Count();\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest_extension;", "        // Your code here\n        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string strongest_extension = class_name;\n\
    \        int strongest_extension_strength = -1;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capital = extension.Count(x => char.IsUpper(x));\n\
    \            int extension_smaller = extension.Count(x => char.IsLower(x));\n\
    \            int extension_strength_fraction = extension_capital - extension_smaller;\n\
    \            if (extension_strength_fraction > extension_strength.Count(x => x\
    \ == extension_strength_fraction)) {\n                extension_strength = extension;\n\
    \            }\n        }\n        return class_name + extension_strength;", " \
    \       string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => c == 'A');\n  \
    \          int sm = extension.Count(c => c == 'a');\n            double strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code here\n\
    \        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        Dictionary<string, int> extension_strength_dictionary = new Dictionary<string,\
    \ int>();\n        foreach (string extension_name in extensions) {\n         \
    \   int extension_strength_int = extension_name.Substring(extension_name.Length\
    \ - 1);\n            extension_strength_dictionary.Add(extension_name, extension_strength_int);\n\
    \        }\n        int extension_strength_int = extension_strength_dictionary[extension];\n\
    \        int extension_strength_int2 = extension_strength_int;\n        int extension_strength_int3\
    \ = extension_strength_int;\n        int extension_strength_int4 = extension_strength_int;\n\
    \        int extension_strength_int5 = extension_strength_int;\n        int extension_strength_int6\
    \ = extension_strength_int;\n        int extension_strength_int7 = extension_strength_int;\n\
    \        int extension_strength_int8 = extension_strength_int;\n        int extension_strength_int9\
    \ = extension_strength_int;\n        int extension_strength_int10 = extension_strength_int;\n\
    \        int extension_strength_int11 = extension_strength_int;\n        int extension_strength_int12\
    \ = extension_strength_int;\n        int extension_strength_int13 = extension_strength_int;\n\
    \        int extension_strength_int14 = extension_strength_int;\n        int extension_strength_int15\
    \ = extension_strength_int;\n        int extension_strength_int16 = extension_strength_int;\n\
    \        int extension_strength_int17 = extension_strength_int;\n        int extension_strength_int18\
    \ = extension_strength_int;\n        int extension_strength_int19 = extension_strength_int;\n\
    \        int extension_strength_int20 = extension_strength_int;\n        int extension_strength_int21\
    \ = extension_strength_int;\n        int extension_strength_int22 = extension_strength_int;\n\
    \        int extension_strength_int23 = extension_strength_int;\n        int extension_strength_int24\
    \ = extension_strength_int;\n        int extension_strength_int25 = extension_strength_int;\n\
    \        int extension_strength_int26 = extension_strength_int;\n        int extension_strength_int27\
    \ = extension_strength_int;\n        int extension_strength_int28 = extension_strength_int;\n\
    \        int extension_strength_int29 = extension_strength_int;\n        int extension",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int cap = extension2.ToUpper().Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension2.ToLower().Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           extension = extension2;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        string extension = extensions[0];\n\
    \        foreach (string extension2 in extensions) {\n            int cap = extension2.Length;\n\
    \            int sm = extension.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                extension = extension2;\n  \
    \          }\n        }\n        return class_name + \".\" + extension;", "  \
    \      // Your code goes here\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension;\n            }\n        }\n    \
    \    return strongest_extension;", "        // Your code goes here\n        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => c == 'A');\n            int sm\
    \ = extension.Count(c => c == 'a');\n            int strength = cap - sm;\n  \
    \          if (strength > 0) {\n                strongest_extension += \".\" +\
    \ extension;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       int sm = 0;\n        int cap = 0;\n        foreach (string extension in\
    \ extensions) {\n            cap = extension.Count(x => char.IsUpper(x));\n  \
    \          sm = extension.Count(x => char.IsLower(x));\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension.Substring(0, extension.IndexOf(\".\"));\n                strongest_extension\
    \ += \".\" + extension.Substring(extension.IndexOf(\".\") + 1);\n            \
    \    break;\n            }\n        }\n        return strongest_extension;", " \
    \       // Your code here\n        var extension_strengths = extensions.Select(x\
    \ => x.ToUpperInvariant().Count() - x.ToLowerInvariant().Count()).ToList();\n\
    \        var max_strength = extension_strengths.Max();\n        var max_index\
    \ = extension_strengths.FindIndex(x => x == max_strength);\n        return class_name\
    \ + \".\" + extensions[max_index];", "        string extension_strength = string.Empty;\n\
    \        string extension_class_name = string.Empty;\n        string extension_class_name_with_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int extension_capital_letters = extension.Count(x => char.IsUpper(x));\n\
    \            int extension_small_letters = extension.Count(x => char.IsLower(x));\n\
    \            int extension_strength = extension_capital_letters - extension_small_letters;\n\
    \            if (extension_strength > extension_strength) {\n                extension_strength\
    \ = extension_strength;\n                extension_class_name = class_name;\n\
    \                extension_class_name_with_extension = extension;\n          \
    \  }\n        }\n        return extension_class_name + \".\" + extension_class_name_with_extension;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code here\n\
    \        var extensions_count = extensions.Count();\n        var extensions_count_upper\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_sm =\
    \ extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper_sm_lower\
    \ = extensions.Count(x => char.IsLower(x));\n        var extensions_count_cap_sm_upper_sm_lower_sm_upper_sm_lower_sm_upper_sm_lower_sm\
    \ = extensions.Count(x => char.IsUpper(x));\n        var extensions_count_cap_s",
  "        string extension_strength = string.Empty;\n        string extension_strength_2\
    \ = string.Empty;\n        string extension_strength_3 = string.Empty;\n     \
    \   string extension_strength_4 = string.Empty;\n        string extension_strength_5\
    \ = string.Empty;\n        string extension_strength_6 = string.Empty;\n     \
    \   string extension_strength_7 = string.Empty;\n        string extension_strength_8\
    \ = string.Empty;\n        string extension_strength_9 = string.Empty;\n     \
    \   string extension_strength_10 = string.Empty;\n        string extension_strength_11\
    \ = string.Empty;\n        string extension_strength_12 = string.Empty;\n    \
    \    string extension_strength_13 = string.Empty;\n        string extension_strength_14\
    \ = string.Empty;\n        string extension_strength_15 = string.Empty;\n    \
    \    string extension_strength_16 = string.Empty;\n        string extension_strength_17\
    \ = string.Empty;\n        string extension_strength_18 = string.Empty;\n    \
    \    string extension_strength_19 = string.Empty;\n        string extension_strength_20\
    \ = string.Empty;\n        string extension_strength_21 = string.Empty;\n    \
    \    string extension_strength_22 = string.Empty;\n        string extension_strength_23\
    \ = string.Empty;\n        string extension_strength_24 = string.Empty;\n    \
    \    string extension_strength_25 = string.Empty;\n        string extension_strength_26\
    \ = string.Empty;\n        string extension_strength_27 = string.Empty;\n    \
    \    string extension_strength_28 = string.Empty;\n        string extension_strength_29\
    \ = string.Empty;\n        string extension_strength_30 = string.Empty;\n    \
    \    string extension_strength_31 = string.Empty;\n        string extension_strength_32\
    \ = string.Empty;\n        string extension_strength_33 = string.Empty;\n    \
    \    string extension_strength_34 = string.Empty;\n        string extension_strength_35\
    \ = string.Empty;\n        string extension_strength_36 = string.Empty;\n    \
    \    string extension_strength_37 = string.Empty;\n        string extension_strength_38\
    \ = string.Empty;\n        string extension_strength_39 = string.Empty;\n    \
    \    string extension_strength_40 = string.Empty;\n        string extension_strength_41\
    \ = string.Empty;\n        string extension_strength_42 = string.Empty;\n    \
    \    string extension_strength_43 = string.Empty;\n        string extension_strength_44\
    \ = string.Empty;\n        string ", "        // Your code here\n        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += extension.Substring(0, extension.IndexOf(\".\"));\n            }\n      \
    \  }\n        return strongest_extension;", "        string extension = extensions[0];\n\
    \        foreach (string extension2 in extensions) {\n            int cap = extension2.Count(c\
    \ => c == 'A');\n            int sm = extension2.Count(c => c == 'a');\n     \
    \       int strength = cap - sm;\n            if (strength > 0) {\n          \
    \      extension = extension2;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        string strongest_extension = null;\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null) {\n                    strongest_extension\
    \ = class_name + \".\" + extension;\n                } else {\n              \
    \      if (strength < strongest_extension.Length) {\n                        strongest_extension\
    \ = class_name + \".\" + extension;\n                    }\n                }\n\
    \            }\n        }\n        return strongest_extension;", "        Dictionary<string,\
    \ int> extension_strength = new Dictionary<string, int>();\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_counter = 0;\n\
    \            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    extension_strength_counter++;\n                }\n  \
    \          }\n            extension_strength.Add(extension, extension_strength_counter);\n\
    \        }\n        string strongest_extension = class_name;\n        int strongest_strength\
    \ = extension_strength[strongest_extension];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength_counter = 0;\n        \
    \    foreach (char c in extension) {\n                if (char.IsUpper(c)) {\n\
    \                    extension_strength_counter++;\n                }\n      \
    \      }\n            if (extension_strength_counter > strongest_strength) {\n\
    \                strongest_extension = extension;\n                strongest_strength\
    \ = extension_strength[strongest_extension];\n            }\n        }\n     \
    \   return strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1,\
    \ 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        string extension_strength_str_lower = extension_strength_str.ToLower();\n\
    \        string extension_strength_str_upper_sm = extension_strength_str_upper.Substring(extension_strength_str_upper.Length\
    \ - 1, 1);\n        string extension_strength_str_lower_sm = extension_strength_str_lower.Substring(extension_strength_str_lower.Length\
    \ - 1, 1);\n        int extension_strength_int;\n        if (extension_strength_str_upper_sm\
    \ == extension_strength_str_lower_sm) {\n            extension_strength_int =\
    \ 0;\n        } else {\n            extension_strength_int = Convert.ToInt32(extension_strength_str_upper_sm)\
    \ - Convert.ToInt32(extension_strength_str_lower_sm);\n        }\n        double\
    \ extension_strength_double = Convert.ToDouble(extension_strength_int);\n    \
    \    double extension_strength_double_rounded = Math.Round(extension_strength_double,\
    \ 2);\n        double extension_strength_double_rounded_rounded = Math.Round(extension_strength_double_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded = Math.Round(extension_strength_double_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded, 1);\n      \
    \  double extension_strength_double_rounded_rounded_rounded_rounded_rounded =\
    \ Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 1);\n        double extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extension_strength_double_rounded_rounded_rounded_rounded_rounded_rounded_roun",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n            }\n   \
    \     }\n        return strongest_extension;", "        // Your code here\n  \
    \      string strongest_extension = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += class_name + \".\" + extension;\n            }\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        string extension_strength = string.Empty;\n       \
    \ foreach (string extension in extensions) {\n            int CAP = extension.ToUpper().Count();\n\
    \            int SM = extension.ToLower().Count();\n            double strength\
    \ = (CAP - SM) / CAP;\n            if (strength > extension_strength) {\n    \
    \            extension_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        string extension_strength = extensions[0];\n\
    \        for (int i = 1; i < extensions.Count; i++) {\n            int extension_strength_int\
    \ = extensions[i].ToUpper().Count() - extensions[i].ToLower().Count();\n     \
    \       if (extension_strength_int > extension_strength.ToUpper().Count() - extension_strength.ToLower().Count())\
    \ {\n                extension_strength = extensions[i];\n            }\n    \
    \    }\n        return class_name + \".\" + extension_strength;", "        string\
    \ extension = extensions[0];\n        foreach (string extension2 in extensions)\
    \ {\n            int cap = extension2.Length;\n            int sm = extension.Length;\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           extension = extension2;\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        string strongest_extension = null;\n\
    \        double strength = -1;\n        foreach (string extension in extensions)\
    \ {\n            double extension_strength = GetExtensionStrength(class_name,\
    \ extension);\n            if (extension_strength > strength) {\n            \
    \    strongest_extension = extension;\n                strength = extension_strength;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        // Your code goes here\n        string strongest_extension = \"\";\n  \
    \      double strongest_extension_strength = 0;\n        foreach (string extension\
    \ in extensions) {\n            int extension_length = extension.Length;\n   \
    \         int class_length = class_name.Length;\n            int strength = extension_length\
    \ - class_length;\n            if (strength > strongest_extension_strength) {\n\
    \                strongest_extension = extension;\n                strongest_extension_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        string extension_strength =\
    \ null;\n        foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = extension.Count(x => char.IsUpper(x));\n            int extension_strength_denominator\
    \ = extension.Count(x => char.IsLower(x));\n            double extension_strength_fraction\
    \ = (double)extension_strength_numerator / (double)extension_strength_denominator;\n\
    \            if (extension_strength_fraction > 0) {\n                if (extension_strength_fraction\
    \ > strongest_extension.Length) {\n                    strongest_extension = extension;\n\
    \                    extension_strength = extension_strength_fraction;\n     \
    \           }\n            }\n        }\n        if (strongest_extension != null)\
    \ {\n            return class_name + \".\" + strongest_extension;\n        }\n\
    \        return class_name;", "        string strongest_extension = \"\";\n  \
    \      double strongest_strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            double strength\
    \ = (double)cap - (double)sm;\n            if (strength > strongest_strength)\
    \ {\n                strongest_extension = extension;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.ToUpper().Count();\n        \
    \    int sm = extension.ToLower().Count();\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1);\n\
    \        string extension_strength_number = int.Parse(extension_strength);\n \
    \       int extension_strength_number_cap = extension_strength_number / CAP;\n\
    \        int extension_strength_number_sm = extension_strength_number % CAP;\n\
    \        int extension_strength_number_cap_sm = 0;\n        if (extension_strength_number_cap\
    \ > extension_strength_number_sm) {\n            extension_strength_number_cap_sm\
    \ = extension_strength_number_cap;\n        }\n        string extension_strength_number_cap_sm_string\
    \ = extension_strength_number_cap_sm.ToString();\n        string extension_strength_number_cap_sm_string_cap\
    \ = extension_strength_number_cap_sm_string.Substring(0, 1);\n        string extension_strength_number_cap_sm_string_sm\
    \ = \"0\" + extension_strength_number_cap_sm_string.Substring(1);\n        string\
    \ extension_strength_number_cap_sm_string_cap_sm = extension_strength_number_cap_sm_string_cap\
    \ + extension_strength_number_cap_sm_string_sm;\n        string extension_strength_number_cap_sm_string_cap_sm_cap\
    \ = extension_strength_number_cap_sm_string_cap_sm.Substring(0, 1);\n        string\
    \ extension_strength_number_cap_sm_string_cap_sm_sm = \"0\" + extension_strength_number_cap_sm_string_cap_sm.Substring(1);\n\
    \        string extension_strength_number_cap_sm_string_cap_sm_cap_sm = extension_strength_number_cap_sm_string_cap_sm_cap\
    \ + extension_strength_number_cap_sm_string_cap_sm_sm;\n        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm\
    \ = extension_strength_number_cap_sm_string_cap_sm_cap_sm + extension_strength_number_cap_sm_string_cap_sm_sm;\n\
    \        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm = extension_strength_number_cap_sm_string_cap_sm_cap_sm\
    \ + extension_strength_number_cap_sm_string_cap_sm_sm;\n        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm\
    \ = extension_strength_number_cap_sm_string_cap_sm_cap_sm + extension_strength_number_cap_sm_string_cap_sm_sm;\n\
    \        string extension_strength_number_cap_sm_string_cap_sm_cap_sm_sm = extension_",
  "        string extension = extensions[0];\n        foreach (string e in extensions)\
    \ {\n            int cap = e.ToUpper().Count() - e.ToLower().Count();\n      \
    \      int sm = e.ToLower().Count() - e.ToUpper().Count();\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                extension = e;\n\
    \                break;\n            }\n        }\n        return class_name +\
    \ \".\" + extension;", "        // Your code goes here\n        string strongest_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(x => char.IsUpper(x));\n            int sm =\
    \ extension.Count(x => char.IsLower(x));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension += class_name\
    \ + \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.ToUpper().Count();\n        \
    \    int sm = extension.ToLower().Count();\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                if (strongest_extension == null)\
    \ {\n                    strongest_extension = class_name + extension;\n     \
    \           } else {\n                    if (strength > strongest_extension.ToUpper().Count())\
    \ {\n                        strongest_extension = class_name + extension;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ strongest_extension;"]
stop_tokens:
- "\n    }\n"
