name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) ==\
  \ 'my_class.AA'\n    public static string StrongestExtension(string class_name,\
  \ List<string> extensions) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        string strongest_extension = class_name;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        // Your code goes here\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension;\n            }\n        }\n    \
    \    return strongest_extension;", "        // Your code here\n        string\
    \ strongest_extension = string.Empty;\n        int strongest_extension_strength\
    \ = -1;\n        foreach (string extension in extensions) {\n            int extension_strength\
    \ = extension.Count(x => char.IsUpper(x));\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int extension_strength = extension2.ToUpper().Count()\
    \ - extension2.ToLower().Count();\n            if (extension_strength > extension.ToUpper().Count()\
    \ - extension.ToLower().Count()) {\n                extension = extension2;\n\
    \            }\n        }\n        return class_name + \".\" + extension;", " \
    \       string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.ToUpper().Count();\n     \
    \       int sm = extension.ToLower().Count();\n            int strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string strongest_extension = \"\
    \";\n        double strongest_extension_strength = 0;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_strength = extension_strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string extension = extensions[0];\n\
    \        string extension_strength = extension.Substring(extension.Length - 1).ToLower();\n\
    \        string strongest_extension = null;\n        foreach (string extension_name\
    \ in extensions) {\n            string extension_strength_new = extension_name.Substring(extension_name.Length\
    \ - 1).ToLower();\n            if (extension_strength_new == extension_strength)\
    \ {\n                strongest_extension = extension_name;\n            }\n  \
    \      }\n        return class_name + \".\" + strongest_extension;", "       \
    \ Dictionary<string, int> extensions_map = new Dictionary<string, int>();\n  \
    \      foreach (string extension in extensions) {\n            int extension_length\
    \ = extension.Length;\n            int extension_cap = extension_length.ToUpperInvariant().Count(x\
    \ => x == x);\n            int extension_sm = extension_length.ToLowerInvariant().Count(x\
    \ => x == x);\n            int extension_strength = extension_cap - extension_sm;\n\
    \            extensions_map.Add(extension, extension_strength);\n        }\n \
    \       string strongest_extension = extensions_map.OrderByDescending(x => x.Value).First().Key;\n\
    \        return class_name + \".\" + strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += extension;\n            }\n        }\n    \
    \    return strongest_extension;", "        string strongest_extension = null;\n\
    \        double max_strength = double.MaxValue;\n        foreach (string extension\
    \ in extensions) {\n            double extension_strength = GetExtensionStrength(class_name,\
    \ extension);\n            if (extension_strength > max_strength) {\n        \
    \        max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return strongest_extension;",
  "        string extension = extensions[0];\n        foreach (string extension2 in\
    \ extensions) {\n            int SM = extension2.ToLowerInvariant().Count(c =>\
    \ char.IsLower(c));\n            int CAP = extension2.ToUpperInvariant().Count(c\
    \ => char.IsUpper(c));\n            int strength = (CAP - SM) / CAP;\n       \
    \     if (strength > extension.ToLowerInvariant().Count(c => char.IsLower(c)))\
    \ {\n                extension = extension2;\n            }\n        }\n     \
    \   return class_name + extension;", "        // Your code here\n        string\
    \ strongest_extension = class_name;\n        int sm = 0;\n        int cap = 0;\n\
    \        foreach (string extension in extensions) {\n            int s = extension.Length;\n\
    \            sm = sm + s;\n            cap = cap + s.ToUpper().Count();\n    \
    \    }\n        double strength = cap - sm;\n        if (strength > 0) {\n   \
    \         strongest_extension = class_name + extensions[0];\n        }\n     \
    \   return strongest_extension;", "        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Length;\n            int sm = class_name.Length;\n  \
    \          int strength = cap - sm;\n            if (strength > 0) {\n       \
    \         strongest_extension = class_name + extension;\n            }\n     \
    \   }\n        return strongest_extension;", "        string strongest_extension\
    \ = null;\n        string extension_strength = null;\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_numerator = 0;\n\
    \            int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            int extension_count_cap = 0;\n            int\
    \ extension_count_sm = 0;\n            int extension_count_length = 0;\n     \
    \       int extension_count_cap_sm = 0;\n            int extension_count_cap_length\
    \ = 0;\n            int extension_count_sm_sm = 0;\n            int extension_count_sm_length\
    \ = 0;\n            int extension_count_cap_sm_length = 0;\n            int extension_count_cap_length_sm\
    \ = 0;\n            int extension_count_cap_length_sm_length = 0;\n          \
    \  int extension_count_sm_cap = 0;\n            int extension_count_sm_cap = 0;\n\
    \            int extension_count_cap_sm_cap = 0;\n            int extension_count_cap_sm_cap\
    \ = 0;\n            int extension_count_cap_length_sm_cap = 0;\n            int\
    \ extension_count_cap_length_sm_cap = 0;\n            int extension_count_sm_cap_sm\
    \ = 0;\n            int extension_count_sm_cap_sm = 0;\n            int extension_count_cap_sm_cap_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm = 0;\n            int extension_count_cap_length_sm_cap_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm = 0;\n          \
    \  int extension_count_sm_cap_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm = 0;\n            int\
    \ extension_count_cap_sm_cap_sm_sm = 0;\n            int extension_count_cap_length_sm_cap_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm_sm = 0;\n       \
    \     int extension_count_sm_cap_sm_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm_sm = 0;\n           \
    \ int extension_count_cap_sm_cap_sm_sm_sm = 0;\n            int extension_count_cap_length_sm_cap_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_length_sm_cap_sm_sm_sm = 0;\n    \
    \        int extension_count_sm_cap_sm_sm_sm_sm = 0;\n            int extension_count_sm_cap_sm_sm_sm_sm\
    \ = 0;\n            int extension_count_cap_sm_cap_sm_sm_sm_sm = 0;\n        \
    \    int extension_count_", "        string extension = extensions[0];\n     \
    \   string extension_strength = extension.Substring(extension.Length - 1);\n \
    \       string strongest_extension = class_name + extension;\n        List<string>\
    \ extensions_with_same_strength = extensions.Where(x => x.Substring(x.Length -\
    \ 1) != extension_strength).ToList();\n        if (extensions_with_same_strength.Count\
    \ > 1) {\n            extension = extensions_with_same_strength[0];\n        \
    \    extension_strength = extension.Substring(extension.Length - 1);\n       \
    \     strongest_extension = class_name + extension;\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        Dictionary<string,\
    \ int> extension_strength = new Dictionary<string, int>();\n        foreach (string\
    \ extension in extensions) {\n            int strength = extension.ToUpper().Count()\
    \ - extension.ToLower().Count();\n            if (extension_strength.ContainsKey(extension))\
    \ {\n                if (extension_strength[extension] < strength) {\n       \
    \             extension_strength[extension] = strength;\n                }\n \
    \           } else {\n                extension_strength.Add(extension, strength);\n\
    \            }\n        }\n        int max_strength = extension_strength.Values.Max();\n\
    \        string strongest_extension = class_name + extension_strength.Where(x\
    \ => x.Value == max_strength).First().Key;\n        return strongest_extension;"]
stop_tokens:
- "\n    }\n"
