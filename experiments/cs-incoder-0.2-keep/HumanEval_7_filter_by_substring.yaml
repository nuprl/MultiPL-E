name: HumanEval_7_filter_by_substring
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Filter an input list of strings only for ones that contain given\
  \ substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    public static\
  \ List<string> FilterBySubstring(List<string> strings, string substring) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"\
  john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new\
  \ string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"aaaxxy\"\
  , (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xx\")).Equals((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"aaaxxy\", (string)\"xxxAAA\"\
  , (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new\
  \ string[]{(string)\"grunt\", (string)\"trumpet\", (string)\"prune\", (string)\"\
  gruesome\"})), (\"run\")).Equals((new List<string>(new string[]{(string)\"grunt\"\
  , (string)\"prune\"}))));\n    }\n\n}\n"
completions: ['        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();', "        var result = new\
    \ List<string>();\n        foreach (var s in strings) {\n            if (s.Contains(substring))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(s
    => s.Contains(substring)).ToList();', "        List<string> result = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(s
    => s.Contains(substring)).ToList();', '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(s
    => s.Contains(substring)).ToList();', '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();']
stop_tokens:
- "\n    }\n"
