language: cs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a * a);\n        long g = (long) Math.Sqrt(b\
    \ * b);\n        long h = (long) Math.Sqrt(c * c);\n        long i = (long) Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long j = (long) Math.Sqrt(a * a + c * c);\n \
    \       long k = (long) Math.Sqrt(b * b + c * c);\n        long l = (long) Math.Sqrt(a\
    \ * a * b + b * b + c * c + d * d);\n        long m = (long) Math.Sqrt(a * a *\
    \ b + c * c + d * d);\n        long n = (long) Math.Sqrt(a * a * c + b * b + c\
    \ * c + d * d);\n        long o = (long) Math.Sqrt(a * a * c + c * c + d * d);\n\
    \        long p = (long) Math.Sqrt(a * a * b + b * b * c + c * c + d * d);\n \
    \       long q = (long) Math.Sqrt(a * a * b + c * c * d + b * b * c + c * c +\
    \ d * d);\n        long r = (long) Math.Sqrt(a * a * b + b * b * c + c * c * d\
    \ + b * b * c + c * c + d * d);\n        long s = (long) Math.Sqrt(a * a * b +\
    \ c * c * d + b * b * c + c * c * d + b * b * c + c * c + d * d);\n        long\
    \ t = (long) Math.Sqrt(a * a * b + b * b * c + c * c * d + b * b * c + c * c *\
    \ d + b * b * c + c * c + d * d);\n        long u = (long) Math.Sqrt(a * a * b\
    \ + c * c * d + b * b * c + c * c * d + b * b * c + c * c * d + b * b * c + c\
    \ * c + d * d);\n        long v = (long) Math.Sqrt(a * a * b + b * b * c + c *\
    \ c * d + b * b * c + c * c * d + b * b * c + c * c * d + b * b * c + c * c +\
    \ d * d);\n        long w = (long) Math.Sqrt(a * a * b + c * c * d + b * b * c\
    \ + c * c * d + b * b * c + c * c * d + b * b * \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp97ywh5fg.cs(38,114): error CS1525: Invalid expression term ''}''

    /tmp/tmp97ywh5fg.cs(38,114): error CS1026: ) expected

    /tmp/tmp97ywh5fg.cs(38,114): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + acb;\n        long abcc\
    \ = abc * abc;\n        long acbc = acb * acb;\n        long abccc = abcc * abcc;\n\
    \        long acbcb = acbc * acbc;\n        long abcccb = abccc * abccc;\n   \
    \     long acbcbc = acbcb * acbcb;\n        long abcccbc = abcccb * abcccb;\n\
    \        long acbcbcb = acbcbc * acbcbc;\n        long abcccbcb = abcccbc * abcccbc;\n\
    \        long acbcbcbc = acbcbcb * acbcbcb;\n        long abcccbcb = abcccbc *\
    \ abcccbcb;\n        long acbcbcbc = acbcbcb * acbcbcbc;\n        long abcccbcb\
    \ = abcccbc * abcccbcb;\n        long acbcbcbc = acbcbcb * acbcbcbc;\n       \
    \ long abcccbcb = abcccbc * abcccbcb;\n        long acbcbcbc = acbcbcb * acbcbcbc;\n\
    \        long abcccbcb = abcccbc * abcccbcb;\n        long acbcbcbc = acbcbcb\
    \ * acbcbcbc;\n        long abcccbcb = abcccbc * abcccbcb;\n        long acbcbcbc\
    \ = acbcbcb * acbcbcbc;\n        long abcccbcb = abcccbc * abcccbcb;\n       \
    \ long acbcbcbc = acbcbcb * acbcbcbc;\n        long abcccbcb = abcccbc * abcccbcb;\n\
    \        long acbcbcbc = acbcbcb * acbcbcbc;\n        long abcccbcb = abcccbc\
    \ * abcccbcb;\n        long acbcbcbc = acbcbcb * acbcbcbc;\n        long abcccbcb\
    \ = abcccbc * abcccbcb;\n        long acbcbcbc = acbcbcb * acbcbcb\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo0l9l1ca.cs(50,42): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcb + ac;\n        long acbca = acbc + abc;\n\
    \        long abcacb = abcac + acb;\n        long acbcab = acbca * 2;\n      \
    \  long abcacbc = abcacb * 2;\n        long acbcabc = acbcab * 2;\n        long\
    \ abcacbca = abcacbc * 2;\n        long acbcabca = acbcabc * 2;\n        long\
    \ abcacbcab = abcacbca * 2;\n        long acbcabcab = acbcabca * 2;\n        long\
    \ abcacbcabc = abcacbcab * 2;\n        long acbcabcabc = acbcabcab * 2;\n    \
    \    long abcacbcabca = abcacbcabc * 2;\n        long acbcabcabca = acbcabcabc\
    \ * 2;\n        long abcacbcabcab = abcacbcabca * 2;\n        long acbcabcabcab\
    \ = acbcabcabca * 2;\n        long abcacbcabcabc = abcacbcabcab * 2;\n       \
    \ long acbcabcabcabc = acbcabcabcab * 2;\n        long abcacbcabcabca = abcacbcabcabc\
    \ * 2;\n        long acbcabcabcabca = acbcabcabcabc * 2;\n        long abcacbcabcabcab\
    \ = abcacbcabcabca * 2;\n        long acbcabcabcabcab = acbcabcabcabca * 2;\n\
    \        long abcacbcabcabcabc = abcacbcabcabcab * 2;\n        long acbcabcabcabcabc\
    \ = acbcabcabcabcab * 2;\n        long abcacbcabcabcabca = abcacbcabcabcabc *\
    \ 2;\n        long acbcabcabcabcabca = acbcabcabcabcabc * 2;\n        long abcacbcabcabcabcab\
    \ = abcacbcabcabcabcab * 2;\n        long acbcabcabcabcabcab = acbcabcabcabcabcab\
    \ * 2;\n        long abcacbcabcabcabcabc = abcacbcabcab\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hgi97qp.cs(52,48): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbbc = acbb * bc;\n        long abbbc = abbb * bc;\n\
    \        long acbbbc = acbbbc * bc;\n        long abbbbc = abbbbc * bc;\n    \
    \    long acbbbbc = acbbbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n    \
    \    long acbbbbbc = acbbbbbc * bc;\n        long abbbbbbc = abbbbbbc * bc;\n\
    \        long acbbbbbbc = acbbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc\
    \ * bc;\n        long acbbbbbbbc = acbbbbbbbc * bc;\n        long abbbbbbbbc =\
    \ abbbbbbbbc * bc;\n        long acbbbbbbbbc = acbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbc = abbbbbbbbbc * bc;\n        long acbbbbbbbbbc = acbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc * bc;\n        long acbbbbbbbbbbc\
    \ = acbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc = abbbbbbbbbbbc * bc;\n  \
    \      long acbbbbbbbbbbbc = acbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbc = acbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc = abbbbbbbbbbbbbbc *\
    \ bc;\n        long acbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbc\
    \ * bc;\n        long acbbbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbc = abbbbb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpukdy6rbs.cs(53,42): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n\
    \        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcb = abcbcbcb * bc;\n\
    \        long acbcbcbcb = acbcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc\
    \ * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcb =\
    \ abcbcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcb\
    \ = abcbcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n        long\
    \ abcbcbcbcb = abcbcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n\
    \        long abcbcbcbcb = abcbcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long acbcbcbcbc =\
    \ acbcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long acbcbcbcbc\
    \ = acbcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n\
    \        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb\
    \ * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9j_n_mlp.cs(23,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmp9j_n_mlp.cs(24,23): error CS0103: The name ''acbcb'' does not exist in
    the current context

    /tmp/tmp9j_n_mlp.cs(25,22): error CS0103: The name ''abcb'' does not exist in
    the current context

    /tmp/tmp9j_n_mlp.cs(27,24): error CS0103: The name ''abcbcb'' does not exist in
    the current context

    /tmp/tmp9j_n_mlp.cs(34,14): error CS0128: A local variable or function named ''acbcbcbcbc''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(35,14): error CS0128: A local variable or function named ''abcbcbcbcb''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(36,14): error CS0128: A local variable or function named ''acbcbcbcbc''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(37,14): error CS0128: A local variable or function named ''abcbcbcbcb''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(38,14): error CS0128: A local variable or function named ''acbcbcbcbc''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(39,14): error CS0128: A local variable or function named ''abcbcbcbcb''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(40,14): error CS0128: A local variable or function named ''acbcbcbcbc''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(41,14): error CS0128: A local variable or function named ''abcbcbcbcb''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(42,14): error CS0128: A local variable or function named ''acbcbcbcbc''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(43,14): error CS0128: A local variable or function named ''abcbcbcbcb''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(44,14): error CS0128: A local variable or function named ''acbcbcbcbc''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(45,14): error CS0128: A local variable or function named ''abcbcbcbcb''
    is already defined in this scope

    /tmp/tmp9j_n_mlp.cs(46,14): error CS0128: A local variable '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long acbcab\
    \ = acbc * abc;\n        long acbcabc = acbcab * abc;\n        long acbcabcb =\
    \ acbcabc * abc;\n        long acbcabcbc = acbcabcb * abc;\n        long acbcabcbcb\
    \ = acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb * abc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps7p55aak.cs(44,47): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * c;\n        long acbcab = acb * abc;\n        long acbcabc = acbcab\
    \ * c;\n        long acbcabcb = acbcabc * b;\n        long acbcabcbc = acbcabcb\
    \ * c;\n        long acbcabcbcb = acbcabcbc * b;\n        long acbcabcbcbc = acbcabcbcb\
    \ * c;\n        long acbcabcbcbcb = acbcabcbcbc * b;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * c;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * b;\n    \
    \    long acbcabcbcbcbcbc = acbcabcbcbcbcb * c;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * b;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb *\
    \ c;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * b;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * c;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * b;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * c;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * b;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * c;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * b;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * c;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * b;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * c;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx84tioa0.cs(46,13): error CS1001: Identifier expected

    /tmp/tmpx84tioa0.cs(46,13): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n\
    \        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n\
    \        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbc * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n  \
    \      long abcbcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbc * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxzscn7j5.cs(45,22): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * bc;\n        long acbcab = acb * abc;\n        long acbcabc = acbcab\
    \ * bc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcb\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp48ypto7y.cs(44,55): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abcb\
    \ = abc * bc;\n        long abcab = abcab * bc;\n        long acbcab = acbcab\
    \ * bc;\n        long acbcabc = acbcabc * bc;\n        long acbcabcb = acbcabcb\
    \ * bc;\n        long acbcabcbc = acbcabcbc * bc;\n        long acbcabcbcb = acbcabcbcb\
    \ * bc;\n        long acbcabcbcbc = acbcabcbcbc * bc;\n        long acbcabcbcbcb\
    \ = acbcabcbcbcb * bc;\n        long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n   \
    \     long acbcabcbcbcbcb = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n  \
    \      long acbcabcbcbcbcb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnf7g9jtr.cs(45,28): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + abc;\n        long abcba = abcc + abb;\n        long acbca = acbc +\
    \ abc;\n        long abcca = abcb + acb;\n        long acbcaa = acbca + abc;\n\
    \        long abccaa = abccb + acb;\n        long acbcaaa = acbcca + abc;\n  \
    \      long abccaaa = abccba + acb;\n        long acbcaaaa = acbcca + abc;\n \
    \       long abccaaaa = abccba + acb;\n        long acbcaaaaa = acbcca + abc;\n\
    \        long abccaaaaa = abccba + acb;\n        long acbcaaaaaa = acbcca + abc;\n\
    \        long abccaaaaaa = abccba + acb;\n        long acbcaaaaaaa = acbcca +\
    \ abc;\n        long abccaaaaaaa = abccba + acb;\n        long acbcaaaaaaaa =\
    \ acbcca + abc;\n        long abccaaaaaaaa = abccba + acb;\n        long acbcaaaaaaaaa\
    \ = acbcca + abc;\n        long abccaaaaaaaaa = abccba + acb;\n        long acbcaaaaaaaaaa\
    \ = acbcca + abc;\n        long abccaaaaaaaaaa = abccba + acb;\n        long acbcaaaaaaaaaaa\
    \ = acbcca + abc;\n        long abccaaaaaaaaaaa = abccba + acb;\n        long\
    \ acbcaaaaaaaaaaaa = acbcca + abc;\n        long abccaaaaaaaaaaaa = abccba + acb;\n\
    \        long acbcaaaaaaaaaaaaa = acbcca + abc;\n        long abccaaaaaaaaaaaaa\
    \ = abccba + acb;\n        long acbcaaaaaaaaaaaaaa = acbcca + abc;\n        long\
    \ abccaaaaaaaaaaaaaa = abccba + acb;\n        long acbcaaaaaaaaaaaaaaa = acbcca\
    \ + abc;\n        long abccaaaaaaaaaaaaaaa = abccba + acb;\n        long acbcaaaaaaaaaaaaaaaa\
    \ = acbcca + abc;\n        long abccaaaaaaaaaaaaaaaa = abccb\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5p102fo.cs(56,42): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long root2 = root * root;\n        long\
    \ root3 = root * root2;\n        long root4 = root * root3;\n        long root5\
    \ = root * root4;\n        long root6 = root * root5;\n        long root7 = root\
    \ * root6;\n        long root8 = root * root7;\n        long root9 = root * root8;\n\
    \        long root10 = root * root9;\n        long root11 = root * root10;\n \
    \       long root12 = root * root11;\n        long root13 = root * root12;\n \
    \       long root14 = root * root13;\n        long root15 = root * root14;\n \
    \       long root16 = root * root15;\n        long root17 = root * root16;\n \
    \       long root18 = root * root17;\n        long root19 = root * root18;\n \
    \       long root20 = root * root19;\n        long root21 = root * root20;\n \
    \       long root22 = root * root21;\n        long root23 = root * root22;\n \
    \       long root24 = root * root23;\n        long root25 = root * root24;\n \
    \       long root26 = root * root25;\n        long root27 = root * root26;\n \
    \       long root28 = root * root27;\n        long root29 = root * root28;\n \
    \       long root30 = root * root29;\n        long root31 = root * root30;\n \
    \       long root32 = root * root31;\n        long root33 = root * root32;\n \
    \       long root34 = root * root33;\n        long root35 = root * root34;\n \
    \       long root36 = root * root35;\n        long root37 = root * root36;\n \
    \       long root38 = root * root37;\n        long root39 = root * root38;\n \
    \       long root40 = root * root39;\n        long root41 = root * root40;\n \
    \       long root42 = root * root41;\n        long root43 = root * root42;\n \
    \       long root44 = root * root43;\n        long root45 = root * root44;\n \
    \       long root46 = root * root45;\n        long root47 = root * root46;\n \
    \       long root48 = \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvdxmoigh.cs(68,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpvdxmoigh.cs(68,22): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbbc = acbb * bc;\n        long abbbc = abbb * bc;\n\
    \        long acbbbc = acbbbc * bc;\n        long abbbbc = abbbbc * bc;\n    \
    \    long acbbbbc = acbbbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n    \
    \    long acbbbbbc = acbbbbbc * bc;\n        long abbbbbbc = abbbbbbc * bc;\n\
    \        long acbbbbbbc = acbbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc\
    \ * bc;\n        long acbbbbbbbc = acbbbbbbbc * bc;\n        long abbbbbbbbc =\
    \ abbbbbbbbc * bc;\n        long acbbbbbbbbc = acbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbc = abbbbbbbbbc * bc;\n        long acbbbbbbbbbc = acbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc * bc;\n        long acbbbbbbbbbbc\
    \ = acbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc = abbbbbbbbbbbc * bc;\n  \
    \      long acbbbbbbbbbbbc = acbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbc = acbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc = abbbbbbbbbbbbbbc *\
    \ bc;\n        long acbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwuey1lgi.cs(49,26): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long abcbc = abcb + c; // abcbc is abc minus bc\n     \
    \   long abccb = abcc * 2;\n        long abcbcb = abcbc + c; // abcbcb is abc\
    \ minus bc\n        long abcbcc = abcbcb + c; // abcbcc is abc minus bc\n    \
    \    long abccbc = abccb * 2;\n        long abccbcc = abccbc + c; // abccbcc is\
    \ abc minus bc\n        long abcbccb = abcbcc + c; // abcbccb is abc minus bc\n\
    \        long abcbccc = abcbccb + c; // abcbccc is abc minus bc\n        long\
    \ abccbcb = abccbc * 2;\n        long abccbccb = abccbcc * 2;\n        long abcbccc\
    \ = abcbccb * 2;\n        long abcbcccb = abcbccc * 2;\n        long abccbcb =\
    \ abccbcc * 2;\n        long abccbccb = abccbcc * 2;\n        long abcbccc = abcbccb\
    \ * 2;\n        long abcbcccb = abcbccc * 2;\n        long abccbcb = abccbcc *\
    \ 2;\n        long abccbccb = abccbcc * 2;\n        long abcbccc = abcbccb * 2;\n\
    \        long abcbcccb = abcbccc * 2;\n        long abccbcb = abccbcc * 2;\n \
    \       long abccbccb = abccbcc * 2;\n        long abcbccc = abcbccb * 2;\n  \
    \      long abcbcccb = abcbccc * 2;\n        long abccbcb = abccbcc * 2;\n   \
    \     long abccbccb = abccbcc * 2;\n        long abcbccc = abcbccb * 2;\n    \
    \    long abcbcccb = abcbccc * 2;\n        long abccbcb = abccbcc * 2;\n     \
    \   long abccbccb = abccbcc * 2;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnakxpcz.cs(34,14): error CS0128: A local variable or function named ''abcbccc''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(36,14): error CS0128: A local variable or function named ''abccbcb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(37,14): error CS0128: A local variable or function named ''abccbccb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(38,14): error CS0128: A local variable or function named ''abcbccc''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(39,14): error CS0128: A local variable or function named ''abcbcccb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(40,14): error CS0128: A local variable or function named ''abccbcb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(41,14): error CS0128: A local variable or function named ''abccbccb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(42,14): error CS0128: A local variable or function named ''abcbccc''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(43,14): error CS0128: A local variable or function named ''abcbcccb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(44,14): error CS0128: A local variable or function named ''abccbcb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(45,14): error CS0128: A local variable or function named ''abccbccb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(46,14): error CS0128: A local variable or function named ''abcbccc''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(47,14): error CS0128: A local variable or function named ''abcbcccb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(48,14): error CS0128: A local variable or function named ''abccbcb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(49,14): error CS0128: A local variable or function named ''abccbccb''
    is already defined in this scope

    /tmp/tmphnakxpcz.cs(50,14): error CS0128: A local variable or function named ''abcbccc''
    is already defined in this '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcb + ac;\n        long acbca = acbc + abc;\n\
    \        long abcacb = abcac + acb;\n        long acbcab = acbca * 2;\n      \
    \  long acbcabc = acbcab * 2;\n        long acbcabcb = acbcabcb * 2;\n       \
    \ long acbcabcbc = acbcabcbc * 2;\n        long acbcabcbcb = acbcabcbcb * 2;\n\
    \        long acbcabcbcbc = acbcabcbcbc * 2;\n        long acbcabcbcbcb = acbcabcbcbcb\
    \ * 2;\n        long acbcabcbcbcbc = acbcabcbcbcbc * 2;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbcb * 2;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcbc * 2;\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbcbcb * 2;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * 2;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ 2;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * 2;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcb * 2;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * 2;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbcb * 2;\n        long\
    \ acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * 2;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * 2;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * 2;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjxmb_n8i.cs(47,55): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a * a);\n        long g = (long) Math.Sqrt(b\
    \ * b);\n        long h = (long) Math.Sqrt(c * c);\n        long i = (long) Math.Sqrt(a\
    \ * a + b * b);\n        long j = (long) Math.Sqrt(a * a + c * c);\n        long\
    \ k = (long) Math.Sqrt(b * b + c * c);\n        long l = (long) Math.Sqrt(a *\
    \ a + b * b + c * c);\n        long m = (long) Math.Sqrt(a * a + c * c + b * b\
    \ + c * c);\n        long n = (long) Math.Sqrt(a * a + b * b + c * c + a * a +\
    \ b * b + c * c + a * a + c * c + b * b + c * c + a * a + b * b + c * c + a *\
    \ a + c * c + b * b + c * c + a * a + b * b + c * c + a * a + c * c + b * b +\
    \ c * c + a * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a + b *\
    \ b + c * c + a * a + c * c + b * b + c * c + a * a + b * b + c * c + a * a +\
    \ c * c + b * b + c * c + a * a + b * b + c * c + a * a + c * c + b * b + c *\
    \ c + a * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a + b * b +\
    \ c * c + a * a + c * c + b * b + c * c + a * a + b * b + c * c + a * a + c *\
    \ c + b * b + c * c + a * a + b * b + c * c + a * a + c * c + b * b + c * c +\
    \ a * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a + b * b + c *\
    \ c + a * a + c * c + b * b + c * c + a * a + b * b + c * c + a * a + c * c +\
    \ b * b + c * c + a * a + b * b + c * c + a * a + c * c + b * b + c * c + a *\
    \ a + b * b + c * c + a * a + c * \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1_jkfx9.cs(29,934): error CS1525: Invalid expression term ''}''

    /tmp/tmpb1_jkfx9.cs(29,934): error CS1026: ) expected

    /tmp/tmpb1_jkfx9.cs(29,934): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        return t1 == t2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edd1f10c551a4fc791d301387e558ac8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edd1f10c551a4fc791d301387e558ac8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcccb;\n        long acbcccbc =\
    \ acbcccb * acbcccbc;\n        long acbcccbcb = acbcccbc * acbcccbcb;\n      \
    \  long acbcccbcbb = acbcccbcb * acbcccbcbb;\n        long acbcccbcbc = acbcccbcb\
    \ * acbcccbcbc;\n        long acbcccbcbcb = acbcccbcb * acbcccbcbcb;\n       \
    \ long acbcccbcbcbb = acbcccbcb * acbcccbcbcb;\n        long acbcccbcbcbc = acbcccbcb\
    \ * acbcccbcbcb;\n        long acbcccbcbcbc = acbcccbcb * acbcccbcbcbc;\n    \
    \    long acbcccbcbcbcb = acbcccbcb * acbcccbcbcbcb;\n        long acbcccbcbcbcbb\
    \ = acbcccbcb * acbcccbcbcbcb;\n        long acbcccbcbcbcbc = acbcccbcb * acbcccbcbcbcbc;\n\
    \        long acbcccbcbcbcbcb = acbcccbcb * acbcccbcbcbcbcb;\n        long acbcccbcbcbcbcbb\
    \ = acbcccbcb * acbcccbcbcbcbcb;\n        long acbcccbcbcbcbcbc = acbcccbcb *\
    \ acbcccbcbcbcbcbc;\n        long acbcccbcbcbcbcbcb = acbcccbcb * acbcccbcbcbcbcbcb;\n\
    \        long acbcccbcbcbcbcbcbb = acbcccbcb * acbcccbcbcbcbcbcb;\n        long\
    \ acbcccbcbcbcbcbcbc = acb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprciqzmg2.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long x = (long)((-b - root) / 2.0 * a);\n\
    \        long y = (long)((-b + root) / 2.0 * a);\n        long z = (long)((-b\
    \ + root) / 2.0 * a);\n        if (Math.Abs(x - y) < Math.Abs(x - z) && Math.Abs(x\
    \ - z) < Math.Abs(y - z)) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <923edba25c764711b00b6cfbf742ebf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <923edba25c764711b00b6cfbf742ebf4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long abcab\
    \ = ab * abc;\n        long abcabc = ab * abc * abc;\n        long abcabcb = ab\
    \ * abc * abc * abc;\n        long abcabcbb = ab * abc * abc * abc * abc;\n  \
    \      long abcabcbbc = ab * abc * abc * abc * abc * abc;\n        long abcabcbbcd\
    \ = ab * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcde = ab * abc\
    \ * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdef = ab * abc *\
    \ abc * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefg = ab *\
    \ abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefgh\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefghi\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long\
    \ abcabcbbcdefghij = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc;\n        long abcabcbbcdefghijk = ab * abc * abc * abc * abc *\
    \ abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefghijkl\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc;\n        long abcabcbbcdefghijkll = ab * abc * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefghijkllm\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc * abc;\n        long abcabcbbcdefghijk\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9jinl_t.cs(39,31): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abbbc = abbb * bc;\n        long abbbcd = abbbc *\
    \ bc;\n        long abbbcde = abbbcd * bc;\n        long abbbcdef = abbbcde *\
    \ bc;\n        long abbbcdefg = abbbcdef * bc;\n        long abbbcdefgh = abbbcdefg\
    \ * bc;\n        long abbbcdefghi = abbbcdefgh * bc;\n        long abbbcdefghij\
    \ = abbbcdefghi * bc;\n        long abbbcdefghijk = abbbcdefghij * bc;\n     \
    \   long abbbcdefghijkl = abbbcdefghijk * bc;\n        long abbbcdefghijklm =\
    \ abbbcdefghijkl * bc;\n        long abbbcdefghijklmn = abbbcdefghijklm * bc;\n\
    \        long abbbcdefghijklmno = abbbcdefghijklmn * bc;\n        long abbbcdefghijklmnpo\
    \ = abbbcdefghijklmno * bc;\n        long abbbcdefghijklmnpoq = abbbcdefghijklmnpo\
    \ * bc;\n        long abbbcdefghijklmnpoqr = abbbcdefghijklmnpoq * bc;\n     \
    \   long abbbcdefghijklmnpoqrst = abbbcdefghijklmnpoqr * bc;\n        long abbbcdefghijklmnpoqrstu\
    \ = abbbcdefghijklmnpoqrst * bc;\n        long abbbcdefghijklmnpoqrstuv = abbbcdefghijklmnpoqrstu\
    \ * bc;\n        long abbbcdefghijklmnpoqrstuvw = abbbcdefghijklmnpoqrstuv * bc;\n\
    \        long abbbcdefghijklmnpoqrstuvwx = abbbcdefghijklmnpoqrstuv\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz60tpnwe.cs(44,67): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = Math.Sqrt(a + b + c);\n        long g =\
    \ Math.Sqrt(a + b - c);\n        long h = Math.Sqrt(a + b + c - e);\n        long\
    \ i = Math.Sqrt(a + b - c + e);\n        long j = Math.Sqrt(a + b + c + e);\n\
    \        long k = Math.Sqrt(a + b - c + e + f);\n        long l = Math.Sqrt(a\
    \ + b - c + e - f);\n        long m = Math.Sqrt(a + b - c + e + f + g);\n    \
    \    long n = Math.Sqrt(a + b - c + e - f - g);\n        long o = Math.Sqrt(a\
    \ + b - c + e + f + g + h);\n        long p = Math.Sqrt(a + b - c + e - f - g\
    \ + h);\n        long q = Math.Sqrt(a + b - c + e + f + g + h + i);\n        long\
    \ r = Math.Sqrt(a + b - c + e - f - g + h - i);\n        long s = Math.Sqrt(a\
    \ + b - c + e + f + g + h + i + j);\n        long t = Math.Sqrt(a + b - c + e\
    \ - f - g + h - i + j);\n        long u = Math.Sqrt(a + b - c + e + f + g + h\
    \ + i + j + k);\n        long v = Math.Sqrt(a + b - c + e - f - g + h - i + j\
    \ + k);\n        long w = Math.Sqrt(a + b - c + e + f + g + h + i + j + k + l);\n\
    \        long x = Math.Sqrt(a + b - c + e - f - g + h - i + j + k + l);\n    \
    \    long y = Math.Sqrt(a + b - c + e + f + g + h + i + j + k + l + m);\n    \
    \    long z = Math.Sqrt(a + b - c + e - f - g + h - i + j + k + l + m);\n    \
    \    long a = Math.Sqrt(a + b - c + e + f + g + h + i + j + k + l + m + n);\n\
    \        long b = Math.Sqrt(a + b - c + e - f - g + h - i + j + k + l + m + n);\n\
    \        long c = Math.Sqrt(a + b - c + e + f + g + h\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3i35lbl.cs(45,53): error CS1026: ) expected

    /tmp/tmpu3i35lbl.cs(45,53): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d6b2b88c5cc4be9afaf807917be1e77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d6b2b88c5cc4be9afaf807917be1e77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            double root = Math.Sqrt(d);\n      \
    \      long x = (long)(-b + root);\n            long y = (long)(-b - root);\n\
    \            long z = (long)(-a + root);\n            if (x >= 0 && y >= 0 &&\
    \ z >= 0) {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3052fa7d81a242ef84e4a4b7a3a859d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3052fa7d81a242ef84e4a4b7a3a859d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab * bc;\n\
    \        long acb = ac * bc;\n        long abbc = ab * bc;\n        long acab\
    \ = ac * ab;\n        long acbc = ac * bc;\n        long acabc = ac * abc;\n \
    \       long abcab = ab * abc;\n        long abcbc = ab * bc;\n        long abcabc\
    \ = ab * abc;\n        long abcbcd = ab * bcd;\n        long abcabcd = ab * abc;\n\
    \        long abcbcde = ab * bcde;\n        long abcabcde = ab * abcde;\n    \
    \    long abcbcdef = ab * bcdef;\n        long abcabcdef = ab * abcdef;\n    \
    \    long abcbcdefg = ab * bcdefg;\n        long abcabcdefg = ab * abcdefg;\n\
    \        long abcbcdefgh = ab * bcdefgh;\n        long abcabcdefgh = ab * abcdefgh;\n\
    \        long abcbcdefghi = ab * bcdefghi;\n        long abcabcdefghi = ab * abcdefghi;\n\
    \        long abcbcdefghij = ab * bcdefghij;\n        long abcabcdefghij = ab\
    \ * abcdefghij;\n        long abcbcdefghijk = ab * bcdefghijk;\n        long abcabcdefghijk\
    \ = ab * abcdefghijk;\n        long abcbcdefghijkl = ab * bcdefghijkl;\n     \
    \   long abcabcdefghijkl = ab * abcdefghijkl;\n        long abcbcdefghijklmn =\
    \ ab * bcdefghijkln;\n        long abcabcdefghijklmn = ab * abcdefghijkln;\n \
    \       long abcbcdefghijklmn1 = ab * bcdefghijklmn;\n        long abcabcdefghijklmn1\
    \ = ab * abcdefghijklmn;\n        long abcbcdefghijklmn12 = ab * bcdefghijklmn1;\n\
    \        long abcabcdefghijklmn12 = ab * abcdefghijklmn1;\n        long abcbcdefgh\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptdg7i4uq.cs(53,24): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / a;\n        long t2 = (-b - root) / a;\n    \
    \    if (t1 == t2)\n            return true;\n        if (t1 > t2)\n         \
    \   return false;\n        long t3 = t1 * t1;\n        long t4 = t2 * t2;\n  \
    \      long t5 = t3 * t3;\n        long t6 = t4 * t4;\n        long t7 = t5 *\
    \ t5;\n        long t8 = t6 * t6;\n        long t9 = t7 * t7;\n        long t10\
    \ = t8 * t8;\n        long t11 = t9 * t9;\n        long t12 = t10 * t10;\n   \
    \     long t13 = t11 * t11;\n        long t14 = t12 * t12;\n        long t15 =\
    \ t13 * t13;\n        long t16 = t14 * t14;\n        long t17 = t15 * t15;\n \
    \       long t18 = t16 * t16;\n        long t19 = t17 * t17;\n        long t20\
    \ = t18 * t18;\n        long t21 = t19 * t19;\n        long t22 = t20 * t20;\n\
    \        long t23 = t21 * t21;\n        long t24 = t22 * t22;\n        long t25\
    \ = t23 * t23;\n        long t26 = t24 * t24;\n        long t27 = t25 * t25;\n\
    \        long t28 = t26 * t26;\n        long t29 = t27 * t27;\n        long t30\
    \ = t28 * t28;\n        long t31 = t29 * t29;\n        long t32 = t30 * t30;\n\
    \        long t33 = t31 * t31;\n        long t34 = t32 * t32;\n        long t35\
    \ = t33 * t33;\n        long t36 = t34 * t34;\n        long t37 = t35 * t35;\n\
    \        long t38 = t36 * t36;\n        long t39 = t37 * t37;\n        long t40\
    \ = t38 * t38;\n        long t41 = t39 * t39;\n        long t42 = t40 * t40;\n\
    \        long t43 = t41 * t41;\n        long t44 = t42 * t42;\n        long t45\
    \ = t\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2jx672w4.cs(69,21): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long root = (long)Math.Sqrt(d);\n  \
    \          long t1 = (-b + root) / a;\n            long t2 = (-b - root) / a;\n\
    \            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n               \
    \ return true;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <714b217b50494b34919610ba413367cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <714b217b50494b34919610ba413367cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbbc = acbb * bc;\n        long abbbc = abbb * bc;\n\
    \        long acbbbc = acbbbc * bc;\n        long abbbbc = abbbbc * bc;\n    \
    \    long acbbbbc = acbbbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n    \
    \    long acbbbbbc = acbbbbbc * bc;\n        long abbbbbbc = abbbbbbc * bc;\n\
    \        long acbbbbbbc = acbbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc\
    \ * bc;\n        long acbbbbbbbc = acbbbbbbbc * bc;\n        long abbbbbbbbc =\
    \ abbbbbbbbc * bc;\n        long acbbbbbbbbc = acbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbc = abbbbbbbbbc * bc;\n        long acbbbbbbbbbc = acbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc * bc;\n        long acbbbbbbbbbbc\
    \ = acbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc = abbbbbbbbbbc * bc;\n    \
    \    long acbbbbbbbbbbbc = acbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc =\
    \ abbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbc = acbbbbbbbbbbbc * bc;\n \
    \       long abbbbbbbbbbbbc = abbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n\
    \        long acbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpshf13je0.cs(49,37): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abcc = abc * bc;\n        long accc = acc * bc;\n\
    \        long abbbc = abbb * bc;\n        long abbcc = abbc * bc;\n        long\
    \ abccc = abcc * bc;\n        long acccc = accc * bc;\n        long abbbcc = abbbc\
    \ * bc;\n        long abbccc = abbcc * bc;\n        long abcccc =abccc * bc;\n\
    \        long accccc =acccc * bc;\n        long abbbccc =abbbcc * bc;\n      \
    \  long abbcccc =abbccc * bc;\n        long abcccc =abccc * bc;\n        long\
    \ accccc =acccc * bc;\n        long abbbccc =abbbcc * bc;\n        long abbcccc\
    \ =abbccc * bc;\n        long abcccc =abccc * bc;\n        long accccc =acccc\
    \ * bc;\n        long abbbccc =abbbcc * bc;\n        long abbcccc =abbccc * bc;\n\
    \        long abcccc =abccc * bc;\n        long accccc =acccc * bc;\n        long\
    \ abbbccc =abbbcc * bc;\n        long abbcccc =abbccc * bc;\n        long abcccc\
    \ =abccc * bc;\n        long accccc =acccc * bc;\n        long abbbccc =abbbcc\
    \ * bc;\n        long abbcccc =abbccc * bc;\n        long abcccc =abccc * bc;\n\
    \        long accccc =acccc * bc;\n        long abbbccc =abbbcc * bc;\n      \
    \  long abbcccc =abbccc * bc;\n        long abcccc =abcc\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8di40h_0.cs(56,26): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = (b + Math.Sqrt(d))\
    \ / (2 * a);\n        long f = (a * c - b * e) / (2 * a);\n        return e <\
    \ 0 && f < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr965pxf7.cs(20,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side17 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side29 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side30 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7dj970qj.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7dj970qj.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long x = (long)((-b + root) / (2 * a));\n\
    \        long y = (long)((-b - root) / (2 * a));\n        if (x == 0 && y == 0)\
    \ {\n            return true;\n        }\n        if (x == 0 && y > 0) {\n   \
    \         return false;\n        }\n        if (x > 0 && y > 0) {\n          \
    \  return false;\n        }\n        if (x == 0 && y < 0) {\n            return\
    \ true;\n        }\n        if (x == 0 && y > 0) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21d0c85ac5124c97bc08d9309a9a7120>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21d0c85ac5124c97bc08d9309a9a7120>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = Math.Sqrt(a * a + b * b);\n        long\
    \ g = Math.Sqrt(a * a + c * c);\n        long h = (b * b + c * c) / 2;\n     \
    \   long i = (a + b + c) / 2;\n        long j = (a + b + e) / 2;\n        long\
    \ k = (a + c + e) / 2;\n        long l = (a + c + f) / 2;\n        long m = (b\
    \ + c + f) / 2;\n        long n = (b + c + g) / 2;\n        long o = (c + c +\
    \ g) / 2;\n        long p = (c + c + h) / 2;\n        long q = (d + e + f) / 2;\n\
    \        long r = (d + e + g) / 2;\n        long s = (d + e + h) / 2;\n      \
    \  long t = (d + e + i) / 2;\n        long u = (d + e + j) / 2;\n        long\
    \ v = (d + e + k) / 2;\n        long w = (d + e + l) / 2;\n        long x = (d\
    \ + e + m) / 2;\n        long y = (d + e + n) / 2;\n        long z = (d + e +\
    \ o) / 2;\n        long A = (a + b + c + d + e + f + g + h + i + j + k + l + m\
    \ + n + o + p + q + r + s + t + u + v + w + x + y + z) / 8;\n        long B =\
    \ (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s +\
    \ t + u + v + w + x + y + z) / 8;\n        long C = (a + b + c + d + e + f + g\
    \ + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z)\
    \ / 8;\n        long D = (a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q + r + s + t + u + v + w + x + y + z) / 8;\n        long E = (a\
    \ + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t\
    \ + u + v + w + x + y + z) / 8;\n        long F = (a + b + c + d + e + f + g +\
    \ h + i + j + k\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1g92nxmf.cs(48,60): error CS1026: ) expected

    /tmp/tmp1g92nxmf.cs(48,60): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcc = abc + acb;\n        long acbc\
    \ = acb + abc;\n        long abcba = abcc + acbc;\n        long abcbac = abcba\
    \ * 2;\n        long abcbacc = abcbac * 2;\n        long abcbacca = abcbacc *\
    \ 2;\n        long abcbaccaa = abcbacca * 2;\n        long abcbaccaaa = abcbaccaa\
    \ * 2;\n        long abcbaccaaaa = abcbaccaaa * 2;\n        long abcbaccaaaaa\
    \ = abcbaccaaaa * 2;\n        long abcbaccaaaaaa = abcbaccaaaaa * 2;\n       \
    \ long abcbaccaaaaaaa = abcbaccaaaaaa * 2;\n        long abcbaccaaaaaaaa = abcbaccaaaaaaa\
    \ * 2;\n        long abcbaccaaaaaaaaa = abcbaccaaaaaaaa * 2;\n        long abcbaccaaaaaaaaa\
    \ = abcbaccaaaaaaaa * 2;\n        long abcbaccaaaaaaaaaa = abcbaccaaaaaaaaa *\
    \ 2;\n        long abcbaccaaaaaaaaaaa = abcbaccaaaaaaaaaa * 2;\n        long abcbaccaaaaaaaaaa=\
    \ abcbaccaaaaaaaaaa * 2;\n        long abcbaccaaaaaaaaaaa = abcbaccaaaaaaaaaa\
    \ * 2;\n        long abcbaccaaaaaaaaaaaa = abcbaccaaaaaaaaaaa * 2;\n        long\
    \ abcbaccaaaaaaaaaaaa= abcbaccaaaaaaaaaaaa * 2;\n        long abcbaccaaaaaaaaaaaa=\
    \ abcbaccaaaaaaaaaaaa * 2;\n        long abcbaccaaaaaaaaaaaaa= abcbaccaaaaaaaaaaaa\
    \ * 2;\n        long abcbaccaaaaaaaaaaaaa= abcbaccaaaaaaaaaaaaa * 2;\n       \
    \ long abcbaccaaaaaaaaaaaaaa= abcbaccaaaaaaaaaaaaaa * 2;\n        long abcbaccaaaaaaaaaaaaaa=\
    \ abcbaccaaaaaaaaaaaaaa * 2;\n        long abcbaccaaaaaaaaaaaaaaa= abcbaccaaaaaaaaaaaaaa\
    \ * 2;\n        long abcbaccaaaaaaaaaaaaaaa= abc\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3v1np8x5.cs(49,41): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n\
    \        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n\
    \        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbc * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n  \
    \      long abcbcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ acbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfdllvw9n.cs(46,21): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = d; //Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n      \
    \  long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31d044bbe612496191f2893243231b45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31d044bbe612496191f2893243231b45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n           \
    \ long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 * a);\n     \
    \       if (Math.Abs(f - g) < 0.0001) {\n                return true;\n      \
    \      }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpndld84ns.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            double root = Math.Sqrt(d);\n      \
    \      long x = (long)(-b + root);\n            long y = (long)(-b - root);\n\
    \            long z = (long)(-a + root);\n            if ((x > 0) && (y > 0) &&\
    \ (z > 0)) {\n                return true;\n            }\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0971d214f95e42ed8e75ea5f9318318b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0971d214f95e42ed8e75ea5f9318318b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abac\
    \ = abc - ac;\n        long abcab = abc + ab;\n        long abcabc = abcab + abc;\n\
    \        long abcabcb = abcabc + abcb;\n        long abcabcba = abcabcb + abca;\n\
    \        long abcabcbac = abcabcab + abcabc;\n        long abcabcbacc = abcabcabc\
    \ + abcabcb;\n        long abcabcbacb = abcabcabc + abcabcba;\n        long abcabcbacba\
    \ = abcabcbac + abcabcba;\n        long abcabcbacbac = abcabcbac + abcabcbac;\n\
    \        long abcabcbacbacb = abcabcbac + abcabcbacb;\n        long abcabcbacbacba\
    \ = abcabcbacb + abcabcbacba;\n        long abcabcbacbacbac = abcabcbacbac + abcabcbacba;\n\
    \        long abcabcbacbacbacc = abcabcbacbacc + abcabcbacbac;\n        long abcabcbacbacbacb\
    \ = abcabcbacbacc + abcabcbacbacba;\n        long abcabcbacbacbacba = abcabcbacbacbac\
    \ + abcabcbacbacba;\n        long abcabcbacbacbacbac = abcabcbacbacbac + abcabcbacbacbac;\n\
    \        long abcabcbacbacbacbacb = abcabcbacbacbac + abcabcbacbacbacba;\n   \
    \     long abcabcbacbacbacbaca = abcabcbacbacbacbac + abcabcbacbacbacba;\n   \
    \     long abcabcbacbacbacbacb = abcabcbacbacbacbac + abcabcbacbacbacba;\n   \
    \     long abcabcbacbacbacbacba = abcabcbacbacbacbac + abcabcbacbacbacba;\n  \
    \      long abcabcbacbacbacbacbacb = abcabcbacbacbacbac + abcabcbacbacbacba;\n\
    \        long abcabcbacbacbacbacbac = abcabcbacbacbacbac + ab\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2jqgkocq.cs(45,61): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + bc;\n        long abcba = abcb + ab;\n        long abcab = abcab + ab;\n\
    \        long abcabc = abcabc + ab;\n        long abcabcb = abcabcb + ab;\n  \
    \      long abcabcba = abcabcba;\n        long abcabcbac = abcabcbac + ab;\n \
    \       long abcabcbacb = abcabcbacb + ab;\n        long abcabcbacba = abcabcbacba;\n\
    \        long abcabcbacbac = abcabcbacbac + ab;\n        long abcabcbacbacb =\
    \ abcabcbacbacb + ab;\n        long abcabcbacbacba = abcabcbacbacba;\n       \
    \ long abcabcbacbacbac = abcabcbacbacbac + ab;\n        long abcabcbacbacbacbb\
    \ = abcabcbacbacbacbb + ab;\n        long abcabcbacbacbacba = abcabcbacbacbacba;\n\
    \        long abcabcbacbacbacbac = abcabcbacbacbacbac + ab;\n        long abcabcbacbacbacba\
    \ = abcabcbacbacbacba;\n        long abcabcbacbacbacbac = abcabcbacbacbacbac +\
    \ ab;\n        long abcabcbacbacbacba = abcabcbacbacbacba;\n        long abcabcbacbacbacbac\
    \ = abcabcbacbacbacbac + ab;\n        long abcabcbacbacbacba = abcabcbacbacbacba;\n\
    \        long abcabcbacbacbacbac = abcabcbacbacbacbac + ab;\n        long abcabcbacbacbacba\
    \ = abcabcbacbacbacba;\n        long abcabcbacbacbacbac = abcabcbacbacbacbac +\
    \ ab;\n        long abcabcbacbacbacba = abcabcbacbacbacba;\n        long abcabcbacbacbacbac\
    \ = abcabcbacbacbacbac + ab;\n        long abcabcbacbacbacba = abcabcbacbac\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzk1htzsm.cs(49,46): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abcb\
    \ = abc * bc;\n        long acbcab = acbc * abc;\n        long acbcabc = acbcab\
    \ * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc = acbcabcb\
    \ * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long acbcabcbcbc\
    \ = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n      \
    \  long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc * abc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv6qcwz9s.cs(44,55): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2)\n            return true;\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <189649de534a4dd1a072cfebe338d6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <189649de534a4dd1a072cfebe338d6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = Math.Sqrt(a * a + b * b);\n        long\
    \ g = Math.Sqrt(a * a + c * c);\n        long h = Math.Sqrt(a * b + c * c);\n\
    \        long i = Math.Sqrt(a * b + b * b);\n        long j = Math.Sqrt(a * c\
    \ + b * b);\n        long k = Math.Sqrt(a * c + c * c);\n        long l = Math.Sqrt(a\
    \ * b + c * c);\n        long m = Math.Sqrt(a * b + b * b);\n        long n =\
    \ Math.Sqrt(a * c + b * c);\n        long o = Math.Sqrt(a * c + c * c);\n    \
    \    long p = Math.Sqrt(a * b + c * b);\n        long q = Math.Sqrt(a * b + b\
    \ * b);\n        long r = Math.Sqrt(a * c + b * c);\n        long s = Math.Sqrt(a\
    \ * c + c * c);\n        long t = Math.Sqrt(a * b + c * b);\n        long u =\
    \ Math.Sqrt(a * b + b * b);\n        long v = Math.Sqrt(a * c + b * c);\n    \
    \    long w = Math.Sqrt(a * c + c * c);\n        long x = Math.Sqrt(a * b + c\
    \ * b);\n        long y = Math.Sqrt(a * b + b * b);\n        long z = Math.Sqrt(a\
    \ * c + b * c);\n        long A = Math.Sqrt(a * c + c * c);\n        long B =\
    \ Math.Sqrt(a * b + c * b);\n        long C = Math.Sqrt(a * b + b * b);\n    \
    \    long D = Math.Sqrt(a * c + b * c);\n        long E = Math.Sqrt(a * c + c\
    \ * c);\n        long F = Math.Sqrt(a * b + c * b);\n        long G = Math.Sqrt(a\
    \ * b + b * b);\n        long H = Math.Sqrt(a * c + b * c);\n        long I =\
    \ Math.Sqrt(a * c + c * c);\n        long J = Math.Sqrt(a * b + c * b);\n    \
    \    long K = Math.Sqrt(a * b + b * b);\n        long L = Math.Sqrt(a * c + b\
    \ * c);\n        long M = Math.Sqrt(a * c + c * c);\n        long N = Math.Sqrt(\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb5e7oekc.cs(56,28): error CS1026: ) expected

    /tmp/tmpb5e7oekc.cs(56,28): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root1 = (-b + Math.Sqrt(d)) / (2 * a);\n        long root2 = (-b - Math.Sqrt(d))\
    \ / (2 * a);\n        if (root1 < 0 || root1 > 1 || root2 < 0 || root2 > 1) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmploiy84l7.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmploiy84l7.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n\
    \        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n\
    \        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbc * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n  \
    \      long abcbcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ ac\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9yxrf0su.cs(46,16): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abbc = abc + acb;\n        long acab\
    \ = acb + abc;\n        long abcab = abbc + acab;\n        long acabc = acab +\
    \ abbc;\n        long abcabc = abcab + acabc;\n        long acabcb = acabc+ abcab;\n\
    \        long abcabcb = abcabc + acabcb;\n        long acabcba = acabcb + abcabc;\n\
    \        long abcabcab = abcabca + acabcba;\n        long acabcbac = acabcba +\
    \ abcabcab;\n        long abcabcabc = abcabcab + acabcbac;\n        long acabcbacb\
    \ = acabcbac + abcabcabc;\n        long abcabcabcb = abcabcabc + acabcbacb ;\n\
    \        long acabcbacba = acabcbac+ abcabcabcb;\n        long abcabcabcab = abcabcabca\
    \ + acabcbacba;\n        long acabcbacbacbac = acabcbaca + abcabcabcab;\n    \
    \    long abcabcabcabc = abcabcabcab + acabcbacbacb ;\n        long acabcbacbacbac\
    \ = acabcbacbac + abcabcabcabc;\n        long abcabcabcabcb = abcabcabcabc + acabcbacbacba;\n\
    \        long acabcbacbacbac = acabcbacbaca + abcabcabcabcb;\n        long abcabcabcabcab\
    \ = abcabcabcabca + acabcbacbacbacba;\n        long acabcbacbacbacbac = acabcbacbacbac\
    \ + abcabcabcabcab;\n        long abcabcabcabcabc = abcabcabcabcab + acabcbacbacbacba;\n\
    \        long acabcbacbacbacbac = acabcbacbacbacbac + abcabcabcabcabc;\n     \
    \   long abcabcabcabcabcb = abcabcabcabcabcb + acabcbacbacbacbacba;\n        long\
    \ acabcbacbacbacbacbac = acabcbacbacbacbacbac + abcabcabcabcabcb;\n        long\
    \ abcabcabcabcabcab = abcabcabcabcabca + acabcbacbacbacbacba;\n        long ac\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xh4k743.cs(49,16): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbc = acbcccbcb * acbcc;\n       \
    \ long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbb = acbcccbcb * acbcc;\n   \
    \     long acbcccbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb =\
    \ acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbb = acbcccbcb * acbcc;\n   \
    \     long acbcccbcbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbcbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbcbcbcbcbc = acbcccbcb * acb\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp22umsq74.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abcb\
    \ = abc * bc;\n        long acbcb = (acb * bc) * bc;\n        long acbcbc = (acbcb\
    \ * bc) * bc;\n        long acbcbcb = (acbcbcb * bc) * bc;\n        long acbcbcbc\
    \ = (acbcbcbc * bc) * bc;\n        long acbcbcbcb = (acbcbcbcb * bc) * bc;\n \
    \       long acbcbcbcbc = (acbcbcbcbc * bc) * bc;\n        long acbcbcbcbc = (acbcbcbcbc\
    \ * bc) * bc;\n        long acbcbcbcbcb = (acbcbcbcbcb * bc) * bc;\n        long\
    \ acbcbcbcbcbc = (acbcbcbcbcbc * bc) * bc;\n        long acbcbcbcbcbc = (acbcbcbcbcbc\
    \ * bc) * bc;\n        long acbcbcbcbcbcb = (acbcbcbcbcbcb * bc) * bc;\n     \
    \   long acbcbcbcbcbcbc = (acbcbcbcbcbcbc * bc) * bc;\n        long acbcbcbcbcbcbc\
    \ = (acbcbcbcbcbcbc * bc) * bc;\n        long acbcbcbcbcbcbcb = (acbcbcbcbcbcbcb\
    \ * bc) * bc;\n        long acbcbcbcbcbcbcbc = (acbcbcbcbcbcbcbc * bc) * bc;\n\
    \        long acbcbcbcbcbcbcbc = (acbcbcbcbcbcbcbc * bc) * bc;\n        long acbcbcbcbcbcbcbc\
    \ = (acbcbcbcbcbcbcbc * bc) * bc;\n        long acbcbcbcbcbcbcbcb = (acbcbcbcbcbcbcbcb\
    \ * bc) * bc;\n        long acbcbcbcbcbcbcbcb = (acbcbcbcbcbcbcbcbc * bc) * bc;\n\
    \        long acbcbcbcbcbcbcbcbc = (acbcbcbcbcbcbcbcbc * \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjktgc1qq.cs(43,56): error CS1525: Invalid expression term ''}''

    /tmp/tmpjktgc1qq.cs(43,56): error CS1026: ) expected

    /tmp/tmpjktgc1qq.cs(43,56): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx03_x9qp.cs(42,13): error CS1001: Identifier expected

    /tmp/tmpx03_x9qp.cs(42,13): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        return t1 >= 0 && t1 <= 1 && t2\
    \ >= 0 && t2 <= 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <361321ef75de46f8a4ee08a0dc53a28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <361321ef75de46f8a4ee08a0dc53a28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long acbc\
    \ = ac * bc;\n        long abcb = abc * bc;\n        long abcbc = ab * bc * c;\n\
    \        long abcbcb = ab * bc * c * b;\n        long abcbcbc = ab * bc * c *\
    \ b * c;\n        long abcbcbcb = ab * bc * c * b * c * b;\n        long abcbcbcbc\
    \ = ab * bc * c * b * c * c * b;\n        long abcbcbcbcb = ab * bc * c * b *\
    \ c * c * c * b;\n        long abcbcbcbcbc = ab * bc * c * b * c * c * c * c;\n\
    \        long abcbcbcbcbcb = ab * bc * c * b * c * c * c * c * b;\n        long\
    \ abcbcbcbcbcb = ab * bc * c * b * c * c * c * c * b;\n        long abcbcbcbcbcbc\
    \ = ab * bc * c * b * c * c * c * c * c;\n        long abcbcbcbcbcbcb = ab * bc\
    \ * c * b * c * c * c * c * b;\n        long abcbcbcbcbcbcb = ab * bc * c * b\
    \ * c * c * c * c * b;\n        long abcbcbcbcbcbcbc = ab * bc * c * b * c * c\
    \ * c * c * c;\n        long abcbcbcbcbcbcbc = ab * bc * c * b * c * c * c * c\
    \ * c;\n        long abcbcbcbcbcbcbc = ab * bc * c * b * c * c * c * c * c;\n\
    \        long abcbcbcbcbcbcbc = ab * bc * c * b * c * c * c * c * c;\n       \
    \ long abcbcbcbcbcbcbcb = ab * bc * c * b * c * c * c * c * c * b;\n        long\
    \ abcbcbcbcbcbcbcb = ab * bc * c * b * c * c * c * c * c * b;\n        long abcbcbcbcbcbcbcb\
    \ = ab * bc * c * b * c\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkcxtr7vw.cs(43,52): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long x = (long)(-b + root) / 2;\n      \
    \  long y = (long)(-b - root) / 2;\n        long z = (long)(-b + root) / 2;\n\
    \        if (Math.Abs(x - a) < Math.Abs(x - b) && Math.Abs(x - c) < Math.Abs(x\
    \ - d)\n            && Math.Abs(y - a) < Math.Abs(y - b) && Math.Abs(y - c) <\
    \ Math.Abs(y - d)\n            && Math.Abs(z - a) < Math.Abs(z - b) && Math.Abs(z\
    \ - c) < Math.Abs(z - d)) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbe6a96523e7484aa0215f996a102bdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbe6a96523e7484aa0215f996a102bdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcc = abc + acb;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcc + acbc;\n        long acbca = acbc +\
    \ abcc;\n        long abcacb = abcac + acbca;\n        long acbcab = acbca+ abcacb;\n\
    \        long acbcabc = acbcab + acbcabc;\n        long acbcabcd = acbcabc + acbcabcd;\n\
    \        long acbcabcd2 = acbcabcd + acbcabcd2;\n        long acbcabcd2e = acbcabcd2\
    \ + acbcabcd2e;\n        long acbcabcd2f = acbcabcd2e + acbcabcd2f;\n        long\
    \ acbcabcd2g = acbcabcd2f + acbcabcd2g;\n        long acbcabcd2h = acbcabcd2g\
    \ + acbcabcd2h;\n        long acbcabcd2i = acbcabcd2h + acbcabcd2i;\n        long\
    \ acbcabcd2j = acbcabcd2i + acbcabcd2j;\n        long acbcabcd2k = acbcabcd2j\
    \ + acbcabcd2k;\n        long acbcabcd2l = acbcabcd2k + acbcabcd2l;\n        long\
    \ acbcabcd2m = acbcabcd2l + acbcabcd2m;\n        long acbcabcd2n = acbcabcd2m\
    \ + acbcabcd2n;\n        long acbcabcd2o = acbcabcd2n + acbcabcd2o;\n        long\
    \ acbcabcd2p = acbcabcd2o + acbcabcd2p;\n        long acbcabcd2q = acbcabcd2p\
    \ + acbcabcd2q;\n        long acbcabcd2r = acbcabcd2q + acbcabcd2r;\n        long\
    \ acbcabcd2s = acbcabcd2r + acbcabcd2s;\n        long acbcabcd2t = acbcabcd2s\
    \ + acbcabcd2t;\n        long acbcabcd\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc0si_g5x.cs(47,22): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long root = (long) Math.Sqrt(d);\n \
    \           long x = (long) (-b + root) / a;\n            long y = (long) (-b\
    \ - root) / a;\n            return Math.Abs(x - y) <= 1;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66baf41d9856427c87f31581058b45ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66baf41d9856427c87f31581058b45ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abbc = ab - bc;\n        long acab\
    \ = ac - ab;\n        long abcab = ab - ab;\n        long acabc = ac - abc;\n\
    \        long abcabc = ab - abc;\n        long acabcb = ac - abb;\n        long\
    \ abcabcb = ab - abb;\n        long acabcbc = ac - abc;\n        long abcabcbc\
    \ = ab - abc;\n        long acabcbcb = ac - abb;\n        long abcabcbcb = ab\
    \ - abb;\n        long acabcbcbc = ac - abc;\n        long abcabcbcbc = ab - abc;\n\
    \        long acabcbcbcb = ac - abb;\n        long abcabcbcbcb = ab - abb;\n \
    \       long acabcbcbcbc = ac - abc;\n        long abcabcbcbcbc = ab - abc;\n\
    \        long acabcbcbcbcb = ac - abb;\n        long abcabcbcbcbcb = ab - abb;\n\
    \        long acabcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbc = ab - abc;\n\
    \        long acabcbcbcbcbcb = ac - abb;\n        long abcabcbcbcbcbcb = ab -\
    \ abb;\n        long acabcbcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbcbc\
    \ = ab - abc;\n        long acabcbcbcbcbcbcb = ac - abb;\n        long abcabcbcbcbcbcbcb\
    \ = ab - abb;\n        long acabcbcbcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbcbcbc\
    \ = ab - abc;\n        long acabcbcbcbcbcbcbcb = ac - abb;\n        long abcabcbcbcbcbcbcbcb\
    \ = ab - abb;\n        long acabcbcbcbcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbcbcbcbc\
    \ = ab - abc;\n        long acabcbcbcbcbcbcbcbcbc = ac - abb;\n        long abcabcbcbcbcbcbcbcbcbc\
    \ = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvjy0iyc.cs(56,38): error CS1525: Invalid expression term ''}''

    /tmp/tmphvjy0iyc.cs(56,38): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx03_x9qp.cs(42,13): error CS1001: Identifier expected

    /tmp/tmpx03_x9qp.cs(42,13): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long acbca\
    \ = acbc * ac;\n        long abca = abc * ac;\n        long abcab = abca * ab;\n\
    \        long abcabc = abcab * ab;\n        long abcabca = abcabc * ab;\n    \
    \    long abcabcab = abcabca * ab;\n        long abcabcabc = abcabcab * ab;\n\
    \        long abcabcabca = abcabcabc * ab;\n        long abcabcabcab = abcabcabca\
    \ * ab;\n        long abcabcabcabc = abcabcabcab * ab;\n        long abcabcabcabca\
    \ = abcabcabcabc * ab;\n        long abcabcabcabcab = abcabcabcabca * ab;\n  \
    \      long abcabcabcabcabc = abcabcabcabcab * ab;\n        long abcabcabcabcabca\
    \ = abcabcabcabcabc * ab;\n        long abcabcabcabcabcab = abcabcabcabcabca *\
    \ ab;\n        long abcabcabcabcabcabc = abcabcabcabcabcab * ab;\n        long\
    \ abcabcabcabcabcabca = abcabcabcabcabcabc * ab;\n        long abcabcabcabcabcabcab\
    \ = abcabcabcabcabcabca * ab;\n        long abcabcabcabcabcabcabc = abcabcabcabcabcabcab\
    \ * ab;\n        long abcabcabcabcabcabcabca = abcabcabcabcabcabcabc * ab;\n \
    \       long abcabcabcabcabcabcab = abcabcabcabcabcabcabca * ab;\n        long\
    \ abcabcabcabcabcabcabc = abcabcabcabcabcabcabc * ab;\n        long abcabcabcabcabcabcabca\
    \ = abcabcabcabcabcabcabcabc * ab;\n        long abcabcabcabcabcabcabcab = abcabcabcabcabcabcabcabca\
    \ * ab;\n        long abcabcabcabcabcabcabcabc = abcabcabcabcabcabcabcabc * ab;\n\
    \        long abcabcabcabcabcabcabcabca = abcabcabcabcabcabcabcabcabc\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0nckmacw.cs(48,69): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc + c;\n        long acbc = acb + c;\n        long abcc = abcc + c;\n  \
    \      long acbcc = acbc + c;\n        long abcbb = abcc + b;\n        long abcbc\
    \ = abcb + c;\n        long abcca = abcc + a;\n        long acbca = acbc + a;\n\
    \        long accab = accab + c;\n        long acbcab = acbcab + c;\n        long\
    \ accabc = accabc + c;\n        long acbcabc = acbcabc + c;\n        long accabbb\
    \ = accabc + b;\n        long acbcabbb = acbcabb + c;\n        long accabca =\
    \ accabc + a;\n        long acbcabca = acbcabc + a;\n        long accabcab = accabcab\
    \ + c;\n        long acbcabcab = acbcabcab + c;\n        long accabcabc = accabcabc\
    \ + c;\n        long acbcabcabc = acbcabcabc + c;\n        long accabcabbb = accabcabb\
    \ + b;\n        long acbcabcabbb = acbcabcabb + c;\n        long accabcabca =\
    \ accabcaba + c;\n        long acbcabcabca = acbcabcaba + c;\n        long accabcabcab\
    \ = accabcabcab + c;\n        long acbcabcabcab = acbcabcabcab + c;\n        long\
    \ accabcabcabc = accabcabcabc + c;\n        long acbcabcabcabc = acbcabcabcabc\
    \ + c;\n        long accabcabcabbb = accabcabcabb + b;\n        long acbcabcabcabbb\
    \ = acbcabcabcabb + c;\n        long accabcabcabca = accabcabcaba + c;\n     \
    \   long acbcabcabcabca = acbcabcabcaba + c;\n        long accabcabcabcab = accabcabcabcab\
    \ + c;\n        long acbcabcabcabcab = acbcabcabcabcab + c;\n        long accabcabcabcabc\
    \ = accabcabcabcabc + c;\n        long acbcabcabcab\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmo_4_9r_.cs(58,26): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b + e * 0.5);\n      \
    \  long g = a + e * Math.Sqrt(a + e * 0.5);\n        long h = a + e * Math.Sqrt(a\
    \ + e * 0.5);\n        if (f < 0 || g < 0 || h < 0) {\n            return false;\n\
    \        }\n        long k = Math.Sqrt(f * f + g * g + h * h);\n        long l\
    \ = Math.Sqrt(f * f + g * g + h * h);\n        long m = Math.Sqrt(f * f + g *\
    \ g + h * h);\n        long n = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ p = Math.Sqrt(f * f + g * g + h * h);\n        long q = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long r = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ s = Math.Sqrt(f * f + g * g + h * h);\n        long t = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long u = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ v = Math.Sqrt(f * f + g * g + h * h);\n        long w = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long x = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ y = Math.Sqrt(f * f + g * g + h * h);\n        long z = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long A = (f * f + g * g + h * h);\n        long B = (f\
    \ * f + g * g + h * h);\n        long C = (f * f + g * g + h * h);\n        long\
    \ D = (f * f + g * g + h * h);\n        long E = (f * f + g * g + h * h);\n  \
    \      long F = (f * f + g * g + h * h);\n        long G = (f * f + g * g + h\
    \ * h);\n        long H = (f * f + g * g + h * h);\n        long I = (f * f +\
    \ g * g + h * h);\n        long J = (f * f + g * g + h * h);\n        \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6afuiynu.cs(21,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(28,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(29,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(30,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(31,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(32,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(33,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(34,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(35,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6afuiynu.cs(36,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = b + e * (b - a);\n        long g = c - e * (a - b);\n      \
    \  long h = Math.Sqrt(f * f + g * g);\n        return h == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsb4y_4f0.cs(20,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsb4y_4f0.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcc = abc + acb;\n        long acbc\
    \ = acb + abc;\n        long abcca = abcc + acbc;\n        long acbca = acbc +\
    \ abcca;\n        long abccab = abcca + acbca;\n        long acbcab = acbca +\
    \ abccab;\n        long abccabc = abccab + acbcab;\n        long acbcabc = acbcab\
    \ + abccabc;\n        long abccabca = abccabc + acbcabc;\n        long acbcabca\
    \ = acbcabc + abccabca;\n        long abccabcab = abccabca + acbcabca;\n     \
    \   long acbcabcab = acbcabca + abccabcab;\n        long abccabcabc = abccabcab\
    \ + acbcabcab;\n        long acbcabcabc = acbcabcab + abccabcabc;\n        long\
    \ abccabcabca = abccabcabc + acbcabcabc;\n        long acbcabcabca = acbcabcabc\
    \ + abccabcabca;\n        long abccabcabcab = abccabcabca + acbcabcabca;\n   \
    \     long acbcabcabcab = acbcabcabca + abccabcabcab;\n        long abccabcabcabc\
    \ = abccabcabcab + acbcabcabcab;\n        long acbcabcabcabc = acbcabcabcab +\
    \ abccabcabcabc;\n        long abccabcabcabca = abccabcabcabc + acbcabcabcabc;\n\
    \        long acbcabcabcabca = acbcabcabcabc + abccabcabcabca;\n        long abccabcabcabcab\
    \ = abccabcabcabca + acbcabcabcabca;\n        long acbcabcabcabcab = acbcabcabcabca\
    \ + abccabcabcabcab;\n        long abccabcabcabcabc = abccabcabcabcab + acbcabcabcabcab;\n\
    \        long acbcabcabcabcabc = acbcabcabcabcab + abccabcabcabcabc;\n       \
    \ long abccabcabcabcabca = abccabcabcabcabc + acbcabcabcabcabca;\n        long\
    \ acbcabcabcabcabca\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaedl_cqu.cs(49,31): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abbc = ab - bc;\n        long acbc\
    \ = ac - bc;\n        long abcb = ab + bc;\n        long abcbc = ab - bc;\n  \
    \      long abcbab = ab - bc;\n        long abcbabc = ab - bc;\n        long abcbabcb\
    \ = ab - bc;\n        long abcbabcba = ab - bc;\n        long abcbabcbac = ab\
    \ - bc;\n        long abcbabcbaca = ab - bc;\n        long abcbabcbacab = ab -\
    \ bc;\n        long abcbabcbacabc = ab - bc;\n        long abcbabcbacabca = ab\
    \ - bc;\n        long abcbabcbacabcab = ab - bc;\n        long abcbabcbacabcabc\
    \ = ab - bc;\n        long abcbabcbacabcabca = ab - bc;\n        long abcbabcbacabcabcab\
    \ = ab - bc;\n        long abcbabcbacabcabcabc = ab - bc;\n        long abcbabcbacabcabcabca\
    \ = ab - bc;\n        long abcbabcbacabcabcabcab = ab - bc;\n        long abcbabcbacabcabcabcabc\
    \ = ab - bc;\n        long abcbabcbacabcabcabcabca = ab - bc;\n        long abcbabcbacabcabcabcabcab\
    \ = ab - bc;\n        long abcbabcbacabcabcabcabcabc = ab - bc;\n        long\
    \ abcbabcbacabcabcabcabcabca = ab - bc;\n        long abcbabcbacabcabcabcabcabcab\
    \ = ab - bc;\n        long abcbabcbacabcabcabcabcabcabc = ab - bc;\n        long\
    \ abcbabcbacabcabcabcabcabcabca = ab - bc;\n        long abcbabcbacabcabcabcabcabcabcab\
    \ = ab - bc;\n        long abcbabcbacabcabcabcabcabcabcabc = ab - bc;\n      \
    \  long abcbabcbacabcabcabcabcabcabcabcab = ab - bc;\n        long abcbabcbacabcabcabcabcabcabcabcabc\
    \ = ab - bc;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj0kr619_.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(a\
    \ * a + b * b);\n        long side2 = Math.Sqrt(c * c + a * b);\n        long\
    \ side3 = Math.Sqrt(a * a + c * c);\n        long side4 = Math.Sqrt(b * b + c\
    \ * c);\n        long side5 = Math.Sqrt(a * a + b * b);\n        long side6 =\
    \ Math.Sqrt(c * c + a * a);\n        long side7 = Math.Sqrt(a * a + c * c);\n\
    \        long side8 = Math.Sqrt(b * b + c * c);\n        long side9 = Math.Sqrt(a\
    \ * a + b * b);\n        long side10 = Math.Sqrt(c * c + a * a);\n        long\
    \ side11 = Math.Sqrt(a * a + c * c);\n        long side12 = Math.Sqrt(b * b +\
    \ c * c);\n        long side13 = Math.Sqrt(a * a + b * b);\n        long side14\
    \ = Math.Sqrt(c * c + a * a);\n        long side15 = Math.Sqrt(a * a + c * c);\n\
    \        long side16 = Math.Sqrt(b * b + c * c);\n        long side17 = Math.Sqrt(a\
    \ * a + b * b);\n        long side18 = Math.Sqrt(c * c + a * a);\n        long\
    \ side19 = Math.Sqrt(a * a + c * c);\n        long side20 = Math.Sqrt(b * b +\
    \ c * c);\n        long side21 = Math.Sqrt(a * a + b * b);\n        long side22\
    \ = Math.Sqrt(c * c + a * a);\n        long side23 = Math.Sqrt(a * a + c * c);\n\
    \        long side24 = Math.Sqrt(b * b + c * c);\n        long side25 = Math.Sqrt(a\
    \ * a + b * b);\n        long side26 = Math.Sqrt(c * c + a * a);\n        long\
    \ side27 = Math.Sqrt(a * a + c * c);\n        long side28 = Math.Sqrt(b * b +\
    \ c * c);\n        long side29 = Math.Sqrt(a * a + b * b);\n        long side30\
    \ = Math.Sqrt(c * c + a * a);\n        long side31 = Math.Sqrt(a * a + c * c);\n\
    \        long side32 = Math.Sqrt(b * b + c * c);\n        long side33 = Math.Sqrt(a\
    \ * a + b * b);\n        long side34 = Math.Sqrt(c * c + a * a);\n\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmtjz5m4j.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtjz5m4j.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / a;\n        long\
    \ t2 = (-b - root) / a;\n        if (t1 == t2) {\n            return true;\n \
    \       }\n        if (t1 < 0 || t2 < 0 || t1 > t2) {\n            return false;\n\
    \        }\n        long t3 = Math.Sqrt(t1 * t1 + t2 * t2);\n        if (t3 >\
    \ 0) {\n            return true;\n        }\n        return false;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaal8u_np.cs(30,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx03_x9qp.cs(42,13): error CS1001: Identifier expected

    /tmp/tmpx03_x9qp.cs(42,13): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abcb\
    \ = abc * bc;\n        long acbcab = acbc * abc;\n        long acbcabc = acbcab\
    \ * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc = acbcabcb\
    \ * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long acbcabcbcbc\
    \ = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n      \
    \  long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc * abc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bj_kzre.cs(44,55): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcc = abc + acb;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcc + acbc;\n        long acbca = acbc +\
    \ abcc;\n        long abcacb = abcac + acbca;\n        long acbcab = acbca+ abcacb;\n\
    \        long acbcabc = acbcab + acbcabc;\n        long acbcabcd = acbcabc + acbcabcd;\n\
    \        long acbcabcde = acbcabcd + acbcabcde;\n        long acbcabcdef = acbcabcde\
    \ + acbcabcdef;\n        long acbcabcdefg = acbcabcdef + acbcabcdefg;\n      \
    \  long acbcabcdefgh = acbcabcdefg + acbcabcdefgh;\n        long acbcabcdefghi\
    \ = acbcabcdefgh + acbcabcdefghi;\n        long acbcabcdefghij = acbcabcdefghi\
    \ + acbcabcdefghij;\n        long acbcabcdefghijk = acbcabcdefghij + acbcabcdefghijk;\n\
    \        long acbcabcdefghijkl = acbcabcdefghijk + acbcabcdefghijkl;\n       \
    \ long acbcabcdefghijklm = acbcabcdefghijkl + acbcabcdefghijklm; \n        long\
    \ acbcabcdefghijklmm = acbcabcdefghijklm + acbcabcdefghijklmm;\n        long acbcabcdefghijklmmn\
    \ = acbcabcdefghijklmm + acbcabcdefghijklmmn;\n        long acbcabcdefghijklmmnn\
    \ = acbcabcdefghijklmmn + acbcabcdefghijklmmnn;\n        long acbcabcdefghijklmmnnn\
    \ = acbcabcdefghijklmmnn + acbcabcdefghijklmmnnn;\n        long acbcabcdefghijkl\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9qp397i7.cs(43,30): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long abcc\
    \ = ab * cc;\n        long acbc = ac * bc;\n        long accc = ac * cc;\n   \
    \     long abbcc = ab * bc * cc;\n        long abccc = ab * cc * cc;\n       \
    \ long acbcc = ac * bc * cc;\n        long acccc = ac * cc * cc;\n        long\
    \ abbcc_ac = ab * b * c * cc;\n        long abccc_ac = ab * c * c * cc;\n    \
    \    long acbcc_ac = ac * b * c * cc;\n        long acccc_ac = ac * c * c * cc;\n\
    \        long abbcc_ab = ab * b * c * b;\n        long abccc_ab = ab * c * c *\
    \ b;\n        long acbcc_ab = ac * b * c * b;\n        long acccc_ab = ac * c\
    \ * c * b;\n        long abbcc_ac = ab * b * c * c;\n        long abccc_ac = ab\
    \ * c * c * c;\n        long acbcc_ac = ac * b * c * c;\n        long acccc_ac\
    \ = ac * c * c * c;\n        long abbcc_abc = ab * b * c * c * c;\n        long\
    \ abccc_abc = ab * c * c * c * c;\n        long acbcc_abc = ac * b * c * c * c;\n\
    \        long acccc_abc = ac * c * c * c * c;\n        long abbcc_acbc = ab *\
    \ b * c * c * b;\n        long abccc_acbc = ab * c * c * c * b;\n        long\
    \ acbcc_acbc = ac * b * c * c * b;\n        long acccc_acbc = ac * c * c * c *\
    \ b;\n        long abbcc_abbc = ab * b * c * c * b;\n        long abccc_abbc =\
    \ ab * c * c * c * b;\n        long acbcc_abbc = ac * b * c * c * b;\n       \
    \ long acccc_abbc = ac * c * c * c * b;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkdy58wsx.cs(23,26): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(25,26): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(26,32): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(27,27): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(27,32): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(28,32): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(29,27): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(29,32): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(30,38): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(31,38): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(32,38): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(33,38): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmpkdy58wsx.cs(38,14): error CS0128: A local variable or function named ''abbcc_ac''
    is already defined in this scope

    /tmp/tmpkdy58wsx.cs(39,14): error CS0128: A local variable or function named ''abccc_ac''
    is already defined in this scope

    /tmp/tmpkdy58wsx.cs(40,14): error CS0128: A local variable or function named ''acbcc_ac''
    is already defined in this scope

    /tmp/tmpkdy58wsx.cs(41,14): error CS0128: A local variable or function named ''acccc_ac''
    is already defined in this scope

    /tmp/tmpkdy58wsx.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b * b - 4 * a * c);\n\
    \        long g = b + e * Math.Sqrt(b * b - 4 * a * c);\n        long h = (b *\
    \ b - 4 * a * c) / 2;\n        long i = Math.Sqrt(h);\n        long j = (b * b\
    \ - 4 * a * c) / 2;\n        long k = Math.Sqrt(j);\n        long l = Math.Sqrt(k);\n\
    \        long m = Math.Sqrt(l);\n        long n = Math.Sqrt(m);\n        long\
    \ o = Math.Sqrt(n);\n        long p = Math.Sqrt(o);\n        long q = Math.Sqrt(p);\n\
    \        long r = Math.Sqrt(q);\n        long s = Math.Sqrt(r);\n        long\
    \ t = Math.Sqrt(s);\n        long u = Math.Sqrt(t);\n        long v = Math.Sqrt(u);\n\
    \        long w = Math.Sqrt(v);\n        long x = Math.Sqrt(w);\n        long\
    \ y = Math.Sqrt(x);\n        long z = Math.Sqrt(y);\n        long a = Math.Sqrt(z);\n\
    \        long b = Math.Sqrt(a);\n        long c = Math.Sqrt(b);\n        long\
    \ d = Math.Sqrt(c);\n        long e = Math.Sqrt(d);\n        long f = Math.Sqrt(e);\n\
    \        long g = Math.Sqrt(f);\n        long h = Math.Sqrt(g);\n        long\
    \ i = Math.Sqrt(h);\n        long j = Math.Sqrt(i);\n        long k = Math.Sqrt(j);\n\
    \        long l = Math.Sqrt(k);\n        long m = Math.Sqrt(l);\n        long\
    \ n = Math.Sqrt(m);\n        long o = Math.Sqrt(n);\n        long p = Math.Sqrt(o);\n\
    \        long q = Math.Sqrt(p);\n        long r = Math.Sqrt(q);\n        long\
    \ s = Math.Sqrt(r);\n        long t = Math.Sqrt(s);\n        long u = Math.Sqrt(t);\n\
    \        long v = Math.Sqrt(u);\n        long w = Math.Sqrt(v);\n        long\
    \ x = Math.Sqrt(w);\n        long y = Math.Sqrt(x);\n        long z = Math.Sqrt(y);\n\
    \        long a = Math.Sqrt(z);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3shqudzs.cs(17,18): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(17,22): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(17,30): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp3shqudzs.cs(17,34): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmp3shqudzs.cs(21,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp3shqudzs.cs(22,18): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(22,36): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(22,40): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(22,48): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp3shqudzs.cs(22,52): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmp3shqudzs.cs(23,18): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(23,36): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(23,40): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(23,48): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp3shqudzs.cs(23,52): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmp3shqudzs.cs(24,19): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(24,23): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmp3shqudzs.cs(24,31): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmp3shqudzs.cs(24,35): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmp3shqudzs.cs(25,18): error CS0266: Cannot implicitly convert type ''double'
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbccc;\n        long acbcccbc = acbcccb\
    \ * acbcccb;\n        long acbcccbcb = acbcccbc * acbcccbc;\n        long acbcccbcc\
    \ = acbcccbc * acbcccbcc;\n        long acbcccbccb = acbcccbcc * acbcccbcc;\n\
    \        long acbcccbccbc = acbcccbccb * acbcccbccb;\n        long acbcccbccbcc\
    \ = acbcccbccb * acbcccbccb;\n        long acbcccbccbccc = acbcccbccb * acbcccbccbc;\n\
    \        long acbcccbccbcccb = acbcccbccbcc * acbcccbccbc;\n        long acbcccbccbccbc\
    \ = acbcccbccbcc * acbcccbccbc;\n        long acbcccbccbccbcc = acbcccbccbccb\
    \ * acbcccbccbcc;\n        long acbcccbccbccbccb = acbcccbccbccbcc * acbcccbccbccb;\n\
    \        long acbcccbccbccbccbc = acbcccbccbccbcc * acbcccbccbccbc;\n        long\
    \ acbcccbccbccbccbcc = acbcccbccbccbccbcc * acbcccbccbccbcc;\n        long acbcccbccbccbccbccb\
    \ = acbcccbccbccbccbcc * acbcccbccbccbccb;\n        long acbcccbccbccbccbccbc\
    \ = acbcccbccbccbccbccb * acbcccbcc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpswsvz9w9.cs(41,68): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab * bc;\n\
    \        long acb = ac * bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * bc;\n        long acbca = acbc * abc;\n        long acbcab = acbca *\
    \ abc;\n        long acbcabc = acbcab * abc;\n        long acbcabcb = acbcabc\
    \ * abc;\n        long acbcabcbc = acbcabcb * abc;\n        long acbcabcbcb =\
    \ acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb * abc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * abc;\n       \
    \ long acbcabcbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwjfa871j.cs(45,30): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcb + ac;\n        long abcacb = abcac +\
    \ ab;\n        long abcacbc = abcacb + acb;\n        long abcacbcc = abcacbc +\
    \ acbc;\n        long abcacbccc = abcacbcc+ acbcc;\n        long abcacbcccd =\
    \ abcacbccc + acbccc;\n        long abcacbcccde = abcacbcccd + acbccce;\n    \
    \    long abcacbcccdef = abcacbcccde + acbcccdef;\n        long abcacbcccdefg\
    \ = abcacbcccdef + acbcccdefg;\n        long abcacbcccdefgh = abcacbcccdefg +\
    \ acbcccdefgh;\n        long abcacbcccdefghi = abcacbcccdefgh + acbcccdefghi;\n\
    \        long abcacbcccdefghij = abcacbcccdefghi + acbcccdefghij;\n        long\
    \ abcacbcccdefghijk = abcacbcccdefghij + acbcccdefghijk;\n        long abcacbcccdefghijkl\
    \ = abcacbcccdefghijk + acbcccdefghijkl;\n        long abcacbcccdefghijklm = abcacbcccdefghijkl\
    \ + acbcccdefghijklm; \n        long abcacbcccdefghijklmm = abcacbcccdefghijklm\
    \ + acbcccdefghijklmm;\n        long abcacbcccdefghijklmmn = abcacbcccdefghijklmm\
    \ + acbcccdefghijklmn;\n        long abcacbcccdefghijklmnn = abcacbcccdefghijklmn\
    \ + acbcccdefghijklnn;\n        long abcacbcccdefghijklnnn = abcacbcccdefghijkl\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp63w0cx9t.cs(42,56): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long abcab\
    \ = ab * abc;\n        long abcabc = ab * abc * abc;\n        long abcabbc = ab\
    \ * abc * abc * abc;\n        long abcabbcbc = ab * abc * abc * abc * abc;\n \
    \       long abcabbcbcbc = ab * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbc\
    \ = ab * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbc = ab\
    \ * abc * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbc =\
    \ ab * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbc\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long\
    \ abcabbcbcbcbcbcbcbcbc = ab * abc * abc * abc * abc * abc * abc * abc * abc *\
    \ abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbc = ab * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbcbc\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc;\n        long abcabbcbcbcbcbcbcbcbcbcbc = ab * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbcbcbc\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbcbcbc = ab * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n\
    \        long abcabb\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbbehrcl6.cs(38,20): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbccc;\n        long acbcccbc = acbcccb\
    \ * acbcccb;\n        long acbcccbcb = acbcccbc * acbcccbc;\n        long acbcccbcc\
    \ = acbcccbc * acbcccbcc;\n        long acbcccbccb = acbcccbcc * acbcccbccb;\n\
    \        long acbcccbccbc = acbcccbccb * acbcccbccbc;\n        long acbcccbccbcc\
    \ = acbcccbccb * acbcccbccbcc;\n        long acbcccbccbccb = acbcccbccbcc * acbcccbccbccb;\n\
    \        long acbcccbccbccbc = acbcccbccbccb * acbcccbccbccbc;\n        long acbcccbccbccbcc\
    \ = acbcccbccbccb * acbcccbccbccbcc;\n        long acbcccbccbccbccb = acbcccbccbccbcc\
    \ * acbcccbccbccbccb;\n        long acbcccbccbccbccbc = acbcccbccbccbccb * acbcccbccbccbccbc;\n\
    \        long acbcccbccbccbccbcc = acbcccbccbccbccb * acbcccbccbccbccbcc;\n  \
    \      long acbcccbccbccbccbccb = acbcccbccbccbccbcc * acbcccbccbccbccbccb;\n\
    \        long acbcccbccbccbccbccbc = acbcccbccbccbccbccb * acbcccbccbccbccbccbc;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo906r05.cs(29,37): error CS0165: Use of unassigned local variable ''acbcccbcc''

    /tmp/tmpdo906r05.cs(30,39): error CS0165: Use of unassigned local variable ''acbcccbccb''

    /tmp/tmpdo906r05.cs(31,41): error CS0165: Use of unassigned local variable ''acbcccbccbc''

    /tmp/tmpdo906r05.cs(32,42): error CS0165: Use of unassigned local variable ''acbcccbccbcc''

    /tmp/tmpdo906r05.cs(33,45): error CS0165: Use of unassigned local variable ''acbcccbccbccb''

    /tmp/tmpdo906r05.cs(34,47): error CS0165: Use of unassigned local variable ''acbcccbccbccbc''

    /tmp/tmpdo906r05.cs(35,48): error CS0165: Use of unassigned local variable ''acbcccbccbccbcc''

    /tmp/tmpdo906r05.cs(36,51): error CS0165: Use of unassigned local variable ''acbcccbccbccbccb''

    /tmp/tmpdo906r05.cs(37,53): error CS0165: Use of unassigned local variable ''acbcccbccbccbccbc''

    /tmp/tmpdo906r05.cs(38,54): error CS0165: Use of unassigned local variable ''acbcccbccbccbccbcc''

    /tmp/tmpdo906r05.cs(39,57): error CS0165: Use of unassigned local variable ''acbcccbccbccbccbccb''

    /tmp/tmpdo906r05.cs(40,59): error CS0165: Use of unassigned local variable ''acbcccbccbccbccbccbc''

    /tmp/tmpdo906r05.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcc\
    \ = acbcccbc * acbcc;\n        long acbcccbccb = acbcccbcc * acbcc;\n        long\
    \ acbcccbccbc = acbcccbccb * acbcc;\n        long acbcccbccbcc = acbcccbccb *\
    \ acbcc;\n        long acbcccbccbccb = acbcccbccbcc * acbcc;\n        long acbcccbccbccbc\
    \ = acbcccbccbccb * acbcc;\n        long acbcccbccbccbcc = acbcccbccbccb * acbcc;\n\
    \        long acbcccbccbccbccb = acbcccbccbccbcc * acbcc;\n        long acbcccbccbccbccbc\
    \ = acbcccbccbccbccb * acbcc;\n        long acbcccbccbccbccbcc = acbcccbccbccbccbcc\
    \ * acbcc;\n        long acbcccbccbccbccbccb = acbcccbccbccbccbcc * acbcc;\n \
    \       long acbcccbccbccbccbccbc = acbcccbccbccbccbccb * acbcc;\n        long\
    \ acbcccbccbccbccbccbcc = acbcccbccbccbccbccbcc * acbcc;\n        long acbcccbccbccbccbccbccb\
    \ = acbcccbccbccbccbccbcc * \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3b6pod0q.cs(42,62): error CS1525: Invalid expression term ''}''

    /tmp/tmp3b6pod0q.cs(42,62): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side11 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side23 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxz_bym4f.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxz_bym4f.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        if (t1 < 0 && t2 < 0) {\n            return false;\n\
    \        }\n        if (t1 > 0 && t2 > 0) {\n            return false;\n     \
    \   }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0bdcb5fd774e445fb9d58ca48f5ce5e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0bdcb5fd774e445fb9d58ca48f5ce5e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long acbcabc\
    \ = acbc * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc\
    \ = acbcabcb * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc\
    \ = acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbc = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcbc * bc;\n        \n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvv5kg6fe.cs(30,14): error CS0128: A local variable or function named ''acbcabcbcbcbc''
    is already defined in this scope

    /tmp/tmpvv5kg6fe.cs(36,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpvv5kg6fe.cs(37,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpvv5kg6fe.cs(40,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpvv5kg6fe.cs(41,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpvv5kg6fe.cs(41,37): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcb''
    does not exist in the current context

    /tmp/tmpvv5kg6fe.cs(42,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpvv5kg6fe.cs(42,37): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcb''
    does not exist in the current context

    /tmp/tmpvv5kg6fe.cs(43,38): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcbc''
    does not exist in the current context

    /tmp/tmpvv5kg6fe.cs(38,36): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbc''

    /tmp/tmpvv5kg6fe.cs(39,37): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbcb''

    /tmp/tmpvv5kg6fe.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbc = acbcccbcb * acbcc;\n       \
    \ long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbc = acbcccbcbc * acbcc;\n        long acbcccbcbcbc\
    \ = acbcccbcbc * acbcc;\n        long acbcccbcbcbc = acbcccbcbc * acbcc;\n   \
    \     long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc\
    \ * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb\
    \ = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc * acbcc;\n  \
    \      long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb =\
    \ acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc * acbcc;\n    \
    \    long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc\
    \ * acbcc;\n        long acbcccbcbcbc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi222y04e.cs(46,26): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx03_x9qp.cs(42,13): error CS1001: Identifier expected

    /tmp/tmpx03_x9qp.cs(42,13): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a * a + b * b);\n     \
    \   long g = Math.Sqrt(a * a + b * b + c * c);\n        long h = (long) Math.Sqrt(a\
    \ * a + b * b + c * c + d * d);\n        long i = (long) Math.Sqrt(a * a + b *\
    \ b + c * c + d * d + e * e);\n        long j = (long) Math.Sqrt(a * a + b * b\
    \ + c * c + d * d + e * e + f * f);\n        long k = (long) Math.Sqrt(a * a +\
    \ b * b + c * c + d * d + e * e + f * f + g * g);\n        long l = (long) Math.Sqrt(a\
    \ * a + b * b + c * c + d * d + e * e + f * f + g * g + h * h);\n        long\
    \ m = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f + g * g +\
    \ h * h + i * i);\n        long n = (long) Math.Sqrt(a * a + b * b + c * c + d\
    \ * d + e * e + f * f + g * g + h * h + i * i + j * j);\n        long o = (long)\
    \ Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f + g * g + h * h + i\
    \ * i + j * j + k * k);\n        long p = (long) Math.Sqrt(a * a + b * b + c *\
    \ c + d * d + e * e + f * f + g * g + h * h + i * i + j * j + k * k + l * l);\n\
    \        long q = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f *\
    \ f + g * g + h * h + i * i + j * j + k * k + l * l + m * m);\n        long r\
    \ = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f + g * g + h\
    \ * h + i * i + j * j + k * k + l * l + m * m + n * n);\n        long s = (long)\
    \ Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f + g * g + h * \n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7_09mkrr.cs(35,94): error CS1525: Invalid expression term ''}''

    /tmp/tmp7_09mkrr.cs(35,94): error CS1026: ) expected

    /tmp/tmp7_09mkrr.cs(35,94): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            double root = Math.Sqrt(d);\n      \
    \      double angle = Math.Atan2(-b, root);\n            if (angle < 0)\n    \
    \            angle += 2 * Math.PI;\n            if (angle > Math.PI)\n       \
    \         angle -= 2 * Math.PI;\n            if (Math.Abs(angle) < Math.PI / 2)\n\
    \                return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffb3d48b31d641d685bcc5de2dd5f4dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffb3d48b31d641d685bcc5de2dd5f4dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbc = acbcccbcb * acbcc;\n       \
    \ long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcb = acbcccbcb * acbcc;\n    \
    \    long acbcccbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbc = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n  \
    \      long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n  \
    \      long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb = \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvk9jkeby.cs(46,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpvk9jkeby.cs(46,31): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcb + acb;\n        long acbca = acbc +\
    \ abc;\n        long abcacb = abcac + acb;\n        long acbcab = acbca  + abc;\n\
    \        long acbcabc = acbcab + acb;\n        long acbcabcd = acbcabc + acb;\n\
    \        long acbcabcde = acbcabcd + acb;\n        long acbcabcdef = acbcabcde\
    \ + acb;\n        long acbcabcdefg = acbcabcdef + acb;\n        long acbcabcdefgh\
    \ = acbcabcdefg + acb;\n        long acbcabcdefghi = acbcabcdefgh + acb;\n   \
    \     long acbcabcdefghij = acbcabcdefghi + acb;\n        long acbcabcdefghijk\
    \ = acbcabcdefghij + acb;\n        long acbcabcdefghijkl = acbcabcdefghijk + acb;\n\
    \        long acbcabcdefghijkll = acbcabcdefghijkll + acb;\n        long acbcabcdefghijkllm\
    \ = acbcabcdefghijkllm + acb;\n        long acbcabcdefghijkllmm = acbcabcdefghijkllmm\
    \ + acb;\n        long acbcabcdefghijkllmmn = acbcabcdefghijkllmmn + acb;\n  \
    \      long acbcabcdefghijkllmmnn = acbcabcdefghijkllmmnn + acb;\n        long\
    \ acbcabcdefghijkllmmnnn = acbcabcdefghijkllmmnnn + acb;\n        long acbcabcdefghijkllmmnnnn\
    \ = acbcabcdefghijkllmmnnnn + acb;\n        long acbcabcdefghijkllmmnnnnn = acbcabcdefghijkllmmnnnnn\
    \ + acb;\n        long \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfjt0vxn7.cs(46,13): error CS1001: Identifier expected

    /tmp/tmpfjt0vxn7.cs(46,13): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2)\n            return true;\n        if (t1 > t2)\n\
    \            return false;\n        long t3 = t1 - t2;\n        long t4 = t1 +\
    \ t2;\n        if (t3 > 0 && t4 > 0)\n            return true;\n        if (t3\
    \ < 0 && t4 < 0)\n            return false;\n        long t5 = t3 - t4;\n    \
    \    long t6 = t3 + t4;\n        if (t5 > 0 && t6 > 0)\n            return true;\n\
    \        if (t5 < 0 && t6 < 0)\n            return false;\n        long t7 = t5\
    \ - t6;\n        long t8 = t5 + t6;\n        if (t7 > 0 && t8 > 0)\n         \
    \   return true;\n        if (t7 < 0 && t8 < 0)\n            return false;\n \
    \       long t9 = t7 - t8;\n        long t10 = t7 + t8;\n        if (t9 > 0 &&\
    \ t10 > 0)\n            return true;\n        if (t9 < 0 && t10 < 0)\n       \
    \     return false;\n        long t11 = t9 - t10;\n        long t12 = t9 + t10;\n\
    \        if (t11 > 0 && t12 > 0)\n            return true;\n        if (t11 <\
    \ 0 && t12 < 0)\n            return false;\n        long t13 = t11 - t12;\n  \
    \      long t14 = t11 + t12;\n        if (t13 > 0 && t14 > 0)\n            return\
    \ true;\n        if (t13 < 0 && t14 < 0)\n            return false;\n        long\
    \ t15 = t13 - t14;\n        long t16 = t13 + t14;\n        if (t15 > 0 && t16\
    \ > 0)\n            return true;\n        if (t15 < 0 && t16 < 0)\n          \
    \  return false;\n        long t17 = t15 - t16;\n        long t18 = t15 + t16;\n\
    \        if (t17 > 0 && t18 > 0)\n            return true;\n        if (t17 <\
    \ 0 && t18 < 0)\n            return false;\n        long t19 = t17 - t18;\n  \
    \      long t20 = t17 + t18;\n        if (t19 > 0 && t20 > 0)\n            return\
    \ true;\n        if (t19 < 0 && t20 < 0)\n            return false;\n        long\
    \ t21 = t19 - t20;\n        long t22 = t19 + t20;\n        if (t21 > 0 && t22\
    \ > \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpakaunisp.cs(83,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpakaunisp.cs(83,29): error CS1026: ) expected

    /tmp/tmpakaunisp.cs(83,29): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + acb;\n        long abcc\
    \ = abc - acb;\n        long abcca = abcc + abcc;\n        long abccaa = abcca\
    \ + abcca;\n        long abccaab = abccaa + abccaab;\n        long abccaabc =\
    \ abccaab + abccaabc;\n        long abccaabcd = abccaabc + abccaabcd;\n      \
    \  long abccaabcde = abccaabcd + abccaabcde;\n        long abccaabcdef = abccaabcde\
    \ + abccaabcdef;\n        long abccaabcdefg = abccaabcdef + abccaabcdefg;\n  \
    \      long abccaabcdefgh = abccaabcdefg + abccaabcdefgh;\n        long abccaabcdefghi\
    \ = abccaabcdefgh + abccaabcdefghi;\n        long abccaabcdefghij = abccaabcdefghi\
    \ + abccaabcdefghij;\n        long abccaabcdefghijk = abccaabcdefghij + abccaabcdefghijk;\n\
    \        long abccaabcdefghijkl = abccaabcdefghijk + abccaabcdefghijkl;\n    \
    \    long abccaabcdefghijkll = abccaabcdefghijkl + abccaabcdefghijkll;\n     \
    \   long abccaabcdefghijklm = abccaabcdefghijkll + abccaabcdefghijklm; \n    \
    \    long abccaabcdefghijklmn = abccaabcdefghijklm + abccaabcdefghijkln;\n   \
    \     long abccaabcdefghijklmn1 = abccaabcdefghijklmn + abccaabcdefghijklmn;\n\
    \        long abccaabcdefghijklmn2 = abccaabcdefghijklmn - abccaabcdefghijklmn;\n\
    \        long abccaabcdefghijklmn3 = abccaabcdefghijklmn - abccaabcdefghijklmn1;\n\
    \        long abccaabcdefghijklmn4 = abccaabcdefghijklmn - abccaabcdefghijklmn2;\n\
    \        long abccaabcdefghijkl\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51_p5xbc.cs(44,31): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx03_x9qp.cs(42,13): error CS1001: Identifier expected

    /tmp/tmpx03_x9qp.cs(42,13): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbbc = acbcccbcbb * acbcc;\n     \
    \   long acbcccbcbbcd = acbcccbcbbc * acbcc;\n        long acbcccbcbbcde = acbcccbcbbcde\
    \ * acbcc;\n        long acbcccbcbbcdef = acbcccbcbbcdef * acbcc;\n        long\
    \ acbcccbcbbcdefg = acbcccbcbbcdefg * acbcc;\n        long acbcccbcbbcdefgh =\
    \ acbcccbcbbcdefgh * acbcc;\n        long acbcccbcbbcdefghi = acbcccbcbbcdefghi\
    \ * acbcc;\n        long acbcccbcbbcdefghij = acbcccbcbbcdefghij * acbcc;\n  \
    \      long acbcccbcbbcdefghijk = acbcccbcbbcdefghijk * acbcc;\n        long acbcccbcbbcdefghijkl\
    \ = acbcccbcbbcdefghijkl * acbcc;\n        long acbcccbcbbcdefghijkll = acbcccbcbbcdefghijkll\
    \ * acbcc;\n        long acbcccbcbbcdefghijklm = acbcccbcbbcdefghijklm * acbcc;\n\
    \        long acbcccbcbbcdefghijklmn = acbcccbcbbcdef\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0b_1xr9g.cs(42,53): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long acbcab\
    \ = acbc * abc;\n        long acbcabc = acbcab * abc;\n        long acbcabcb =\
    \ acbcabcb * abc;\n        long acbcabcbc = acbcabcbc * abc;\n        long acbcabcbcb\
    \ = acbcabcbcb * abc;\n        long acbcabcbcbc = acbcabcbcbc * abc;\n       \
    \ long acbcabcbcbcb = acbcabcbcbcb * abc;\n        long acbcabcbcbcbc = acbcabcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * abc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcb\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rmjrdhe.cs(43,55): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long acbc = acb + bc;\n        long abcca = abcc + acb;\n\
    \        long abccb = abcc * 2;\n        long acbca = acbc + abc;\n        long\
    \ abccaa = abcca * 2;\n        long abccba = abccb * 2;\n        long acbcab =\
    \ acbca * 2;\n        long abccaab = abccaa * 2;\n        long abccabc = abccba\
    \ * 2;\n        long acbcabc = acbcab * 2;\n        long abccaabc = abccaab *\
    \ 2;\n        long abccabca = abccabc * 2;\n        long acbcabca = acbcabc *\
    \ 2;\n        long abccaabca = abccaabc * 2;\n        long abccabcab = abccabca\
    \ * 2;\n        long acbcabcab = acbcabca * 2;\n        long abccaabcab = abccaabca\
    \ * 2;\n        long abccabcabc = abccabcab * 2;\n        long acbcabcabc = acbcabcab\
    \ * 2;\n        long abccaabcabc = abccaabcab * 2;\n        long abccabcabca =\
    \ abccabcabc * 2;\n        long acbcabcabca = acbcabcabc * 2;\n        long abccaabcabca\
    \ = abccaabcabc * 2;\n        long abccabcabcab = abccabcabca * 2;\n        long\
    \ acbcabcabcab = acbcabcabca * 2;\n        long abccaabcabcab = abccaabcabca *\
    \ 2;\n        long abccabcabcabc = abccabcabcab * 2;\n        long acbcabcabcabc\
    \ = acbcabcabcab * 2;\n        long abccaabcabcabc = abccaabcabcab * 2;\n    \
    \    long abccabcabcabca = abccabcabcabc * 2;\n        long acbcabcabcabca = acbcabcabcabc\
    \ * 2;\n        long abccaabcabcabca = abccaabcabcabc * 2;\n        long abccab\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4ed3sh2.cs(56,20): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbbc = acbcccbcbb * acbcc;\n     \
    \   long acbcccbcbbcd = acbcccbcbbc * acbcc;\n        long acbcccbcbbcde = acbcccbcbbcde\
    \ * acbcc;\n        long acbcccbcbbcdef = acbcccbcbbcdef * acbcc;\n        long\
    \ acbcccbcbbcdefg = acbcccbcbbcdefg * acbcc;\n        long acbcccbcbbcdefgh =\
    \ acbcccbcbbcdefgh * acbcc;\n        long acbcccbcbbcdefghi = acbcccbcbbcdefghi\
    \ * acbcc;\n        long acbcccbcbbcdefghij = acbcccbcbbcdefghij * acbcc;\n  \
    \      long acbcccbcbbcdefghijk = acbcccbcbbcdefghijk * acbcc;\n        long acbcccbcbbcdefghijkl\
    \ = acbcccbcbbcdefghijkl * acbcc;\n        long acbcccbcbbcdefghijklm = acbcccbcbbcdefghijklm\
    \ * acbcc;\n        long acbcccbcbbcdefghijklmm = acbcccbcbbcdefghijklmm * acbcc;\n\
    \        long acbcccbcbbcdefghijklmmm = acbcccbcbbcdef\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeebnwu_q.cs(42,54): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a * a * a + b * b - 4 * a * c);\n        long\
    \ g = Math.Sqrt(a * a * a + b * b + 4 * a * c);\n        long h = (long) Math.Sqrt(a\
    \ * a * b + b * b + 4 * a * c);\n        long i = Math.Sqrt(a * a * b + b * b\
    \ - 4 * a * c);\n        long j = (long) Math.Sqrt(a * a * b + b * b + 4 * a *\
    \ c);\n        long k = (long) Math.Sqrt(a * a * b + b * b - 4 * a * c);\n   \
    \     long l = Math.Sqrt(a * a * b + b * b + 4 * a * c);\n        long m = (long)\
    \ Math.Sqrt(a * a * b + b * b - 4 * a * c);\n        long n = (long) Math.Sqrt(a\
    \ * a * b + b * b + 4 * a * c);\n        long o = (long) Math.Sqrt(a * a * b +\
    \ b * b - 4 * a * c);\n        long p = (long) Math.Sqrt(a * a * b + b * b + 4\
    \ * a * c);\n        long q = (long) Math.Sqrt(a * a * b + b * b - 4 * a * c);\n\
    \        long r = (long) Math.Sqrt(a * a * b + b * b + 4 * a * c);\n        long\
    \ s = (long) Math.Sqrt(a * a * b + b * b - 4 * a * c);\n        long t = (long)\
    \ Math.Sqrt(a * a * b + b * b + 4 * a * c);\n        long u = (long) Math.Sqrt(a\
    \ * a * b + b * b - 4 * a * c);\n        long v = (long) Math.Sqrt(a * a * b +\
    \ b * b + 4 * a * c);\n        long w = (long) Math.Sqrt(a * a * b + b * b - 4\
    \ * a * c);\n        long x = (long) Math.Sqrt(a * a * b + b * b + 4 * a * c);\n\
    \        long y = (long) Math.Sqrt(a * a * b + b * b - 4 * a * c);\n        long\
    \ z = (long) Math.Sqrt(a * a * b + b * b + 4 * a * c);\n        long aa = a *\
    \ a * a;\n        long bb = b * b * b;\n        long cc = c * c * c;\n       \
    \ long dd = d * d;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwk0d4qbz.cs(46,13): error CS1001: Identifier expected

    /tmp/tmpwk0d4qbz.cs(46,13): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long acbcab\
    \ = acbc * ab;\n        long acbcabc = acbcab * bc;\n        long acbcabcb = acbcabcb\
    \ * bc;\n        long acbcabcbc = acbcabcbc * bc;\n        long acbcabcbcb = acbcabcbcb\
    \ * bc;\n        long acbcabcbcbc = acbcabcbcbc * bc;\n        long acbcabcbcbcb\
    \ = acbcabcbcbcb * bc;\n        long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n   \
    \     long acbcabcbcbcbcb = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcbc * bc;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb361jyi5.cs(36,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpb361jyi5.cs(36,34): error CS0841: Cannot use local variable ''acbcabcbcbcbcbcbcbc''
    before it is declared

    /tmp/tmpb361jyi5.cs(37,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpb361jyi5.cs(37,35): error CS0841: Cannot use local variable ''acbcabcbcbcbcbcbcbcb''
    before it is declared

    /tmp/tmpb361jyi5.cs(38,36): error CS0841: Cannot use local variable ''acbcabcbcbcbcbcbcbcbc''
    before it is declared

    /tmp/tmpb361jyi5.cs(39,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpb361jyi5.cs(39,36): error CS0841: Cannot use local variable ''acbcabcbcbcbcbcbcbcbc''
    before it is declared

    /tmp/tmpb361jyi5.cs(40,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpb361jyi5.cs(40,36): error CS0841: Cannot use local variable ''acbcabcbcbcbcbcbcbcbc''
    before it is declared

    /tmp/tmpb361jyi5.cs(41,37): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcb''
    does not exist in the current context

    /tmp/tmpb361jyi5.cs(42,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpb361jyi5.cs(42,37): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcb''
    does not exist in the current context

    /tmp/tmpb361jyi5.cs(43,38): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcbc''
    does not exist in the current context

    /tmp/tmpb361jyi5.cs(25,25): error CS0165: Use of unassigned local variable ''acbcabcb''

    /tmp/tmpb361jyi5.cs(26,26): error CS0165: Use of unassigned local variable ''acbcabcbc''

    /tmp/tmpb361jyi5.cs(27,27): error CS0165: Use of unassigned local variable ''acbcabcbcb''

    /tmp/tmpb361jyi5.cs(28,28): error CS0165: Use of unassigned local variable ''acbcabcbcbc''

    /tm'
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a + b + c);\n        long g = (long) Math.Sqrt(a\
    \ + b - c);\n        long h = (long) Math.Sqrt(a + b + c - e);\n        long i\
    \ = (long) Math.Sqrt(a + b - e + f);\n        long j = (long) Math.Sqrt(a + b\
    \ + e - f);\n        long k = (long) Math.Sqrt(a + b - e + g);\n        long l\
    \ = (long) Math.Sqrt(a + b + e - g);\n        long m = (long) Math.Sqrt(a + b\
    \ - e + h);\n        long n = (long) Math.Sqrt(a + b + e - h);\n        long o\
    \ = (long) Math.Sqrt(a + b - e + i);\n        long p = (long) Math.Sqrt(a + b\
    \ + e - i);\n        long q = (long) Math.Sqrt(a + b - e + j);\n        long r\
    \ = (long) Math.Sqrt(a + b + e - j);\n        long s = (long) Math.Sqrt(a + b\
    \ - e + k);\n        long t = (long) Math.Sqrt(a + b + e - k);\n        long u\
    \ = (long) Math.Sqrt(a + b - e + l);\n        long v = (long) Math.Sqrt(a + b\
    \ + e - l);\n        long w = (long) Math.Sqrt(a + b - e + m);\n        long x\
    \ = (long) Math.Sqrt(a + b + e - m);\n        long y = (long) Math.Sqrt(a + b\
    \ - e + n);\n        long z = (long) Math.Sqrt(a + b + e - n);\n        long A\
    \ = (long) Math.Sqrt(a + b - e + o);\n        long B = (long) Math.Sqrt(a + b\
    \ + e - o);\n        long C = (long) Math.Sqrt(a + b - e + p);\n        long D\
    \ = (long) Math.Sqrt(a + b + e - p);\n        long E = (long) Math.Sqrt(a + b\
    \ - e + q);\n        long F = (long) Math.Sqrt(a + b + e - q);\n        long G\
    \ = (long) Math.Sqrt(a + b - e + r);\n        long \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppwpyohj0.cs(49,13): error CS1001: Identifier expected

    /tmp/tmppwpyohj0.cs(49,13): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abbc = ab + bc;\n        long acab\
    \ = ac - ab;\n        long abcab = ab + ab;\n        long acbcab = ac - bc;\n\
    \        long abcabc = ab + ab;\n        long acbcabc = ac - bc;\n        long\
    \ abcabcb = ab + ab;\n        long acbcabcb = ac - bc;\n        long abcabcbc\
    \ = ab + ab;\n        long acbcabcbc = ac - bc;\n        long abcabcbcd = ab +\
    \ ab;\n        long acbcabcbcd = ac - bc;\n        long abcabcbcde = ab + ab;\n\
    \        long acbcabcbcde = ac - bc;\n        long abcabcbcdef = ab + ab;\n  \
    \      long acbcabcbcdef = ac - bc;\n        long abcabcbcdefg = ab + ab;\n  \
    \      long acbcabcbcdefg = ac - bc;\n        long abcabcbcdefgh = ab + ab;\n\
    \        long acbcabcbcdefgh = ac - bc;\n        long abcabcbcdefghi = ab + ab;\n\
    \        long acbcabcbcdefghi = ac - bc;\n        long abcabcbcdefghij = ab +\
    \ ab;\n        long acbcabcbcdefghij = ac - bc;\n        long abcabcbcdefghijk\
    \ = ab + ab;\n        long acbcabcbcdefghijk = ac - bc;\n        long abcabcbcdefghijkl\
    \ = ab + ab;\n        long acbcabcbcdefghijkl = ac - bc;\n        long abcabcbcdefghijkm\
    \ = ab + ab;\n        long acbcabcbcdefghijkm = ac - bc;\n        long abcabcbcdefghijkn\
    \ = ab + ab;\n        long acbcabcbcdefghijkn = ac - bc;\n        long abcabcbcdefghijkno\
    \ = ab + ab;\n        long acbcabcbcdefghijkno = ac - bc;\n        long abcab\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyfiw14el.cs(56,19): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbbc = acbb * bc;\n        long abbbc = abbb * bc;\n\
    \        long acbbbc = acbbbc * bc;\n        long abbbbc = abbbbc * bc;\n    \
    \    long acbbbbc = acbbbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n    \
    \    long acbbbcc = acbbbcc * bc;\n        long abbbbcc = abbbbcc * bc;\n    \
    \    long acbbbcbc = acbbbcbc * bc;\n        long abbbbcbc = abbbbcbc * bc;\n\
    \        long acbbbcbcd = acbbbcbcd * bc;\n        long abbbbcbcd = abbbbcbcd\
    \ * bc;\n        long acbbbcbcde = acbbbcbcde * bc;\n        long abbbbcbcde =\
    \ abbbbcbcde * bc;\n        long acbbbcbcdef = acbbbcbcdef * bc;\n        long\
    \ abbbbcbcdef = abbbbcbcdef * bc;\n        long acbbbcbcdefg = acbbbcbcdefg *\
    \ bc;\n        long abbbbcbcdefg = abbbbcbcdefg * bc;\n        long acbbbcbcdefgh\
    \ = acbbbcbcdefgh * bc;\n        long abbbbcbcdefgh = abbbbcbcdefgh * bc;\n  \
    \      long acbbbcbcdefghi = acbbbcbcdefghi * bc;\n        long abbbbcbcdefghi\
    \ = abbbbcbcdefghi * bc;\n        long acbbbcbcdefghij = acbbbcbcdefghij * bc;\n\
    \        long abbbbcbcdefghij = abbbbcbcdefghij * bc;\n        long acbbbcbcdefghijk\
    \ = acbbbcbcdefghijk * bc;\n        long abbbbcbcdef\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpddg1u025.cs(49,25): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        return t1 >= 0 && t1 <= 1 && t2\
    \ >= 0 && t2 <= 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <361321ef75de46f8a4ee08a0dc53a28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <361321ef75de46f8a4ee08a0dc53a28a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * b; //\
    \ acb is ac times b\n        long abc = ab * c; // abc is ab times c\n       \
    \ long acbc = acb * c; // acbc is ac times bc times c\n        long acbcab = acbc\
    \ * ab; // acbcab is ac times bc times c * ab\n        long acbcabc = acbcab *\
    \ c; // acbcabc is ac times bc times c * ab times c\n        long acbcabcb = acbcabc\
    \ * b; // acbcabcb is ac times bc times c * ab times c * b\n        long acbcabcbc\
    \ = acbcabcb * c; // acbcabcbc is ac times bc times c * ab times c * b times c\n\
    \        long acbcabcbcb = acbcabcbc * b; // acbcabcbcb is ac times bc times c\
    \ * ab times c * b times c * b\n        long acbcabcbcbc = acbcabcbcb * c; //\
    \ acbcabcbcbc is ac times bc times c * ab times c * b times c * b times c\n  \
    \      long acbcabcbcbcb = acbcabcbcbc * b; // acbcabcbcbcb is ac times bc times\
    \ c * ab times c * b times c * b times c * b\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * c; // acbcabcbcbcbc is ac times bc times c * ab times c * b times c * b times\
    \ c * b times c\n        long acbcabcbcbcbcb = acbcabcbcbcbc * b; // acbcabcbcbcbcb\
    \ is ac times bc times c * ab times c * b times c * b times c * b times c * b\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbcb * c; // acbcabcbcbcbcbc is ac times\
    \ bc times c * ab times c * b times c * b times c * b times c * b times c\n  \
    \      long acbcabcbcbcbcbcb = acbcab\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqf1is_ll.cs(33,39): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long x = (long)((-b + root) / a);\n        long y = (long)((-b - root)\
    \ / a);\n        return (x * x + y * y) == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cfd3313936440c888cfde4dec30e3bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cfd3313936440c888cfde4dec30e3bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a * a);\n        long g = (long) Math.Sqrt(b\
    \ * b);\n        long h = (long) Math.Sqrt(c * c);\n        long i = (long) Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long j = (long) Math.Sqrt(a * a + b * b + c *\
    \ c - e * e - f * f - g * g - h * h);\n        long k = (long) Math.Sqrt(a * a\
    \ + b * b + c * c - e * e - f * f - g * g - h * h - i * i);\n        long l =\
    \ (long) Math.Sqrt(a * a + b * b + c * c - e * e - f * f - g * g - h * h - i *\
    \ i - j * j);\n        long m = (long) Math.Sqrt(a * a + b * b + c * c - e * e\
    \ - f * f - g * g - h * h - i * i - j * j - k * k);\n        long n = (long) Math.Sqrt(a\
    \ * a + b * b + c * c - e * e - f * f - g * g - h * h - i * i - j * j - k * k\
    \ - l * l);\n        long o = (long) Math.Sqrt(a * a + b * b + c * c - e * e -\
    \ f * f - g * g - h * h - i * i - j * j - k * k - l * l - m * m);\n        long\
    \ p = (long) Math.Sqrt(a * a + b * b + c * c - e * e - f * f - g * g - h * h -\
    \ i * i - j * j - k * k - l * l - m * m - n * n);\n        long q = (long) Math.Sqrt(a\
    \ * a + b * b + c * c - e * e - f * f - g * g - h * h - i * i - j * j - k * k\
    \ - l * l - m * m - n * n - o * o);\n        long r = (long) Math.Sqrt(a * a +\
    \ b * b + c * c - e * e - f * f - g * g - h * h - i * i - j * j - k * k - l *\
    \ l - m * m - n * n - o * o - p * p);\n        long s = (long) Math.Sqrt(a * a\
    \ + b * b + c * c - e * e \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp212w5k_o.cs(34,64): error CS1026: ) expected

    /tmp/tmp212w5k_o.cs(34,64): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 >= 0 && t1 <= 1 && t2 >=\
    \ 0 && t2 <= 1) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <078a9bf7fcf74378a8946f64cf535fcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <078a9bf7fcf74378a8946f64cf535fcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcab\
    \ = abc - abc;\n        long abcabc = abcab + abc;\n        long abcabcb = abcabc\
    \ + abc;\n        long abcabcba = abcabcb + abc;\n        long abcabcbac = abcabcab\
    \ + abcabc;\n        long abcabcbacb = abcabcbac + abcabc;\n        long abcabcbacbc\
    \ = abcabcbacb + abcabc; \n        long abcabcbacbcd = abcabcbacbc + abcabcba;\n\
    \        long abcabcbacbcde = abcabcbacbcd + abcabcbac;\n        long abcabcbacbcdef\
    \ = abcabcbacbcde + abcabcbacb;\n        long abcabcbacbcdefg = abcabcbacbcdef\
    \ + abcabcbacbc;\n        long abcabcbacbcdefgh = abcabcbacbcdefg + abcabcbacb;\n\
    \        long abcabcbacbcdefghi = abcabcbacbcdefgh + abcabcbacbc;\n        long\
    \ abcabcbacbcdefghij = abcabcbacbcdefghi + abcabcbacb;\n        long abcabcbacbcdefghijk\
    \ = abcabcbacbcdefghij + abcabcbacbc;\n        long abcabcbacbcdefghijkl = abcabcbacbcdefghijk\
    \ + abcabcbacb;\n        long abcabcbacbcdefghijkll = abcabcbacbcdefghijkl + abcabcbacbc;\n\
    \        long abcabcbacbcdefghijkllm = abcabcbacbcdefghijkll + abcabcbacb;\n \
    \       long abcabcbacbcdefghijkllmm = abcabcbacbcdefghijkllm + abcabcbacbc;\n\
    \        long abcabcbacbcdefghijkllmmn = abcabcbacbcdefghijkllmm + abcabcba\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnna_ar5y.cs(42,75): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long abcca = abcc + acb;\n        long abccb = abcca +\
    \ acb;\n        long abccca = abccb + acb;\n        long abcccb = abccca + acb;\n\
    \        long abcccc = abcccb + acb;\n        long abcccca = abcccc + acb;\n \
    \       long abccccb = abcccca + acb;\n        long abccccc = abccccb + acb;\n\
    \        long abccccca = abccccc + acb;\n        long abcccccb = abccccca + acb;\n\
    \        long abcccccc =abcccccb + acb;\n        long abccccca = abccccc + acb;\n\
    \        long abcccccb = abccccca + acb;\n        long abcccccc =abcccccb + acb;\n\
    \        long abccccca = abccccc + acb;\n        long abcccccb = abccccca + acb;\n\
    \        long abcccccc =abcccccb + acb;\n        long abccccca = abccccc + acb;\n\
    \        long abcccccb = abccccca + acb;\n        long abcccccc =abcccccb + acb;\n\
    \        long abccccca = abccccc + acb;\n        long abcccccb = abccccca + acb;\n\
    \        long abcccccc =abcccccb + acb;\n        long abccccca = abccccc + acb;\n\
    \        long abcccccb = abccccca + acb;\n        long abcccccc =abcccccb + acb;\n\
    \        long abccccca = abccccc + acb;\n        long abcccccb = abccccca + acb;\n\
    \        long abcccccc =abcccccb + acb;\n        long abccccca = abccccc + acb;\n\
    \        long abcccccb = abccccca + acb;\n        long abcccccc =ab\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyftqr30.cs(55,26): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abbc = ab + bc;\n        long acab\
    \ = ac - ab;\n        long abcab = ab + ab;\n        long acabc = ac - abc;\n\
    \        long abcabc = ab + abc;\n        long acabcb = ac - abb;\n        long\
    \ abcabcb = ab + abb;\n        long acabcba = ac - aba;\n        long abcabcab\
    \ = ab + aba;\n        long acabcbac = ac - abba;\n        long abcabcabc = ab\
    \ + abba;\n        long acabcbacc = ac - abaab;\n        long abcabcabcb = ab\
    \ + abaab;\n        long acabcbaccb = ac - ababa;\n        long abcabcabcab =\
    \ ab + ababa;\n        long acabcbaccba = ac - ababa;\n        long abcabcabcabc\
    \ = ab + ababa;\n        long acabcbaccbac = ac - ababba;\n        long abcabcabcabcb\
    \ = ab + ababba;\n        long acabcbaccbacc = ac - ababaab;\n        long abcabcabcabcab\
    \ = ab + ababaab;\n        long acabcbaccbaccb = ac - abababab;\n        long\
    \ abcabcabcabcabc = ab + abababab;\n        long acabcbaccbaccbc = ac - ababababab;\n\
    \        long abcabcabcabcabcb = ab + ababababab;\n        long acabcbaccbaccbca\
    \ = ac - ababababababa;\n        long abcabcabcabcabcab = ab + ababababababa;\n\
    \        long acabcbaccbaccbcab = ac - abababababababa;\n        long abcabcabcabcabcabc\
    \ = ab + abababababababa;\n        long acabcbaccbaccbcabcb = ac - ababababababababa;\n\
    \        long abcabcabcabcabcabcba = ab + ababababababababa;\n        long acabcbaccbaccbcabcab\
    \ = ac - abababababababababa;\n        long abcabcabcabcabcabcabc = ab + abababababababababa;\n\
    \        long acabcbaccbaccbcab\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpciyhlwdt.cs(55,31): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abbc = ab - bc;\n        long acab\
    \ = ac - ab;\n        long abcab = ab - ab;\n        long acabc = ac - abc;\n\
    \        long abcabc = ab - abc;\n        long acabcb = ac - abb;\n        long\
    \ abcabcb = ab - abb;\n        long acabcbc = ac - abc;\n        long abcabcbc\
    \ = ab - abc;\n        long acabcbcb = ac - abb;\n        long abcabcbcb = ab\
    \ - abb;\n        long acabcbcbc = ac - abc;\n        long abcabcbcbc = ab - abc;\n\
    \        long acabcbcbcb = ac - abb;\n        long abcabcbcbcb = ab - abb;\n \
    \       long acabcbcbcbc = ac - abc;\n        long abcabcbcbcbc = ab - abc;\n\
    \        long acabcbcbcbcb = ac - abb;\n        long abcabcbcbcbcb = ab - abb;\n\
    \        long acabcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbc = ab - abc;\n\
    \        long acabcbcbcbcbcb = ac - abb;\n        long abcabcbcbcbcbcb = ab -\
    \ abb;\n        long acabcbcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbcbc\
    \ = ab - abc;\n        long acabcbcbcbcbcbcb = ac - abb;\n        long abcabcbcbcbcbcbcb\
    \ = ab - abb;\n        long acabcbcbcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbcbcbc\
    \ = ab - abc;\n        long acabcbcbcbcbcbcbcb = ac - abb;\n        long abcabcbcbcbcbcbcbcb\
    \ = ab - abb;\n        long acabcbcbcbcbcbcbcbc = ac - abc;\n        long abcabcbcbcbcbcbcbcbc\
    \ = ab - abc;\n        long acabcbcbcbcbcbcbcbcb = ac - abb;\n        long abcabcbcbcbcbcbcbcbcb\
    \ = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_h3ne_ec.cs(56,37): error CS1525: Invalid expression term ''}''

    /tmp/tmp_h3ne_ec.cs(56,37): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abbc = ab - bc;\n        long acab\
    \ = ac - ab;\n        long abcab = ab - ab;\n        long acbcab = ac - bc;\n\
    \        long abcabc = ab - abc;\n        long acbcabc = ac - bcb;\n        long\
    \ abcabcb = ab - cab;\n        long acbcabcb = ac - bcb;\n        long abcabcbc\
    \ = ab - cabc;\n        long acbcabcbc = ac - bcbc;\n        long abcabcbcd =\
    \ ab - cabcd;\n        long acbcabcbcd = ac - bcbcd;\n        long abcabcbcde\
    \ = ab - cabcde;\n        long acbcabcbcde = ac - bcbcde;\n        long abcabcbcdef\
    \ = ab - cabcdef;\n        long acbcabcbcdef = ac - bcbcdef;\n        long abcabcbcdefg\
    \ = ab - cabcdefg;\n        long acbcabcbcdefg = ac - bcbcdefg;\n        long\
    \ abcabcbcdefgh = ab - cabcdefgh;\n        long acbcabcbcdefgh = ac - bcbcdefgh;\n\
    \        long abcabcbcdefghi = ab - cabcdefghi;\n        long acbcabcbcdefghi\
    \ = ac - bcbcdefghi;\n        long abcabcbcdefghij = ab - cabcdefghij;\n     \
    \   long acbcabcbcdefghij = ac - bcbcdefghij;\n        long abcabcbcdefghijk =\
    \ ab - cabcdefghijk;\n        long acbcabcbcdefghijk = ac - bcbcdefghijk;\n  \
    \      long abcabcbcdefghijkl = ab - cabcdefghijkl;\n        long acbcabcbcdefghijkl\
    \ = ac - bcbcdefghijkl;\n        long abcabcbcdefghijkll = ab - cabcdefghijkll;\n\
    \        long acbcabcbcdefghijkll = ac - b\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppv3szro2.cs(51,42): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n\
    \        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n\
    \        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbc * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n  \
    \      long abcbcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbcbc * bc;\n        long\
    \ ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpta74_pb2.cs(45,16): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long x = (long)(-b + root) / (2 * a);\n\
    \        long y = (long)(-b - root) / (2 * a);\n        return Math.Abs(x - y)\
    \ < 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a305835db7e946a8867258f0afab19f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a305835db7e946a8867258f0afab19f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) (-b + e);\n        long g = (long) (-b - e);\n      \
    \  long h = (long) (-b + e);\n        long i = (long) (-b - e);\n        long\
    \ j = (long) (-b + e);\n        long k = (long) (-b - e);\n        long l = (long)\
    \ (-b + e);\n        long m = (long) (-b - e);\n        long n = (long) (-b +\
    \ e);\n        long o = (long) (-b - e);\n        long p = (long) (-b + e);\n\
    \        long q = (long) (-b - e);\n        long r = (long) (-b + e);\n      \
    \  long s = (long) (-b - e);\n        long t = (long) (-b + e);\n        long\
    \ u = (long) (-b - e);\n        long v = (long) (-b + e);\n        long w = (long)\
    \ (-b - e);\n        long x = (long) (-b + e);\n        long y = (long) (-b -\
    \ e);\n        long z = (long) (-b + e);\n        long aa = (long) (-b - e);\n\
    \        long ab = (long) (-b + e);\n        long ac = (long) (-b - e);\n    \
    \    long ad = (long) (-b + e);\n        long ae = (long) (-b - e);\n        long\
    \ af = (long) (-b + e);\n        long ag = (long) (-b - e);\n        long ah =\
    \ (long) (-b + e);\n        long ai = (long) (-b - e);\n        long aj = (long)\
    \ (-b + e);\n        long ak = (long) (-b - e);\n        long al = (long) (-b\
    \ + e);\n        long am = (long) (-b - e);\n        long an = (long) (-b + e);\n\
    \        long ao = (long) (-b - e);\n        long ap = (long) (-b + e);\n    \
    \    long aq = (long) (-b - e);\n        long ar = (long) (-b + e);\n        long\
    \ as = (long) (-b - e);\n        long at = (long) (-b + e);\n        long au =\
    \ (long) (-b - e);\n        long av = (long) (-b + e);\n        long aw = (long)\
    \ (-b - e);\n        long ax\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpumh3ckx1.cs(60,14): error CS1001: Identifier expected

    /tmp/tmpumh3ckx1.cs(60,14): error CS1002: ; expected

    /tmp/tmpumh3ckx1.cs(60,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpumh3ckx1.cs(60,17): error CS1031: Type expected

    /tmp/tmpumh3ckx1.cs(65,16): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab * bc;\n\
    \        long acb = ac * bc;\n        long abbc = ab * bc;\n        long acab\
    \ = ac * ab;\n        long abcab = ab * ab;\n        long acabc = ac * abc;\n\
    \        long abcabc = ab * abc;\n        long acabcb = ac * abb;\n        long\
    \ abcabcb = ab * abb;\n        long acabcbc = ac * abc;\n        long abcabcbc\
    \ = ab * abc;\n        long acabcbcb = ac * abb;\n        long abcabcbcb = ab\
    \ * abb;\n        long acabcbcbc = ac * abc;\n        long abcabcbcbc = ab * abc;\n\
    \        long acabcbcbcb = ac * abb;\n        long abcabcbcbcb = ab * abb;\n \
    \       long acabcbcbcbc = ac * abc;\n        long abcabcbcbcbc = ab * abc;\n\
    \        long acabcbcbcbcb = ac * abb;\n        long abcabcbcbcbcb = ab * abb;\n\
    \        long acabcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbc = ab * abc;\n\
    \        long acabcbcbcbcbcb = ac * abb;\n        long abcabcbcbcbcbcb = ab *\
    \ abb;\n        long acabcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcb = ac * abb;\n        long abcabcbcbcbcbcbcb\
    \ = ab * abb;\n        long acabcbcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcb = ac * abb;\n        long abcabcbcbcbcbcbcbcb\
    \ = ab * abb;\n        long acabcbcbcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcbcb = ac * abb;\n        long abcabcbcbcbcbcbcbcbcb\
    \ = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpio6jzli8.cs(56,37): error CS1525: Invalid expression term ''}''

    /tmp/tmpio6jzli8.cs(56,37): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long abcbc = abcb + cc / 2;\n        long abccb = abcc\
    \ * 2;\n        long abcccb = abccb * 2;\n        long abcccbc = abcccb * 2;\n\
    \        long abcccbc = (abcccbc + cc / 2) * 2;\n        long abcccbcb = abcccbc\
    \ * 2;\n        long abcccbcb = (abcccbcb + cc / 2) * 2;\n        long abcccbcbc\
    \ = abcccbcb * 2;\n        long abcccbcbc = (abcccbcbc + cc / 2) * 2;\n      \
    \  long abcccbcbcb = abcccbcbc * 2;\n        long abcccbcbcb = (abcccbcbcb + cc\
    \ / 2) * 2;\n        long abcccbcbcbc = abcccbcbcb * 2;\n        long abcccbcbcbc\
    \ = (abcccbcbcbc + cc / 2) * 2;\n        long abcccbcbcbcb = abcccbcbcbc * 2;\n\
    \        long abcccbcbcbcb = (abcccbcbcbcb + cc / 2) * 2;\n        long abcccbcbcbcbc\
    \ = abcccbcbcbcb * 2;\n        long abcccbcbcbcbc = (abcccbcbcbcbc + cc / 2) *\
    \ 2;\n        long abcccbcbcbcbcb = abcccbcbcbcbc * 2;\n        long abcccbcbcbcbcb\
    \ = (abcccbcbcbcbcb + cc / 2) * 2;\n        long abcccbcbcbcbcbc = abcccbcbcbcbcb\
    \ * 2;\n        long abcccbcbcbcbcbc = (abcccbcbcbcbcbc + cc / 2) * 2;\n     \
    \   long abcccbcbcbcbcbcb = abcccbcbcbcbcbc * 2;\n        long abcccbcbcbcbcbcb\
    \ = (abcccbcbcbcbcbcb + cc / 2) * 2;\n        long abcccbcbcbcbcbcbc = abcccbcbcbcbcbcb\
    \ * 2;\n        long abcccbcbcbcbcbcbc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rykbr1k.cs(48,31): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbc = acbcccbcb * acbcc;\n       \
    \ long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbb = acbcccbcb * acbcc;\n   \
    \     long acbcccbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb =\
    \ acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbb = acbcccbcb * acbcc;\n   \
    \     long acbcccbcbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbcbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbcbcbcbcbc = acbcccbcb * acb\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp22umsq74.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) (-b + e);\n        long g = (long) (-b - e);\n      \
    \  long h = (long) (-b + e);\n        long i = (long) (-b - e);\n        long\
    \ j = (long) (-b + e);\n        long k = (long) (-b - e);\n        long l = (long)\
    \ (-b + e);\n        long m = (long) (-b - e);\n        long n = (long) (-b -\
    \ e);\n        long o = (long) (-b - e);\n        long p = (long) (-b - e);\n\
    \        long q = (long) (-b - e);\n        long r = (long) (-b - e);\n      \
    \  long s = (long) (-b - e);\n        long t = (long) (-b - e);\n        long\
    \ u = (long) (-b - e);\n        long v = (long) (-b - e);\n        long w = (long)\
    \ (-b - e);\n        long x = (long) (-b - e);\n        long y = (long) (-b -\
    \ e);\n        long z = (long) (-b - e);\n        long A = (long) (-b - e);\n\
    \        long B = (long) (-b - e);\n        long C = (long) (-b - e);\n      \
    \  long D = (long) (-b - e);\n        long E = (long) (-b - e);\n        long\
    \ F = (long) (-b - e);\n        long G = (long) (-b - e);\n        long H = (long)\
    \ (-b - e);\n        long I = (long) (-b - e);\n        long J = (long) (-b -\
    \ e);\n        long K = (long) (-b - e);\n        long L = (long) (-b - e);\n\
    \        long M = (long) (-b - e);\n        long N = (long) (-b - e);\n      \
    \  long O = (long) (-b - e);\n        long P = (long) (-b - e);\n        long\
    \ Q = (long) (-b - e);\n        long R = (long) (-b - e);\n        long S = (long)\
    \ (-b - e);\n        long T = (long) (-b - e);\n        long U = (long) (-b -\
    \ e);\n        long V = (long) (-b - e);\n        long W = (long) (-b - e);\n\
    \        long X = (\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmzwtb10.cs(65,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpsmzwtb10.cs(65,19): error CS1026: ) expected

    /tmp/tmpsmzwtb10.cs(65,19): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abbbc = abbb * bc;\n        long abbbcd = abbbc *\
    \ bc;\n        long abbbcde = abbbcd * bc;\n        long abbbcdef = abbbcde *\
    \ bc;\n        long abbbcdefg = abbbcdef * bc;\n        long abbbcdefgh = abbbcdefg\
    \ * bc;\n        long abbbcdefghi = abbbcdefgh * bc;\n        long abbbcdefghij\
    \ = abbbcdefghi * bc;\n        long abbbcdefghijk = abbbcdefghij * bc;\n     \
    \   long abbbcdefghijkl = abbbcdefghijk * bc;\n        long abbbcdefghijkll =\
    \ abbbcdefghijkll * bc;\n        long abbbcdefghijkllm = abbbcdefghijkll * bc;\n\
    \        long abbbcdefghijkllmm = abbbcdefghijkllm * bc;\n        long abbbcdefghijkllmmn\
    \ = abbbcdefghijkllmm * bc;\n        long abbbcdefghijkllmmnm = abbbcdefghijkllmmn\
    \ * bc;\n        long abbbcdefghijkllmmnmm = abbbcdefghijkllmmnm * bc;\n     \
    \   long abbbcdefghijkllmmnmn = abbbcdefghijkllmmnmm * bc;\n        long abbbcdefghijkllmmnmnm\
    \ = abbbcdefghijkllmmnmnm * bc;\n        long abbbcdefghijkllmmnmnmn = abbbcdefghijkllmmnmnmn\
    \ * bc;\n        long abbbcdefghijkllmmnmnmnm = abbbcdefghijkllmmnmnmnm * bc;\n\
    \        long abbbcdefghijkllmmnmnmnmn = abbbcdefghijkllmm\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw0sxoomt.cs(44,58): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab * bc;\n\
    \        long acb = ac * bc;\n        long abbc = ab * bc;\n        long acab\
    \ = ac * ab;\n        long abcab = ab * ab;\n        long acabc = ac * abc;\n\
    \        long abcabc = ab * abc;\n        long acabcb = ac * abc;\n        long\
    \ abcabcb = ab * abc;\n        long acabcba = ac * abc;\n        long abcabcab\
    \ = ab * abc;\n        long acabcbac = ac * abc;\n        long abcabcabc = ab\
    \ * abc;\n        long acabcbacb = ac * abc;\n        long abcabcabcb = ab * abc;\n\
    \        long acabcbacba = ac * abc;\n        long abcabcabcab = ab * abc;\n \
    \       long acabcbacbacbac = ac * abc;\n        long abcabcabcabc = ab * abc;\n\
    \        long acabcbacbacbacb = ac * abc;\n        long abcabcabcabcb = ab * abc;\n\
    \        long acabcbacbacbacba = ac * abc;\n        long abcabcabcabcab = ab *\
    \ abc;\n        long acabcbacbacbacbac = ac * abc;\n        long abcabcabcabcabc\
    \ = ab * abc;\n        long acabcbacbacbacbacb = ac * abc;\n        long abcabcabcabcabcb\
    \ = ab * abc;\n        long acabcbacbacbacbaca = ac * abc;\n        long abcabcabcabcabcab\
    \ = ab * abc;\n        long acabcbacbacbacbacbacba = ac * abc;\n        long abcabcabcabcabcabc\
    \ = ab * abc;\n        long acabcbacbacbacbacbacba = ac * abc;\n        long abcabcabcabcabcabcb\
    \ = ab * abc;\n        long acabcbacbacbacbacbacbac = ac * abc;\n        long\
    \ abcabcabcabcabcabcab = ab * abc;\n        long acabcbacbacbacbacbacbacbac =\
    \ ac * abc;\n        long abcabcabcabcabcabcabcb = ab * abc;\n        long acabcbacbacbacbacbacbacbacba\
    \ = ac * abc;\n        long abcabcab\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_uubc_o.cs(58,22): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long acbc = acb + bc;\n        long abcca = abcc + acb;\n\
    \        long abcba = abcc + abc;\n        long abcab = abcc + abb;\n        long\
    \ acbca = acbc + acb;\n        long acbba = acbc + abc;\n        long accab =\
    \ acbc + abb;\n        long accaba = accab + acb;\n        long accabb = accab\
    \ + abc;\n        long accabc = accab + abb;\n        long accabca = accabc +\
    \ acb;\n        long accabba = accabc + abc;\n        long accabbc = accabb +\
    \ acb;\n        long accabcab = accabc + abb;\n        long accabcaba = accabcab\
    \ + acb;\n        long accabcabb = accabcab + abc;\n        long accabcabc = accabcab\
    \ + abb;\n        long accabcabca = accabcabc + acb;\n        long accabcabba\
    \ = accabcabc + abc;\n        long accabcabbc = accabcabb + acb;\n        long\
    \ accabcabcab = accabcabc + abb;\n        long accabcabcaba = accabcabcab + acb;\n\
    \        long accabcabcabb = accabcabcab + abc;\n        long accabcabcabc = accabcabcab\
    \ + abb;\n        long accabcabcabca = accabcabcabc + acb;\n        long accabcabcabba\
    \ = accabcabcabc + abc;\n        long accabcabcabbc = accabcabcabb + acb;\n  \
    \      long accabcabcabcab = accabcabcabc + abb;\n        long accabcabcabcaba\
    \ = accabcabcabcab + acb;\n        long accabcabcabcabb = accabcabcabcab + abc;\n\
    \        long accabcabcabcabc = accabcabcabcab + abb;\n        long accabcabcabcabca\
    \ = accabcabcabcabc + acb;\n        long accabcabcabcabba = accabcabcabcabc +\
    \ abc;\n        long \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqpy54r9a.cs(57,13): error CS1001: Identifier expected

    /tmp/tmpqpy54r9a.cs(57,13): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long abccc = abcc *\
    \ abcc;\n        long acbccc = acbcc * acbcc;\n        long abcccb = abccc * abcccb;\n\
    \        long acbcccb = acbccc * acbcccb;\n        long abcccbc = abcccb * abcccbc;\n\
    \        long acbcccba = acbccc * acbcccba;\n        long abcccbac = abcccba *\
    \ abcccbac;\n        long acbcccbac = acbcccba * acbcccbac;\n        long abcccbacb\
    \ = abcccbac * abcccbacb;\n        long acbcccbacb = acbcccbacb * acbcccbacb;\n\
    \        long abcccbacba = abcccbacba * abcccbacba;\n        long acbcccbacba\
    \ = acbcccbacba * acbcccbacba;\n        long abcccbacbac = abcccbacbac * abcccbacbac;\
    \ \n        long acbcccbacbacb = acbcccbacbac * acbcccbacbacb;\n        long abcccbacbacba\
    \ = abcccbacbacba * abcccbacbacba;\n        long acbcccbacbacba = acbcccbacbacba\
    \ * acbcccbacbacba;\n        long abcccbacbacbac = abcccbacbacbac * abcccbacbacbac;\n\
    \        long acbcccbacbacbac = acbcccbacbacbac * acbcccbacbacbac; \n        long\
    \ abcccbacbacbacb = abcccbacbacbac * abcccbacbacbacb;\n        long acbcccbacbacbacb\
    \ = acbcccbacbacbac * acbcccbacbacbacb;\n        long abcccbacbacbacba = abcccbacbacbacba\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa4rbl_9d.cs(45,49): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long root = (long)Math.Sqrt(d);\n  \
    \          long t1 = (-b + root) / a;\n            long t2 = (-b - root) / a;\n\
    \            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n               \
    \ return true;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <714b217b50494b34919610ba413367cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <714b217b50494b34919610ba413367cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcc + abc;\n        long acbca = acbc +\
    \ abc;\n        long abcacb = abcac + abc;\n        long acbcab = acbca+ abc;\n\
    \        long abcacbc = abcacb + abc;\n        long acbcabc = acbcab + abc;\n\
    \        long abcacbca = abcacbc + abc;\n        long acbcabcb = acbcabc + abc;\n\
    \        long abcacbcab = abcacbcab + abc;\n        long acbcabcba = acbcabcba+\
    \ abc;\n        long abcacbcabc = abcacbcabc + abc;\n        long acbcabcbac =\
    \ acbcabcbac + abc;\n        long abcacbcabca = abcacbcabca + abc;\n        long\
    \ acbcabcbaca = acbcabcbaca + abc;\n        long abcacbcabcab = abcacbcabcab +\
    \ abc;\n        long acbcabcbacab = acbcabcbacab + abc;\n        long abcacbcabcabc\
    \ = abcacbcabcabc + abc;\n        long acbcabcbacabc = acbcabcbacabc + abc;\n\
    \        long abcacbcabcabca = abcacbcabcabca + abc;\n        long acbcabcbacabca\
    \ = acbcabcbacabca + abc;\n        long abcacbcabcabcab = abcacbcabcabcab + abc;\n\
    \        long acbcabcbacabcab = acbcabcbacabcab + abc;\n        long abcacbcabcabcabc\
    \ = abcacbcabcabcabc + abc;\n        long acbcabcbacabcabc = acbcabcbacabcabc\
    \ + abc;\n        long abcacbcabcabcabca = abcacbcabcabcabca + abc;\n        long\
    \ acbcabcbacabcabca = acbcabcbacabcabca + abc;\n        long abcacbcabcabcabcab\
    \ = abcacbcabcabcab\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpegeyqj7w.cs(50,50): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     if (side1 == side2 && side2 == side3) {\n            return true;\n    \
    \    }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8l9qio3r.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8l9qio3r.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8l9qio3r.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * bc;\n        long acbcab = acb * ab;\n        long acbcabc = acbcab\
    \ * bc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc *\
    \ bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n     \
    \   long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5gjidx3w.cs(44,66): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long abc = ab * bc;\n\
    \        long acb = ac * bc;\n        long acab = ac * ab;\n        long abac\
    \ = ab * ac;\n        long abcab = ab * abc;\n        long acbcab = ac * bc *\
    \ abc;\n        long acbcabc = ac * bc * abc;\n        long acbcabcb = ac * bc\
    \ * abc * bc;\n        long acbcabcbc = ac * bc * abc * bc * c;\n        long\
    \ acbcabcbcb = ac * bc * abc * bc * c * b;\n        long acbcabcbcbc = ac * bc\
    \ * abc * bc * c * b * c;\n        long acbcabcbcbcb = ac * bc * abc * bc * c\
    \ * b * c * b;\n        long acbcabcbcbcbb = ac * bc * abc * bc * c * b * c *\
    \ b * c;\n        long acbcabcbcbcbc = ac * bc * abc * bc * c * b * c * b * c;\n\
    \        long acbcabcbcbcbcb = ac * bc * abc * bc * c * b * c * b * c * b;\n \
    \       long acbcabcbcbcbcbc = ac * bc * abc * bc * c * b * c * b * c * b;\n \
    \       long acbcabcbcbcbcbcb = ac * bc * abc * bc * c * b * c * b * c * b * c;\n\
    \        long acbcabcbcbcbcbcb = ac * bc * abc * bc * c * b * c * b * c * b *\
    \ c;\n        long acbcabcbcbcbcbcbc = ac * bc * abc * bc * c * b * c * b * c\
    \ * b * c * c;\n        long acbcabcbcbcbcbcbc = ac * bc * abc * bc * c * b *\
    \ c * b * c * b * c * c;\n        long acbcabcbcbcbcbcbcb = ac * bc * abc * bc\
    \ * c * b * c * b * c * b * c * b;\n        long acbcabcbcbcbcbcbcb = ac * bc\
    \ * abc * bc * c * b * c * b * c * b * c * b;\n        long acbcab\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppn4vw1ls.cs(42,20): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = b + e * (b - a);\n        long g = a + e\
    \ * (a - b);\n        long h = Math.Sqrt(f * f + g * g);\n        return (h *\
    \ h) == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8222mvq.cs(21,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo8222mvq.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n           \
    \ long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 * a);\n     \
    \       if (f > g) {\n                return true;\n            }\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0lqp502a.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long abcca = abcc + ac;\n        long abccb = abcca + bc;\n\
    \        long abccc = abccb + c;\n        long abccca = abccc + ac;\n        long\
    \ abcccb = abccca + bc;\n        long abcccc = abcccb + c;\n        long abcccca\
    \ = abcccc + ac;\n        long abccccb = abcccca + bc;\n        long abccccc =\
    \ abccccb + c;\n        long abccccaa = abccccc + ac;\n        long abccccab =\
    \ abccccaa + bc;\n        long abccccac = abccccab + c;\n        long abccccaab\
    \ = abccccac + ac;\n        long abccccaac = abccccaab + bc;\n        long abccccaabc\
    \ = abccccaac + c;\n        long abccccaabc = abccccaabc;\n        long abccccaabcc\
    \ = abccccaabcc + ac;\n        long abccccaabccc = abccccaabccc + bc;\n      \
    \  long abccccaabcccb = abccccaabcccc + c;\n        long abccccaabcccba = abccccaabcccc\
    \ + ac;\n        long abccccaabcccbb = abccccaabcccba;\n        long abccccaabcccbac\
    \ = abccccaabcccbb;\n        long abccccaabcccbbc = abccccaabcccbac;\n       \
    \ long abccccaabcccbacc = abccccaabcccbbc;\n        long abccccaabcccbbcca = abccccaabcccbacc;\n\
    \        long abccccaabcccbbccb = abccccaabcccbbcca;\n        long abccccaabcccbbccac\
    \ = abccccaabcccbbccb;\n        long abccccaabcccbbccbc = abccccaabcccbbccac;\n\
    \        long abccccaabcccbbccbca = abcc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2nyedxlu.cs(52,40): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = b + e * Math.Sqrt(b + e);\n        long g = a + e * Math.Sqrt(a\
    \ + e);\n        long h = a - e * Math.Sqrt(a - e);\n        return ((f < g) &&\
    \ (f < h));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ackf0ta.cs(20,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ackf0ta.cs(21,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ackf0ta.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0ackf0ta.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b + e * 0.5);\n      \
    \  long g = a + e * Math.Sqrt(a + e * 0.5);\n        return ((f - g) * (f - g)\
    \ == 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprpsp6wsz.cs(21,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprpsp6wsz.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprpsp6wsz.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long x = (long)((-b - root) / 2.0 * a);\n        long y = (long)((-b\
    \ + root) / 2.0 * a);\n        long z = (long)((-b + root) / 2.0 * a);\n     \
    \   if (Math.Abs(x - y) < Math.Abs(x - z) && Math.Abs(x - z) < Math.Abs(y - z))\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7247def48ab4c5fa9cd379e69982acb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7247def48ab4c5fa9cd379e69982acb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abcbc = abcb * bc;\n        long abcbca = abcbc *\
    \ ca;\n        long abcbcb = abcbc * cb;\n        long abcbcba = abcbcb * ba;\n\
    \        long abcbcbb = abcbcb * bb;\n        long abcbcbac = abcbcba * ca;\n\
    \        long abcbcbbc = abcbcbb * cb;\n        long abcbcbaca = abcbcbac * ca;\n\
    \        long abcbcbbca = abcbcbbc * ca;\n        long abcbcbacbc = abcbcbacb\
    \ * cb;\n        long abcbcbbcbc = abcbcbbcb * cb;\n        long abcbcbacbca =\
    \ abcbcbacbc * ca;\n        long abcbcbbcbca = abcbcbbcbc * ca;\n        long\
    \ abcbcbacbcbc = abcbcbacbcb * cb;\n        long abcbcbbcbcbc = abcbcbbcbcb *\
    \ cb;\n        long abcbcbacbcbca = abcbcbacbcbc * ca;\n        long abcbcbbcbcbca\
    \ = abcbcbbcbcbc * ca;\n        long abcbcbacbcbcbc = abcbcbacbcbcb * cb;\n  \
    \      long abcbcbbcbcbcbc = abcbcbbcbcbcb * cb;\n        long abcbcbacbcbcbca\
    \ = abcbcbacbcbcbc * ca;\n        long abcbcbbcbcbcbca = abcbcbbcbcbcbc * ca;\n\
    \        long abcbcbacbcbcbcbc = abcbcbacbcbcbcb * cb;\n        long abcbcbbcbcbcbcbc\
    \ = abcbcbbcbcbcbcb * cb;\n        long abcbcbacbcbcbcbca = abcbcbacbcbcbcbc *\
    \ ca;\n        long abcbcbbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpea1kgerl.cs(48,29): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbc = acbcccbcb * acbcc;\n       \
    \ long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbc = acbcccbcbc * acbcc;\n        long acbcccbcbcbc\
    \ = acbcccbcbc * acbcc;\n        long acbcccbcbcbc = acbcccbcbc * acbcc;\n   \
    \     long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc\
    \ * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb\
    \ = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc * acbcc;\n  \
    \      long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb =\
    \ acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc * acbcc;\n    \
    \    long acbcccbcbcbcb = acbcccbcbc * acbcc;\n        long acbcccbcbcbcb = acbcccbcbc\
    \ * acbcc;\n        long acbcccbcbcbc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi222y04e.cs(46,26): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long acbc = acb + bc;\n        long abcca = abcc + acb;\n\
    \        long abccb = abcc * bc;\n        long acbca = acbc + abc;\n        long\
    \ abccaa = abcca * ac;\n        long abccba = abccb * ac;\n        long acbcab\
    \ = acbca * ab;\n        long abccaab = abccaa * ab;\n        long abccbab = abccba\
    \ * ab;\n        long acbcabc = acbcab * ac;\n        long abccaabc = abccaab\
    \ * ac;\n        long abccbabc = abccbab * ac;\n        long acbcabcd = acbcabc\
    \ * ab;\n        long abccaabcc = abccaabc * ab;\n        long abccbabcc = abccbabc\
    \ * ab;\n        long acbcabcde = acbcabcd * ac;\n        long abccaabccd = abccaabcc\
    \ * ac;\n        long abccbabccd = abccbabcc * ac;\n        long acbcabcdef =\
    \ acbcabcde * ab;\n        long abccaabccde = abccaabccd * ab;\n        long abccbabccde\
    \ = abccbabccd * ab;\n        long acbcabcdefg = acbcabcdef * ac;\n        long\
    \ abccaabccdef = abccaabccde * ac;\n        long abccbabccdef = abccbabccde *\
    \ ac;\n        long acbcabcdefgh = acbcabcdefg * ab;\n        long abccaabccdefg\
    \ = abccaabccdef * ab;\n        long abccbabccdefg = abccbabccdef * ab;\n    \
    \    long acbcabcdefghi = acbcabcdefgh * ac;\n        long abccaabccdefgh = abccaabccdefg\
    \ * ac;\n        long abccbabccdefgh = abccbabccdefg * ac;\n        long acbcabc\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq2608lll.cs(54,21): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc + ac;\n        long acbc = acb + bc;\n        long abcca = abcc + ac;\n\
    \        long acbca = acbc + ac;\n        long abccaa = abcca + ac;\n        long\
    \ acbcaa = acbca + ac;\n        long abccaab = abccaa + abc;\n        long acbcaab\
    \ = acbcaa + acb;\n        long abccaabc = abccaab + abc;\n        long acbcaabc\
    \ = acbcaab + acb;\n        long abccaabcb = abccaabc + abc;\n        long acbcaabcb\
    \ = acbcaabc + acb;\n        long abccaabcca = abccaabcb + abc;\n        long\
    \ acbcaabcca = acbcaabcb + acb;\n        long abccaabccaa = abccaabcca + abc;\n\
    \        long acbcaabccaa = acbcaabcca + acb;\n        long abccaabccaab = abccaabccaa\
    \ + abc;\n        long acbcaabccaab = acbcaabccaa + acb;\n        long abccaabccaabc\
    \ = abccaabccaab + abc;\n        long acbcaabccaabc = acbcaabccaab + acb;\n  \
    \      long abccaabccaabcb = abccaabccaabc + abc;\n        long acbcaabccaabcb\
    \ = acbcaabccaabc + acb;\n        long abccaabccaabcca = abccaabccaabcb + abc;\n\
    \        long acbcaabccaabcca = acbcaabccaabcb + acb;\n        long abccaabccaabccaa\
    \ = abccaabccaabcca + abc;\n        long acbcaabccaabccaa = acbcaabccaabcca +\
    \ acb;\n        long abccaabccaabccaab = abccaabccaabccaa + abc;\n        long\
    \ acbcaabccaabccaab = acbcaabccaabccaa + acb;\n        long abccaabccaabccaabc\
    \ = abccaabccaabccaab + abc;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_tknvuc.cs(52,13): error CS1001: Identifier expected

    /tmp/tmpo_tknvuc.cs(52,13): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2)\n            return true;\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <189649de534a4dd1a072cfebe338d6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <189649de534a4dd1a072cfebe338d6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d6b2b88c5cc4be9afaf807917be1e77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d6b2b88c5cc4be9afaf807917be1e77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abcbc = abcb * bc;\n        long abcbcd = abcbc *\
    \ bc;\n        long abcbcde = abcbcd * bc;\n        long abcbcdef = abcbcde *\
    \ bc;\n        long abcbcdefg = abcbcdef * bc;\n        long abcbcdefgh = abcbcdefg\
    \ * bc;\n        long abcbcdefghi = abcbcdefgh * bc;\n        long abcbcdefghij\
    \ = abcbcdefghi * bc;\n        long abcbcdefghijk = abcbcdefghij * bc;\n     \
    \   long abcbcdefghijkl = abcbcdefghijk * bc;\n        long abcbcdefghijklm =\
    \ abcbcdefghijkl * bc;\n        long abcbcdefghijklmn = abcbcdefghijklm * bc;\n\
    \        long abcbcdefghijklmnx = abcbcdefghijklmn * bc;\n        long abcbcdefghijklmnxy\
    \ = abcbcdefghijklmnx * bc;\n        long abcbcdefghijklmnxz = abcbcdefghijklmnxy\
    \ * bc;\n        long abcbcdefghijklmnyz = abcbcdefghijklmnxz * bc;\n        long\
    \ abcbcdefghijklmnyzx = abcbcdefghijklmnyz * bc;\n        long abcbcdefghijklmnyzxw\
    \ = abcbcdefghijklmnyzx * bc;\n        long abcbcdefghijklmnyzxwy = abcbcdefghijklmnyzxw\
    \ * bc;\n        long abcbcdefghijklmnyzxwz = abcbcdefghijklmnyzxwy * bc;\n  \
    \      long abcbcdefghijklmnyzxwzx = abcbcdefghijklmnyzxwz * bc;\n        \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkew1lm1p.cs(23,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpkew1lm1p.cs(24,22): error CS0103: The name ''abcb'' does not exist in
    the current context

    /tmp/tmpkew1lm1p.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        return t1 == t2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edd1f10c551a4fc791d301387e558ac8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edd1f10c551a4fc791d301387e558ac8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long abcc\
    \ = ab * cc;\n        long abbbc = ab * bc * cc;\n        long abbcc = ab * b\
    \ * cc;\n        long abccc = ab * c * cc;\n        long abbbcc = ab * b * c *\
    \ cc;\n        long abbccc = ab * b * c * cc;\n        long abcccb = ab * c *\
    \ c * cb;\n        long abbbccc = ab * b * c * c * cc;\n        long abbcccb =\
    \ ab * b * c * c * cb;\n        long abcccbc = ab * c * c * c * cb;\n        long\
    \ abbbcccb = ab * b * c * c * c * cb;\n        long abbcccbc = ab * b * c * c\
    \ * c * cb;\n        long abcccbcb = ab * c * c * c * c * cb;\n        long abbbcccbc\
    \ = ab * b * c * c * c * c * cb;\n        long abbcccbcb = ab * b * c * c * c\
    \ * cb;\n        long abcccbcbc = ab * c * c * c * c * cb;\n        long abbbcccbcb\
    \ = ab * b * c * c * c * c * cb;\n        long abbcccbcbc = ab * b * c * c * c\
    \ * c * cb;\n        long abcccbcbcb = ab * c * c * c * c * c * cb;\n        long\
    \ abbbcccbcbc = ab * b * c * c * c * c * cb;\n        long abbcccbcbcb = ab *\
    \ b * c * c * c * c * cb;\n        long abcccbcbcb = ab * c * c * c * c * c *\
    \ cb;\n        long abbbcccbcbc = ab * b * c * c * c * c * c * cb;\n        long\
    \ abbcccbcbcb = ab * b * c * c * c * c * c * cb;\n        long abcccbcbcbc = ab\
    \ * c * c * c * c * c * \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_9l9t5z.cs(47,52): error CS1525: Invalid expression term ''}''

    /tmp/tmpo_9l9t5z.cs(47,52): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2)\n            return true;\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <189649de534a4dd1a072cfebe338d6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <189649de534a4dd1a072cfebe338d6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = d; //Math.Sqrt(d);\n        long t1 = (-b + root) / a;\n        long\
    \ t2 = (-b - root) / a;\n        if (t1 == t2) {\n            return true;\n \
    \       }\n        long t3 = Math.Sqrt(t1 * t1 + t2 * t2);\n        long t4 =\
    \ t1 * t1 - t2 * t2;\n        if (t4 < 0) {\n            return false;\n     \
    \   }\n        long t5 = t3 * t3 - t4 * t4;\n        if (t5 < 0) {\n         \
    \   return false;\n        }\n        long t6 = Math.Sqrt(t5 * t5 + t4 * t4);\n\
    \        if (t6 == 0) {\n            return true;\n        }\n        long t7\
    \ = (-b + root) / a;\n        long t8 = (-b - root) / a;\n        if (t7 == t8)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8sxkj20i.cs(27,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8sxkj20i.cs(36,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n           \
    \ long f = (b + e * c) / a;\n            long g = (b - e * c) / a;\n         \
    \   if (f > 0 && g > 0) {\n                return true;\n            }\n     \
    \   }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8hotx0m7.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        if (t1 > t2) {\n            return false;\n      \
    \  }\n        long t3 = t1 - t2;\n        long t4 = t1 + t2;\n        long t5\
    \ = t1 - t2;\n        long t6 = t1 + t2;\n        long t7 = t1 - t2;\n       \
    \ long t8 = t1 + t2;\n        long t9 = t1 - t2;\n        long t10 = t1 + t2;\n\
    \        long t11 = t1 - t2;\n        long t12 = t1 + t2;\n        long t13 =\
    \ t1 - t2;\n        long t14 = t1 + t2;\n        long t15 = t1 - t2;\n       \
    \ long t16 = t1 + t2;\n        long t17 = t1 - t2;\n        long t18 = t1 + t2;\n\
    \        long t19 = t1 - t2;\n        long t20 = t1 + t2;\n        long t21 =\
    \ t1 - t2;\n        long t22 = t1 + t2;\n        long t23 = t1 - t2;\n       \
    \ long t24 = t1 + t2;\n        long t25 = t1 - t2;\n        long t26 = t1 + t2;\n\
    \        long t27 = t1 - t2;\n        long t28 = t1 + t2;\n        long t29 =\
    \ t1 - t2;\n        long t30 = t1 + t2;\n        long t31 = t1 - t2;\n       \
    \ long t32 = t1 + t2;\n        long t33 = t1 - t2;\n        long t34 = t1 + t2;\n\
    \        long t35 = t1 - t2;\n        long t36 = t1 + t2;\n        long t37 =\
    \ t1 - t2;\n        long t38 = t1 + t2;\n        long t39 = t1 - t2;\n       \
    \ long t40 = t1 + t2;\n        long t41 = t1 - t2;\n        long t42 = t1 + t2;\n\
    \        long t43 = t1 - t2;\n        long t44 = t1 + t2;\n        long t45 =\
    \ t1 - t2;\n        long t46 = t1 + t2;\n        long t47 = t1 - t2;\n       \
    \ long t48 = t1 + t2;\n        long t49 = t1 - t2;\n        long t50 = t1 + t\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm6j_fn7c.cs(77,26): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * b; //\
    \ acb is ac times b\n        long abc = ab * c; // abc is ab times c\n       \
    \ long acbc = acb * c; // acbc is ac times bc times c\n        long acbcab = acbc\
    \ * ab; // acbcab is ac times bc times c * ab\n        long acbcabc = acbcab *\
    \ c; // acbcabc is ac times bc times c * ab times c\n        long acbcabcb = acbcabc\
    \ * b; // acbcabcb is ac times bc times c * ab times c * b\n        long acbcabcbc\
    \ = acbcabcb * c; // acbcabcbc is ac times bc times c * ab times c * b times c\n\
    \        long acbcabcbcb = acbcabcbc * b; // acbcabcbcb is ac times bc times c\
    \ * ab times c * b times c * b\n        long acbcabcbcbc = acbcabcbcb * c; //\
    \ acbcabcbcbc is ac times bc times c * ab times c * b times c * b times c\n  \
    \      long acbcabcbcbcb = acbcabcbcbc * b; // acbcabcbcbcb is ac times bc times\
    \ c * ab times c * b times c * b times c * b\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * c; // acbcabcbcbcbc is ac times bc times c * ab times c * b times c * b times\
    \ c * b times c\n        long acbcabcbcbcbcb = acbcabcbcbcbc * b; // acbcabcbcbcbcb\
    \ is ac times bc times c * ab times c * b times c * b times c * b times c * b\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbcb * c; // acbcabcbcbcbcbc is ac times\
    \ bc times c * ab times c * b times c * b times c * b times c * b times c\n  \
    \      long acbcabcbcbcbcbcb = acbcabcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvagqc0ne.cs(33,45): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = (b + e) / (2 * a);\n        long g = (c\
    \ + e) / (2 * a);\n        long h = (b - e) / (2 * a);\n        return ((f >=\
    \ 0 && f <= g) || (f >= 0 && f <= h) || (g >= 0 && g <= h));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr3ypehha.cs(21,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * c;\n        long acbca = acb * ca;\n        long acbcab = acb * cab;\n\
    \        long acbcabc = acb * cabc;\n        long acbcabcd = acb * cabcd;\n  \
    \      long acbcabcdd = acb * cabcdd;\n        long acbcabcddd = acb * cabcdddd;\n\
    \        long acbcabcddddd = acb * cabcdddddd;\n        long acbcabcddddddd =\
    \ acb * cabcdddddddd;\n        long acbcabcddddddddd = acb * cabcdddddddddd;\n\
    \        long acbcabcddddddddddd = acb * cabcdddddddddddd;\n        long acbcabcddddddddddddd\
    \ = acb * cabcdddddddddddddd;\n        long acbcabcddddddddddddddd = acb * cabcdddddddddddddddd;\n\
    \        long acbcabcddddddddddddddddd = acb * cabcdddddddddddddddddd;\n     \
    \   long acbcabcddddddddddddddddddd = acb * cabcdddddddddddddddddddd;\n      \
    \  long acbcabcddddddddddddddddddddd = acb * cabcdddddddddddddddddddddddd;\n \
    \       long acbcabcddddddddddddddddddddddddd = acb * cabcdddddddddddddddddddddddddddd;\n\
    \        long acbcabcddddddddddddddddddddddddddddd = acb * cabcdddddddddddddddddddddddddddddddd;\n\
    \        long acbcabcddddddddddddddddddddddddddddddddd = acb * cabcdddddddddddddddddddddddddddddddddddd;\n\
    \        long acbcabcddddddddddddddddddddddddddddddddddddd = acb * cabcdddddddddddddddddddddddddddddddddddddddd;\n\
    \        long acbcabcddddddddddddddddddddddddddddddddddddddddd = acb * cabcdddddddddddddddddddddddddddddddddddddddddddd;\n\
    \        long acbcabcddddddddddddddddddddddddddddddddddddddddddddd = acb * cabcdddddddddddddddddddd\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpput45n6s.cs(44,99): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b * b - 4 * a * c);\n\
    \        long g = a + e * Math.Sqrt(b * b - 4 * a * c);\n        long h = a -\
    \ e * Math.Sqrt(b * b - 4 * a * c);\n        long k = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long l = Math.Sqrt(b * b - 4 * a * c);\n        long m = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long n = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ p = Math.Sqrt(b * b - 4 * a * c);\n        long q = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long r = Math.Sqrt(b * b - 4 * a * c);\n        long s = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long t = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ u = Math.Sqrt(b * b - 4 * a * c);\n        long v = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long w = Math.Sqrt(b * b - 4 * a * c);\n        long x = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long y = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ z = Math.Sqrt(b * b - 4 * a * c);\n        long A = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long B = Math.Sqrt(b * b - 4 * a * c);\n        long C = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long D = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ E = Math.Sqrt(b * b - 4 * a * c);\n        long F = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long G = Math.Sqrt(b * b - 4 * a * c);\n        long H = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long I = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ J = Math.Sqrt(b * b - 4 * a * c);\n        long K = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long L = Math.Sqrt(b * b - 4 * a * c);\n        long M = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long N = Math.Sqrt(b\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmparh3_03j.cs(53,29): error CS1026: ) expected

    /tmp/tmparh3_03j.cs(53,29): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbbc = acbcccbcbb * acbcc;\n     \
    \   long acbcccbcbbcb = acbcccbcbbc * acbcc;\n        long acbcccbcbbcbc = acbcccbcbbcb\
    \ * acbcc;\n        long acbcccbcbbcbcb = acbcccbcbbcbc * acbcc;\n        long\
    \ acbcccbcbbcbcbc = acbcccbcbbcbcb * acbcc;\n        long acbcccbcbbcbcbcb = acbcccbcbbcbcbc\
    \ * acbcc;\n        long acbcccbcbbcbcbcb = acbcccbcbbcbcbcb * acbcc;\n      \
    \  long acbcccbcbbcbcbcbc = acbcccbcbbcbcbcbc * acbcc;\n        long acbcccbcbbcbcbcbc\
    \ = acbcccbcbbcbcbcbc * acbcc;\n        long acbcccbcbbcbcbcbcb = acbcccbcbbcbcbcbc\
    \ * acbcc;\n        long acbcccbcbbcbcbcbcb = acbcccbcbbcbcbcbcb * acbcc;\n  \
    \      long acbcccbcbbcbcbcbcb = acbcccbcbbcbcbcbcb * acbcc;\n        long acbcccbcbbcbcbcbcbc\
    \ = acbcccbcbbcbcbcbcbc * acbcc;\n        long acbcccbc\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp02yfjuf7.cs(43,22): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbc = acbcccbcb * acbcc;\n       \
    \ long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcb = acbcccbcb * acbcc;\n    \
    \    long acbcccbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbc = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n  \
    \      long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n  \
    \      long acbcccbcbcbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb = \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvk9jkeby.cs(46,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpvk9jkeby.cs(46,31): error CS1002: ; expected

    '
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long root2 = root * root;\n        long\
    \ root3 = root * root2;\n        long root4 = root * root3;\n        long root5\
    \ = root * root4;\n        long root6 = root * root5;\n        long root7 = root\
    \ * root6;\n        long root8 = root * root7;\n        long root9 = root * root8;\n\
    \        long root10 = root * root9;\n        long root11 = root * root10;\n \
    \       long root12 = root * root11;\n        long root13 = root * root12;\n \
    \       long root14 = root * root13;\n        long root15 = root * root14;\n \
    \       long root16 = root * root15;\n        long root17 = root * root16;\n \
    \       long root18 = root * root17;\n        long root19 = root * root18;\n \
    \       long root20 = root * root19;\n        long root21 = root * root20;\n \
    \       long root22 = root * root21;\n        long root23 = root * root22;\n \
    \       long root24 = root * root23;\n        long root25 = root * root24;\n \
    \       long root26 = root * root25;\n        long root27 = root * root26;\n \
    \       long root28 = root * root27;\n        long root29 = root * root28;\n \
    \       long root30 = root * root29;\n        long root31 = root * root30;\n \
    \       long root32 = root * root31;\n        long root33 = root * root32;\n \
    \       long root34 = root * root33;\n        long root35 = root * root34;\n \
    \       long root36 = root * root35;\n        long root37 = root * root36;\n \
    \       long root38 = root * root37;\n        long root39 = root * root38;\n \
    \       long root40 = root * root39;\n        long root41 = root * root40;\n \
    \       long root42 = root * root41;\n        long root43 = root * root42;\n \
    \       long root44 = root * root43;\n        long root45 = root * root44;\n \
    \       long root46 = root * root45;\n        long root47 = root * root46;\n \
    \       long root48 = \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvdxmoigh.cs(68,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpvdxmoigh.cs(68,22): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcabc = acbcab * bc;\n        long abcabc = abcab\
    \ * bc;\n        long acbcabbc = acbcabbc * bc;\n        long abcabbc = abcabbc\
    \ * bc;\n        long acbcabcbc = acbcabcbc * bc;\n        long abcabcbc = abcabcbc\
    \ * bc;\n        long acbcabcbcd = acbcabcbcd * bc;\n        long abcabcbcd =\
    \ abcabcbcd * bc;\n        long acbcabcbcde = acbcabcbcde * bc;\n        long\
    \ abcabcbcde = abcabcbcde * bc;\n        long acbcabcbcdef = acbcabcbcdef * bc;\n\
    \        long abcabcbcdef = abcabcbcdef * bc;\n        long acbcabcbcdefg = acbcabcbcdefg\
    \ * bc;\n        long abcabcbcdefg = abcabcbcdefg * bc;\n        long acbcabcbcdefgh\
    \ = acbcabcbcdefgh * bc;\n        long abcabcbcdefgh = abcabcbcdefgh * bc;\n \
    \       long acbcabcbcdefghi = acbcabcbcdefghi * bc;\n        long abcabcbcdefghi\
    \ = abcabcbcdefghi * bc;\n        long acbcabcbcdefghij = acbcabcbcdefghij * bc;\n\
    \        long abcabcbcdefghij = abcabcbcdefghij * bc;\n        long acbcabcbcdefghijk\
    \ = acbcabcbcdefghijk * bc;\n        long abcabcbcdefghijk = abcabcbcdefghijk\
    \ * bc;\n        long acbcabcbcdefghijkl = acbcabcbcdefghijkl * bc;\n        long\
    \ abcabcbcdefghijkl = abcabcbcdefghijkl * bc;\n        long acbcabcbcdef\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_br61pyk.cs(48,26): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n           \
    \ long f = (long) Math.Sqrt(a * a);\n            long g = (long) Math.Sqrt(b *\
    \ b);\n            long h = (long) Math.Sqrt(c * c);\n            long i = (long)\
    \ Math.Sqrt(a * a + b * b);\n            long j = (long) Math.Sqrt(a * a + c *\
    \ c);\n            long k = (long) Math.Sqrt(b * b + c * c);\n            long\
    \ l = (long) Math.Sqrt(a * a * b + b * b + c * c);\n            long m = (long)\
    \ Math.Sqrt(a * a * b + c * c + b * b + c * c);\n            long n = (long) Math.Sqrt(a\
    \ * a * b + c * c + b * b + c * c + a * a);\n            long o = (long) Math.Sqrt(a\
    \ * a * b + c * c + b * b + c * c + a * a + b * b);\n            long p = (long)\
    \ Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a + c * c);\n            long\
    \ q = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a + c * c + b *\
    \ b);\n            long r = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c\
    \ + a * a + c * c + b * b + c * c);\n            long s = (long) Math.Sqrt(a *\
    \ a * b + c * c + b * b + c * c + a * a + c * c + b * b + c * c + a * a);\n  \
    \          long t = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a\
    \ + c * c + b * b + c * c + a * a + b * b);\n            long u = (long) Math.Sqrt(a\
    \ * a * b + c * c + b * b + c * c + a * a + c * c + b * b + c * c + a * a + c\
    \ * c + b * b);\n            long v = (long) Math.Sqrt(a * a * b + c * c + b *\
    \ b + c * c + a * a + c * c + b * b + c * c + a * a + b * b + c * c);\n      \
    \      long w = (long) Math.Sqrt(a * a * b + c * c + b * b\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp07kjzwze.cs(37,64): error CS1026: ) expected

    /tmp/tmp07kjzwze.cs(37,64): error CS1002: ; expected

    /tmp/tmp07kjzwze.cs(39,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp07kjzwze.cs(53,2): error CS1513: } expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbbc = acbcccbcbb * acbcc;\n     \
    \   long acbcccbcbbcd = acbcccbcbbc * acbcc;\n        long acbcccbcbbcde = acbcccbcbbcde\
    \ * acbcc;\n        long acbcccbcbbcdef = acbcccbcbbcdef * acbcc;\n        long\
    \ acbcccbcbbcdefg = acbcccbcbbcdefg * acbcc;\n        long acbcccbcbbcdefgh =\
    \ acbcccbcbbcdefgh * acbcc;\n        long acbcccbcbbcdefghi = acbcccbcbbcdefghi\
    \ * acbcc;\n        long acbcccbcbbcdefghij = acbcccbcbbcdefghij * acbcc;\n  \
    \      long acbcccbcbbcdefghijk = acbcccbcbbcdefghijk * acbcc;\n        long acbcccbcbbcdefghijkl\
    \ = acbcccbcbbcdefghijkl * acbcc;\n        long acbcccbcbbcdefghijkll = acbcccbcbbcdefghijkll\
    \ * acbcc;\n        long acbcccbcbbcdefghijkllm = acbcccbcbbcdefghijkllm * acbcc;\n\
    \        long acbcccbcbbcdefghijkllmm = acbcccbc\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpto0e7j0g.cs(42,48): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcb = abc + bc;\n        long abac\
    \ = abc + ac;\n        long abcab = abc + abc;\n        long abcabc = abcab +\
    \ abc;\n        long abcabcb = abcabc + abc;\n        long abcabcba = abcabca\
    \ + abc;\n        long abcabcbac = abcabcbac + abc;\n        long abcabcbaca =\
    \ abcabcbaca + abc;\n        long abcabcbacab = abcabcbacabc + abc;\n        long\
    \ abcabcbacabc = abcabcbacabc + abcab;\n        long abcabcbacabcb = abcabcbacabcc\
    \ + abcab;\n        long abcabcbacabcba = abcabcbacabcbac + abcab;\n        long\
    \ abcabcbacabcbac = abcabcbacabcbac + abcab;\n        long abcabcbacabcbaca =\
    \ abcabcbacabcbaca + abcab;\n        long abcabcbacabcbacab = abcabcbacabcbacabc\
    \ + abcab;\n        long abcabcbacabcbacabc = abcabcbacabcbacabc + abcab;\n  \
    \      long abcabcbacabcbacabcb = abcabcbacabcbacabcc + abcab;\n        long abcabcbacabcbacabcba\
    \ = abcabcbacabcbacabcbac + abcab;\n        long abcabcbacabcbacabcbac = abcabcbacabcbacabcbac\
    \ + abcab;\n        long abcabcbacabcbacabcbaca = abcabcbacabcbacabcbaca + abcab;\n\
    \        long abcabcbacabcbacabcbacab = abcabcbacabcbacabcbacabc + abcab;\n  \
    \      long abcabcbacabcbacabcbacabc = abcabcbacabcbacabcbacabc + abcab;\n   \
    \     long abcabcbacabcbacabcbacabcb = abcabcbacabcbacabcbacabcc + abcab;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp93dh1303.cs(27,25): error CS0103: The name ''abcabca'' does not exist
    in the current context

    /tmp/tmp93dh1303.cs(30,28): error CS0841: Cannot use local variable ''abcabcbacabc''
    before it is declared

    /tmp/tmp93dh1303.cs(32,30): error CS0103: The name ''abcabcbacabcc'' does not
    exist in the current context

    /tmp/tmp93dh1303.cs(33,31): error CS0841: Cannot use local variable ''abcabcbacabcbac''
    before it is declared

    /tmp/tmp93dh1303.cs(36,34): error CS0841: Cannot use local variable ''abcabcbacabcbacabc''
    before it is declared

    /tmp/tmp93dh1303.cs(38,36): error CS0103: The name ''abcabcbacabcbacabcc'' does
    not exist in the current context

    /tmp/tmp93dh1303.cs(39,37): error CS0841: Cannot use local variable ''abcabcbacabcbacabcbac''
    before it is declared

    /tmp/tmp93dh1303.cs(42,40): error CS0841: Cannot use local variable ''abcabcbacabcbacabcbacabc''
    before it is declared

    /tmp/tmp93dh1303.cs(44,42): error CS0103: The name ''abcabcbacabcbacabcbacabcc''
    does not exist in the current context

    /tmp/tmp93dh1303.cs(28,26): error CS0165: Use of unassigned local variable ''abcabcbac''

    /tmp/tmp93dh1303.cs(29,27): error CS0165: Use of unassigned local variable ''abcabcbaca''

    /tmp/tmp93dh1303.cs(35,33): error CS0165: Use of unassigned local variable ''abcabcbacabcbaca''

    /tmp/tmp93dh1303.cs(41,39): error CS0165: Use of unassigned local variable ''abcabcbacabcbacabcbaca''

    /tmp/tmp93dh1303.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * bc;\n        long acbcab = acb * ab;\n        long acbcabc = acbcab\
    \ * c;\n        long acbcabcb = acbcabc * b;\n        long acbcabcbc = acbcabcb\
    \ * c;\n        long acbcabcbcb = acbcabcbc * b;\n        long acbcabcbcbc = acbcabcbcb\
    \ * c;\n        long acbcabcbcbcb = acbcabcbcbc * b;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * c;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * b;\n    \
    \    long acbcabcbcbcbcbc = acbcabcbcbcbcb * c;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * b;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * c;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * c;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * c;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * b;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * b;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * c;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcb * c;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * c;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * b;\n      \
    \  long acbcabcbcbcbcbcbcbb = acbcabcbcbcbcbcbcbcbb * b;\n        long acbcabcbcbcbcbcbcbcbb\
    \ = acbcabcbcbcbcbcbcbcbb * b;\n        long acb\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg17eb2ha.cs(46,17): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcc = abc + acb;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcc + acbc;\n        long acbca = acbc +\
    \ abc;\n        long abcacb = abcac + acbca;\n        long acbcab = acbca+ abc;\n\
    \        long abcacbc = abcacb + acbcab;\n        long acbcabc = acbcab + abc;\n\
    \        long abcacbca = abcacbc + acbcabc;\n        long acbcabca = acbcabc +\
    \ abc;\n        long abcacbcab = abcacbca+ acbcabca;\n        long acbcabcab =\
    \ acbcabca + abc;\n        long abcacbcabc = abcacbcab + acbcabcab;\n        long\
    \ acbcabcabc = acbcabcab + abc;\n        long abcacbcabca = abcacbcabc + acbcabcaba;\n\
    \        long acbcabcabca = acbcabcaba + abc;\n        long abcacbcabcab = abcacbcabca\
    \ + acbcabcaba;\n        long acbcabcabcab = acbcabcaba + abc;\n        long abcacbcabcabc\
    \ = abcacbcabcab + acbcabcabca;\n        long acbcabcabcabc = acbcabcabcab + abc;\n\
    \        long abcacbcabcabca = abcacbcabcabc + acbcabcabcaba;\n        long acbcabcabcabca\
    \ = acbcabcabcaba + abc;\n        long abcacbcabcabcab = abcacbcabcabca + acbcabcabcaba;\n\
    \        long acbcabcabcabcab = acbcabcabcaba + abc;\n        long abcacbcabcabcabc\
    \ = abcacbcabcabcab + acbcabcabcabca;\n        long acbcabcabcabcabc = acbcabcabcabcab\
    \ + abc;\n        long abcacbcabcabcabca = abcacbcabcabcabc + acbcabcabcabcaba;\n\
    \        long acbcabcabcabcabca = acbcabcabcabcaba + abc;\n        \n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplzff1zna.cs(36,41): error CS0103: The name ''acbcabcaba'' does not exist
    in the current context

    /tmp/tmplzff1zna.cs(37,28): error CS0103: The name ''acbcabcaba'' does not exist
    in the current context

    /tmp/tmplzff1zna.cs(38,43): error CS0103: The name ''acbcabcaba'' does not exist
    in the current context

    /tmp/tmplzff1zna.cs(39,29): error CS0103: The name ''acbcabcaba'' does not exist
    in the current context

    /tmp/tmplzff1zna.cs(42,47): error CS0103: The name ''acbcabcabcaba'' does not
    exist in the current context

    /tmp/tmplzff1zna.cs(43,31): error CS0103: The name ''acbcabcabcaba'' does not
    exist in the current context

    /tmp/tmplzff1zna.cs(44,49): error CS0103: The name ''acbcabcabcaba'' does not
    exist in the current context

    /tmp/tmplzff1zna.cs(45,32): error CS0103: The name ''acbcabcabcaba'' does not
    exist in the current context

    /tmp/tmplzff1zna.cs(48,53): error CS0103: The name ''acbcabcabcabcaba'' does not
    exist in the current context

    /tmp/tmplzff1zna.cs(49,34): error CS0103: The name ''acbcabcabcabcaba'' does not
    exist in the current context

    /tmp/tmplzff1zna.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a + b + c);\n        long g = Math.Sqrt(a +\
    \ b - c);\n        long h = (long) Math.Sqrt(a + b + c - e);\n        long i =\
    \ (long) Math.Sqrt(a + b - e + f);\n        long j = (long) Math.Sqrt(a + b +\
    \ e - f);\n        long k = (long) Math.Sqrt(a + b - e + g);\n        long l =\
    \ (long) Math.Sqrt(a + b + e - g);\n        long m = (long) Math.Sqrt(a + b -\
    \ e + h);\n        long n = (long) Math.Sqrt(a + b + e - h);\n        long o =\
    \ (long) Math.Sqrt(a + b - e + i);\n        long p = (long) Math.Sqrt(a + b +\
    \ e - i);\n        long q = (long) Math.Sqrt(a + b - e + j);\n        long r =\
    \ (long) Math.Sqrt(a + b + e - j);\n        long s = (long) Math.Sqrt(a + b -\
    \ e + k);\n        long t = (long) Math.Sqrt(a + b + e - k);\n        long u =\
    \ (long) Math.Sqrt(a + b - e + l);\n        long v = (long) Math.Sqrt(a + b +\
    \ e - l);\n        long w = (long) Math.Sqrt(a + b - e + m);\n        long x =\
    \ (long) Math.Sqrt(a + b + e - m);\n        long y = (long) Math.Sqrt(a + b -\
    \ e + n);\n        long z = (long) Math.Sqrt(a + b + e - n);\n        long aa\
    \ = (long) Math.Sqrt(a + b - e + o);\n        long ab = (long) Math.Sqrt(a + b\
    \ + e - o);\n        long ac = (long) Math.Sqrt(a + b - e + p);\n        long\
    \ ad = (long) Math.Sqrt(a + b + e - p);\n        long ae = (long) Math.Sqrt(a\
    \ + b - e + q);\n        long af = (long) Math.Sqrt(a + b + e - q);\n        long\
    \ ag = (long) Math.Sqrt(a + b - e + r);\n        long ah = (long\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3o9um0dp.cs(49,20): error CS1525: Invalid expression term ''long''

    /tmp/tmp3o9um0dp.cs(49,24): error CS1026: ) expected

    /tmp/tmp3o9um0dp.cs(49,24): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = d;\
    \ //Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n        long t2 =\
    \ (-b - root) / (2 * a);\n        if (t1 == t2)\n            return true;\n  \
    \      return false;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30bb71d384cb4f04be5861c4c8b27aff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30bb71d384cb4f04be5861c4c8b27aff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794197
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a * a);\n        long g = (long) Math.Sqrt(b\
    \ * b);\n        long h = (long) Math.Sqrt(c * c);\n        long i = (long) Math.Sqrt(a\
    \ * a * b);\n        long j = (long) Math.Sqrt(a * a * c);\n        long k = (long)\
    \ Math.Sqrt(b * b * c);\n        long l = (long) Math.Sqrt(a * a * b * c);\n \
    \       long m = (long) Math.Sqrt(a * a * b * c * c);\n        long n = (long)\
    \ Math.Sqrt(a * a * b * c * c * c);\n        long o = (long) Math.Sqrt(a * a *\
    \ b * c * c * c * c);\n        long p = (long) Math.Sqrt(a * a * b * c * c * c\
    \ * c * c);\n        long q = (long) Math.Sqrt(a * a * b * c * c * c * c * c *\
    \ c);\n        long r = (long) Math.Sqrt(a * a * b * c * c * c * c * c * c * c);\n\
    \        long s = (long) Math.Sqrt(a * a * b * c * c * c * c * c * c * c * c);\n\
    \        long t = (long) Math.Sqrt(a * a * b * c * c * c * c * c * c * c * c *\
    \ c);\n        long u = (long) Math.Sqrt(a * a * b * c * c * c * c * c * c * c\
    \ * c * c);\n        long v = (long) Math.Sqrt(a * a * b * c * c * c * c * c *\
    \ c * c * c * c);\n        long w = (long) Math.Sqrt(a * a * b * c * c * c * c\
    \ * c * c * c * c * c);\n        long x = (long) Math.Sqrt(a * a * b * c * c *\
    \ c * c * c * c * c * c * c * c);\n        long y = (long) Math.Sqrt(a * a * b\
    \ * c * c * c * c * c * c * c * c * c * c);\n        long z = (long) Math.Sqrt(a\
    \ * a * b * c * c * c * \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptmlb7rpb.cs(41,58): error CS1525: Invalid expression term ''}''

    /tmp/tmptmlb7rpb.cs(41,58): error CS1026: ) expected

    /tmp/tmptmlb7rpb.cs(41,58): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abcbc = abcb * bc;\n        long abcbcb = abcbcb *\
    \ bc;\n        long abcbcbc = abcbcbc * bc;\n        long abcbcbcb = abcbcbcb\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long abcbcbcbcbc\
    \ = abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n      \
    \  long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl1sp1_4a.cs(46,13): error CS1001: Identifier expected

    /tmp/tmpl1sp1_4a.cs(46,13): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab * bc;\n\
    \        long acb = ac * bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * bc;\n        long acbca = acbc * abc;\n        long acbcab = acbca *\
    \ abc;\n        long acbcabc = acbcab * abc;\n        long acbcabcb = acbcabc\
    \ * abc;\n        long acbcabcbc = acbcabcb * abc;\n        long acbcabcbcb =\
    \ acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb * abc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * abc;\n        long\
    \ acbcabcbcbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr91jyp5v.cs(45,32): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            double root = Math.Sqrt(d);\n      \
    \      double angle = 180 / Math.PI * Math.Atan2(root, 1);\n            if (angle\
    \ > 180) {\n                angle -= 360;\n            }\n            if (angle\
    \ < -180) {\n                angle += 360;\n            }\n            if (angle\
    \ == 180) {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15482beccbf64800bb888ecda43f9f6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15482beccbf64800bb888ecda43f9f6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794197
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab * bc;\n\
    \        long acb = ac * bc;\n        long abbc = ab * bc;\n        long acab\
    \ = ac * ab;\n        long acbc = ac * b * c;\n        long abcab = ab * c * b;\n\
    \        long abcbc = ab * c * b;\n        long accab = ac * c * ab;\n       \
    \ long acbcab = ac * b * c * ab;\n        long acbcbc = ac * b * c * b;\n    \
    \    long abcabcb = ab * c * b * c;\n        long abcbcab = ab * c * b * c;\n\
    \        long abcbcbc = ab * c * b * c;\n        long accabbc = ac * c * ab *\
    \ b;\n        long acbcabbc = ac * b * c * ab * b;\n        long acbcbcab = ac\
    \ * b * c * ab * c;\n        long acbcbcbc = ac * b * c * ab * c;\n        long\
    \ abcabcbc = ab * c * b * c * c;\n        long abcbcabbc = ab * c * b * c * c;\n\
    \        long abcbcbcab = ab * c * b * c * c;\n        long abcbcbcbc = ab * c\
    \ * b * c * c;\n        long accabbcbc = ac * c * ab * b * c;\n        long acbcabbcbc\
    \ = ac * b * c * ab * b * c;\n        long acbcbcabbc = ac * b * c * ab * b *\
    \ c;\n        long acbcbcbcab = ac * b * c * ab * c * b;\n        long acbcbcbcbc\
    \ = ac * b * c * ab * c * b;\n        long abcabcbcbc = ab * c * b * c * c * c;\n\
    \        long abcbcabbcbc = ab * c * b * c * c * c;\n        long abcbcbcabbc\
    \ = ab * c * b * c * c * c;\n        long abcbcbcbcab = ab * c * b * c * c * c\
    \ * b;\n        long abcbcbcbcbc = ab * c * b * c * c * c * b;\n        long accabbcbcbc\
    \ = ac * c * ab * \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcvfa11zl.cs(51,41): error CS1525: Invalid expression term ''}''

    /tmp/tmpcvfa11zl.cs(51,41): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long acbcab\
    \ = acbc * ab;\n        long acbcabc = acbcab * bc;\n        long acbcabcb = acbcabcb\
    \ * bc;\n        long acbcabcbc = acbcabcbc * bc;\n        long acbcabcbcb = acbcabcbcb\
    \ * bc;\n        long acbcabcbcbc = acbcabcbcbc * bc;\n        long acbcabcbcbcb\
    \ = acbcabcbcbcb * bc;\n        long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n   \
    \     long acbcabcbcbcbcb = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcbc * bc;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwnc6gnzn.cs(36,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpwnc6gnzn.cs(36,34): error CS0841: Cannot use local variable ''acbcabcbcbcbcbcbcbc''
    before it is declared

    /tmp/tmpwnc6gnzn.cs(39,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpwnc6gnzn.cs(40,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpwnc6gnzn.cs(41,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpwnc6gnzn.cs(41,37): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcb''
    does not exist in the current context

    /tmp/tmpwnc6gnzn.cs(42,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpwnc6gnzn.cs(42,37): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcb''
    does not exist in the current context

    /tmp/tmpwnc6gnzn.cs(43,38): error CS0103: The name ''acbcabcbcbcbcbcbcbcbcbc''
    does not exist in the current context

    /tmp/tmpwnc6gnzn.cs(25,25): error CS0165: Use of unassigned local variable ''acbcabcb''

    /tmp/tmpwnc6gnzn.cs(26,26): error CS0165: Use of unassigned local variable ''acbcabcbc''

    /tmp/tmpwnc6gnzn.cs(27,27): error CS0165: Use of unassigned local variable ''acbcabcbcb''

    /tmp/tmpwnc6gnzn.cs(28,28): error CS0165: Use of unassigned local variable ''acbcabcbcbc''

    /tmp/tmpwnc6gnzn.cs(29,29): error CS0165: Use of unassigned local variable ''acbcabcbcbcb''

    /tmp/tmpwnc6gnzn.cs(30,30): error CS0165: Use of unassigned local variable ''acbcabcbcbcbc''

    /tmp/tmpwnc6gnzn.cs(31,31): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcb''

    /tmp/tmpwnc6gnzn.cs(32,32): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbc''

    /tmp/tmpwnc6gnzn.cs(33,33): error CS0165: Use of unassigned local variable ''acbcabcbcbcb'
  timestamp: 1659794197
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcb + ac;\n        long acbca = acbc + abc;\n\
    \        long abcacb = abcac + acb;\n        long acbcab = acbca * abc;\n    \
    \    long abcacbc = abcacb * ac;\n        long acbcabc = acbcab * abc;\n     \
    \   long acbcabcd = acbcabc * acb;\n        long acbcabcde = acbcabc * abc;\n\
    \        long acbcabcdef = acbcabc * abc;\n        long acbcabcdefg = acbcabc\
    \ * abc;\n        long acbcabcdefgh = acbcabc * abc;\n        long acbcabcdefghi\
    \ = acbcabc * abc;\n        long acbcabcdefghij = acbcabc * abc;\n        long\
    \ acbcabcdefghijk = acbcabc * abc;\n        long acbcabcdefghijkl = acbcabc *\
    \ abc;\n        long acbcabcdefghijklmn = acbcabc * abc;\n        long acbcabcdefghijklmno\
    \ = acbcabc * abc;\n        long acbcabcdefghijklmnop = acbcabc * abc;\n     \
    \   long acbcabcdefghijklmnopq = acbcabc * abc;\n        long acbcabcdefghijklmnopr\
    \ = acbcabc * abc;\n        long acbcabcdefghijklmnopqrs = acbcabc * abc;\n  \
    \      long acbcabcdefghijklmnopqrst = acbcabc * abc;\n        long acbcabcdefghijklmnopqrsut\
    \ = acbcabc * abc;\n        long acbcabcdefghijklmnopqrsutv = acbcabc * abc;\n\
    \        long acbcabcdefghijklmnopqrsutvw = acbcabc * abc\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq70nc3ri.cs(48,57): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbbc = acbcccbcbb * acbcc;\n     \
    \   long acbcccbcbbcd = acbcccbcbbc * acbcc;\n        long acbcccbcbbcdd = acbcccbcbbcd\
    \ * acbcc;\n        long acbcccbcbbcddd = acbcccbcbbcddd * acbcc;\n        long\
    \ acbcccbcbbcddde = acbcccbcbbcddde * acbcc;\n        long acbcccbcbbcdddef =\
    \ acbcccbcbbcdddef * acbcc;\n        long acbcccbcbbcdddefg = acbcccbcbbcdddefg\
    \ * acbcc;\n        long acbcccbcbbcdddefgh = acbcccbcbbcdddefgh * acbcc;\n  \
    \      long acbcccbcbbcdddefghi = acbcccbcbbcdddefghi * acbcc;\n        long acbcccbcbbcdddefghij\
    \ = acbcccbcbbcdddefghij * acbcc;\n        long acbcccbcbbcdddefghijk = acbcccbcbbcdddefghijk\
    \ * acbcc;\n        long acbcccbcbbcdddefghijkl = acbcccbcbbcdddefghijkl * acbcc;\n\
    \        long acbcccbcbbcdddefghijklm = acbcccbcbbcdd\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyec5kl4v.cs(42,53): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc + ac;\n        long abcca = abc - ac;\n        long abccaa = abcc + ac;\n\
    \        long abccaab = abcc - ac;\n        long abccaabc = abcc - abc;\n    \
    \    long abccaabcb = abcc - abc;\n        long abccaabcca = abcc - abc;\n   \
    \     long abccaabccaa = abcc - abc;\n        long abccaabccaab = abcc - abc;\n\
    \        long abccaabccaabc = abcc - abc;\n        long abccaabccaabcb = abcc\
    \ - abc;\n        long abccaabccaabcca = abcc - abc;\n        long abccaabccaabccaa\
    \ = abcc - abc;\n        long abccaabccaabccaab = abcc - abc;\n        long abccaabccaabccaabc\
    \ = abcc - abc;\n        long abccaabccaabccaabcb = abcc - abc;\n        long\
    \ abccaabccaabccaabcca = abcc - abc;\n        long abccaabccaabccaabccaa = abcc\
    \ - abc;\n        long abccaabccaabccaabccaab = abcc - abc;\n        long abccaabccaabccaabccaabc\
    \ = abcc - abc;\n        long abccaabccaabccaabccaabcb = abcc - abc;\n       \
    \ long abccaabccaabccaabccaabcca = abcc - abc;\n        long abccaabccaabccaabccaabccaa\
    \ = abcc - abc;\n        long abccaabccaabccaabccaabccaab = abcc - abc;\n    \
    \    long abccaabccaabccaabccaabccaabc = abcc - abc;\n        long abccaabccaabccaabccaabccaabcb\
    \ = abcc - abc;\n        long abccaabccaabccaabccaabccaabcca = abcc - abc;\n \
    \       long abccaabccaabccaabccaabccaabccaa = abcc - abc;\n        long abccaabccaabccaabccaabccaabccaab\
    \ = abcc - abc;\n        long abccaabccaabccaabccaabccaabccaabc = abcc - abc;\n\
    \        long abccaabcca\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ky_62es.cs(53,24): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx03_x9qp.cs(42,13): error CS1001: Identifier expected

    /tmp/tmpx03_x9qp.cs(42,13): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcccb;\n        long acbcccbc =\
    \ acbcccb * acbcccbc;\n        long acbcccbcb = acbcccbc * acbcccbcb;\n      \
    \  long acbcccbcbb = acbcccbcb * acbcccbcbb;\n        long acbcccbcbc = acbcccbcb\
    \ * acbcccbcbc;\n        long acbcccbcbcb = acbcccbcb * acbcccbcbcb;\n       \
    \ long acbcccbcbcbb = acbcccbcb * acbcccbcbcb;\n        long acbcccbcbcbc = acbcccbcb\
    \ * acbcccbcbcb;\n        long acbcccbcbcbc = acbcccbcb * acbcccbcbcbc;\n    \
    \    long acbcccbcbcbcb = acbcccbcb * acbcccbcbcbcb;\n        long acbcccbcbcbcbb\
    \ = acbcccbcb * acbcccbcbcbcb;\n        long acbcccbcbcbcbc = acbcccbcb * acbcccbcbcbcbc;\n\
    \        long acbcccbcbcbcbcb = acbcccbcb * acbcccbcbcbcbcb;\n        long acbcccbcbcbcbcbb\
    \ = acbcccbcb * acbcccbcbcbcbcb;\n        long acbcccbcbcbcbcbc = acbcccbcb *\
    \ acbcccbcbcbcbcbc;\n        long acbcccbcbcbcbcbcb = acbcccbcb * acbcccbcbcbcbcbcb;\n\
    \        long acbcccbcbcbcbcbcbb = acbcccbcb * acbcccbcbcbcbcbcb;\n        long\
    \ acbcccbcbcbcbcbcbc = acb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_wbtau4g.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long x = (long)((-b - root) / 2.0 * a);\n        long y = (long)((-b\
    \ + root) / 2.0 * a);\n        long z = (long)((-b + root) / 2.0 * a);\n     \
    \   if (Math.Abs(x - y) < Math.Abs(x - z) && Math.Abs(x - z) < Math.Abs(y - z))\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7247def48ab4c5fa9cd379e69982acb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7247def48ab4c5fa9cd379e69982acb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abcbc = abcb * bc;\n        long abcbca = abcbc *\
    \ ca;\n        long abcbcb = abcbc * cb;\n        long abcbcba = abcbcb * ba;\n\
    \        long abcbcbb = abcbcb * bb;\n        long abcbcbac = abcbcba * ca;\n\
    \        long abcbcbbc = abcbcbb * cb;\n        long abcbcbacc = abcbcbac * ca;\n\
    \        long abcbcbbca = abcbcbbc * ca;\n        long abcbcbbcb = abcbcbbc *\
    \ cb;\n        long abcbcbaccb = abcbcbacc * cb;\n        long abcbcbbcac = abcbcbbca\
    \ * ca;\n        long abcbcbbcbc = abcbcbbcb * cb;\n        long abcbcbaccbc =\
    \ abcbcbaccb * cb;\n        long abcbcbbcacc = abcbcbbcac * ca;\n        long\
    \ abcbcbbcbca = abcbcbbcbc * ca;\n        long abcbcbbcbcb = abcbcbbcbc * cb;\n\
    \        long abcbcbaccbca = abcbcbaccb * ca;\n        long abcbcbbcbca = abcbcbbcbc\
    \ * ca;\n        long abcbcbbcbcb = abcbcbbcbc * cb;\n        long abcbcbaccbca\
    \ = abcbcbaccb * ca;\n        long abcbcbbcbca = abcbcbbcbc * ca;\n        long\
    \ abcbcbbcbcb = abcbcbbcbc * cb;\n        long abcbcbaccbca = abcbcbaccb * ca;\n\
    \        long abcbcbbcbca = abcbcbbcbc * ca;\n        long abcbcbbcbcb = abcbcbbcbc\
    \ * cb;\n        long ab\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1nngdn9.cs(50,16): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        d = Math.Sqrt(d);\n\
    \        long x = (b + d) / (2 * a);\n        long y = (-b - d) / (2 * a);\n \
    \       return Math.Abs(x) < Math.Abs(y);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzzb3pg82.cs(20,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794197
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n           \
    \ long f = b + e * (b - a);\n            long g = a + e * (c - b);\n         \
    \   long h = Math.Sqrt(f * f + g * g);\n            if (h == 0)\n            \
    \    return true;\n            else\n                return false;\n        }\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9euskh4e.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9euskh4e.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a + b;\n   \
    \     long ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n\
    \        long acb = ac + bc;\n        long abcc = abc + acb;\n        long acbc\
    \ = acb + abc;\n        long abcac = abcc + acbc;\n        long acbca = acbc +\
    \ abc;\n        long abcba = abcac + acbca;\n        long acbcab = acbca+ abc;\n\
    \        long abcacb = abcba+ acbcab;\n        long acbcabc = acbcab+ abc;\n \
    \       long abcbac = abcacb+ acbcabc;\n        long acbcabca = acbcabc+ abc;\n\
    \        long abcbacb = abcbacc+ acbcabca;\n        long acbcabcab = acbcabca+\
    \ abc;\n        long abcbaccb = abcbaccc+ acbcabcab;\n        long acbcabcabc\
    \ = acbcabcab+ abc;\n        long abcbaccbc = abcbaccbc+ acbcabcabc;\n       \
    \ long acbcabcabcd = acbcabcabcd+ abc;\n        long abcbaccbcd= abcbaccbcd+ acbcabcabcd;\n\
    \        long acbcabcabcde = acbcabcabcde+ abc;\n        long abcbaccbcdde= abcbaccbcdde+\
    \ acbcabcabcde;\n        long acbcabcabcdef = acbcabcabcdef+ abc;\n        long\
    \ abcbaccbcddef= abcbaccbcddef+ acbcabcabcdef;\n        long acbcabcabcdefg =\
    \ acbcabcabcdefg+ abc;\n        long abcbaccbcddefg= abcbaccbcddefg+ acbcabcabcdefg;\n\
    \        long acbcabcabcdefgh = acbcabcabcdefgh+ abc;\n        long abcbaccbcddefgh=\
    \ abcbaccbcddefgh+ acbcabcabcdefgh;\n        long acbcabcabcdefghi = acbcabcabcdefghi+\
    \ abc;\n        long abcbaccbcddefghi= abcbaccbcddefghi+ acbcabcabcdefgh\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp75pi71yu.cs(48,65): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n\
    \        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n\
    \        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbc * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n  \
    \      long abcbcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ acbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcppxfxwy.cs(46,23): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d > 0) {\n            long root = (long)Math.Sqrt(d);\n  \
    \          long t1 = (-b + root) / a;\n            long t2 = (-b - root) / a;\n\
    \            if (t1 >= 0 && t2 >= 0) {\n                return true;\n       \
    \     }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <665950693e714ad695b63e59b1a42070>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <665950693e714ad695b63e59b1a42070>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794197
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r09nx7k.cs(17,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(18,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8r09nx7k.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long abac\
    \ = ab * ac;\n        long abcab = ab * abc;\n        long abcabc = ab * abc;\n\
    \        long abcabcb = ab * abc * bc;\n        long abcabcbb = ab * abc * bc;\n\
    \        long abcabcbbc = ab * abc * bc * c;\n        long abcabcbbcd = ab * abc\
    \ * bc * c;\n        long abcabcbbcde = ab * abc * bc * c * e;\n        long abcabcbbcdef\
    \ = ab * abc * bc * c * e;\n        long abcabcbbcdefg = ab * abc * bc * c * e\
    \ * g;\n        long abcabcbbcdefgh = ab * abc * bc * c * e * g;\n        long\
    \ abcabcbbcdefghi = ab * abc * bc * c * e * g * i;\n        long abcabcbbcdefghij\
    \ = ab * abc * bc * c * e * g * i;\n        long abcabcbbcdefghijk = ab * abc\
    \ * bc * c * e * g * i * k;\n        long abcabcbbcdefghijkl = ab * abc * bc *\
    \ c * e * g * i * k;\n        long abcabcbbcdefghijkll = ab * abc * bc * c * e\
    \ * g * i * k * l;\n        long abcabcbbcdefghijkllm = ab * abc * bc * c * e\
    \ * g * i * k * l * m;\n        long abcabcbbcdefghijkllmm = ab * abc * bc * c\
    \ * e * g * i * k * l * m * m;\n        long abcabcbbcdefghijkllmmn = ab * abc\
    \ * bc * c * e * g * i * k * l * m * m * n;\n        long abcabcbbcdefghijkllmmnn\
    \ = ab * abc * bc * c * e * g * i * k * l * m * m * n * n;\n        long abcabcbbcdefghijkllmmnnn\
    \ = ab * abc * bc\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7ds892e.cs(43,54): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = (long) Math.Sqrt(a + b + c);\n        long g = (long) Math.Sqrt(a\
    \ + b - c);\n        long h = (long) Math.Sqrt(a + b + c - e);\n        long i\
    \ = (long) Math.Sqrt(a + b - c - e);\n        long j = (long) Math.Sqrt(a + b\
    \ + c + e);\n        long k = (long) Math.Sqrt(a + b - c + e);\n        long l\
    \ = (long) Math.Sqrt(a + b + c - e);\n        long m = (long) Math.Sqrt(a + b\
    \ - c + e - f);\n        long n = (long) Math.Sqrt(a + b - c - e - f);\n     \
    \   long o = (long) Math.Sqrt(a + b - c + e + f);\n        long p = (long) Math.Sqrt(a\
    \ + b - c - e + f);\n        long q = (long) Math.Sqrt(a + b + c + e - f);\n \
    \       long r = (long) Math.Sqrt(a + b + c - e - f);\n        long s = (long)\
    \ Math.Sqrt(a + b + c + e + f);\n        long t = (long) Math.Sqrt(a + b - c -\
    \ e + f);\n        long u = (long) Math.Sqrt(a + b - c + e - f);\n        long\
    \ v = (long) Math.Sqrt(a + b + c + e + f);\n        long w = (long) Math.Sqrt(a\
    \ + b - c - e - f);\n        long x = (long) Math.Sqrt(a + b - c + e + f);\n \
    \       long y = (long) Math.Sqrt(a + b + c + e - f);\n        long z = (long)\
    \ Math.Sqrt(a + b + c - e - f);\n        long A = (long) Math.Sqrt(a + b + c +\
    \ e + f);\n        long B = (long) Math.Sqrt(a + b - c + e - f);\n        long\
    \ C = (long) Math.Sqrt(a + b - c - e + f);\n        long D = (long) Math.Sqrt(a\
    \ + b + c + e - f);\n        long E = (long) Math.Sqrt(a + b + c - e - f);\n \
    \       long F = (long) Math.Sqrt(a + b + c + e + \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpylrugfgk.cs(47,50): error CS1525: Invalid expression term ''}''

    /tmp/tmpylrugfgk.cs(47,50): error CS1026: ) expected

    /tmp/tmpylrugfgk.cs(47,50): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * bc;\n        long abcac = abc * ac;\n        long acbca = acb * ac;\n\
    \        long abcacb = abcac * bc;\n        long acbcab = acbca * bc;\n      \
    \  long acbcabc = acbcab * bc;\n        long acbcabcb = acbcabc * bc;\n      \
    \  long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n\
    \        long acbcabcbcbc = acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc\
    \ * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppmsv750u.cs(47,22): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc * bc;\n        long acbc\
    \ = acb * c;\n        long abcac = abc * ac;\n        long acbca = acb * ca;\n\
    \        long abcacb = abcac * bc;\n        long acbcab = acbca * c;\n       \
    \ long abcacbc = abcac * b * c;\n        long acbcabc = acbcab * c;\n        long\
    \ abcacbca = abcacb * ca;\n        long acbcabca = acbcab * ca;\n        long\
    \ abcacbcab = abcacbca * bc;\n        long acbcabcab = acbcabca * c;\n       \
    \ long abcacbcabc = abcacbcab * c;\n        long acbcabcabc = acbcabcab * c;\n\
    \        long abcacbcabca = abcacbcab * ca;\n        long acbcabcabca = acbcabcab\
    \ * ca;\n        long abcacbcabcab = abcacbcabca * bc;\n        long acbcabcabcab\
    \ = acbcabcabcab * c;\n        long abcacbcabcabc = abcacbcabcab * c;\n      \
    \  long acbcabcabcabc = acbcabcabcab * c;\n        long abcacbcabcabca = abcacbcabcab\
    \ * ca;\n        long acbcabcabcabca = acbcabcabcab * ca;\n        long abcacbcabcabcab\
    \ = abcacbcabcabca * bc;\n        long acbcabcabcabcab = acbcabcabcabcab * c;\n\
    \        long abcacbcabcabcabc = abcacbcabcabcab * c;\n        long acbcabcabcabcabc\
    \ = acbcabcabcabcab * c;\n        long abcacbcabcabcabca = abcacbcabcabcab * ca;\n\
    \        long acbcabcabcabcabca = acbcabcabcabcab * ca;\n        long abcacbcabcabcabcab\
    \ = abcacbcabcabcabca * bc;\n        long acbcabcabcabcabcab = acbcabcabcabcabcab\
    \ * c;\n        long abcacbcabcabcabcabc = abcac\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1xffdl95.cs(52,41): error CS1002: ; expected

    '
  timestamp: 1659794196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcb = abc + bc;\n        long abcc\
    \ = abc - bc;\n        long abcbc = abcb + cc / 2;\n        long abccc = abcc\
    \ * 2;\n        long abccbc = abccc + bcc / 2;\n        long abcccbc = abcccb\
    \ + cc / 2;\n        long abcccbb = abcccb * 2;\n        long abcccbbc = abcccbb\
    \ + cc / 2;\n        long abcccbbcd = abcccbbc * 2;\n        long abcccbbcde =\
    \ abcccbbcd * 2;\n        long abcccbbcdef = abcccbbcde * 2;\n        long abcccbbcdefg\
    \ = abcccbbcdef * 2;\n        long abcccbbcdefgh = abcccbbcdefg * 2;\n       \
    \ long abcccbbcdefghi = abcccbbcdefgh * 2;\n        long abcccbbcdefghij = abcccbbcdefghi\
    \ * 2;\n        long abcccbbcdefghijk = abcccbbcdefghij * 2;\n        long abcccbbcdefghijkl\
    \ = abcccbbcdefghijk * 2;\n        long abcccbbcdefghijklmn = abcccbbcdefghijkl\
    \ * 2;\n        long abcccbbcdefghijklmnn = abcccbbcdefghijkln * 2;\n        long\
    \ abcccbbcdefghijklmno = abcccbbcdefghijklmn * 2;\n        long abcccbbcdefghijklmnop\
    \ = abcccbbcdefghijklmno * 2;\n        long abcccbbcdefghijklmnopq = abcccbbcdefghijklmnop\
    \ * 2;\n        long abcccbbcdefghijklmnopr = abcccbbcdefghijklmnopq * 2;\n  \
    \      long abcccbbcdefghijklmnoprs = abcccbbcdefghijklmnopr * 2;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptuxnj7ye.cs(24,29): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmptuxnj7ye.cs(26,31): error CS0103: The name ''bcc'' does not exist in the
    current context

    /tmp/tmptuxnj7ye.cs(27,24): error CS0103: The name ''abcccb'' does not exist in
    the current context

    /tmp/tmptuxnj7ye.cs(27,33): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmptuxnj7ye.cs(28,24): error CS0103: The name ''abcccb'' does not exist in
    the current context

    /tmp/tmptuxnj7ye.cs(29,35): error CS0103: The name ''cc'' does not exist in the
    current context

    /tmp/tmptuxnj7ye.cs(40,37): error CS0103: The name ''abcccbbcdefghijkln'' does
    not exist in the current context

    /tmp/tmptuxnj7ye.cs(16,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794197
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n\
    \        long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acbc * acbc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb\
    \ * acbcc;\n        long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbc = acbcccbcb * acbcc;\n       \
    \ long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbb = acbcccbcb * acbcc;\n   \
    \     long acbcccbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcb =\
    \ acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbb = acbcccbcb * acbcc;\n   \
    \     long acbcccbcbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbcbcbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbcb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbcbcbcbcbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbcbcbcbcbc = acbcccbcb * acb\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp22umsq74.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
    \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static bool\
    \ RightAngleTriangle(long a, long b, long c) {\n        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f0fcff106e94c1fa4245653ac3cf924>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794195
