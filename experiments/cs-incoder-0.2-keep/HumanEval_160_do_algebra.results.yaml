language: cs
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += op;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= op;\n                        break;\n                    case \"*\":\n                        oprVal
    *= op;\n                        break;\n                    case \"//\":\n                        oprVal
    /= op;\n                        break;\n                    case \"**\":\n                        oprVal
    **= op;\n                        break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6fdcw99a.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp489jici4.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c409a715203491ba0352f5f910fdc4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c409a715203491ba0352f5f910fdc4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            long
    operand5 = operand[4];\n            long operand6 = operand[5];\n            long
    operand7 = operand[6];\n            long operand8 = operand[7];\n            long
    operand9 = operand[8];\n            long operand10 = operand[9];\n            long
    operand11 = operand[10];\n            long operand12 = operand[11];\n            long
    operand13 = operand[12];\n            long operand14 = operand[13];\n            long
    operand15 = operand[14];\n            long operand16 = operand[15];\n            long
    operand17 = operand[16];\n            long operand18 = operand[17];\n            long
    operand19 = operand[18];\n            long operand20 = operand[19];\n            long
    operand21 = operand[20];\n            long operand22 = operand[21];\n            long
    operand23 = operand[22];\n            long operand24 = operand[23];\n            long
    operand25 = operand[24];\n            long operand26 = operand[25];\n            long
    operand27 = operand[26];\n            long operand28 = operand[27];\n            long
    operand29 = operand[28];\n            long operand30 = operand[29];\n            long
    operand31 = operand[30];\n            long operand32 = operand[31];\n            long
    operand33 = operand[32];\n            long operand34 = operand[33];\n            long
    operand35 = operand[34];\n            long operand36 = operand[35];\n            long
    operand37 = operand[36];\n            long operand38 = operand[37];\n            long
    operand39 = operand[38];\n            long operand40 = operand[39];\n            long
    operand41 = operand[40];\n            long operand42 = operand[41];\n            long
    operand43 = operand[42];\n            long operand44 = operand[43];\n            long
    operand45 = operand[44];\n            long operand46 = operand[45];\n            long
    operand47 = operand[46];\n            long operand48 = operand[47];\n            long
    operand49 = operand[48];\n            long operand50 = operand[49];\n            long
    operand51 = operand[50];\n            long operand52 = operand[51];\n            long
    operand53 = operand[52];\n            \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3c1f_yo6.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3c1f_yo6.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault(x => x.ToString() == opr);\n            if (oprValue
    != 0) {\n                result += oprValue;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a2d2a793eb4047a400cf518fda3334>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a2d2a793eb4047a400cf518fda3334>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2efea23ff8094628982a1b6933276e66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2efea23ff8094628982a1b6933276e66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand2;\n                    break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxhdw966z.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"/\":\n                        if (op2 != 0) {\n                            result
    /= op2;\n                        }\n                        break;\n                    case
    \"//\":\n                        if (op2 != 0) {\n                            result
    /= op2;\n                        }\n                        break;\n                    case
    \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62eb2e9a92fa47f48999ad40a26be730>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62eb2e9a92fa47f48999ad40a26be730>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0464d36d65a41238de57de9eb0ee809>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0464d36d65a41238de57de9eb0ee809>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault(x => x.ToString() == opr);\n            if (oprValue
    != 0) {\n                result += oprValue;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a2d2a793eb4047a400cf518fda3334>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52a2d2a793eb4047a400cf518fda3334>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.First();\n            long operand1 = operand.Last();\n            long
    operand3 = operand.Skip(1).First();\n            switch (opr) {\n                case
    \"+\":\n                    result += operand1 + operand2;\n                    break;\n
    \               case \"-\":\n                    result -= operand1 - operand2;\n
    \                   break;\n                case \"*\":\n                    result
    *= operand1 * operand2;\n                    break;\n                case \"//\":\n
    \                   result /= operand1 / operand2;\n                    break;\n
    \               case \"**\":\n                    result *= operand1;\n                    result
    *= operand2;\n                    break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <621a823884fa4bd6b623f9df57258e2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <621a823884fa4bd6b623f9df57258e2b>:0
    \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by
    zero.\n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x000a5] in <621a823884fa4bd6b623f9df57258e2b>:0 \n  at Problem.Main
    (System.String[] args) [0x000c4] in <621a823884fa4bd6b623f9df57258e2b>:0 \n[ERROR]
    F"
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    **= operand1;\n                    result **= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pftdlnl.cs(50,29): error CS1525: Invalid expression term ''*=''

    /tmp/tmp9pftdlnl.cs(51,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long oprInt in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += oprInt;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= oprInt;\n                        break;\n                    case \"*\":\n
    \                       oprVal *= oprInt;\n                        break;\n                    case
    \"//\":\n                        oprVal /= oprInt;\n                        break;\n
    \                   case \"**\":\n                        oprVal **= oprInt;\n
    \                       break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp25t9oagf.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            foreach
    (long operand in operand) {\n                switch (op) {\n                    case
    \"+\":\n                        result += operand;\n                        break;\n
    \                   case \"-\":\n                        result -= operand;\n
    \                       break;\n                    case \"*\":\n                        result
    *= operand;\n                        break;\n                    case \"//\":\n
    \                       result /= operand;\n                        break;\n                    case
    \"**\":\n                        result *= operand;\n                        result
    *= operand;\n                        break;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsxwjn_i5.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsxwjn_i5.cs(30,27): error CS0136: A local or parameter named ''operand''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyoq0hru.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"/\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d10ab8d6b014f07884ff70edc5f4481>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d10ab8d6b014f07884ff70edc5f4481>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.Lis"
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7l5pi4l.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1af17cd41e64f8ba61915b688fbdfa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1af17cd41e64f8ba61915b688fbdfa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    /= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cafb1f85e844e8799467de6ba0047fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cafb1f85e844e8799467de6ba0047fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72ef1rmp.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp489jici4.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbvso0pn.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7l5pi4l.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyoq0hru.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result = operand1 // operand2;\n
    \                   break;\n                case \"**\":\n                    result
    = operand1 ** operand2;\n                    break;\n            }\n            operand[0]
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp03vh22wj.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp489jici4.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e045a0882e7940df978169778f7621f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e045a0882e7940df978169778f7621f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppvpyb2o5.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.First();\n            long operand1 = operand.Last();\n            switch
    (opr) {\n                case \"+\":\n                    result += operand2;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand2;\n                    break;\n                case \"//\":\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    *= operand2;\n                    break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n            operand.RemoveAt(operand.Count
    - 1);\n            operand.RemoveAt(operand.Count - 1);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0001a] in <229322896620455f83e6e7e38f9f67fb>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <229322896620455f83e6e7e38f9f67fb>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0001a] in <229322896620455f83e6e7e38f9f67fb>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <229322896620455f83e6e7e38f9f67fb>:0 \n"
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long oprVal2 in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += oprVal2;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= oprVal2;\n                        break;\n                    case \"*\":\n
    \                       oprVal *= oprVal2;\n                        break;\n                    case
    \"//\":\n                        oprVal /= oprVal2;\n                        break;\n
    \                   case \"**\":\n                        oprVal **= oprVal2;\n
    \                       break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1avo4bh5.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result /= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc1ba317db754b7191288670bf77afd6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc1ba317db754b7191288670bf77afd6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    /= op3;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <264385f15a204a758d5f6d78ca677b83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <264385f15a204a758d5f6d78ca677b83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand2 = operand.Last();\n            long operand1 = operand.First();\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand1;\n                    break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result /= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51a74d2664fb4f029a3e2a3af164a925>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51a74d2664fb4f029a3e2a3af164a925>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + opr);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <829f593643054563a7a96c63b6b912ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <829f593643054563a7a96c63b6b912ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = Convert.ToInt64(opr);\n            long oprValue2 = Convert.ToInt64(operand[op.Count
    - 1]);\n            switch (opr) {\n                case \"+\":\n                    result
    += oprValue;\n                    break;\n                case \"-\":\n                    result
    -= oprValue;\n                    break;\n                case \"*\":\n                    result
    *= oprValue;\n                    break;\n                case \"//\":\n                    result
    /= oprValue;\n                    break;\n                case \"**\":\n                    result
    *= oprValue2;\n                    break;\n                default:\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0001a] in <17fd3944bcf742cd88d7ceec42cff315>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <17fd3944bcf742cd88d7ceec42cff315>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0001a] in <17fd3944bcf742cd88d7ceec42cff315>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <17fd3944bcf742cd88d7ceec42cff315>:0 \n"
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac97a168854a46d8b4c3f2415340d949>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac97a168854a46d8b4c3f2415340d949>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator: \" + op1);\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpem0k5dfm.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e045a0882e7940df978169778f7621f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e045a0882e7940df978169778f7621f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyoq0hru.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b619b5661cb4cbe94cf75471ae9b3bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b619b5661cb4cbe94cf75471ae9b3bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand[operand.Count - 1];\n            long oprValue2 = operand[operand.Count
    - 2];\n            long oprValue3 = operand[operand.Count - 3];\n            long
    oprValue4 = operand[operand.Count - 4];\n            long oprValue5 = operand[operand.Count
    - 5];\n            long oprValue6 = operand[operand.Count - 6];\n            long
    oprValue7 = operand[operand.Count - 7];\n            long oprValue8 = operand[operand.Count
    - 8];\n            long oprValue9 = operand[operand.Count - 9];\n            long
    oprValue10 = operand[operand.Count - 10];\n            long oprValue11 = operand[operand.Count
    - 11];\n            long oprValue12 = operand[operand.Count - 12];\n            long
    oprValue13 = operand[operand.Count - 13];\n            long oprValue14 = operand[operand.Count
    - 14];\n            long oprValue15 = operand[operand.Count - 15];\n            long
    oprValue16 = operand[operand.Count - 16];\n            long oprValue17 = operand[operand.Count
    - 17];\n            long oprValue18 = operand[operand.Count - 18];\n            long
    oprValue19 = operand[operand.Count - 19];\n            long oprValue20 = operand[operand.Count
    - 20];\n            long oprValue21 = operand[operand.Count - 21];\n            long
    oprValue22 = operand[operand.Count - 22];\n            long oprValue23 = operand[operand.Count
    - 23];\n            long oprValue24 = operand[operand.Count - 24];\n            long
    oprValue25 = operand[operand.Count - 25];\n            long oprValue26 = operand[operand.Count
    - 26];\n            long oprValue27 = operand[operand.Count - 27];\n            long
    oprValue28 = operand[operand.Count - 28];\n            long oprValue29 = operand[operand.Count
    - 29];\n            long oprValue30 = operand[operand.Count - 30];\n            long
    oprValue31 = operand[operand.Count - 31];\n            long oprValue32 = operand[operand.Count
    - 32];\n            \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpte1d90b3.cs(64,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpte1d90b3.cs(70,2): error CS1513: } expected

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault(x => x == 0);\n            long oprValue2 =
    operand.FirstOrDefault(x => x == 1);\n            long oprValue3 = operand.FirstOrDefault(x
    => x == 2);\n            long oprValue4 = operand.FirstOrDefault(x => x == 3);\n
    \           long oprValue5 = operand.FirstOrDefault(x => x == 4);\n            long
    oprValue6 = operand.FirstOrDefault(x => x == 5);\n            long oprValue7 =
    operand.FirstOrDefault(x => x == 6);\n            long oprValue8 = operand.FirstOrDefault(x
    => x == 7);\n            long oprValue9 = operand.FirstOrDefault(x => x == 8);\n
    \           long oprValue10 = operand.FirstOrDefault(x => x == 9);\n            long
    oprValue11 = operand.FirstOrDefault(x => x == 10);\n            long oprValue12
    = operand.FirstOrDefault(x => x == 11);\n            long oprValue13 = operand.FirstOrDefault(x
    => x == 12);\n            long oprValue14 = operand.FirstOrDefault(x => x == 13);\n
    \           long oprValue15 = operand.FirstOrDefault(x => x == 14);\n            long
    oprValue16 = operand.FirstOrDefault(x => x == 15);\n            long oprValue17
    = operand.FirstOrDefault(x => x == 16);\n            long oprValue18 = operand.FirstOrDefault(x
    => x == 17);\n            long oprValue19 = operand.FirstOrDefault(x => x == 18);\n
    \           long oprValue20 = operand.FirstOrDefault(x => x == 19);\n            long
    oprValue21 = operand.FirstOrDefault(x => x == 20);\n            long oprValue22
    = operand.FirstOrDefault(x => x == 21);\n            long oprValue23 = operand.FirstOrDefault(x
    => x == 22);\n            long oprValue24 = operand.FirstOrDefault(x => x == 23);\n
    \           long oprValue25 = operand.FirstOrDefault(x => x == 24);\n            long
    oprValue26 = operand.FirstOrDefault(x => x == 25);\n            long oprValue27
    = operand.FirstOrDefault(x => x == 26);\n            long oprValue28 = operand.FirstOrDefault(x
    => x == 27);\n            long oprValue29 = operand.FirstOrDefault(x => x == 28);\n
    \           long oprValue30 = operand.\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7w6jn306.cs(59,39): error CS1001: Identifier expected

    /tmp/tmp7w6jn306.cs(59,39): error CS1002: ; expected

    /tmp/tmp7w6jn306.cs(61,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp7w6jn306.cs(67,2): error CS1513: } expected

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphdt1bys2.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            switch
    (op2) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3ad4c69bdd64deaa41f717f5e51b4a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3ad4c69bdd64deaa41f717f5e51b4a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long oprVal2 in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += oprVal2;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= oprVal2;\n                        break;\n                    case \"*\":\n
    \                       oprVal *= oprVal2;\n                        break;\n                    case
    \"//\":\n                        oprVal /= oprVal2;\n                        break;\n
    \                   case \"**\":\n                        oprVal **= oprVal2;\n
    \                       break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1avo4bh5.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.FirstOrDefault();\n            switch (opr) {\n                case
    \"+\":\n                    result += operand2;\n                    break;\n
    \               case \"-\":\n                    result -= operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand2;\n                    break;\n
    \               case \"**\":\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n            operand.RemoveAt(0);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6f9e1c0b66444ccbb4a5c6527172610>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6f9e1c0b66444ccbb4a5c6527172610>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    not recognized.\");\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48e5b10bb0444ea4b59ab81c49170e02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48e5b10bb0444ea4b59ab81c49170e02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = Convert.ToInt64(opr);\n            long operandValue = Convert.ToInt64(operand[operand.Count
    - 1]);\n            long oprValue2 = Convert.ToInt64(opr);\n            long operandValue2
    = Convert.ToInt64(operand[operand.Count - 2]);\n            switch (opr) {\n                case
    \"+\":\n                    result += oprValue + operandValue;\n                    break;\n
    \               case \"-\":\n                    result -= oprValue - operandValue;\n
    \                   break;\n                case \"*\":\n                    result
    *= oprValue * operandValue;\n                    break;\n                case
    \"//\":\n                    result /= oprValue / operandValue;\n                    break;\n
    \               case \"**\":\n                    result **= oprValue ** operandValue;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0rggoekd.cs(48,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c42ebe08d2fd4b3593e71a161dedfd19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c42ebe08d2fd4b3593e71a161dedfd19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand1 = operand[0];\n            long operand2 = operand[1];\n
    \           long operand3 = operand[2];\n            long operand4 = operand[3];\n
    \           switch (oper) {\n                case \"+\":\n                    result
    = operand1 + operand2 + operand3 + operand4;\n                    break;\n                case
    \"-\":\n                    result = operand1 - operand2 - operand3 - operand4;\n
    \                   break;\n                case \"*\":\n                    result
    = operand1 * operand2 * operand3 * operand4;\n                    break;\n                case
    \"//\":\n                    result = operand1 / (operand2 % operand3);\n                    break;\n
    \               case \"**\":\n                    result = operand1 * (operand2
    * operand3);\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56de0c645e6c4d14a61ec87462be9274>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56de0c645e6c4d14a61ec87462be9274>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.Lis"
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp489jici4.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand1 = operand[0];\n            long operand2 = operand[1];\n
    \           switch (oper) {\n                case \"+\":\n                    result
    = operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result = operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result = operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    = operand1 // operand2;\n                    break;\n                case \"**\":\n
    \                   result = operand1 ** operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n            operand[0] = result;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdacisrob.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        temp = temp
    + op;\n                        break;\n                    case \"-\":\n                        temp
    = temp - op;\n                        break;\n                    case \"*\":\n
    \                       temp = temp * op;\n                        break;\n                    case
    \"//\":\n                        temp = temp / op;\n                        break;\n
    \                   case \"**\":\n                        temp = temp ** op;\n
    \                       break;\n                }\n            }\n            result
    = result + temp;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps2s59lf_.cs(31,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmps2s59lf_.cs(46,38): error CS0193: The * or -> operator must be applied
    to a pointer

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7729cb7e95d045c0acc688182c64a206>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7729cb7e95d045c0acc688182c64a206>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.FirstOrDefault();\n            long operand1 = operand.Skip(1).FirstOrDefault();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result **= operand1 ** operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnnwvtil6.cs(46,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75336004cee74df9b8e4bd7a34d7f259>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75336004cee74df9b8e4bd7a34d7f259>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e045a0882e7940df978169778f7621f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e045a0882e7940df978169778f7621f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72ef1rmp.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphdt1bys2.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7l5pi4l.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    operand.RemoveAt(0);\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator: \" + opr);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1031379550414082aba76523852c19c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1031379550414082aba76523852c19c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result = operand1 // operand2;\n
    \                   break;\n                case \"**\":\n                    result
    = operand1 ** operand2;\n                    break;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfobqe2c5.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result = operand1 // operand2;\n
    \                   break;\n                case \"**\":\n                    result
    = operand1 ** operand2;\n                    break;\n            }\n            operand[0]
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp03vh22wj.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            long
    operand5 = operand[4];\n            long operand6 = operand[5];\n            long
    operand7 = operand[6];\n            long operand8 = operand[7];\n            long
    operand9 = operand[8];\n            long operand10 = operand[9];\n            long
    operand11 = operand[10];\n            long operand12 = operand[11];\n            long
    operand13 = operand[12];\n            long operand14 = operand[13];\n            long
    operand15 = operand[14];\n            long operand16 = operand[15];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"/\":\n                    result = operand1 / operand2;\n
    \                   break;\n                case \"//\":\n                    result
    = operand1 // operand2;\n                    break;\n                case \"**\":\n
    \                   result = operand1 ** operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3_h9aary.cs(60,38): error CS1002: ; expected

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        temp = temp
    + op;\n                        break;\n                    case \"-\":\n                        temp
    = temp - op;\n                        break;\n                    case \"*\":\n
    \                       temp = temp * op;\n                        break;\n                    case
    \"//\":\n                        temp = temp / op;\n                        break;\n
    \                   case \"**\":\n                        temp = temp ** op;\n
    \                       break;\n                }\n            }\n            result
    += temp;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3qk6kqan.cs(31,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp3qk6kqan.cs(46,38): error CS0193: The * or -> operator must be applied
    to a pointer

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkezihlf.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b34d78588eb9496480e86a0880a1b200>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b34d78588eb9496480e86a0880a1b200>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a37d173681214877aacf67956c635b7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a37d173681214877aacf67956c635b7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7l5pi4l.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + opr);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <829f593643054563a7a96c63b6b912ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <829f593643054563a7a96c63b6b912ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkezihlf.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2cd4833c88f46f7813f25f75ec88ece>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2cd4833c88f46f7813f25f75ec88ece>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"/\":\n                    result
    /= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq5l62xgu.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbdd7bc8d9da4ed79f79d82e541f58eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbdd7bc8d9da4ed79f79d82e541f58eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    **= operand[0];\n                    break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqtf178pa.cs(44,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoba4jfu8.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch(s)
    {\n                case \"+\":\n                    result += operand[0];\n                    break;\n
    \               case \"-\":\n                    result -= operand[0];\n                    break;\n
    \               case \"*\":\n                    result *= operand[0];\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    break;\n
    \               case \"**\":\n                    result *= operand[0];\n                    result
    /= operand[1];\n                    break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <517e46380e524ea0ba4e414fa1fda812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <517e46380e524ea0ba4e414fa1fda812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75336004cee74df9b8e4bd7a34d7f259>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75336004cee74df9b8e4bd7a34d7f259>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = Convert.ToInt64(opr);\n            long oprValue2 = Convert.ToInt64(oprValue);\n
    \           long oprValue3 = Convert.ToInt64(oprValue2);\n            long oprValue4
    = Convert.ToInt64(oprValue3);\n            long oprValue5 = Convert.ToInt64(oprValue4);\n
    \           long oprValue6 = Convert.ToInt64(oprValue5);\n            long oprValue7
    = Convert.ToInt64(oprValue6);\n            long oprValue8 = Convert.ToInt64(oprValue7);\n
    \           long oprValue9 = Convert.ToInt64(oprValue8);\n            long oprValue10
    = Convert.ToInt64(oprValue9);\n            long oprValue11 = Convert.ToInt64(oprValue10);\n
    \           long oprValue12 = Convert.ToInt64(oprValue11);\n            long oprValue13
    = Convert.ToInt64(oprValue12);\n            long oprValue14 = Convert.ToInt64(oprValue13);\n
    \           long oprValue15 = Convert.ToInt64(oprValue14);\n            long oprValue16
    = Convert.ToInt64(oprValue15);\n            long oprValue17 = Convert.ToInt64(oprValue16);\n
    \           long oprValue18 = Convert.ToInt64(oprValue17);\n            long oprValue19
    = Convert.ToInt64(oprValue18);\n            long oprValue20 = Convert.ToInt64(oprValue19);\n
    \           long oprValue21 = Convert.ToInt64(oprValue20);\n            long oprValue22
    = Convert.ToInt64(oprValue21);\n            long oprValue23 = Convert.ToInt64(oprValue22);\n
    \           long oprValue24 = Convert.ToInt64(oprValue23);\n            long oprValue25
    = Convert.ToInt64(oprValue24);\n            long oprValue26 = Convert.ToInt64(oprValue25);\n
    \           long oprValue27 = Convert.ToInt64(oprValue26);\n            long oprValue28
    = Convert.ToInt64(oprValue27);\n            long oprValue29 = Convert.ToInt64(oprValue28);\n
    \           long oprValue30 = Convert.ToInt64(\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph58q_luq.cs(59,47): error CS1026: ) expected

    /tmp/tmph58q_luq.cs(59,47): error CS1002: ; expected

    /tmp/tmph58q_luq.cs(61,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmph58q_luq.cs(67,2): error CS1513: } expected

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c67e4046526049d3b326495ba3752103>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c67e4046526049d3b326495ba3752103>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"/\":\n                    result = operand1 / operand2;\n
    \                   break;\n                case \"//\":\n                    result
    = operand1 // operand2;\n                    break;\n                case \"**\":\n
    \                   result = operand1 ** operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n            operand[0] = result;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm53tnvdt.cs(46,38): error CS1002: ; expected

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new ArgumentException(\"Invalid operator\");\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1badf6dc7b98492a96d8afc430c837d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1badf6dc7b98492a96d8afc430c837d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkezihlf.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += op;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= op;\n                        break;\n                    case \"*\":\n                        oprVal
    *= op;\n                        break;\n                    case \"//\":\n                        oprVal
    /= op;\n                        break;\n                    case \"**\":\n                        oprVal
    **= op;\n                        break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6fdcw99a.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           long oprValue = Convert.ToInt64(opr);\n            switch (opr) {\n
    \               case \"+\":\n                    result += operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0002f] in <39a17085a38d4d91bb3e97d823a3910f>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <39a17085a38d4d91bb3e97d823a3910f>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0002f] in <39a17085a38d4d91bb3e97d823a3910f>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <39a17085a38d4d91bb3e97d823a3910f>:0 \n"
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fac5ddc9bd3b4db8a21b17b44d6be636>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fac5ddc9bd3b4db8a21b17b44d6be636>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphdt1bys2.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkezihlf.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand.FirstOrDefault(x => x.Equals(op))\n                * Convert.ToInt64(op.Substring(op.Length
    - 1));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp35w2poud.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <417a5659ab9a4fb8b9b5eef489a2766e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <417a5659ab9a4fb8b9b5eef489a2766e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand1;\n                    break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd7d459f7e9843e1ad7b2ae24786f600>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd7d459f7e9843e1ad7b2ae24786f600>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        temp = temp
    + op;\n                        break;\n                    case \"-\":\n                        temp
    = temp - op;\n                        break;\n                    case \"*\":\n
    \                       temp = temp * op;\n                        break;\n                    case
    \"//\":\n                        temp = temp / op;\n                        break;\n
    \                   case \"**\":\n                        temp = temp ** op;\n
    \                       break;\n                }\n            }\n            result
    = result + temp;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps2s59lf_.cs(31,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmps2s59lf_.cs(46,38): error CS0193: The * or -> operator must be applied
    to a pointer

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkflnl8yf.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    **= operand[0];\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_n_vxunh.cs(44,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result = operand1 // operand2;\n
    \                   break;\n                case \"**\":\n                    result
    = operand1 ** operand2;\n                    break;\n                default:\n
    \                   throw new Exception(\"Invalid operator\");\n            }\n
    \           operand[0] = result;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvlrr9zh.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrn8etdo.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1af17cd41e64f8ba61915b688fbdfa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1af17cd41e64f8ba61915b688fbdfa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a184d5b63eb4bcbb7098e4256a4f8bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a184d5b63eb4bcbb7098e4256a4f8bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new ArgumentException(\"Invalid operator: \" + op1);\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <766e469772a04586852f31c1aa6eb7e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <766e469772a04586852f31c1aa6eb7e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"/\":\n                        result /= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2538c4a981947a5a598c1f9e674ed1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2538c4a981947a5a598c1f9e674ed1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch(op)
    {\n                case \"+\":\n                    result += operand[0];\n                    break;\n
    \               case \"-\":\n                    result -= operand[0];\n                    break;\n
    \               case \"*\":\n                    result *= operand[0];\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    break;\n
    \               case \"**\":\n                    result *= operand[0];\n                    result
    /= operand[1];\n                    break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl8a8nvko.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ddd0fab125641e983902fd0f64557dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ddd0fab125641e983902fd0f64557dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b619b5661cb4cbe94cf75471ae9b3bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b619b5661cb4cbe94cf75471ae9b3bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ffe19e163b248d5bc33a71655f594b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ffe19e163b248d5bc33a71655f594b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand1 = operand.First();\n            long operand2 = operand.Last();\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand1;\n                    break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    break;\n                default:\n                    throw
    new ArgumentException(\"Operator not found.\");\n            }\n            operand.RemoveAt(operand.Count
    - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba000737090e488aa59fc59c6cfee788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba000737090e488aa59fc59c6cfee788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414fbe373aaf45b89740a1521d78fcb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbvso0pn.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator:
    \" + op);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpue39wf1_.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.FirstOrDefault();\n            long operand1 = operand.LastOrDefault();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"/\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"//\":\n
    \                   result /= operand1;\n                    break;\n                case
    \"**\":\n                    result *= operand1;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04734251025947eb922e4d834002496c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04734251025947eb922e4d834002496c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5252318c666149bc9c318815369f34e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5252318c666149bc9c318815369f34e7>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.Lis"
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    **= operand1;\n                    result **= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxqdet748.cs(50,29): error CS1525: Invalid expression term ''*=''

    /tmp/tmpxqdet748.cs(51,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbvso0pn.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    **= operand[0];\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv6r8jay.cs(44,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b619b5661cb4cbe94cf75471ae9b3bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b619b5661cb4cbe94cf75471ae9b3bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72ef1rmp.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c67e4046526049d3b326495ba3752103>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c67e4046526049d3b326495ba3752103>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7l5pi4l.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.Last();\n            switch (opr) {\n                case \"+\":\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand2;\n                    break;\n
    \               case \"**\":\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ad6ef806bdf4991b2584999198e9ed6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ad6ef806bdf4991b2584999198e9ed6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp489jici4.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72ef1rmp.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           long operand3 = operand.Skip(2).First();\n            switch (opr)
    {\n                case \"+\":\n                    result += operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a25ffd557764f539b9e2e775df24063>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a25ffd557764f539b9e2e775df24063>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7l5pi4l.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrn8etdo.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuzel2iv7.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <597f7500ff244656bc82080e9d84e5d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <597f7500ff244656bc82080e9d84e5d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    **= operand[0];\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_n_vxunh.cs(44,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkezihlf.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand1 = operand[0];\n            long operand2 = operand[1];\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand1;\n                    result += operand2;\n                    break;\n
    \               case \"-\":\n                    result -= operand1;\n                    result
    -= operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"/\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"**\":\n                    result *= operand1;\n                    result
    *= operand2;\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <635c859e8d74485c86d437b103e7e465>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <635c859e8d74485c86d437b103e7e465>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    *= op3;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result **= op3;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjmbl527k.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a184d5b63eb4bcbb7098e4256a4f8bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a184d5b63eb4bcbb7098e4256a4f8bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                oprVal
    += op;\n            }\n            switch (opr) {\n                case \"+\":\n
    \                   result += oprVal;\n                    break;\n                case
    \"-\":\n                    result -= oprVal;\n                    break;\n                case
    \"*\":\n                    result *= oprVal;\n                    break;\n                case
    \"//\":\n                    result /= oprVal;\n                    break;\n                case
    \"**\":\n                    result **= oprVal;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqvqubo5.cs(48,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1af17cd41e64f8ba61915b688fbdfa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1af17cd41e64f8ba61915b688fbdfa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyoq0hru.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdc31242486643e68ba10c860b7b7c94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdc31242486643e68ba10c860b7b7c94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault(x => x == 0);\n            if (oprValue != 0)
    {\n                switch (opr) {\n                    case \"+\":\n                        result
    += oprValue;\n                        break;\n                    case \"-\":\n
    \                       result -= oprValue;\n                        break;\n
    \                   case \"*\":\n                        result *= oprValue;\n
    \                       break;\n                    case \"//\":\n                        result
    /= oprValue;\n                        break;\n                    case \"**\":\n
    \                       result **= oprValue;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpisnfice5.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35fe04f1c7b04f83a4aee422cfa6a452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35fe04f1c7b04f83a4aee422cfa6a452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyb56qce4.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61a14f45bf3747b1b10c20f098d3005e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61a14f45bf3747b1b10c20f098d3005e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoba4jfu8.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"/\":\n                        result /= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92368ae42d7444c8b1d5d19e4469a15b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92368ae42d7444c8b1d5d19e4469a15b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
