name: HumanEval_151_double_the_difference
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
  \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1,\
  \ -2, 0]) == 0\n    // double_the_difference([9, -2]) == 81\n    // double_the_difference([0])\
  \ == 0  \n    // If the input list is empty, return 0.\n    public static long DoubleTheDifference(List<float>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
  \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
  \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
  \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
  \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
  \ == (165L));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        foreach (float f in lst) {\n       \
    \     if (f < 0 || f % 1 != 0) {\n                sum += Math.Pow(f, 2);\n   \
    \         }\n        }\n        return sum;", "        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 != 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;", "        if (lst.Count == 0)\
    \ {\n            return 0;\n        }\n        long sum = 0;\n        foreach\
    \ (float f in lst) {\n            if (f < 0) {\n                continue;\n  \
    \          }\n            if (f % 2 == 0) {\n                sum += f * f;\n \
    \           }\n        }\n        return sum;", "        long sum = 0;\n     \
    \   foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;", "        if (lst.Count == 0) {\n           \
    \ return 0;\n        }\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0) {\n                continue;\n            }\n    \
    \        if (f % 2 != 0) {\n                sum += Math.Pow(f, 2);\n         \
    \   }\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;", "        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0) {\n                continue;\n            }\n    \
    \        if (f % 2 == 0) {\n                sum += f * f;\n            }\n   \
    \     }\n        return sum;", "        if (lst.Count == 0) {\n            return\
    \ 0;\n        }\n        long sum = 0;\n        float sumOfSquares = 0;\n    \
    \    foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += f;\n            sumOfSquares += f * f;\n  \
    \      }\n        return sumOfSquares - (sum * sum);", "        long sum = 0;\n\
    \        foreach (float f in lst) {\n            if (f < 0)\n                continue;\n\
    \            sum += Math.Pow(f, 2);\n        }\n        return sum;", "      \
    \  long sum = 0;\n        foreach (float f in lst) {\n            if (f > 0 &&\
    \ f % 2 == 1) {\n                sum += Math.Pow(f, 2);\n            }\n     \
    \   }\n        return sum;", "        if (lst.Count == 0) {\n            return\
    \ 0;\n        }\n        long sum = 0;\n        foreach (float f in lst) {\n \
    \           if (f < 0) {\n                continue;\n            }\n         \
    \   long d = Convert.ToInt64(f);\n            if (d % 2 == 1) {\n            \
    \    sum += d * d;\n            }\n        }\n        return sum;", "        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            if (num > 0) {\n\
    \                sum += Math.Pow(num, 2);\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        foreach (float f in lst) {\n        \
    \    if (f > 0) sum += Math.Pow(f, 2);\n        }\n        return sum;", "   \
    \     long sum = 0;\n        foreach (float f in lst) {\n            if (f < 0)\n\
    \                continue;\n            if (f % 2 == 1)\n                sum +=\
    \ Math.Pow(f, 2);\n        }\n        return sum;", "        if (lst.Count ==\
    \ 0) {\n            return 0;\n        }\n        long sum = 0;\n        foreach\
    \ (float num in lst) {\n            if (num > 0) {\n                sum += num\
    \ * num;\n            }\n        }\n        return sum;", "        long sum =\
    \ 0;\n        foreach (float f in lst) {\n            if (f > 0 && f % 2 == 1)\
    \ {\n                sum += Math.Pow(f, 2);\n            }\n        }\n      \
    \  return sum;", "        long sum = 0;\n        foreach (float f in lst) {\n\
    \            if (f > 0) sum += Math.Pow(f, 2);\n        }\n        return sum;",
  "        if (lst.Count == 0) {\n            return 0;\n        }\n        long sum\
    \ = 0;\n        foreach (float num in lst) {\n            if (num > 0) {\n   \
    \             sum += Math.Pow(num, 2);\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        foreach (float number in lst) {\n   \
    \         if (number > 0) sum += Math.Pow(number, 2);\n        }\n        return\
    \ sum;", "        if (lst.Count == 0) {\n            return 0;\n        }\n  \
    \      long sum = 0;\n        foreach (float number in lst) {\n            if\
    \ (number < 0) {\n                continue;\n            }\n            sum +=\
    \ Math.Pow(number, 2);\n        }\n        return sum;"]
stop_tokens:
- "\n    }\n"
