language: cs
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long
    numPrimeDigits4 = 0;\n        long numPrimeDigits5 = 0;\n        long numPrimeDigits6
    = 0;\n        long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long
    numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11
    = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n
    \       long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n        long
    numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long numPrimeDigits18
    = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n
    \       long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long
    numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25
    = 0;\n        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n
    \       long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long
    numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32
    = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n
    \       long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n        long
    numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long numPrimeDigits39
    = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41 = 0;\n
    \       long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n        long
    numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n        long numPrimeDigits46
    = 0;\n        long numPrimeDigits47 = 0;\n        long numPrimeDigits48 = 0;\n
    \       long numPrimeDigits49 = 0;\n        long numPrimeDigits50 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5be0c4p.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpo5be0c4p.cs(28,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(29,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(30,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(31,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(32,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(33,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(34,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(35,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(36,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(37,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(38,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(39,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(40,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(41,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(42,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(43,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - 'A';\n            if (digit > 9) {\n                digit
    = digit - 9;\n            }\n            if (digit == 0) {\n                continue;\n
    \           }\n            result += (long)Math.Pow(digit, 2);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8fde6d36a7f4cb089181a7ecd932d88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8fde6d36a7f4cb089181a7ecd932d88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <de5247bcdadc4aacae65a06cb98686a3>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0 \n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <de5247bcdadc4aacae65a06cb98686a3>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0 \n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f0f91c80464c468cce914fe6a5ab80>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <de5247bcdadc4aacae65a06cb98686a3>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0 \n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Invalid
    hexadecimal digit\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91533b2191484ef182245ec8d64c6300>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit\n
    \ at Problem.HexKey (System.String num) [0x0002f] in <91533b2191484ef182245ec8d64c6300>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <91533b2191484ef182245ec8d64c6300>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit\n  at Problem.HexKey (System.String num) [0x0002f] in <91533b2191484ef182245ec8d64c6300>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <91533b2191484ef182245ec8d64c6300>:0
    \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int num = Convert.ToInt32(c);\n            if (num > 9) {\n                num
    -= 10;\n            }\n            if (num % 2 == 0) {\n                result
    += (long)num;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgd0y8k7j.cs(29,17): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long digit = 0;\n        long count = 0;\n        bool isPrime
    = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           sum += digit;\n            count += 1;\n            if (isPrime) {\n
    \               isPrime = IsPrime(digit);\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp38xud558.cs(35,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        bool isPrime = true;\n        foreach (char c in num.ToUpper())
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           long digitValue = Convert.ToInt64(Math.Pow(16, digit));\n            if
    (isPrime) {\n                digitValue += digit;\n            }\n            isPrime
    = IsPrime(digitValue);\n            if (isPrime) {\n                result +=
    digitValue;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmzh94pj.cs(37,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659799413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long pow = 1;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            int d = Convert.ToInt32(c);\n            sum +=
    d * pow;\n            pow *= 16;\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bc7874edc2e4b6db7aa7173df32cfde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bc7874edc2e4b6db7aa7173df32cfde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long sum = 0;\n        foreach (char c in num) {\n            int
    digit = c - '0';\n            sum += digit * digit;\n        }\n        if (sum
    % 2 == 0) {\n            result += 2;\n        }\n        long limit = (long)Math.Sqrt(sum);\n
    \       long limit2 = limit / 2;\n        long limit3 = limit / 3;\n        long
    limit4 = limit / 4;\n        long limit5 = limit / 5;\n        long limit6 = limit
    / 6;\n        long limit7 = limit / 7;\n        long limit8 = limit / 8;\n        long
    limit9 = limit / 9;\n        long limit10 = limit / 10;\n        long limit11
    = limit / 11;\n        long limit12 = limit / 12;\n        long limit13 = limit
    / 13;\n        long limit14 = limit / 14;\n        long limit15 = limit / 15;\n
    \       long limit16 = limit / 16;\n        long limit17 = limit / 17;\n        long
    limit18 = limit / 18;\n        long limit19 = limit / 19;\n        long limit20
    = limit / 20;\n        long limit21 = limit / 21;\n        long limit22 = limit
    / 22;\n        long limit23 = limit / 23;\n        long limit24 = limit / 24;\n
    \       long limit25 = limit / 25;\n        long limit26 = limit / 26;\n        long
    limit27 = limit / 27;\n        long limit28 = limit / 28;\n        long limit29
    = limit / 29;\n        long limit30 = limit / 30;\n        long limit31 = limit
    / 31;\n        long limit32 = limit / 32;\n        long limit33 = limit / 33;\n
    \       long limit34 = limit / 34;\n        long limit35 = limit / 35;\n        long
    limit36 = limit / 36;\n        long limit37 = limit / 37;\n        long limit38
    = limit / 38;\n        long limit39 = limit / 39;\n        long limit40 = limit
    / 40;\n        long limit41 = limit / 41;\n        long limit42 = limit / 42;\n
    \       long limit43 = limit / 43;\n        long limit44 = limit / 44;\n        long
    limit45 = limit / 45;\n        long limit46 = limit / 46;\n        long limit47
    = limit / 47;\n        long limit48 = limit / 48;\n        long limit49 = limit
    / 49;\n        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkjw_0f4t.cs(84,13): error CS1001: Identifier expected

    /tmp/tmpkjw_0f4t.cs(84,13): error CS1002: ; expected

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"Hex digit
    must be between A and F\");\n            }\n            result += (digit - 'A')
    * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lyken87.cs(33,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += digit *
    digit;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            int digit2 = digit * digit;\n            if (digit2
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += digit * digit2;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <2374a097bacf445da1c39e018acbc205>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <2374a097bacf445da1c39e018acbc205>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <2374a097bacf445da1c39e018acbc205>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <2374a097bacf445da1c39e018acbc205>:0 \n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78771f8a4a244e06b29ba17af761c632>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <78771f8a4a244e06b29ba17af761c632>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <78771f8a4a244e06b29ba17af761c632>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <78771f8a4a244e06b29ba17af761c632>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <78771f8a4a244e06b29ba17af761c632>:0
    \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += digit *
    digit;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - 'A';\n            if (digit >= 2 && digit <= 9)
    {\n                result += digit * digit;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff78aff223cb46c49f5771e65847f52b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff78aff223cb46c49f5771e65847f52b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = Convert.ToInt32(c);\n            if (digit == 0) {\n                continue;\n
    \           }\n            result += (digit % 2 == 0 ? 2 : 3);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5de1bc3005433f9dd5dc0852c6f57c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5de1bc3005433f9dd5dc0852c6f57c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        foreach (char c in num.ToUpper()) {\n            int n = (int)c;\n
    \           if (n % 2 == 0) {\n                ret += 2;\n            }\n            else
    if (n % 3 == 0) {\n                ret += 3;\n            }\n            else
    if (n % 5 == 0) {\n                ret += 5;\n            }\n            else
    if (n % 7 == 0) {\n                ret += 7;\n            }\n            else
    if (n % 11 == 0) {\n                ret += 11;\n            }\n            else
    if (n % 13 == 0) {\n                ret += 13;\n            }\n            else
    if (n % 17 == 0) {\n                ret += 17;\n            }\n            else
    if (n % 19 == 0) {\n                ret += 19;\n            }\n            else
    if (n % 23 == 0) {\n                ret += 23;\n            }\n            else
    if (n % 29 == 0) {\n                ret += 29;\n            }\n            else
    if (n % 31 == 0) {\n                ret += 31;\n            }\n            else
    if (n % 37 == 0) {\n                ret += 37;\n            }\n            else
    if (n % 41 == 0) {\n                ret += 41;\n            }\n            else
    if (n % 43 == 0) {\n                ret += 43;\n            }\n            else
    if (n % 47 == 0) {\n                ret += 47;\n            }\n            else
    if (n % 53 == 0) {\n                ret += 53;\n            }\n            else
    if (n % 59 == 0) {\n                ret += 59;\n            }\n            else
    if (n % 61 == 0) {\n                ret += 61;\n            }\n            else
    if (n % 67 == 0) {\n                ret += 67;\n            }\n            else
    if (n % 71 == 0) {\n                ret += 71;\n            }\n            else
    if (n % 73 == 0) {\n                ret += 73;\n            }\n            else
    if (n % 79 == 0) {\n                ret += 79;\n            }\n            else
    if (n % 83 == 0) {\n                ret += 83;\n            }\n            else
    if (n % 89 == 0) {\n                ret += 89;\n            }\n            else
    if (n % 97 == 0) {\n                ret += 97;\n            }\n            else
    if (n % 103 == 0) {\n                ret += 103;\n            }\n            else
    if (n % 107 == 0) {\n                ret += 107;\n            }\n            else
    if (n % 113 == 0) {\n                ret += 113;\n            }\n            else
    if (n % 127 == 0) {\n                ret += 127;\n            }\n            else
    if (n % 131 == 0) {\n                ret += 131;\n            }\n            else
    if (n % 137 == 0) {\n                ret += 137;\n            }\n            else
    if (n % 141 == 0) {\n                ret += 141;\n            }\n            else
    if (n % 147 == 0) {\n                ret += 147;\n            }\n            else
    if (n % 151 == 0) {\n                ret += 151;\n            }\n            else
    if (n % 157 == 0) {\n                ret += 157;\n            }\n            else
    if (n % 16\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpahu1nm7n.cs(134,28): error CS1026: ) expected

    /tmp/tmpahu1nm7n.cs(134,28): error CS1525: Invalid expression term ''}''

    /tmp/tmpahu1nm7n.cs(134,28): error CS1002: ; expected

    /tmp/tmpahu1nm7n.cs(136,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpahu1nm7n.cs(145,2): error CS1513: } expected

    '
  timestamp: 1659799413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += (digit
    * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = Convert.ToInt32(c);\n            if (digit >= 'A' && digit <= 'F') {\n                result
    += (digit - 'A') * Math.Pow(16, num.Length - 1);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp173f3g4m.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long hexDigits = 0;\n        long hexPrimes =
    0;\n        long hexPrimes2 = 0;\n        long hexPrimes3 = 0;\n        long hexPrimes4
    = 0;\n        long hexPrimes5 = 0;\n        long hexPrimes6 = 0;\n        long
    hexPrimes7 = 0;\n        long hexPrimes8 = 0;\n        long hexPrimes9 = 0;\n
    \       long hexPrimes10 = 0;\n        long hexPrimes11 = 0;\n        long hexPrimes12
    = 0;\n        long hexPrimes13 = 0;\n        long hexPrimes14 = 0;\n        long
    hexPrimes15 = 0;\n        long hexPrimes16 = 0;\n        long hexPrimes17 = 0;\n
    \       long hexPrimes18 = 0;\n        long hexPrimes19 = 0;\n        long hexPrimes20
    = 0;\n        long hexPrimes21 = 0;\n        long hexPrimes22 = 0;\n        long
    hexPrimes23 = 0;\n        long hexPrimes24 = 0;\n        long hexPrimes25 = 0;\n
    \       long hexPrimes26 = 0;\n        long hexPrimes27 = 0;\n        long hexPrimes28
    = 0;\n        long hexPrimes29 = 0;\n        long hexPrimes30 = 0;\n        long
    hexPrimes31 = 0;\n        long hexPrimes32 = 0;\n        long hexPrimes33 = 0;\n
    \       long hexPrimes34 = 0;\n        long hexPrimes35 = 0;\n        long hexPrimes36
    = 0;\n        long hexPrimes37 = 0;\n        long hexPrimes38 = 0;\n        long
    hexPrimes39 = 0;\n        long hexPrimes40 = 0;\n        long hexPrimes41 = 0;\n
    \       long hexPrimes42 = 0;\n        long hexPrimes43 = 0;\n        long hexPrimes44
    = 0;\n        long hexPrimes45 = 0;\n        long hexPrimes46 = 0;\n        long
    hexPrimes47 = 0;\n        long hexPrimes48 = 0;\n        long hexPrimes49 = 0;\n
    \       long hexPrimes50 = 0;\n        long hexPrimes51 = 0;\n        long hexPrimes52
    = 0;\n        long hexPrimes53 = 0;\n        long hexPrimes54 = 0;\n        long
    hexPrimes55 = 0;\n        long hexPrimes56 = 0;\n        long hexPrimes57 = 0;\n
    \       long hexPrimes58 = 0;\n        long hexPrimes59 = 0;\n        long hexPrimes60
    = 0;\n        long hexPrimes61 = 0;\n        long hexPrimes62 = 0;\n        long
    hex\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_t54mva.cs(90,17): error CS1002: ; expected

    '
  timestamp: 1659799413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += digit *
    digit;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += (digit
    * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            result += digit
    * Math.Pow(16, num.Length - 1 - c);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpkxwru3.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numKey = 0;\n        long numKey2 = 0;\n        long numKey3 = 0;\n        long
    numKey4 = 0;\n        long numKey5 = 0;\n        long numKey6 = 0;\n        long
    numKey7 = 0;\n        long numKey8 = 0;\n        long numKey9 = 0;\n        long
    numKeyA = 0;\n        long numKeyB = 0;\n        long numKeyC = 0;\n        long
    numKeyD = 0;\n        long numKeyE = 0;\n        long numKeyF = 0;\n        long
    numKeyG = 0;\n        long numKeyH = 0;\n        long numKeyI = 0;\n        long
    numKeyJ = 0;\n        long numKeyK = 0;\n        long numKeyL = 0;\n        long
    numKeyM = 0;\n        long numKeyN = 0;\n        long numKeyO = 0;\n        long
    numKeyP = 0;\n        long numKeyQ = 0;\n        long numKeyR = 0;\n        long
    numKeyS = 0;\n        long numKeyT = 0;\n        long numKeyU = 0;\n        long
    numKeyV = 0;\n        long numKeyW = 0;\n        long numKeyX = 0;\n        long
    numKeyY = 0;\n        long numKeyZ = 0;\n        long numKey0 = 0;\n        long
    numKey1 = 0;\n        long numKey2 = 0;\n        long numKey3 = 0;\n        long
    numKey4 = 0;\n        long numKey5 = 0;\n        long numKey6 = 0;\n        long
    numKey7 = 0;\n        long numKey8 = 0;\n        long numKey9 = 0;\n        long
    numKeyA = 0;\n        long numKeyB = 0;\n        long numKeyC = 0;\n        long
    numKeyD = 0;\n        long numKeyE = 0;\n        long numKeyF = 0;\n        long
    numKeyG = 0;\n        long numKeyH = 0;\n        long numKeyI = 0;\n        long
    numKeyJ = 0;\n        long numKeyK = 0;\n        long numKeyL = 0;\n        long
    numKeyM = 0;\n        long numKeyN = 0;\n        long numKeyO = 0;\n        long
    numKeyP = 0;\n        long numKeyQ = 0;\n        long numKeyR = 0;\n        long
    numKeyS = 0;\n        long numKeyT = 0;\n        long numKeyU = 0;\n        long
    numKeyV = 0;\n        long numKeyW = 0;\n        long numKeyX = 0;\n        long
    numKeyY = 0;\n        long numKeyZ = 0;\n        long numKey0 = 0;\n        long
    numKey1 = 0;\n        long numKey2 = 0;\n        long numKey3 = 0;\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcdguvsb.cs(63,14): error CS0128: A local variable or function named ''numKey2''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(64,14): error CS0128: A local variable or function named ''numKey3''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(65,14): error CS0128: A local variable or function named ''numKey4''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(66,14): error CS0128: A local variable or function named ''numKey5''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(67,14): error CS0128: A local variable or function named ''numKey6''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(68,14): error CS0128: A local variable or function named ''numKey7''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(69,14): error CS0128: A local variable or function named ''numKey8''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(70,14): error CS0128: A local variable or function named ''numKey9''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(71,14): error CS0128: A local variable or function named ''numKeyA''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(72,14): error CS0128: A local variable or function named ''numKeyB''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(73,14): error CS0128: A local variable or function named ''numKeyC''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(74,14): error CS0128: A local variable or function named ''numKeyD''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(75,14): error CS0128: A local variable or function named ''numKeyE''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(76,14): error CS0128: A local variable or function named ''numKeyF''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(77,14): error CS0128: A local variable or function named ''numKeyG''
    is already defined in this scope

    /tmp/tmppcdguvsb.cs(78,14): error CS0128: A local variable or function named ''numKeyH''
    is already defined in this scope

    /'
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigit = 0;\n        long numPrimeDigit2 = 0;\n        long
    numPrimeDigit3 = 0;\n        long numPrimeDigit4 = 0;\n        long numPrimeDigit5
    = 0;\n        long numPrimeDigit6 = 0;\n        long numPrimeDigit7 = 0;\n        long
    numPrimeDigit8 = 0;\n        long numPrimeDigit9 = 0;\n        long numPrimeDigit10
    = 0;\n        long numPrimeDigit11 = 0;\n        long numPrimeDigit12 = 0;\n        long
    numPrimeDigit13 = 0;\n        long numPrimeDigit14 = 0;\n        long numPrimeDigit15
    = 0;\n        long numPrimeDigit16 = 0;\n        long numPrimeDigit17 = 0;\n        long
    numPrimeDigit18 = 0;\n        long numPrimeDigit19 = 0;\n        long numPrimeDigit20
    = 0;\n        long numPrimeDigit21 = 0;\n        long numPrimeDigit22 = 0;\n        long
    numPrimeDigit23 = 0;\n        long numPrimeDigit24 = 0;\n        long numPrimeDigit25
    = 0;\n        long numPrimeDigit26 = 0;\n        long numPrimeDigit27 = 0;\n        long
    numPrimeDigit28 = 0;\n        long numPrimeDigit29 = 0;\n        long numPrimeDigit30
    = 0;\n        long numPrimeDigit31 = 0;\n        long numPrimeDigit32 = 0;\n        long
    numPrimeDigit33 = 0;\n        long numPrimeDigit34 = 0;\n        long numPrimeDigit35
    = 0;\n        long numPrimeDigit36 = 0;\n        long numPrimeDigit37 = 0;\n        long
    numPrimeDigit38 = 0;\n        long numPrimeDigit39 = 0;\n        long numPrimeDigit40
    = 0;\n        long numPrimeDigit41 = 0;\n        long numPrimeDigit42 = 0;\n        long
    numPrimeDigit43 = 0;\n        long numPrimeDigit44 = 0;\n        long numPrimeDigit45
    = 0;\n        long numPrimeDigit46 = 0;\n        long numPrimeDigit47 = 0;\n        long
    numPrimeDigit48 = 0;\n        long numPrimeDigit49 = 0;\n        long numPrimeDigit50
    = 0;\n        long numPrimeDigit51 = 0;\n        long numPrimeDigit52 = 0;\n        long
    numPrimeDigit53 = 0;\n        long numPrimeDigit54 = 0;\n        long numPrimeDigit\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp26a2w9m6.cs(83,27): error CS1002: ; expected

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long temp = 0;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            int x = Convert.ToInt32(c);\n            if (x
    % 2 == 0) {\n                temp += x;\n            }\n        }\n        temp
    = temp * 2;\n        long temp2 = temp;\n        long temp3 = temp;\n        long
    temp4 = temp;\n        long temp5 = temp;\n        long temp6 = temp;\n        long
    temp7 = temp;\n        long temp8 = temp;\n        long temp9 = temp;\n        long
    temp10 = temp;\n        long temp11 = temp;\n        long temp12 = temp;\n        long
    temp13 = temp;\n        long temp14 = temp;\n        long temp15 = temp;\n        long
    temp16 = temp;\n        long temp17 = temp;\n        long temp18 = temp;\n        long
    temp19 = temp;\n        long temp20 = temp;\n        long temp21 = temp;\n        long
    temp22 = temp;\n        long temp23 = temp;\n        long temp24 = temp;\n        long
    temp25 = temp;\n        long temp26 = temp;\n        long temp27 = temp;\n        long
    temp28 = temp;\n        long temp29 = temp;\n        long temp30 = temp;\n        long
    temp31 = temp;\n        long temp32 = temp;\n        long temp33 = temp;\n        long
    temp34 = temp;\n        long temp35 = temp;\n        long temp36 = temp;\n        long
    temp37 = temp;\n        long temp38 = temp;\n        long temp39 = temp;\n        long
    temp40 = temp;\n        long temp41 = temp;\n        long temp42 = temp;\n        long
    temp43 = temp;\n        long temp44 = temp;\n        long temp45 = temp;\n        long
    temp46 = temp;\n        long temp47 = temp;\n        long temp48 = temp;\n        long
    temp49 = temp;\n        long temp50 = temp;\n        long temp51 = temp;\n        long
    temp52 = temp;\n        long temp53 = temp;\n        long temp54 = temp;\n        long
    temp55 = temp;\n        long temp56 = temp;\n        long temp57 = temp;\n        long
    temp58 = temp;\n        long temp59 = temp;\n        long \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9249qv5p.cs(94,13): error CS1001: Identifier expected

    /tmp/tmp9249qv5p.cs(94,13): error CS1002: ; expected

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"Hexadecimal digit must be between 0 and 9\");\n
    \           }\n            result += digit * Math.Pow(16, num.Length - 1 - c);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfq9xa2x.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimes2
    = numPrimes;\n        long numPrimes3 = numPrimes;\n        long numPrimes4 =
    numPrimes;\n        long numPrimes5 = numPrimes;\n        long numPrimes6 = numPrimes;\n
    \       long numPrimes7 = numPrimes;\n        long numPrimes8 = numPrimes;\n        long
    numPrimes9 = numPrimes;\n        long numPrimes10 = numPrimes;\n        long numPrimes11
    = numPrimes;\n        long numPrimes12 = numPrimes;\n        long numPrimes13
    = numPrimes;\n        long numPrimes14 = numPrimes;\n        long numPrimes15
    = numPrimes;\n        long numPrimes16 = numPrimes;\n        long numPrimes17
    = numPrimes;\n        long numPrimes18 = numPrimes;\n        long numPrimes19
    = numPrimes;\n        long numPrimes20 = numPrimes;\n        long numPrimes21
    = numPrimes;\n        long numPrimes22 = numPrimes;\n        long numPrimes23
    = numPrimes;\n        long numPrimes24 = numPrimes;\n        long numPrimes25
    = numPrimes;\n        long numPrimes26 = numPrimes;\n        long numPrimes27
    = numPrimes;\n        long numPrimes28 = numPrimes;\n        long numPrimes29
    = numPrimes;\n        long numPrimes30 = numPrimes;\n        long numPrimes31
    = numPrimes;\n        long numPrimes32 = numPrimes;\n        long numPrimes33
    = numPrimes;\n        long numPrimes34 = numPrimes;\n        long numPrimes35
    = numPrimes;\n        long numPrimes36 = numPrimes;\n        long numPrimes37
    = numPrimes;\n        long numPrimes38 = numPrimes;\n        long numPrimes39
    = numPrimes;\n        long numPrimes40 = numPrimes;\n        long numPrimes41
    = numPrimes;\n        long numPrimes42 = numPrimes;\n        long numPrimes43
    = numPrimes;\n        long \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwc1n4jqg.cs(70,13): error CS1001: Identifier expected

    /tmp/tmpwc1n4jqg.cs(70,13): error CS1002: ; expected

    '
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A' + 1;\n            if (digit < 0 || digit > 9) {\n                throw
    new ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d17c5bd24a403d900351afb6aac189>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00047] in <10d17c5bd24a403d900351afb6aac189>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <10d17c5bd24a403d900351afb6aac189>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00047] in <10d17c5bd24a403d900351afb6aac189>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <10d17c5bd24a403d900351afb6aac189>:0
    \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           result += (digit == 2 || digit == 3 || digit == 5 || digit == 7 ||
    digit == 11 || digit == 13) ? 1 : 0;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cd139ca81ca410a91e9e999baf45b99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cd139ca81ca410a91e9e999baf45b99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long temp = 0;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            int d = Convert.ToInt32(c);\n            if (d
    >= 'A' && d <= 'F') {\n                temp = temp * 16 + d - 'A' + 10;\n            }
    else {\n                temp = temp * 16 + d;\n            }\n        }\n        result
    = temp;\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <220642536d1f40509a8a7f5410f434ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <220642536d1f40509a8a7f5410f434ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += (digit
    * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           result += (digit % 2 == 0) ? digit : -digit;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fa003ac19c3432bb937e1db9b95647c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fa003ac19c3432bb937e1db9b95647c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F') {\n                throw
    new ArgumentException(\"Invalid hexadecimal digit.\");\n            }\n            result
    += (digit - 'A') * Math.Pow(16, digit.Length);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpenm9jwtc.cs(32,58): error CS1061: ''int'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    hexKey = 0;\n        foreach (char c in num.ToUpper()) {\n            hexKey +=
    Convert.ToInt64(c.ToString(), 16);\n        }\n        return hexKey;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <892bf6d3eff8427e80f145e4b00971b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <892bf6d3eff8427e80f145e4b00971b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            result += digit
    * Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7wck8s2.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += digit *
    digit;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += digit *
    digit;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9b7274e468a47649c9503d90d22c186>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9b7274e468a47649c9503d90d22c186>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long
    numPrimeDigits4 = 0;\n        long numPrimeDigits5 = 0;\n        long numPrimeDigits6
    = 0;\n        long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long
    numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11
    = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n
    \       long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n        long
    numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long numPrimeDigits18
    = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n
    \       long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long
    numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25
    = 0;\n        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n
    \       long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long
    numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32
    = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n
    \       long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n        long
    numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long numPrimeDigits39
    = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41 = 0;\n
    \       long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n        long
    numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n        long numPrimeDigits46
    = 0;\n        long numPrimeDigits47 = 0;\n        long numPrimeDigits48 = 0;\n
    \       long numPrimeDigits49 = 0;\n        long numPrimeDigits50 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5be0c4p.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpo5be0c4p.cs(28,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(29,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(30,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(31,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(32,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(33,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(34,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(35,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(36,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(37,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(38,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(39,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(40,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(41,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(42,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(43,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"Invalid hexadecimal digit\");\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <004432078c854178830fa89625940a13>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit\n
    \ at Problem.HexKey (System.String num) [0x00034] in <004432078c854178830fa89625940a13>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <004432078c854178830fa89625940a13>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit\n  at Problem.HexKey (System.String num) [0x00034] in <004432078c854178830fa89625940a13>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <004432078c854178830fa89625940a13>:0
    \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = Convert.ToInt32(c);\n            if (digit > 9) {\n                throw new
    ArgumentException(\"Hex digit must be between 0 and 9\");\n            }\n            result
    += (digit * 16L);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digit must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002e] in <59a4d86e9e564468b2d4423e005f9ae2>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <59a4d86e9e564468b2d4423e005f9ae2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002e] in <59a4d86e9e564468b2d4423e005f9ae2>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <59a4d86e9e564468b2d4423e005f9ae2>:0
    \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            sum += digit * Math.Pow(16, num.Length - 1 - c.Length);\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpamn42qer.cs(32,60): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n            if
    (d >= '0' && d <= '9') {\n                ret += d;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cee14c8d9a4f9497599f522236edaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cee14c8d9a4f9497599f522236edaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long pow = 1;\n        foreach (char c in num) {\n            sum
    += (long)Math.Pow(pow, (int)c);\n            pow *= (int)c;\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef0baec1ca2f45a884103e016ad824a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef0baec1ca2f45a884103e016ad824a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Hexadecimal digit must be between 0 and 9\");\n            }\n
    \           result *= 16;\n            result += digit;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <e27f85c56ed64db2a6c2a4a298bbaa81>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e27f85c56ed64db2a6c2a4a298bbaa81>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <e27f85c56ed64db2a6c2a4a298bbaa81>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <e27f85c56ed64db2a6c2a4a298bbaa81>:0 \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           result += (digit * Math.Pow(16, digit));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhkqqo_o.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    hexKey = 0;\n        long hexDigit = 0;\n        long hexPrime = 0;\n        long
    hexPrimeCount = 0;\n        long hexPrimeCount2 = 0;\n        long hexPrimeCount3
    = 0;\n        long hexPrimeCount4 = 0;\n        long hexPrimeCount5 = 0;\n        long
    hexPrimeCount6 = 0;\n        long hexPrimeCount7 = 0;\n        long hexPrimeCount8
    = 0;\n        long hexPrimeCount9 = 0;\n        long hexPrimeCount10 = 0;\n        long
    hexPrimeCount11 = 0;\n        long hexPrimeCount12 = 0;\n        long hexPrimeCount13
    = 0;\n        long hexPrimeCount14 = 0;\n        long hexPrimeCount15 = 0;\n        long
    hexPrimeCount16 = 0;\n        long hexPrimeCount17 = 0;\n        long hexPrimeCount18
    = 0;\n        long hexPrimeCount19 = 0;\n        long hexPrimeCount20 = 0;\n        long
    hexPrimeCount21 = 0;\n        long hexPrimeCount22 = 0;\n        long hexPrimeCount23
    = 0;\n        long hexPrimeCount24 = 0;\n        long hexPrimeCount25 = 0;\n        long
    hexPrimeCount26 = 0;\n        long hexPrimeCount27 = 0;\n        long hexPrimeCount28
    = 0;\n        long hexPrimeCount29 = 0;\n        long hexPrimeCount30 = 0;\n        long
    hexPrimeCount31 = 0;\n        long hexPrimeCount32 = 0;\n        long hexPrimeCount33
    = 0;\n        long hexPrimeCount34 = 0;\n        long hexPrimeCount35 = 0;\n        long
    hexPrimeCount36 = 0;\n        long hexPrimeCount37 = 0;\n        long hexPrimeCount38
    = 0;\n        long hexPrimeCount39 = 0;\n        long hexPrimeCount40 = 0;\n        long
    hexPrimeCount41 = 0;\n        long hexPrimeCount42 = 0;\n        long hexPrimeCount43
    = 0;\n        long hexPrimeCount44 = 0;\n        long hexPrimeCount45 = 0;\n        long
    hexPrimeCount46 = 0;\n        long hexPrimeCount47 = 0;\n        long hexPrimeCount48
    = 0;\n        long hexPrimeCount49 = 0;\n        long hexPrimeCount50 = 0;\n        long
    hexPrimeCount51 = 0;\n        long hexPrimeCount52 = 0;\n        long hexPrimeCount53
    = 0;\n        long hexPrimeCount54 = 0;\n        long hexPrimeCount55 = 0;\n        long
    hex\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5z_vf77t.cs(84,17): error CS1002: ; expected

    '
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long pow = 1;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            long digit = Convert.ToInt64(c);\n            sum
    += digit * pow;\n            pow *= 16;\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66e535d863dc493498eaed65f8cf5c16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66e535d863dc493498eaed65f8cf5c16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F') {\n                throw
    new ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n            result
    += (digit - 'A') * Math.Pow(16, num.Length);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd1tzx9ro.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long pow = 1;\n        foreach (char c in num.ToUpper()) {\n
    \           int digit = Convert.ToInt32(c);\n            sum += digit * pow;\n
    \           pow *= digit;\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4216b33d4fe4c8fa75d3c9b5d6f76bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4216b33d4fe4c8fa75d3c9b5d6f76bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long digit = 0;\n        bool isPrime = true;\n        foreach
    (char c in num.ToUpper()) {\n            digit = Convert.ToInt64(c);\n            if
    (digit == 0) {\n                isPrime = false;\n                break;\n            }\n
    \           sum += digit;\n        }\n        if (isPrime) {\n            sum
    += 2;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33b7f6e733d3475bbe75f1df763228ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33b7f6e733d3475bbe75f1df763228ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                ret += digit * digit;\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e36e34220fae43adadf7b07f47fda68c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e36e34220fae43adadf7b07f47fda68c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int num = Convert.ToInt32(c);\n            if (num > 9) {\n                num
    -= 10;\n            }\n            result += num;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphzq500bc.cs(29,17): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n            result
    += (digit * Math.Pow(16, digit));\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqp9aet0l.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <de5247bcdadc4aacae65a06cb98686a3>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0 \n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 6) {\n                result += (digit
    * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65c054196f044b78bd35a163bdbe72f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65c054196f044b78bd35a163bdbe72f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f0f91c80464c468cce914fe6a5ab80>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentException(\"Hexadecimal digit
    must be between A and F\");\n            }\n            result += (digit - 'A')
    * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgm94fig.cs(33,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Hexadecimal digits must be between
    0 and 9\");\n            }\n            int power = (int)Math.Pow(16, digit);\n
    \           result += power;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49f1e3e6a609492c92db8a5c986a33f4>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digits must be
    between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in <49f1e3e6a609492c92db8a5c986a33f4>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <49f1e3e6a609492c92db8a5c986a33f4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digits
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in
    <49f1e3e6a609492c92db8a5c986a33f4>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <49f1e3e6a609492c92db8a5c986a33f4>:0 \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit.\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x0002f] in <8577420df54a472aa879df2419aa7005>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8577420df54a472aa879df2419aa7005>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x0002f] in <8577420df54a472aa879df2419aa7005>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8577420df54a472aa879df2419aa7005>:0
    \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A' + 1;\n            if (digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += digit * Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3uql6e6z.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long max = 0;\n        long min = 0;\n        long sum2 = 0;\n
    \       long max2 = 0;\n        long min2 = 0;\n        long sum3 = 0;\n        long
    max3 = 0;\n        long min3 = 0;\n        long sum4 = 0;\n        long max4 =
    0;\n        long min4 = 0;\n        long sum5 = 0;\n        long max5 = 0;\n        long
    min5 = 0;\n        long sum6 = 0;\n        long max6 = 0;\n        long min6 =
    0;\n        long sum7 = 0;\n        long max7 = 0;\n        long min7 = 0;\n        long
    sum8 = 0;\n        long max8 = 0;\n        long min8 = 0;\n        long sum9 =
    0;\n        long max9 = 0;\n        long min9 = 0;\n        long sum10 = 0;\n
    \       long max10 = 0;\n        long min10 = 0;\n        long sum11 = 0;\n        long
    max11 = 0;\n        long min11 = 0;\n        long sum12 = 0;\n        long max12
    = 0;\n        long min12 = 0;\n        long sum13 = 0;\n        long max13 = 0;\n
    \       long min13 = 0;\n        long sum14 = 0;\n        long max14 = 0;\n        long
    min14 = 0;\n        long sum15 = 0;\n        long max15 = 0;\n        long min15
    = 0;\n        long sum16 = 0;\n        long max16 = 0;\n        long min16 = 0;\n
    \       long sum17 = 0;\n        long max17 = 0;\n        long min17 = 0;\n        long
    sum18 = 0;\n        long max18 = 0;\n        long min18 = 0;\n        long sum19
    = 0;\n        long max19 = 0;\n        long min19 = 0;\n        long sum20 = 0;\n
    \       long max20 = 0;\n        long min20 = 0;\n        long sum21 = 0;\n        long
    max21 = 0;\n        long min21 = 0;\n        long sum22 = 0;\n        long max22
    = 0;\n        long min22 = 0;\n        long sum23 = 0;\n        long max23 = 0;\n
    \       long min23 = 0;\n        long sum24 = 0;\n        long max24 = 0;\n        long
    min24 = 0;\n        long sum25 = 0;\n        long max25 = 0;\n        long min25
    = 0;\n        long sum26 = 0;\n        long max26 = 0;\n        long min26 = 0;\n
    \       long sum27 = 0;\n        long max27 = 0;\n        long min27 = 0;\n        long
    sum28 = 0;\n        long max28 = 0;\n        long min28 = 0;\n        long sum29
    = 0;\n        long max29 = 0;\n        long min29 = 0;\n        long sum30 = 0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2wlf2u_m.cs(26,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp2wlf2u_m.cs(27,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp2wlf2u_m.cs(28,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp2wlf2u_m.cs(29,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(30,14): warning CS0219: The variable ''max2'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(31,14): warning CS0219: The variable ''min2'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(32,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(33,14): warning CS0219: The variable ''max3'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(34,14): warning CS0219: The variable ''min3'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(35,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(36,14): warning CS0219: The variable ''max4'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(37,14): warning CS0219: The variable ''min4'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(38,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(39,14): warning CS0219: The variable ''max5'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(40,14): warning CS0219: The variable ''min5'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(41,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(42,14): warning CS0219: The variable ''max6'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(43,14): warning CS0219: The variable ''min6'' is assigned
    but its value is never used

    /tmp/tmp2wlf2u_m.cs(44,14): warning CS0219: The vari'
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        bool isPrime = true;\n        foreach (char c in num.ToUpper())
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < '0' ||
    digit > '9') {\n                continue;\n            }\n            int digitValue
    = digit - '0';\n            if (isPrime) {\n                for (int i = 2; i
    <= digitValue; i++) {\n                    if (digitValue % i == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n            else {\n                for (int i = 2; i <= digitValue;
    i++) {\n                    if (digitValue % i != 0) {\n                        isPrime
    = true;\n                        break;\n                    }\n                }\n
    \           }\n            if (isPrime) {\n                result++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b91a451fd3ef4b038080af6965a0b908>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b91a451fd3ef4b038080af6965a0b908>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799416
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        foreach (char c in num.ToUpper()) {\n            int d = (int)c;\n
    \           if (d >= '0' && d <= '9') {\n                ret += d;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9f565c3804bc9bd288a1c841a4ab4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9f565c3804bc9bd288a1c841a4ab4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799416
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit =
    c - 'A';\n            sum += digit * digit;\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee576633ca094120bd8db7dc8b868ea6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee576633ca094120bd8db7dc8b868ea6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"Hexadecimal
    digit must be between A and F\");\n            }\n            result += (digit
    - 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp14tzwhao.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n            if
    (d >= '0' && d <= '9') {\n                ret += d;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cee14c8d9a4f9497599f522236edaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cee14c8d9a4f9497599f522236edaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            int power = (int)Math.Pow(digit, 2);\n            if
    (power > result) {\n                result = power;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <952142c45bfe4eae8cac6cfa936dc51e>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <952142c45bfe4eae8cac6cfa936dc51e>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <952142c45bfe4eae8cac6cfa936dc51e>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <952142c45bfe4eae8cac6cfa936dc51e>:0 \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        bool isPrime = true;\n        foreach (char c in num.ToUpper())
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                isPrime = false;\n                break;\n            }\n
    \       }\n        if (isPrime) {\n            int length = num.Length;\n            int
    primeDigit = 2;\n            while (primeDigit < length) {\n                if
    (num[primeDigit] == 'A') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == 'B') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == 'C') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == 'D') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == 'E') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == 'F') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == '0') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == '1') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == '2') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == '3') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == '4') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == '5') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == '6') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == '7') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == '8') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == '9') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == 'A') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == 'B') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == 'C') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == 'D') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                if (num[primeDigit]
    == 'E') {\n                    primeDigit++;\n                    continue;\n
    \               }\n                if (num[primeDigit] == 'F') {\n                    primeDigit++;\n
    \                   continue;\n                }\n                break;\n            }\n
    \           int primeDigit2 = primeDig\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp8qiyptf.cs(129,39): error CS1002: ; expected

    /tmp/tmpp8qiyptf.cs(131,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpp8qiyptf.cs(140,2): error CS1513: } expected

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            sum += digit * Math.Pow(16,
    num.Length - 1 - c.Length);\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuqje371d.cs(32,60): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long
    numPrimeDigits4 = 0;\n        long numPrimeDigits5 = 0;\n        long numPrimeDigits6
    = 0;\n        long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long
    numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11
    = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n
    \       long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n        long
    numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long numPrimeDigits18
    = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n
    \       long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long
    numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25
    = 0;\n        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n
    \       long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long
    numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32
    = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n
    \       long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n        long
    numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long numPrimeDigits39
    = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41 = 0;\n
    \       long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n        long
    numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n        long numPrimeDigits46
    = 0;\n        long numPrimeDigits47 = 0;\n        long numPrimeDigits48 = 0;\n
    \       long numPrimeDigits49 = 0;\n        long numPrimeDigits50 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5be0c4p.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpo5be0c4p.cs(28,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(29,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(30,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(31,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(32,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(33,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(34,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(35,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(36,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(37,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(38,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(39,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(40,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(41,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(42,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(43,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long pow = 1;\n        foreach (char c in num) {\n            long
    digit = Convert.ToInt64(Math.Pow(16, (int)c));\n            result += digit *
    pow;\n            pow *= 16;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.OverflowException: Arithmetic operation
    resulted in an overflow.\n  at (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n
    \ at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HexKey (System.String num) [0x00029] in <1605868e1c9a487b83b533cb97545ad0>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <1605868e1c9a487b83b533cb97545ad0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.OverflowException: Arithmetic operation
    resulted in an overflow.\n  at (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n
    \ at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HexKey (System.String num) [0x00029] in <1605868e1c9a487b83b533cb97545ad0>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <1605868e1c9a487b83b533cb97545ad0>:0
    \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        long hexDigit = 0;\n        long
    hexNum = 0;\n        long hexNum2 = 0;\n        long hexNum3 = 0;\n        long
    hexNum4 = 0;\n        long hexNum5 = 0;\n        long hexNum6 = 0;\n        long
    hexNum7 = 0;\n        long hexNum8 = 0;\n        long hexNum9 = 0;\n        long
    hexNum10 = 0;\n        long hexNum11 = 0;\n        long hexNum12 = 0;\n        long
    hexNum13 = 0;\n        long hexNum14 = 0;\n        long hexNum15 = 0;\n        long
    hexNum16 = 0;\n        long hexNum17 = 0;\n        long hexNum18 = 0;\n        long
    hexNum19 = 0;\n        long hexNum20 = 0;\n        long hexNum21 = 0;\n        long
    hexNum22 = 0;\n        long hexNum23 = 0;\n        long hexNum24 = 0;\n        long
    hexNum25 = 0;\n        long hexNum26 = 0;\n        long hexNum27 = 0;\n        long
    hexNum28 = 0;\n        long hexNum29 = 0;\n        long hexNum30 = 0;\n        long
    hexNum31 = 0;\n        long hexNum32 = 0;\n        long hexNum33 = 0;\n        long
    hexNum34 = 0;\n        long hexNum35 = 0;\n        long hexNum36 = 0;\n        long
    hexNum37 = 0;\n        long hexNum38 = 0;\n        long hexNum39 = 0;\n        long
    hexNum40 = 0;\n        long hexNum41 = 0;\n        long hexNum42 = 0;\n        long
    hexNum43 = 0;\n        long hexNum44 = 0;\n        long hexNum45 = 0;\n        long
    hexNum46 = 0;\n        long hexNum47 = 0;\n        long hexNum48 = 0;\n        long
    hexNum49 = 0;\n        long hexNum50 = 0;\n        long hexNum51 = 0;\n        long
    hexNum52 = 0;\n        long hexNum53 = 0;\n        long hexNum54 = 0;\n        long
    hexNum55 = 0;\n        long hexNum56 = 0;\n        long hexNum57 = 0;\n        long
    hexNum58 = 0;\n        long hexNum59 = 0;\n        long hexNum60 = 0;\n        long
    hexNum61 = 0;\n        long hexNum62 = 0;\n        long hexNum63 = 0;\n        long
    hexNum64 = 0;\n        long hexNum65 = 0;\n        long hexNum66 = 0;\n        long
    hexNum67 = 0;\n        long hexNum68 = 0;\n        long hexNum69 = 0;\n        long
    hexNum70 = 0;\n        long hexNum71 = 0;\n        long hexNum\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjwcrkc0j.cs(100,20): error CS1002: ; expected

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimes2
    = numDigits / 2;\n        long numPrimes3 = numDigits / 3;\n        long numPrimes4
    = numDigits / 4;\n        long numPrimes5 = numDigits / 5;\n        long numPrimes6
    = numDigits / 6;\n        long numPrimes7 = numDigits / 7;\n        long numPrimes8
    = numDigits / 8;\n        long numPrimes9 = numDigits / 9;\n        long numPrimes10
    = numDigits / 10;\n        long numPrimes11 = numDigits / 11;\n        long numPrimes12
    = numDigits / 12;\n        long numPrimes13 = numDigits / 13;\n        long numPrimes14
    = numDigits / 14;\n        long numPrimes15 = numDigits / 15;\n        long numPrimes16
    = numDigits / 16;\n        long numPrimes17 = numDigits / 17;\n        long numPrimes18
    = numDigits / 18;\n        long numPrimes19 = numDigits / 19;\n        long numPrimes20
    = numDigits / 20;\n        long numPrimes21 = numDigits / 21;\n        long numPrimes22
    = numDigits / 22;\n        long numPrimes23 = numDigits / 23;\n        long numPrimes24
    = numDigits / 24;\n        long numPrimes25 = numDigits / 25;\n        long numPrimes26
    = numDigits / 26;\n        long numPrimes27 = numDigits / 27;\n        long numPrimes28
    = numDigits / 28;\n        long numPrimes29 = numDigits / 29;\n        long numPrimes30
    = numDigits / 30;\n        long numPrimes31 = numDigits / 31;\n        long numPrimes32
    = numDigits / 32;\n        long numPrimes33 = numDigits / 33;\n        long numPrimes34
    = numDigits / 34;\n        long numPrimes35 = numDigits / 35;\n        long numPrimes36
    = numDigits / 36;\n        long numPrimes37 = numDigits / 37;\n        long numPrimes38
    = numDigits / 38;\n        long numPrimes\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5nonlms.cs(65,23): error CS1002: ; expected

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"Invalid hexadecimal digit: \" + c);\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b267bc5388c4345ba2fbe70e30b0564>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <2b267bc5388c4345ba2fbe70e30b0564>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <2b267bc5388c4345ba2fbe70e30b0564>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <2b267bc5388c4345ba2fbe70e30b0564>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <2b267bc5388c4345ba2fbe70e30b0564>:0
    \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        string hexDigits = \"0123456789ABCDEF\";\n
    \       foreach (char c in hex) {\n            int digit = hexDigits.IndexOf(c);\n
    \           if (digit >= 0) {\n                result += digit * Math.Pow(16,
    hex.Length - 1 - digit);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkza2gu6g.cs(32,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit > 9) {\n                result += (digit - 10) * Math.Pow(16,
    num.Length - 1);\n            } else {\n                result += digit * Math.Pow(16,
    num.Length - 1);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphahnga5c.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphahnga5c.cs(32,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long sum = 0;\n        long sumOfDigits = 0;\n
    \       long sumOfPrimes = 0;\n        long sumOfPrimesInDigits = 0;\n        long
    sumOfPrimesInDigitsInDigits = 0;\n        long sumOfPrimesInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigits = 0;\n        long
    sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigits = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigits
    = 0;\n        long sumOfPrimesInDigitsInDigitsInDigitsInDigitsInDigitsInDigitsInDigit\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhe8cpjy.cs(50,80): error CS1002: ; expected

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - 'A';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"Hex digit\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a68172b6452e446b862fb86a0e6d14f3>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex digit\n  at Problem.HexKey
    (System.String num) [0x00038] in <a68172b6452e446b862fb86a0e6d14f3>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <a68172b6452e446b862fb86a0e6d14f3>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex digit\n  at Problem.HexKey
    (System.String num) [0x00038] in <a68172b6452e446b862fb86a0e6d14f3>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <a68172b6452e446b862fb86a0e6d14f3>:0 \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToCharArray()) {\n            int
    digit = c - '0';\n            if (digit < 0 || digit > 9) {\n                throw
    new ArgumentOutOfRangeException(\"HexKey\", \"Hexadecimal digit must be between
    0 and 9\");\n            }\n            int power = (int)Math.Pow(16, digit);\n
    \           result += power;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digit must be between 0 and 9\nParameter name: HexKey\n  at Problem.HexKey (System.String
    num) [0x00030] in <c9a447c1b8ea4074aa8d6fd2c1f804c5>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c9a447c1b8ea4074aa8d6fd2c1f804c5>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between
    0 and 9\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x00030]
    in <c9a447c1b8ea4074aa8d6fd2c1f804c5>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c9a447c1b8ea4074aa8d6fd2c1f804c5>:0 \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78771f8a4a244e06b29ba17af761c632>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <78771f8a4a244e06b29ba17af761c632>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <78771f8a4a244e06b29ba17af761c632>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <78771f8a4a244e06b29ba17af761c632>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <78771f8a4a244e06b29ba17af761c632>:0
    \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78771f8a4a244e06b29ba17af761c632>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <78771f8a4a244e06b29ba17af761c632>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <78771f8a4a244e06b29ba17af761c632>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <78771f8a4a244e06b29ba17af761c632>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <78771f8a4a244e06b29ba17af761c632>:0
    \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <de5247bcdadc4aacae65a06cb98686a3>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <de5247bcdadc4aacae65a06cb98686a3>:0 \n"
  stdout: ''
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long temp = 0;\n        foreach (char c in num) {\n            int
    digit = c - '0';\n            if (digit > 9) {\n                digit = digit
    - 10;\n            }\n            temp = temp * 16 + digit;\n        }\n        temp
    = temp * 16 + 2;\n        temp = temp * 16 + 3;\n        temp = temp * 16 + 5;\n
    \       temp = temp * 16 + 7;\n        temp = temp * 16 + 11;\n        temp =
    temp * 16 + 13;\n        temp = temp * 16 + 17;\n        temp = temp * 16 + 19;\n
    \       temp = temp * 16 + 23;\n        temp = temp * 16 + 29;\n        temp =
    temp * 16 + 31;\n        temp = temp * 16 + 37;\n        temp = temp * 16 + 41;\n
    \       temp = temp * 16 + 47;\n        temp = temp * 16 + 53;\n        temp =
    temp * 16 + 59;\n        temp = temp * 16 + 61;\n        temp = temp * 16 + 67;\n
    \       temp = temp * 16 + 71;\n        temp = temp * 16 + 73;\n        temp =
    temp * 16 + 79;\n        temp = temp * 16 + 83;\n        temp = temp * 16 + 89;\n
    \       temp = temp * 16 + 97;\n        temp = temp * 16 + 103;\n        temp
    = temp * 16 + 109;\n        temp = temp * 16 + 113;\n        temp = temp * 16
    + 127;\n        temp = temp * 16 + 131;\n        temp = temp * 16 + 137;\n        temp
    = temp * 16 + 143;\n        temp = temp * 16 + 149;\n        temp = temp * 16
    + 151;\n        temp = temp * 16 + 157;\n        temp = temp * 16 + 163;\n        temp
    = temp * 16 + 169;\n        temp = temp * 16 + 175;\n        temp = temp * 16
    + 181;\n        temp = temp * 16 + 191;\n        temp = temp * 16 + 193;\n        temp
    = temp * 16 + 197;\n        temp = temp * 16 + 203;\n        temp = temp * 16
    + 211;\n        temp = temp * 16 + 223;\n        temp = temp * 16 + 227;\n        temp
    = temp * 16 + 229;\n        temp = temp * 16 + 233;\n        temp = temp * 16
    + 239;\n        temp = temp * 16 + 241;\n        temp = temp * 16 + 243;\n        temp
    = temp * 16 + 247;\n        temp = temp * 16 + 251;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8frj9wcl.cs(26,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmp8frj9wcl.cs(25,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659799416
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        long pow = 1;\n        bool isPrime
    = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           pow *= digit;\n        }\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            isPrime = isPrime && (digit % pow == 0);\n
    \       }\n        if (isPrime) {\n            result += 1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c437a6cc392493aad84a4890ff32bf1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c437a6cc392493aad84a4890ff32bf1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f0f91c80464c468cce914fe6a5ab80>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit == 0 ||
    digit == 1 || digit == 2 || digit == 3 || digit == 4 || digit == 5 || digit ==
    6 || digit == 7 || digit == 8 || digit == 9 || digit == 10 || digit == 11 || digit
    == 13 || digit == 17 || digit == 19 || digit == 23) {\n                result
    += 1;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf550c4a191a4cf383ed7aa8555af581>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf550c4a191a4cf383ed7aa8555af581>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799416
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit == 0 ||
    digit == 1) {\n                ret += digit;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8f9ff2aa64647b885140bcd02cadc01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8f9ff2aa64647b885140bcd02cadc01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799416
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long hexDigit = 0;\n        long hexValue = 0;\n        bool
    isPrime = true;\n        foreach (char c in num.ToUpper()) {\n            hexDigit
    = Convert.ToInt64(c);\n            hexValue = hexDigit / 16;\n            if (hexValue
    % 2 == 0) {\n                isPrime = false;\n            }\n            if (isPrime)
    {\n                result += hexValue;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3ff15f26d8547228b22c182b91d866b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3ff15f26d8547228b22c182b91d866b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long
    numPrimeDigits4 = 0;\n        long numPrimeDigits5 = 0;\n        long numPrimeDigits6
    = 0;\n        long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long
    numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11
    = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n
    \       long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n        long
    numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long numPrimeDigits18
    = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n
    \       long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long
    numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25
    = 0;\n        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n
    \       long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long
    numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32
    = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n
    \       long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n        long
    numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long numPrimeDigits39
    = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41 = 0;\n
    \       long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n        long
    numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n        long numPrimeDigits46
    = 0;\n        long numPrimeDigits47 = 0;\n        long numPrimeDigits48 = 0;\n
    \       long numPrimeDigits49 = 0;\n        long numPrimeDigits50 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5be0c4p.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpo5be0c4p.cs(28,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(29,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(30,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(31,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(32,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(33,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(34,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(35,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(36,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(37,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(38,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(39,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(40,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(41,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(42,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(43,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7414499d53e14d9aad4844d659438c99>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00040] in <7414499d53e14d9aad4844d659438c99>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <7414499d53e14d9aad4844d659438c99>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00040] in <7414499d53e14d9aad4844d659438c99>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <7414499d53e14d9aad4844d659438c99>:0
    \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numOfDigits = 0;\n        bool isPrime = true;\n        long numOfPrimes = 0;\n
    \       long numOfPrimesPerDigit = 2;\n        long numOfPrimesPerDigit2 = 2;\n
    \       long numOfPrimesPerDigit3 = 2;\n        long numOfPrimesPerDigit4 = 2;\n
    \       long numOfPrimesPerDigit5 = 2;\n        long numOfPrimesPerDigit6 = 2;\n
    \       long numOfPrimesPerDigit7 = 2;\n        long numOfPrimesPerDigit8 = 2;\n
    \       long numOfPrimesPerDigit9 = 2;\n        long numOfPrimesPerDigit10 = 2;\n
    \       long numOfPrimesPerDigit11 = 2;\n        long numOfPrimesPerDigit12 =
    2;\n        long numOfPrimesPerDigit13 = 2;\n        long numOfPrimesPerDigit14
    = 2;\n        long numOfPrimesPerDigit15 = 2;\n        long numOfPrimesPerDigit16
    = 2;\n        long numOfPrimesPerDigit17 = 2;\n        long numOfPrimesPerDigit18
    = 2;\n        long numOfPrimesPerDigit19 = 2;\n        long numOfPrimesPerDigit20
    = 2;\n        long numOfPrimesPerDigit21 = 1;\n        long numOfPrimesPerDigit22
    = 1;\n        long numOfPrimesPerDigit23 = 1;\n        long numOfPrimesPerDigit24
    = 1;\n        long numOfPrimesPerDigit25 = 1;\n        long numOfPrimesPerDigit26
    = 1;\n        long numOfPrimesPerDigit27 = 1;\n        long numOfPrimesPerDigit28
    = 1;\n        long numOfPrimesPerDigit29 = 1;\n        long numOfPrimesPerDigit30
    = 1;\n        long numOfPrimesPerDigit31 = 1;\n        long numOfPrimesPerDigit32
    = 1;\n        long numOfPrimesPerDigit33 = 1;\n        long numOfPrimesPerDigit34
    = 1;\n        long numOfPrimesPerDigit35 = 1;\n        long numOfPrimesPerDigit36
    = 1;\n        long numOfPrimesPerDigit37 = 1;\n        long numOfPrimesPerDigit38
    = 1;\n        long numOfPrimesPerDigit39 = 1;\n        long numOfPrimesPerDigit40
    = 1;\n        long numOfPrimesPerDigit41 = 1;\n        long numOfPrimesPerDigit42
    = 1;\n        long numOfPrimesPerDigit43 = 1;\n        long numOfPrimesPerDigit44
    = 1;\n        long numOfPrimes\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnlcmd1ff.cs(73,25): error CS1002: ; expected

    '
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f0f91c80464c468cce914fe6a5ab80>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit >= 2 && digit <= 9) {\n                result
    += digit * digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40316a6ac751426f8833499224a0e9c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40316a6ac751426f8833499224a0e9c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 0 && digit <= 9) {\n                result += (digit
    * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8566d55f1ea549baaa9bc72ea7705aab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8566d55f1ea549baaa9bc72ea7705aab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A' + 1;\n            if (digit < 0 || digit > 9) {\n                throw
    new ArgumentOutOfRangeException(\"num\");\n            }\n            result +=
    (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b30abfa106a14fc79eb68fc1b8d3b6e0>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00036] in <b30abfa106a14fc79eb68fc1b8d3b6e0>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <b30abfa106a14fc79eb68fc1b8d3b6e0>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00036] in <b30abfa106a14fc79eb68fc1b8d3b6e0>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <b30abfa106a14fc79eb68fc1b8d3b6e0>:0 \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"Hex digits must be between 0 and 9\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b888ec277574f84a54d184097e42f93>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <7b888ec277574f84a54d184097e42f93>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <7b888ec277574f84a54d184097e42f93>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <7b888ec277574f84a54d184097e42f93>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <7b888ec277574f84a54d184097e42f93>:0
    \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long
    numPrimeDigits4 = 0;\n        long numPrimeDigits5 = 0;\n        long numPrimeDigits6
    = 0;\n        long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long
    numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11
    = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n
    \       long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n        long
    numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long numPrimeDigits18
    = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n
    \       long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long
    numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25
    = 0;\n        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n
    \       long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long
    numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32
    = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n
    \       long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n        long
    numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long numPrimeDigits39
    = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41 = 0;\n
    \       long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n        long
    numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n        long numPrimeDigits46
    = 0;\n        long numPrimeDigits47 = 0;\n        long numPrimeDigits48 = 0;\n
    \       long numPrimeDigits49 = 0;\n        long numPrimeDigits50 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5be0c4p.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpo5be0c4p.cs(28,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(29,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(30,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(31,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(32,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(33,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(34,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(35,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(36,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(37,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(38,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(39,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(40,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(41,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(42,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(43,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                result
    += Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe72btctm.cs(31,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimes2
    = numDigits / 2;\n        long numPrimes3 = numDigits / 3;\n        long numPrimes4
    = numDigits / 4;\n        long numPrimes5 = numDigits / 5;\n        long numPrimes6
    = numDigits / 6;\n        long numPrimes7 = numDigits / 7;\n        long numPrimes8
    = numDigits / 8;\n        long numPrimes9 = numDigits / 9;\n        long numPrimes10
    = numDigits / 10;\n        long numPrimes11 = numDigits / 11;\n        long numPrimes12
    = numDigits / 12;\n        long numPrimes13 = numDigits / 13;\n        long numPrimes14
    = numDigits / 14;\n        long numPrimes15 = numDigits / 15;\n        long numPrimes16
    = numDigits / 16;\n        long numPrimes17 = numDigits / 17;\n        long numPrimes18
    = numDigits / 18;\n        long numPrimes19 = numDigits / 19;\n        long numPrimes20
    = numDigits / 20;\n        long numPrimes21 = numDigits / 21;\n        long numPrimes22
    = numDigits / 22;\n        long numPrimes23 = numDigits / 23;\n        long numPrimes24
    = numDigits / 24;\n        long numPrimes25 = numDigits / 25;\n        long numPrimes26
    = numDigits / 26;\n        long numPrimes27 = numDigits / 27;\n        long numPrimes28
    = numDigits / 28;\n        long numPrimes29 = numDigits / 29;\n        long numPrimes30
    = numDigits / 30;\n        long numPrimes31 = numDigits / 31;\n        long numPrimes32
    = numDigits / 32;\n        long numPrimes33 = numDigits / 33;\n        long numPrimes34
    = numDigits / 34;\n        long numPrimes35 = numDigits / 35;\n        long numPrimes36
    = numDigits / 36;\n        long numPrimes37 = numDigits / 37;\n        long numPrimes38
    = numDigits / 38;\n        long numPrimes\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5nonlms.cs(65,23): error CS1002: ; expected

    '
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <19bb39189308481b9807926fa0df6fd2>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <19bb39189308481b9807926fa0df6fd2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <19bb39189308481b9807926fa0df6fd2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <19bb39189308481b9807926fa0df6fd2>:0 \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00040] in <b451873f699b4826a9f63b03a86833e0>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <b451873f699b4826a9f63b03a86833e0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00040] in <b451873f699b4826a9f63b03a86833e0>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <b451873f699b4826a9f63b03a86833e0>:0
    \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Hexadecimal digits must be between 0 and 9\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac775ec987954a6c86b30685b1f3f51b>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digits must be
    between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <ac775ec987954a6c86b30685b1f3f51b>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <ac775ec987954a6c86b30685b1f3f51b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digits
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <ac775ec987954a6c86b30685b1f3f51b>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <ac775ec987954a6c86b30685b1f3f51b>:0 \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            digit = Convert.ToInt64(c);\n            if (digit
    == 0) {\n                throw new Exception(\"Invalid hexadecimal number\");\n
    \           }\n            result += (digit % 2 == 0 ? 1 : 0);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73e55fbf09fa4ba7890396700e932b54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73e55fbf09fa4ba7890396700e932b54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToCharArray()) {\n            int
    digit = c - '0';\n            if (digit >= 2 && digit <= 9) {\n                result
    += (digit * digit);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <853530ae956e45ba81740b44bb1bfbff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <853530ae956e45ba81740b44bb1bfbff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit.\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e09adc0d114643bc88a52bd68cd714c6>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x0002f] in <e09adc0d114643bc88a52bd68cd714c6>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e09adc0d114643bc88a52bd68cd714c6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x0002f] in <e09adc0d114643bc88a52bd68cd714c6>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e09adc0d114643bc88a52bd68cd714c6>:0
    \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int d = Convert.ToInt32(c);\n            if (d >= '0' && d <= '9')
    {\n                result += (d - (int)'0');\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32cca28d5a1249dfba0974ac6f37a1e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32cca28d5a1249dfba0974ac6f37a1e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Hexadecimal digit must be between 0 and 9\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6682e53279ba4215a432d46a7730bb9f>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must be
    between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <6682e53279ba4215a432d46a7730bb9f>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <6682e53279ba4215a432d46a7730bb9f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <6682e53279ba4215a432d46a7730bb9f>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <6682e53279ba4215a432d46a7730bb9f>:0 \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int d = Convert.ToInt32(c);\n            if (d >= 'A' && d <= 'F')
    {\n                result += (d - 'A' + 10);\n            } else {\n                result
    += (d - '0');\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f033d4b29546475baf7442d27fd7de9c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f033d4b29546475baf7442d27fd7de9c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n            if
    (d >= '0' && d <= '9') {\n                ret += d;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cee14c8d9a4f9497599f522236edaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cee14c8d9a4f9497599f522236edaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numOfDigits = 0;\n        long numOfPrimes = 0;\n        long numOfPrimes2 = 0;\n
    \       long numOfPrimes3 = 0;\n        long numOfPrimes4 = 0;\n        long numOfPrimes5
    = 0;\n        long numOfPrimes6 = 0;\n        long numOfPrimes7 = 0;\n        long
    numOfPrimes8 = 0;\n        long numOfPrimes9 = 0;\n        long numOfPrimes10
    = 0;\n        long numOfPrimes11 = 0;\n        long numOfPrimes12 = 0;\n        long
    numOfPrimes13 = 0;\n        long numOfPrimes14 = 0;\n        long numOfPrimes15
    = 0;\n        long numOfPrimes16 = 0;\n        long numOfPrimes17 = 0;\n        long
    numOfPrimes18 = 0;\n        long numOfPrimes19 = 0;\n        long numOfPrimes20
    = 0;\n        long numOfPrimes21 = 0;\n        long numOfPrimes22 = 0;\n        long
    numOfPrimes23 = 0;\n        long numOfPrimes24 = 0;\n        long numOfPrimes25
    = 0;\n        long numOfPrimes26 = 0;\n        long numOfPrimes27 = 0;\n        long
    numOfPrimes28 = 0;\n        long numOfPrimes29 = 0;\n        long numOfPrimes30
    = 0;\n        long numOfPrimes31 = 0;\n        long numOfPrimes32 = 0;\n        long
    numOfPrimes33 = 0;\n        long numOfPrimes34 = 0;\n        long numOfPrimes35
    = 0;\n        long numOfPrimes36 = 0;\n        long numOfPrimes37 = 0;\n        long
    numOfPrimes38 = 0;\n        long numOfPrimes39 = 0;\n        long numOfPrimes40
    = 0;\n        long numOfPrimes41 = 0;\n        long numOfPrimes42 = 0;\n        long
    numOfPrimes43 = 0;\n        long numOfPrimes44 = 0;\n        long numOfPrimes45
    = 0;\n        long numOfPrimes46 = 0;\n        long numOfPrimes47 = 0;\n        long
    numOfPrimes48 = 0;\n        long numOfPrimes49 = 0;\n        long numOfPrimes50
    = 0;\n        long numOfPrimes51 = 0;\n        long numOfPrimes52 = 0;\n        long
    numOfPrimes53 = 0;\n        long numOfPrimes54 = 0;\n        long numOfPrimes55
    = 0;\n        long numOfPrimes56 = 0;\n        long numOfPri\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx2p231kh.cs(83,22): error CS1002: ; expected

    '
  timestamp: 1659799416
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit >= 2 && digit <= 9) {\n                result
    += digit * digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40316a6ac751426f8833499224a0e9c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40316a6ac751426f8833499224a0e9c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int d = (int)c;\n            if (d >= '0' && d <= '9') {\n                result
    += Math.Pow(16, hex.Length - (int)c);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ll997v9.cs(31,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n
    \           if (d >= '0' && d <= '9') {\n                result += Math.Pow(16,
    (int)c - '0');\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6n9hks39.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            if (c ==
    'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F') {\n                result
    += 2;\n            }\n            else if (c == '2' || c == '3' || c == '5' ||
    c == '7' || c == 'B' || c == 'D') {\n                result += 3;\n            }\n
    \           else if (c == '7' || c == '11' || c == '13' || c == '17' || c == '19'
    || c == '23' || c == '29' || c == '31' || c == '37' || c == '41' || c == '43'
    || c == '47' || c == '53' || c == '59' || c == '61' || c == '67' || c == '71'
    || c == '73' || c == '79' || c == '83' || c == '89' || c == '97' || c == '101'
    || c == '103' || c == '107' || c == '109' || c == '113' || c == '127' || c ==
    '131') {\n                result += 5;\n            }\n            else if (c
    == 'B' || c == 'D') {\n                result += 7;\n            }\n            else
    if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n
    \               result += 11;\n            }\n            else if (c == '7' ||
    c == '11' || c == '13' || c == '17' || c == '19' || c == '23' || c == '29' ||
    c == '31' || c == '37' || c == '41' || c == '43' || c == '47' || c == '53' ||
    c == '59' || c == '61' || c == '67' || c == '71' || c == '73' || c == '79' ||
    c == '83' || c == '89' || c == '97' || c == '101' || c == '103' || c == '107'
    || c == '109' || c == '113' || c == '127' || c == '131') {\n                result
    += 13;\n            }\n            else if (c == '2' || c == '3' || c == '5' ||
    c == '7' || c == 'B' || c == 'D') {\n                result += 17;\n            }\n
    \           else if (c == '7' || c == '11' || c == '13' || c == '17' || c == '19'
    || c == '23' || c == '29' || c == '31' || c == '37' || c == '41' || c == '43'
    || c == '47' || c == '53' || c == '59' || c == '61' || c == '67' || c == '71'
    || c == '73' || c == '79' || c == '83' || c == '89' || c == '97' || c == '101'
    || c\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzo70woxg.cs(34,39): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,52): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,65): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,78): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,91): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,104): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,117): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,130): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,143): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,156): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,169): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,182): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,195): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,208): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,221): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,234): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,247): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,260): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,273): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,286): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,299): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,312): error CS1012: Too many characters in character literal

    /tmp/tmpzo70woxg.cs(34,326): error CS1012: Too many characters in character li'
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\",
    \"Hex digits must be from 0 to 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fd91983efbc4633912c29aa92f2c877>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hex digits must
    be from 0 to 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <3fd91983efbc4633912c29aa92f2c877>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <3fd91983efbc4633912c29aa92f2c877>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Hex digits must be from 0 to 9\nParameter
    name: num\n  at Problem.HexKey (System.String num) [0x0002f] in <3fd91983efbc4633912c29aa92f2c877>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <3fd91983efbc4633912c29aa92f2c877>:0
    \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           sum += digit * Math.Pow(16, digit);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqb9me4nv.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            sum += digit * Math.Pow(16,
    digit);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmh_7dib.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit.\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x0002f] in <8577420df54a472aa879df2419aa7005>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8577420df54a472aa879df2419aa7005>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x0002f] in <8577420df54a472aa879df2419aa7005>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8577420df54a472aa879df2419aa7005>:0
    \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numOfDigits = 0;\n        long numOfPrimes = 0;\n        long numOfPrimes2 = 0;\n
    \       long numOfPrimes3 = 0;\n        long numOfPrimes4 = 0;\n        long numOfPrimes5
    = 0;\n        long numOfPrimes6 = 0;\n        long numOfPrimes7 = 0;\n        long
    numOfPrimes8 = 0;\n        long numOfPrimes9 = 0;\n        long numOfPrimes10
    = 0;\n        long numOfPrimes11 = 0;\n        long numOfPrimes12 = 0;\n        long
    numOfPrimes13 = 0;\n        long numOfPrimes14 = 0;\n        long numOfPrimes15
    = 0;\n        long numOfPrimes16 = 0;\n        long numOfPrimes17 = 0;\n        long
    numOfPrimes18 = 0;\n        long numOfPrimes19 = 0;\n        long numOfPrimes20
    = 0;\n        long numOfPrimes21 = 0;\n        long numOfPrimes22 = 0;\n        long
    numOfPrimes23 = 0;\n        long numOfPrimes24 = 0;\n        long numOfPrimes25
    = 0;\n        long numOfPrimes26 = 0;\n        long numOfPrimes27 = 0;\n        long
    numOfPrimes28 = 0;\n        long numOfPrimes29 = 0;\n        long numOfPrimes30
    = 0;\n        long numOfPrimes31 = 0;\n        long numOfPrimes32 = 0;\n        long
    numOfPrimes33 = 0;\n        long numOfPrimes34 = 0;\n        long numOfPrimes35
    = 0;\n        long numOfPrimes36 = 0;\n        long numOfPrimes37 = 0;\n        long
    numOfPrimes38 = 0;\n        long numOfPrimes39 = 0;\n        long numOfPrimes40
    = 0;\n        long numOfPrimes41 = 0;\n        long numOfPrimes42 = 0;\n        long
    numOfPrimes43 = 0;\n        long numOfPrimes44 = 0;\n        long numOfPrimes45
    = 0;\n        long numOfPrimes46 = 0;\n        long numOfPrimes47 = 0;\n        long
    numOfPrimes48 = 0;\n        long numOfPrimes49 = 0;\n        long numOfPrimes50
    = 0;\n        long numOfPrimes51 = 0;\n        long numOfPrimes52 = 0;\n        long
    numOfPrimes53 = 0;\n        long numOfPrimes54 = 0;\n        long numOfPrimes55
    = 0;\n        long numOfPrimes56 = 0;\n        long numOfPri\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx2p231kh.cs(83,22): error CS1002: ; expected

    '
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\",
    \"Hexadecimal digit must be between 0 and 9\");\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digit must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <a7858cee326e4d659c5824b31b12e5d5>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a7858cee326e4d659c5824b31b12e5d5>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <a7858cee326e4d659c5824b31b12e5d5>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a7858cee326e4d659c5824b31b12e5d5>:0 \n"
  stdout: ''
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A' + 10;\n            result += (digit % 2 == 0) ? digit : -1;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9abc8aab5d44383a7307bd134809c37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9abc8aab5d44383a7307bd134809c37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        bool isPrime = true;\n        foreach
    (char c in num) {\n            digit = Convert.ToInt64(c);\n            if (digit
    < 0 || digit > 15) {\n                throw new ArgumentOutOfRangeException(\"num\",
    \"Hexadecimal digits must be between 0 and 15\");\n            }\n            if
    (isPrime) {\n                isPrime = IsPrime(digit);\n            }\n            result
    += digit * Math.Pow(16, num.Length - 1 - c.ToString().Length);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3i9yli83.cs(35,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmp3i9yli83.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799417
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = Convert.ToInt32(c);\n            if (digit >= 'A' && digit <= 'F') {\n                result
    += digit - 'A' + 10;\n            }\n            else if (digit >= '0' && digit
    <= '9') {\n                result += digit - '0';\n            }\n            else
    {\n                throw new Exception(\"Invalid hexadecimal digit: \" + c);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbfca0bc4b8d44fc9e97812ed97c92d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbfca0bc4b8d44fc9e97812ed97c92d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        long base = 2;\n        long digit = 0;\n        bool isPrime
    = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                throw new ArgumentException(\"Hexadecimal
    number must be between 0 and 9\");\n            }\n            if (digit == 0)
    {\n                throw new ArgumentException(\"Hexadecimal number cannot be
    0\");\n            }\n            if (digit == 1) {\n                throw new
    ArgumentException(\"Hexadecimal number cannot be 1\");\n            }\n            if
    (digit == 2) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 2\");\n            }\n            if (digit == 3) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 3\");\n            }\n            if
    (digit == 4) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 4\");\n            }\n            if (digit == 5) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 5\");\n            }\n            if
    (digit == 6) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 6\");\n            }\n            if (digit == 7) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 7\");\n            }\n            if
    (digit == 8) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 8\");\n            }\n            if (digit == 9) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 9\");\n            }\n            if
    (digit == 10) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 10\");\n            }\n            if (digit == 11) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 11\");\n            }\n            if
    (digit == 12) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 12\");\n            }\n            if (digit == 13) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 13\");\n            }\n            if
    (digit == 14) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 14\");\n            }\n            if (digit == 15) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 15\");\n            }\n            if
    (digit == 16) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 16\");\n            }\n            if (digit == 17) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 17\");\n            }\n            if
    (digit == 18) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 18\");\n            }\n            if (digit == 19) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 19\");\n            }\n            if
    (digit == 20) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 20\");\n            }\n            if (digit == 21) {\n                throw
    new ArgumentException(\"Hexadecimal number cannot be 21\");\n            }\n            if
    (digit == 22) {\n                throw new ArgumentException(\"Hexadecimal number
    cannot be 22\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplss28n6x.cs(27,14): error CS1001: Identifier expected

    /tmp/tmplss28n6x.cs(27,14): error CS1002: ; expected

    /tmp/tmplss28n6x.cs(104,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmplss28n6x.cs(113,2): error CS1513: } expected

    '
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentException(\"Invalid hexadecimal digit.\");\n
    \           }\n            result += digit * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwyvq0_ar.cs(33,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799417
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           result += (digit * digit);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2439f7f485c24fa7b31e693b22d25bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2439f7f485c24fa7b31e693b22d25bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n
    \           if (d >= '0' && d <= '9') {\n                result += d - (int)'0';\n
    \           }\n            else if (d >= 'A' && d <= 'F') {\n                result
    += d - (int)'A' + 10;\n            }\n            else {\n                result
    += d - (int)'A' + 10;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfc61d460e4940ea9174c9199d2ad7c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfc61d460e4940ea9174c9199d2ad7c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigit = 0;\n        long numPrimeDigit2 = 0;\n        long
    numPrimeDigit3 = 0;\n        long numPrimeDigit4 = 0;\n        long numPrimeDigit5
    = 0;\n        long numPrimeDigit6 = 0;\n        long numPrimeDigit7 = 0;\n        long
    numPrimeDigit8 = 0;\n        long numPrimeDigit9 = 0;\n        long numPrimeDigit10
    = 0;\n        long numPrimeDigit11 = 0;\n        long numPrimeDigit12 = 0;\n        long
    numPrimeDigit13 = 0;\n        long numPrimeDigit14 = 0;\n        long numPrimeDigit15
    = 0;\n        long numPrimeDigit16 = 0;\n        long numPrimeDigit17 = 0;\n        long
    numPrimeDigit18 = 0;\n        long numPrimeDigit19 = 0;\n        long numPrimeDigit20
    = 0;\n        long numPrimeDigit21 = 0;\n        long numPrimeDigit22 = 0;\n        long
    numPrimeDigit23 = 0;\n        long numPrimeDigit24 = 0;\n        long numPrimeDigit25
    = 0;\n        long numPrimeDigit26 = 0;\n        long numPrimeDigit27 = 0;\n        long
    numPrimeDigit28 = 0;\n        long numPrimeDigit29 = 0;\n        long numPrimeDigit30
    = 0;\n        long numPrimeDigit31 = 0;\n        long numPrimeDigit32 = 0;\n        long
    numPrimeDigit33 = 0;\n        long numPrimeDigit34 = 0;\n        long numPrimeDigit35
    = 0;\n        long numPrimeDigit36 = 0;\n        long numPrimeDigit37 = 0;\n        long
    numPrimeDigit38 = 0;\n        long numPrimeDigit39 = 0;\n        long numPrimeDigit40
    = 0;\n        long numPrimeDigit41 = 0;\n        long numPrimeDigit42 = 0;\n        long
    numPrimeDigit43 = 0;\n        long numPrimeDigit44 = 0;\n        long numPrimeDigit45
    = 0;\n        long numPrimeDigit46 = 0;\n        long numPrimeDigit47 = 0;\n        long
    numPrimeDigit48 = 0;\n        long numPrimeDigit49 = 0;\n        long numPrimeDigit50
    = 0;\n        long numPrimeDigit51 = 0;\n        long numPrimeDigit52 = 0;\n        long
    numPrimeDigit53 = 0;\n        long numPrimeDigit54 = 0;\n        long numPrimeDigit\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp26a2w9m6.cs(83,27): error CS1002: ; expected

    '
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"Hex digits must be from 0 to 9\");\n            }\n
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <967c3a84895d41189ea137932cbc8870>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex digits must be from
    0 to 9\n  at Problem.HexKey (System.String num) [0x00034] in <967c3a84895d41189ea137932cbc8870>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <967c3a84895d41189ea137932cbc8870>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hex digits must
    be from 0 to 9\n  at Problem.HexKey (System.String num) [0x00034] in <967c3a84895d41189ea137932cbc8870>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <967c3a84895d41189ea137932cbc8870>:0
    \n"
  stdout: ''
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit >= 2 && digit <= 6) {\n                result
    += digit * digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fee56e7ddc434a3f948d3caa4c97bde6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fee56e7ddc434a3f948d3caa4c97bde6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit >= '0' &&
    digit <= '9') {\n                result += digit - '0';\n            }\n            else
    if (digit >= 'A' && digit <= 'F') {\n                result += digit - 'A' + 10;\n
    \           }\n            else {\n                throw new Exception(\"Invalid
    hexadecimal digit: \" + c);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ee3e7545e1d47f48c98f08c0b380ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ee3e7545e1d47f48c98f08c0b380ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += digit * Math.Pow(16, num.Length - 1 - c.Length);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprko3cv4i.cs(32,63): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit >= 2 && digit <= 9) {\n                result
    += (digit * digit);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b55a09bd5401491cb3ddf8d9f052bf39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b55a09bd5401491cb3ddf8d9f052bf39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long
    numPrimeDigits4 = 0;\n        long numPrimeDigits5 = 0;\n        long numPrimeDigits6
    = 0;\n        long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long
    numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11
    = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n
    \       long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n        long
    numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long numPrimeDigits18
    = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n
    \       long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long
    numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25
    = 0;\n        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n
    \       long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long
    numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32
    = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n
    \       long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n        long
    numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long numPrimeDigits39
    = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41 = 0;\n
    \       long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n        long
    numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n        long numPrimeDigits46
    = 0;\n        long numPrimeDigits47 = 0;\n        long numPrimeDigits48 = 0;\n
    \       long numPrimeDigits49 = 0;\n        long numPrimeDigits50 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5be0c4p.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpo5be0c4p.cs(28,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(29,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(30,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(31,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(32,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(33,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(34,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(35,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(36,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(37,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(38,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(39,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(40,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(41,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(42,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(43,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"Invalid
    hexadecimal digit\");\n            }\n            result += (digit - 'A') * Math.Pow(16,
    hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_fl_igi.cs(33,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f0f91c80464c468cce914fe6a5ab80>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <60f0f91c80464c468cce914fe6a5ab80>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit >= 2 && digit <= 9) {\n                result
    += (long)Math.Pow(digit, 2);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0383b73f8974673908178b3750e4df0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0383b73f8974673908178b3750e4df0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <5b3a42a53c6c40cda16ced7ea668fb5e>:0 \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           result += (digit % 2 == 0) ? digit : digit + 1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8d964f8fe6f4161ae9f53a9a121d061>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8d964f8fe6f4161ae9f53a9a121d061>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int d = Convert.ToInt32(c);\n            if (d >= '0' && d <= '9')
    {\n                result += (d - '0');\n            }\n            else if (d
    >= 'A' && d <= 'F') {\n                result += (d - 'A' + 10);\n            }\n
    \           else {\n                throw new Exception(\"Invalid hexadecimal
    digit: \" + d);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7c7066cc90748d99394a9544278997e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7c7066cc90748d99394a9544278997e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"Invalid hexadecimal digit: \" + c);\n            }\n
    \           result += (digit * 16L);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <008eef04027b4fd3844410db0fd3c49b>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <008eef04027b4fd3844410db0fd3c49b>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <008eef04027b4fd3844410db0fd3c49b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <008eef04027b4fd3844410db0fd3c49b>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <008eef04027b4fd3844410db0fd3c49b>:0
    \n"
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"Hex digit
    must be between A and F\");\n            }\n            result += (digit - 'A')
    * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lyken87.cs(33,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    ret = 0;\n        foreach (char c in num) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                ret += n;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa2095174ecf4563acb746dfcf804b3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa2095174ecf4563acb746dfcf804b3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           result += (digit * digit);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2439f7f485c24fa7b31e693b22d25bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2439f7f485c24fa7b31e693b22d25bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit;\n        long hexDigit;\n        bool isPrime;\n
    \       string hexDigits = \"0123456789ABCDEF\";\n        foreach (char c in num)
    {\n            digit = Convert.ToInt64(c);\n            hexDigit = Convert.ToInt64(hexDigits.Substring(digit,
    1), 16);\n            isPrime = true;\n            for (int i = 2; i <= hexDigit
    / 2; i++) {\n                if (hexDigit % i == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n            if
    (isPrime) {\n                result++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzqsy99mp.cs(33,60): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits
    = 0;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long
    numPrimeDigits4 = 0;\n        long numPrimeDigits5 = 0;\n        long numPrimeDigits6
    = 0;\n        long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long
    numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11
    = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n
    \       long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n        long
    numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long numPrimeDigits18
    = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20 = 0;\n
    \       long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n        long
    numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n        long numPrimeDigits25
    = 0;\n        long numPrimeDigits26 = 0;\n        long numPrimeDigits27 = 0;\n
    \       long numPrimeDigits28 = 0;\n        long numPrimeDigits29 = 0;\n        long
    numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n        long numPrimeDigits32
    = 0;\n        long numPrimeDigits33 = 0;\n        long numPrimeDigits34 = 0;\n
    \       long numPrimeDigits35 = 0;\n        long numPrimeDigits36 = 0;\n        long
    numPrimeDigits37 = 0;\n        long numPrimeDigits38 = 0;\n        long numPrimeDigits39
    = 0;\n        long numPrimeDigits40 = 0;\n        long numPrimeDigits41 = 0;\n
    \       long numPrimeDigits42 = 0;\n        long numPrimeDigits43 = 0;\n        long
    numPrimeDigits44 = 0;\n        long numPrimeDigits45 = 0;\n        long numPrimeDigits46
    = 0;\n        long numPrimeDigits47 = 0;\n        long numPrimeDigits48 = 0;\n
    \       long numPrimeDigits49 = 0;\n        long numPrimeDigits50 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5be0c4p.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpo5be0c4p.cs(28,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(29,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(30,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(31,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(32,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(33,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(34,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(35,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(36,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(37,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(38,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(39,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(40,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(41,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(42,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpo5be0c4p.cs(43,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659799413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int d = (int)c;\n
    \           if (d >= '0' && d <= '9') {\n                result += (long)Math.Pow(16,
    (int)c - '0');\n            }\n            else if (d == 'A' || d == 'B' || d
    == 'C' || d == 'D' || d == 'E' || d == 'F') {\n                result += (long)Math.Pow(16,
    (int)c - 'A' + 10);\n            }\n            else {\n                throw
    new Exception(\"Invalid input\");\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c31eea88a2e94018afc3c3458403d788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c31eea88a2e94018afc3c3458403d788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"Invalid
    hexadecimal digit\");\n            }\n            result += (digit - 'A') * Math.Pow(16,
    num.Length - 1);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg13ovwjd.cs(32,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"HexKey\",
    \"The input string contains invalid character\");\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ddb3b36faa645a487c878d4a979a746>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: The input string
    contains invalid character\nParameter name: HexKey\n  at Problem.HexKey (System.String
    num) [0x0002f] in <8ddb3b36faa645a487c878d4a979a746>:0 \n  at Problem.Main (System.String[]
    args) [0x00015] in <8ddb3b36faa645a487c878d4a979a746>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: The input string contains invalid
    character\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x0002f]
    in <8ddb3b36faa645a487c878d4a979a746>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <8ddb3b36faa645a487c878d4a979a746>:0 \n"
  stdout: ''
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit >= 2 && digit <= 6) {\n                result += digit *
    digit;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77340ac9f0a6465ca21cc61c65fbbc14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77340ac9f0a6465ca21cc61c65fbbc14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        long pow = 1;\n        bool isPrime
    = true;\n        foreach (char c in num.ToUpper()) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit == 0) {\n                isPrime = false;\n                break;\n
    \           }\n            pow *= digit;\n        }\n        if (isPrime) {\n
    \           pow++;\n        }\n        long numDigits = num.Length;\n        long
    pow2 = pow;\n        long pow3 = pow2;\n        long pow4 = pow3;\n        long
    pow5 = pow4;\n        long pow6 = pow5;\n        long pow7 = pow6;\n        long
    pow8 = pow7;\n        long pow9 = pow8;\n        long pow10 = pow9;\n        long
    pow11 = pow10;\n        long pow12 = pow11;\n        long pow13 = pow12;\n        long
    pow14 = pow13;\n        long pow15 = pow14;\n        long pow16 = pow15;\n        long
    pow17 = pow16;\n        long pow18 = pow17;\n        long pow19 = pow18;\n        long
    pow20 = pow19;\n        long pow21 = pow20;\n        long pow22 = pow21;\n        long
    pow23 = pow22;\n        long pow24 = pow23;\n        long pow25 = pow24;\n        long
    pow26 = pow25;\n        long pow27 = pow26;\n        long pow28 = pow27;\n        long
    pow29 = pow28;\n        long pow30 = pow29;\n        long pow31 = pow30;\n        long
    pow32 = pow31;\n        long pow33 = pow32;\n        long pow34 = pow33;\n        long
    pow35 = pow34;\n        long pow36 = pow35;\n        long pow37 = pow36;\n        long
    pow38 = pow37;\n        long pow39 = pow38;\n        long pow40 = pow39;\n        long
    pow41 = pow40;\n        long pow42 = pow41;\n        long pow43 = pow42;\n        long
    pow44 = pow43;\n        long pow45 = pow44;\n        long pow46 = pow45;\n        long
    pow47 = pow46;\n        long pow48 = pow47;\n        long pow49 = pow48;\n        long
    pow50 = pow49;\n        long pow51 = pow50;\n        long pow52 = pow\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz13r11_x.cs(92,25): error CS1002: ; expected

    '
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n
    \               throw new ArgumentOutOfRangeException(\"Hex digits must be between
    0 and 9\");\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in <9ce7e56c7daf4177b2c1f3a7d8a90006>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9ce7e56c7daf4177b2c1f3a7d8a90006>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in <9ce7e56c7daf4177b2c1f3a7d8a90006>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9ce7e56c7daf4177b2c1f3a7d8a90006>:0
    \n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += (digit
    * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23d80affd0934d43bdade9a6a2f34759>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23d80affd0934d43bdade9a6a2f34759>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += digit * Math.Pow(16, num.Length - 1 - c.Length);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprko3cv4i.cs(32,63): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - '0';\n            if (digit % 2 == 0) {\n                result
    += (digit / 2);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <822c017aee29420bbfd610a40d698f8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <822c017aee29420bbfd610a40d698f8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        bool isPrime = true;\n        foreach
    (char c in num.ToUpper()) {\n            digit = Convert.ToInt64(c);\n            if
    (digit == 0) {\n                isPrime = false;\n                break;\n            }\n
    \           result += (digit % 2 == 0 ? 1 : 0);\n        }\n        if (isPrime)
    {\n            result += (digit % 2 == 0 ? 1 : 0);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aeb7479fe86c4632bcd9f92761c922b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aeb7479fe86c4632bcd9f92761c922b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        long prime = 2;\n        bool isPrime
    = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit == 0) {\n                throw new Exception(\"Invalid hexadecimal
    number\");\n            }\n            isPrime = IsPrime(digit);\n            if
    (isPrime) {\n                result += prime * digit;\n            }\n            prime
    += 2;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc8wnn3nf.cs(35,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        foreach (char c in num) {\n            sum += (long)Math.Pow(16,
    (int)c);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbcfad6841b04d6692bbb829ee4615ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbcfad6841b04d6692bbb829ee4615ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        bool isPrime = true;\n        long digit = 0;\n        foreach
    (char c in num.ToUpper()) {\n            digit = Convert.ToInt64(c);\n            if
    (digit > 9) {\n                digit = digit - 10;\n            }\n            if
    (digit == 0) {\n                isPrime = false;\n            }\n            if
    (isPrime) {\n                result += (digit * digit);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c323f929425a415f939a40dd6fd7a58b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c323f929425a415f939a40dd6fd7a58b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimes2
    = numDigits;\n        long numPrimes3 = numDigits;\n        long numPrimes4 =
    numDigits;\n        long numPrimes5 = numDigits;\n        long numPrimes6 = numDigits;\n
    \       long numPrimes7 = numDigits;\n        long numPrimes8 = numDigits;\n        long
    numPrimes9 = numDigits;\n        long numPrimes10 = numDigits;\n        long numPrimes11
    = numDigits;\n        long numPrimes12 = numDigits;\n        long numPrimes13
    = numDigits;\n        long numPrimes14 = numDigits;\n        long numPrimes15
    = numDigits;\n        long numPrimes16 = numDigits;\n        long numPrimes17
    = numDigits;\n        long numPrimes18 = numDigits;\n        long numPrimes19
    = numDigits;\n        long numPrimes20 = numDigits;\n        long numPrimes21
    = numDigits;\n        long numPrimes22 = numDigits;\n        long numPrimes23
    = numDigits;\n        long numPrimes24 = numDigits;\n        long numPrimes25
    = numDigits;\n        long numPrimes26 = numDigits;\n        long numPrimes27
    = numDigits;\n        long numPrimes28 = numDigits;\n        long numPrimes29
    = numDigits;\n        long numPrimes30 = numDigits;\n        long numPrimes31
    = numDigits;\n        long numPrimes32 = numDigits;\n        long numPrimes33
    = numDigits;\n        long numPrimes34 = numDigits;\n        long numPrimes35
    = numDigits;\n        long numPrimes36 = numDigits;\n        long numPrimes37
    = numDigits;\n        long numPrimes38 = numDigits;\n        long numPrimes39
    = numDigits;\n        long numPrimes40 = numDigits;\n        long numPrimes41
    = numDigits;\n        long numPrimes42 = numDigits;\n        long numPrimes43
    = numDigits;\n        long numPrimes44 = numDigits;\n        long numPrimes45
    = numDigits;\n        long numPrimes46 = numDigits;\n        long numPrimes47
    = numDigits;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjlgdyj03.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpjlgdyj03.cs(25,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            if (c ==
    'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F') {\n                result
    += Convert.ToInt64(Math.Pow(16, (int)c - 'A'));\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bb9870a4ff64df3bdd27ace776e7f0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bb9870a4ff64df3bdd27ace776e7f0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           result += (digit % 2 == 0) ? digit : digit + 1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <314c3ccdc3d746c095482a4e822f57a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <314c3ccdc3d746c095482a4e822f57a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long numPrimes = 0;\n        long numPrimes2
    = numDigits;\n        long numPrimes3 = numDigits;\n        long numPrimes4 =
    numDigits;\n        long numPrimes5 = numDigits;\n        long numPrimes6 = numDigits;\n
    \       long numPrimes7 = numDigits;\n        long numPrimes8 = numDigits;\n        long
    numPrimes9 = numDigits;\n        long numPrimes10 = numDigits;\n        long numPrimes11
    = numDigits;\n        long numPrimes12 = numDigits;\n        long numPrimes13
    = numDigits;\n        long numPrimes14 = numDigits;\n        long numPrimes15
    = numDigits;\n        long numPrimes16 = numDigits;\n        long numPrimes17
    = numDigits;\n        long numPrimes18 = numDigits;\n        long numPrimes19
    = numDigits;\n        long numPrimes20 = numDigits;\n        long numPrimes21
    = numDigits;\n        long numPrimes22 = numDigits;\n        long numPrimes23
    = numDigits;\n        long numPrimes24 = numDigits;\n        long numPrimes25
    = numDigits;\n        long numPrimes26 = numDigits;\n        long numPrimes27
    = numDigits;\n        long numPrimes28 = numDigits;\n        long numPrimes29
    = numDigits;\n        long numPrimes30 = numDigits;\n        long numPrimes31
    = numDigits;\n        long numPrimes32 = numDigits;\n        long numPrimes33
    = numDigits;\n        long numPrimes34 = numDigits;\n        long numPrimes35
    = numDigits;\n        long numPrimes36 = numDigits;\n        long numPrimes37
    = numDigits;\n        long numPrimes38 = numDigits;\n        long numPrimes39
    = numDigits;\n        long numPrimes40 = numDigits;\n        long numPrimes41
    = numDigits;\n        long numPrimes42 = numDigits;\n        long numPrimes43
    = numDigits;\n        long numPrimes44 = numDigits;\n        long numPrimes45
    = numDigits;\n        long numPrimes46 = numDigits;\n        long numPrimes47
    = numDigits;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjlgdyj03.cs(27,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpjlgdyj03.cs(25,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           result += (digit % 2 == 0) ? digit : -digit;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fa003ac19c3432bb937e1db9b95647c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fa003ac19c3432bb937e1db9b95647c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799415
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += (digit
    * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bcb49180992440fa06704a58176a6ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long hexDigit = 0;\n        long hexDigitCount = 0;\n        bool
    isPrime = true;\n        foreach (char c in num) {\n            hexDigit = Convert.ToInt64(c.ToString(),
    16);\n            hexDigitCount++;\n            if (hexDigit % 2 == 0) {\n                isPrime
    = false;\n            }\n        }\n        if (isPrime) {\n            result
    += hexDigitCount;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1534822e2b1048f9b2e32795b3291c4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1534822e2b1048f9b2e32795b3291c4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        long power = 1;\n        bool isPrime
    = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           while (power < digit) {\n                isPrime = true;\n                for
    (int i = 2; i <= digit / i; i++) {\n                    if (digit % i == 0) {\n
    \                       isPrime = false;\n                        break;\n                    }\n
    \               }\n                if (isPrime) {\n                    result
    += power;\n                }\n                power *= 2;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eaa535d2d08e42d38ef99679da27a64e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eaa535d2d08e42d38ef99679da27a64e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentOutOfRangeException(\"num\");\n            }\n            int power =
    (int)Math.Pow(16, digit);\n            result += power;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87c9c0c63c2e4fe4838e5c7da6330157>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <87c9c0c63c2e4fe4838e5c7da6330157>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <87c9c0c63c2e4fe4838e5c7da6330157>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <87c9c0c63c2e4fe4838e5c7da6330157>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <87c9c0c63c2e4fe4838e5c7da6330157>:0 \n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <191ace51ce6f4441be31ea7de4dbf486>:0
    \n"
  stdout: ''
  timestamp: 1659799415
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < 'A' ||
    digit > 'F') {\n                throw new ArgumentException(\"Hex digit must be
    between A and F\");\n            }\n            result += (digit - 'A') * Math.Pow(16,
    hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnk3lunxw.cs(33,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        long digit = 0;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            digit = Convert.ToInt64(Math.Pow(16, hex.Length
    - 1 - hex.IndexOf(c)));\n            if (digit > result) {\n                result
    = digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29998dda6fd840c29524d8ab0e08df6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29998dda6fd840c29524d8ab0e08df6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"HexKey\",
    \"The input string contains invalid characters.\");\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be3503ccf3bc43468285e31410e36975>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: The input string
    contains invalid characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String
    num) [0x0002f] in <be3503ccf3bc43468285e31410e36975>:0 \n  at Problem.Main (System.String[]
    args) [0x00015] in <be3503ccf3bc43468285e31410e36975>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: The input string contains invalid
    characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x0002f]
    in <be3503ccf3bc43468285e31410e36975>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <be3503ccf3bc43468285e31410e36975>:0 \n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = c - 'A';\n            result += (digit == 2) ? 2 :
    ((digit == 3) ? 3 : ((digit == 5) ? 5 : ((digit == 7) ? 7 : ((digit == 11) ? 11
    : ((digit == 13) ? 13 : ((digit == 17) ? 17 : ((digit == 19) ? 19 : ((digit ==
    23) ? 23 : ((digit == 29) ? 29 : ((digit == 31) ? 31 : ((digit == 37) ? 37 : ((digit
    == 41) ? 41 : ((digit == 43) ? 43 : ((digit == 47) ? 47 : ((digit == 53) ? 53
    : ((digit == 59) ? 59 : ((digit == 61) ? 61 : ((digit == 67) ? 67 : ((digit ==
    71) ? 71 : ((digit == 73) ? 73 : ((digit == 79) ? 79 : ((digit == 83) ? 83 : ((digit
    == 89) ? 89 : ((digit == 97) ? 97 : 0)))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n            )))\n            )))\n            )))\n            )))\n
    \           )))\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8f9o1n8b.cs(37,16): error CS1002: ; expected

    /tmp/tmp8f9o1n8b.cs(37,16): error CS1513: } expected

    /tmp/tmp8f9o1n8b.cs(131,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8f9o1n8b.cs(140,2): error CS1513: } expected

    '
  timestamp: 1659799418
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    sum = 0;\n        long digit = 0;\n        long key = 0;\n        bool isPrime
    = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit > 9) {\n                isPrime = false;\n            }\n
    \           key += digit * Math.Pow(16, num.Length - 1 - num.IndexOf(c));\n        }\n
    \       if (isPrime) {\n            key = key + 1;\n        }\n        sum = key
    % 10;\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9gc22fx.cs(35,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit >= 2 && digit <= 9) {\n                result
    += (digit * digit);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b55a09bd5401491cb3ddf8d9f052bf39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b55a09bd5401491cb3ddf8d9f052bf39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799418
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n
    \       Array.Sort(hexChars);\n        foreach (char hexChar in hexChars) {\n
    \           int hexVal = Convert.ToInt32(hexChar);\n            if (hexVal < 10)\n
    \               hexVal *= 16;\n            result += hexVal;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4067e9c0d3c4ce4a15f961ef4b24869>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4067e9c0d3c4ce4a15f961ef4b24869>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new
    ArgumentException(\"Invalid hexadecimal digit.\");\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b02b9950d8814e1cb52d12ae456cb6f8>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00034] in <b02b9950d8814e1cb52d12ae456cb6f8>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <b02b9950d8814e1cb52d12ae456cb6f8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00034] in <b02b9950d8814e1cb52d12ae456cb6f8>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <b02b9950d8814e1cb52d12ae456cb6f8>:0
    \n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)
    {\n            int digit = Convert.ToInt32(c);\n            if (digit < '0' ||
    digit > '9') {\n                continue;\n            }\n            int power
    = (int)Math.Pow(16, hex.Length - 1);\n            int digitPower = (int)Math.Pow(16,
    digit);\n            if (digitPower > power) {\n                continue;\n            }\n
    \           result += digit * digitPower;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63a15dcda8744fbd8977d277dca17045>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63a15dcda8744fbd8977d277dca17045>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    numDigits = num.Length;\n        long hexDigits = 0;\n        long hexPrimes =
    0;\n        long hexPrime = 0;\n        long hexPrime2 = 0;\n        long hexPrime3
    = 0;\n        long hexPrime4 = 0;\n        long hexPrime5 = 0;\n        long hexPrime6
    = 0;\n        long hexPrime7 = 0;\n        long hexPrime8 = 0;\n        long hexPrime9
    = 0;\n        long hexPrime10 = 0;\n        long hexPrime11 = 0;\n        long
    hexPrime12 = 0;\n        long hexPrime13 = 0;\n        long hexPrime14 = 0;\n
    \       long hexPrime15 = 0;\n        long hexPrime16 = 0;\n        long hexPrime17
    = 0;\n        long hexPrime18 = 0;\n        long hexPrime19 = 0;\n        long
    hexPrime20 = 0;\n        long hexPrime21 = 0;\n        long hexPrime22 = 0;\n
    \       long hexPrime23 = 0;\n        long hexPrime24 = 0;\n        long hexPrime25
    = 0;\n        long hexPrime26 = 0;\n        long hexPrime27 = 0;\n        long
    hexPrime28 = 0;\n        long hexPrime29 = 0;\n        long hexPrime30 = 0;\n
    \       long hexPrime31 = 0;\n        long hexPrime32 = 0;\n        long hexPrime33
    = 0;\n        long hexPrime34 = 0;\n        long hexPrime35 = 0;\n        long
    hexPrime36 = 0;\n        long hexPrime37 = 0;\n        long hexPrime38 = 0;\n
    \       long hexPrime39 = 0;\n        long hexPrime40 = 0;\n        long hexPrime41
    = 0;\n        long hexPrime42 = 0;\n        long hexPrime43 = 0;\n        long
    hexPrime44 = 0;\n        long hexPrime45 = 0;\n        long hexPrime46 = 0;\n
    \       long hexPrime47 = 0;\n        long hexPrime48 = 0;\n        long hexPrime49
    = 0;\n        long hexPrime50 = 0;\n        long hexPrime51 = 0;\n        long
    hexPrime52 = 0;\n        long hexPrime53 = 0;\n        long hexPrime54 = 0;\n
    \       long hexPrime55 = 0;\n        long hexPrime56 = 0;\n        long hexPrime57
    = 0;\n        long hexPrime58 = 0;\n        long hexPrime59 = 0;\n        long
    hexPrime60 = 0;\n        long hexPrime61 = 0;\n        long hexPrime62\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8_3leb_.cs(90,24): error CS1002: ; expected

    '
  timestamp: 1659799419
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - 'A';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7414499d53e14d9aad4844d659438c99>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00040] in <7414499d53e14d9aad4844d659438c99>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <7414499d53e14d9aad4844d659438c99>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00040] in <7414499d53e14d9aad4844d659438c99>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <7414499d53e14d9aad4844d659438c99>:0
    \n"
  stdout: ''
  timestamp: 1659799416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <ec8905e45f7a40cf8ca248781c7cf0bc>:0 \n"
  stdout: ''
  timestamp: 1659799414
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num) {\n            int digit = c - '0';\n
    \           if (digit >= 2 && digit <= 9) {\n                result += digit *
    digit;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adc1d5e5aa6c4f31b96285a1794269ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799414
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    //
    For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output
    should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For
    num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"
    the output should be 2.\n    public static long HexKey(string num) {\n        long
    result = 0;\n        foreach (char c in num.ToUpper()) {\n            int digit
    = c - 'A' + 1;\n            if (digit < 0 || digit > 9) {\n                throw
    new ArgumentException(\"Invalid hexadecimal digit.\");\n            }\n            result
    += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43b4592af134f3daa28cd04062eda15>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00036] in <e43b4592af134f3daa28cd04062eda15>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e43b4592af134f3daa28cd04062eda15>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00036] in <e43b4592af134f3daa28cd04062eda15>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e43b4592af134f3daa28cd04062eda15>:0
    \n"
  stdout: ''
  timestamp: 1659799419
