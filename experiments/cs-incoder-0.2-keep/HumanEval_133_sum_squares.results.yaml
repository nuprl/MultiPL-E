language: cs
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yembgkb.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659800185
