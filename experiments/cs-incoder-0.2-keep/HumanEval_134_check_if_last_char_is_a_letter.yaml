name: HumanEval_134_check_if_last_char_is_a_letter
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns True if the last character\n\
  \    // of a given string is an alphabetical character and is not\n    // a part\
  \ of a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
  \ separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"\
  apple pie\") \u279E False\n    // check_if_last_char_is_a_letter(\"apple pi e\"\
  ) \u279E True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n\
  \    // check_if_last_char_is_a_letter(\"\") \u279E False\n    public static bool\
  \ CheckIfLastCharIsALetter(string txt) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckIfLastCharIsALetter((\"\
  apple\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi e\"\
  )) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee\")) == (false));\n\
  \    Debug.Assert(CheckIfLastCharIsALetter((\"A\")) == (true));\n    Debug.Assert(CheckIfLastCharIsALetter((\"\
  Pumpkin pie \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"Pumpkin\
  \ pie 1\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"\")) == (false));\n\
  \    Debug.Assert(CheckIfLastCharIsALetter((\"eeeee e \")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"\
  apple pie\")) == (false));\n    Debug.Assert(CheckIfLastCharIsALetter((\"apple pi\
  \ e \")) == (false));\n    }\n\n}\n"
completions: ["        string lastChar = txt.Substring(txt.Length - 1, 1);\n     \
    \   bool isLetter = lastChar.All(char.IsLetter);\n        bool isNotWord = lastChar.Contains(\"\
    \ \");\n        return isLetter && !isNotWord;", "        if (string.IsNullOrEmpty(txt))\
    \ {\n            return false;\n        }\n        var lastChar = txt.Last();\n\
    \        if (lastChar.IsLetter()) {\n            return false;\n        }\n  \
    \      var words = txt.Split(' ');\n        if (words.Length > 1) {\n        \
    \    return false;\n        }\n        return true;", "        bool result = false;\n\
    \        if (txt.Length > 0) {\n            char lastChar = txt[txt.Length - 1];\n\
    \            if (lastChar >= 'a' && lastChar <= 'z') {\n                result\
    \ = true;\n            }\n        }\n        return result;", "        if (string.IsNullOrEmpty(txt))\
    \ {\n            return false;\n        }\n        if (txt.Length > 1) {\n   \
    \         return false;\n        }\n        char lastChar = txt[txt.Length - 1];\n\
    \        if (char.IsLetter(lastChar)) {\n            return false;\n        }\n\
    \        if (txt.LastIndexOf(\" \") != -1) {\n            return false;\n    \
    \    }\n        return true;", "        string lastChar = txt.Substring(txt.Length\
    \ - 1, 1);\n        bool isLetter = lastChar.All(char.IsLetter);\n        bool\
    \ isNotWord = txt.Split(' ').All(w => !w.Contains(lastChar));\n        return\
    \ isLetter && !isNotWord;", "        if (txt.Length > 0) {\n            char lastChar\
    \ = txt[txt.Length - 1];\n            if (lastChar == ' ') {\n               \
    \ return false;\n            }\n            else if (lastChar >= 'a' && lastChar\
    \ <= 'z') {\n                return false;\n            }\n            else {\n\
    \                return true;\n            }\n        }\n        else {\n    \
    \        return false;\n        }", "        bool result = false;\n        if\
    \ (txt.Length > 0) {\n            char lastChar = txt[txt.Length - 1];\n     \
    \       if (lastChar >= 'a' && lastChar <= 'z') {\n                result = true;\n\
    \            }\n        }\n        return result;", "        string lastChar =\
    \ txt.Substring(txt.Length - 1, 1);\n        if (lastChar.ToUpper() == lastChar)\
    \ {\n            return false;\n        }\n        char[] chars = lastChar.ToCharArray();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              return true;\n            }\n        }\n        return false;",
  "        string lastChar = txt.Substring(txt.Length - 1, 1);\n        bool isLetter\
    \ = char.IsLetter(lastChar);\n        return !isLetter && lastChar.Contains(\"\
    \ \");", "        if (txt.Length > 0) {\n            char lastChar = txt[txt.Length\
    \ - 1];\n            bool isLetter = char.IsLetter(lastChar);\n            bool\
    \ isNotWord = txt.Split(' ').All(x => !x.Contains(lastChar));\n            return\
    \ isLetter && !isNotWord;\n        }\n        return false;", "        string\
    \ lastChar = txt.Substring(txt.Length - 1);\n        bool isLetter = lastChar.All(char.IsLetter);\n\
    \        bool isNotWord = lastChar.Split(' ').All(x => !x.Contains(lastChar));\n\
    \        return isLetter && !isNotWord;", "        if (string.IsNullOrEmpty(txt))\n\
    \            return false;\n        if (txt.Length == 0)\n            return false;\n\
    \        char lastChar = txt[txt.Length - 1];\n        if (lastChar == ' ' ||\
    \ lastChar == '.' || lastChar == '-' || lastChar == '_' || lastChar == '/' ||\
    \ lastChar == '\\\\' || lastChar == '@' || lastChar == '#' || lastChar == '$'\
    \ || lastChar == '%' || lastChar == '^' || lastChar == '&' || lastChar == '*'\
    \ || lastChar == '(' || lastChar == ')' || lastChar == '+' || lastChar == '='\
    \ || lastChar == '{' || lastChar == '}' || lastChar == '[' || lastChar == ']'\
    \ || lastChar == '|' || lastChar == '~' || lastChar == '`' || lastChar == '<'\
    \ || lastChar == '>' || lastChar == '?' || lastChar == '\"' || lastChar == '|'\
    \ || lastChar == '\\\\' || lastChar == '|' || lastChar == '\"' || lastChar ==\
    \ '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar == '\"' || lastChar\
    \ == '\"' || lastChar == '\"' || lastChar == '\"' || ", "        if (string.IsNullOrEmpty(txt))\n\
    \            return false;\n        if (txt.Length == 0)\n            return false;\n\
    \        if (txt.Length == 1)\n            return true;\n        char lastChar\
    \ = txt[txt.Length - 1];\n        if (lastChar == ' ')\n            return false;\n\
    \        bool isLetter = false;\n        foreach (char c in txt.ToCharArray())\
    \ {\n            if (char.IsLetter(c)) {\n                isLetter = true;\n \
    \               break;\n            }\n        }\n        return !isLetter;",
  "        if (txt.Length > 0) {\n            char lastChar = txt[txt.Length - 1];\n\
    \            if (lastChar >= 'a' && lastChar <= 'z') {\n                return\
    \ false;\n            }\n        }\n        return true;", "        bool result\
    \ = false;\n        string word = txt.Substring(0, txt.Length - 1);\n        char[]\
    \ chars = word.ToCharArray();\n        foreach (char c in chars) {\n         \
    \   if (char.IsLetter(c)) {\n                result = true;\n                break;\n\
    \            }\n        }\n        return result;", "        if (txt.Length >\
    \ 0)\n        {\n            char lastChar = txt[txt.Length - 1];\n          \
    \  if (lastChar >= 'a' && lastChar <= 'z')\n            {\n                return\
    \ false;\n            }\n            else\n            {\n                return\
    \ true;\n            }\n        }\n        else\n        {\n            return\
    \ false;\n        }", "        if (string.IsNullOrEmpty(txt)) return false;\n\
    \        if (txt.Length == 1) return true;\n        char lastChar = txt[txt.Length\
    \ - 1];\n        bool isLetter = char.IsLetter(lastChar);\n        return !isLetter\
    \ && lastChar != ' ';", "        if (txt.Length > 0) {\n            char lastChar\
    \ = txt[txt.Length - 1];\n            if (char.IsLetter(lastChar)) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      if (txt.Length > 0) {\n            char lastChar = txt[txt.Length - 1];\n\
    \            if (lastChar >= 'a' && lastChar <= 'z') {\n                return\
    \ false;\n            }\n        }\n        return true;", "        if (string.IsNullOrEmpty(txt))\
    \ {\n            return false;\n        }\n        var lastChar = txt.Last();\n\
    \        if (lastChar.IsLetter()) {\n            return false;\n        }\n  \
    \      var words = txt.Split(' ');\n        var lastWord = words.Last();\n   \
    \     if (lastWord.Contains(lastChar)) {\n            return false;\n        }\n\
    \        return true;"]
stop_tokens:
- "\n    }\n"
