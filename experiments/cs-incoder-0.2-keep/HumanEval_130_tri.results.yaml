language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n
    \       }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzz8b903t.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzz8b903t.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 3 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n        }\n        else
    {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long
    c = a + b;\n            result.Add(c);\n            result.Add(a + b);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg0dkojgo.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpg0dkojgo.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpg0dkojgo.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpg0dkojgo.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        } else
    {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnf2ebz20.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpnf2ebz20.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n -
    1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n
    \           foreach (long i in tri1) {\n                result.Add(i);\n            }\n
    \           foreach (long i in tri2) {\n                result.Add(i);\n            }\n
    \           foreach (long i in tri3) {\n                result.Add(i);\n            }\n
    \           return result;\n        }\n        else {\n            long tri1 =
    Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n
    + 1);\n            foreach (long i in tri1) {\n                result.Add(i);\n
    \           }\n            foreach (long i in tri2) {\n                result.Add(i);\n
    \           }\n            foreach (long i in tri3) {\n                result.Add(i);\n
    \           }\n            return result;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0bjm73j0.cs(36,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0bjm73j0.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0bjm73j0.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0bjm73j0.cs(39,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp0bjm73j0.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp0bjm73j0.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp0bjm73j0.cs(51,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0bjm73j0.cs(52,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0bjm73j0.cs(53,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0bjm73j0.cs(54,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp0bjm73j0.cs(57,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp0bjm73j0.cs(60,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = a + b;\n        result.Add(c);\n        result.Add(a + b);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsvy4x0p6.cs(29,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsvy4x0p6.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsvy4x0p6.cs(30,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsvy4x0p6.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsvy4x0p6.cs(31,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsvy4x0p6.cs(35,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsvy4x0p6.cs(36,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n
    \           return result;\n        }\n        long a = Tri(n - 1);\n        long
    b = Tri(n - 2);\n        long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n        result.AddRange(a);\n
    \       result.Add(b);\n        result.Add(c);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphh7hxwyv.cs(40,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphh7hxwyv.cs(41,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphh7hxwyv.cs(42,18): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmphh7hxwyv.cs(43,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1) {\n            result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(3);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1) +
    Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp375esbl6.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp375esbl6.cs(38,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp375esbl6.cs(39,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(2);\n            result.Add(1);\n            return
    result;\n        }\n        List<long> tri1 = Tri(n - 1);\n        List<long>
    tri2 = Tri(n - 2);\n        List<long> tri3 = Tri(n - 3);\n        List<long>
    tri4 = Tri(n - 4);\n        List<long> tri5 = Tri(n - 5);\n        List<long>
    tri6 = Tri(n - 6);\n        List<long> tri7 = Tri(n - 7);\n        List<long>
    tri8 = Tri(n - 8);\n        List<long> tri9 = Tri(n - 9);\n        List<long>
    tri10 = Tri(n - 10);\n        List<long> tri11 = Tri(n - 11);\n        List<long>
    tri12 = Tri(n - 12);\n        List<long> tri13 = Tri(n - 13);\n        List<long>
    tri14 = Tri(n - 14);\n        List<long> tri15 = Tri(n - 15);\n        List<long>
    tri16 = Tri(n - 16);\n        List<long> tri17 = Tri(n - 17);\n        List<long>
    tri18 = Tri(n - 18);\n        List<long> tri19 = Tri(n - 19);\n        List<long>
    tri20 = Tri(n - 20);\n        List<long> tri21 = Tri(n - 21);\n        List<long>
    tri22 = Tri(n - 22);\n        List<long> tri23 = Tri(n - 23);\n        List<long>
    tri24 = Tri(n - 24);\n        List<long> tri25 = Tri(n - 25);\n        List<long>
    tri26 = Tri(n - 26);\n        List<long> tri27 = Tri(n - 27);\n        List<long>
    tri28 = Tri(n - 28);\n        List<long> tri29 = Tri(n - 29);\n        List<long>
    tri30 = Tri(n - 30);\n        List<long> tri31 = Tri(n - 31);\n        List<long>
    tri32 = Tri(n - 32);\n        List<long> tri33 = Tri(n - 33);\n        List<long>
    tri34 = Tri(n - 34);\n        List<long> tri35 = Tri(n - 35);\n        List<long>
    tri36 = Tri(n - 36);\n        List<long> tri37 = Tri(n - \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1bows5jc.cs(78,35): error CS1525: Invalid expression term ''}''

    /tmp/tmp1bows5jc.cs(78,35): error CS1026: ) expected

    /tmp/tmp1bows5jc.cs(78,35): error CS1002: ; expected

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)
    + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7j8d6n1j.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7j8d6n1j.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n + 1);\n            long sum = 0;\n            foreach
    (var item in a) {\n                sum += item;\n            }\n            foreach
    (var item in b) {\n                sum += item;\n            }\n            foreach
    (var item in c) {\n                sum += item;\n            }\n            result.Add(sum);\n
    \       } else {\n            long a = Tri(n - 1);\n            long b = Tri(n
    - 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n            foreach
    (var item in a) {\n                sum += item;\n            }\n            foreach
    (var item in b) {\n                sum += item;\n            }\n            foreach
    (var item in c) {\n                sum += item;\n            }\n            result.Add(sum);\n
    \           result.Add(sum);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwd9zmaz2.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwd9zmaz2.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwd9zmaz2.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwd9zmaz2.cs(33,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpwd9zmaz2.cs(36,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpwd9zmaz2.cs(39,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpwd9zmaz2.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwd9zmaz2.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwd9zmaz2.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwd9zmaz2.cs(48,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpwd9zmaz2.cs(51,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpwd9zmaz2.cs(54,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n
    \       }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzz8b903t.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzz8b903t.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ab2nut5.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6ab2nut5.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n +
    1);\n            foreach (long x in tri) {\n                result.Add(x);\n            }\n
    \       } else {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1);\n            foreach (long x in tri) {\n                result.Add(x);\n
    \           }\n            List<long> tri2 = Tri(n - 1) + Tri(n - 2) + Tri(n +
    1);\n            foreach (long x in tri2) {\n                result.Add(x);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg5bsj007.cs(29,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpg5bsj007.cs(34,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpg5bsj007.cs(38,31): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1) {\n            result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(3);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1) +
    Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8a9m9b6.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpo8a9m9b6.cs(38,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2, 3 };\n        if (n % 2 == 0) {\n            List<long>
    left = Tri(n / 2);\n            List<long> right = Tri(n - 1);\n            List<long>
    result = new List<long>();\n            foreach (long x in left) result.Add(x);\n
    \           foreach (long x in right) result.Add(x);\n            foreach (long
    x in left) result.Add(x);\n            return result;\n        } else {\n            List<long>
    left = Tri(n / 2);\n            List<long> right = Tri(n - 1);\n            List<long>
    result = new List<long>();\n            foreach (long x in left) result.Add(x);\n
    \           foreach (long x in right) result.Add(x);\n            foreach (long
    x in left) result.Add(x);\n            return result;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw_n1a3dx.cs(32,24): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpw_n1a3dx.cs(40,24): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n
    \           result.Add(1);\n            return result;\n        }\n        long
    a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n - 3);\n
    \       long sum = 0;\n        foreach (long x in a) {\n            sum += x;\n
    \       }\n        foreach (long x in b) {\n            sum += x;\n        }\n
    \       foreach (long x in c) {\n            sum += x;\n        }\n        result.Add(sum);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpneu335md.cs(41,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpneu335md.cs(42,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpneu335md.cs(43,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpneu335md.cs(45,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpneu335md.cs(48,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpneu335md.cs(51,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)
    + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi5cq_9mw.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpi5cq_9mw.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcwwiy3wk.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpcwwiy3wk.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcwwiy3wk.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)
    + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbmdj65g0.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbmdj65g0.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2, 3 };\n        if (n % 2 == 0) {\n            int
    a = Tri(n / 2);\n            int b = Tri(n / 2 + 1);\n            int c = Tri(n
    / 2 + 2);\n            int d = Tri(n / 2 + 3);\n            int e = Tri(n / 2
    + 4);\n            int f = Tri(n / 2 + 5);\n            int g = Tri(n / 2 + 6);\n
    \           int h = Tri(n / 2 + 7);\n            int i = Tri(n / 2 + 8);\n            int
    j = Tri(n / 2 + 9);\n            int k = Tri(n / 2 + 10);\n            int l =
    Tri(n / 2 + 11);\n            int m = Tri(n / 2 + 12);\n            int n = Tri(n
    / 2 + 13);\n            int o = Tri(n / 2 + 14);\n            int p = Tri(n /
    2 + 15);\n            int q = Tri(n / 2 + 16);\n            int r = Tri(n / 2
    + 17);\n            int s = Tri(n / 2 + 18);\n            int t = Tri(n / 2 +
    19);\n            int u = Tri(n / 2 + 20);\n            int v = Tri(n / 2 + 21);\n
    \           int w = Tri(n / 2 + 22);\n            int x = Tri(n / 2 + 23);\n            int
    y = Tri(n / 2 + 24);\n            int z = Tri(n / 2 + 25);\n            int aa
    = Tri(n / 2 + 26);\n            int ab = Tri(n / 2 + 27);\n            int ac
    = Tri(n / 2 + 28);\n            int ad = Tri(n / 2 + 29);\n            int ae
    = Tri(n / 2 + 30);\n            int af = Tri(n / 2 + 31);\n            int ag
    = Tri(n / 2 + 32);\n            int ah = Tri(n / 2 + 33);\n            int ai
    = Tri(n / 2 + 34);\n            int aj = Tri(n / 2 + 35);\n            int ak
    = Tri(n / 2 + 36);\n            int al = Tri(n / 2 + 37);\n            int am
    = Tri(n / 2 + 38);\n            int an = Tri(n / 2 + 39);\n            int ao
    = Tri(n / 2 + 40);\n            int ap = Tri(n / 2 + 41);\n            int aq
    = Tri(n / \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp09hucslo.cs(72,29): error CS1525: Invalid expression term ''}''

    /tmp/tmp09hucslo.cs(72,29): error CS1026: ) expected

    /tmp/tmp09hucslo.cs(72,29): error CS1002: ; expected

    /tmp/tmp09hucslo.cs(74,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp09hucslo.cs(87,2): error CS1513: } expected

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0j5zpqtn.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0j5zpqtn.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            List<long>
    left = Tri(n - 1);\n            List<long> right = Tri(n - 2);\n            List<long>
    middle = new List<long>() { n / 2 };\n            List<long> result = left.Concat(right).Concat(middle).ToList();\n
    \           return result;\n        }\n        else {\n            List<long>
    left = Tri(n - 1);\n            List<long> right = Tri(n - 2);\n            List<long>
    middle = new List<long>() { n / 2 };\n            List<long> result = left.Concat(right).Concat(middle).ToList();\n
    \           return result;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpclujgjiz.cs(33,24): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpclujgjiz.cs(40,24): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long
    tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n
    - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long
    tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 =
    Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n -
    14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long
    tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19 =
    Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n -
    21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long
    tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 =
    Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n -
    28);\n        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n        long
    tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long tri33 =
    Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35 = Tri(n -
    35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long
    tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 =
    Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n -
    42);\n        long tri43 = Tri(n - 43);\n        long tri44 = Tri(n - 44);\n        long
    tri45 = Tri\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppxwq6g4f.cs(83,25): error CS1002: ; expected

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        else
    {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) +
    Tri(n - 4) + Tri(n + 2));\n            return result;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplxvc49ek.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplxvc49ek.cs(48,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = a + b;\n        result.Add(c);\n        result.Add(a + b);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsvy4x0p6.cs(29,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsvy4x0p6.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsvy4x0p6.cs(30,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsvy4x0p6.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsvy4x0p6.cs(31,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsvy4x0p6.cs(35,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsvy4x0p6.cs(36,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(2);\n
    \           result.Add(3);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)
    + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwa06xie8.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwa06xie8.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = Tri(n - 3);\n        long d = a + b + c;\n        result.Add(d);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_kn4uvdp.cs(46,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_kn4uvdp.cs(47,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_kn4uvdp.cs(48,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1) + Tri(n - 3));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeq3i1st1.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpeq3i1st1.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpeq3i1st1.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpeq3i1st1.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n            result.Add(Tri(n - 2) + Tri(n - 1));\n        }\n
    \       else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n
    \           result.Add(Tri(n - 3) + Tri(n - 2) + Tri(n - 1));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvuu_v9xl.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvuu_v9xl.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvuu_v9xl.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvuu_v9xl.cs(48,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7pu0akj1.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7pu0akj1.cs(40,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n
    - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long
    tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n
    - 9);\n        long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n
    \       long tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long
    tri14 = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 =
    Tri(n - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n -
    18);\n        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long
    tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 =
    Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n -
    25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long
    tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30 =
    Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n -
    32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long
    tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 =
    Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n -
    39);\n        long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long
    tri42 = Tri(n - 42);\n        long tri43 = Tri(n - 43);\n        long tri44 =
    Tri(n - 44);\n        long \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp986vcfc8.cs(84,13): error CS1001: Identifier expected

    /tmp/tmp986vcfc8.cs(84,13): error CS1002: ; expected

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnojup98.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpdnojup98.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n + 1);\n            long sum = a + b + c;\n            result.Add(sum);\n
    \       }\n        else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long sum = a +
    b + c;\n            result.Add(sum);\n            long d = Tri(n - 3);\n            long
    e = Tri(n - 4);\n            long f = Tri(n - 5);\n            long g = Tri(n
    - 6);\n            long h = Tri(n - 7);\n            long sum = sum + d + e +
    f + g + h;\n            result.Add(sum);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0u4pmmxt.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0u4pmmxt.cs(46,18): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n
    - 2);\n            long tri3 = Tri(n + 1);\n            foreach (long i in tri1)
    result.Add(i);\n            foreach (long i in tri2) result.Add(i);\n            foreach
    (long i in tri3) result.Add(i);\n            return result;\n        }\n        long
    tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n
    + 1);\n        foreach (long i in tri1) result.Add(i);\n        foreach (long
    i in tri2) result.Add(i);\n        foreach (long i in tri3) result.Add(i);\n        result.Add(tri1);\n
    \       result.Add(tri2);\n        result.Add(tri3);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_wrd9n9u.cs(29,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_wrd9n9u.cs(29,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_wrd9n9u.cs(30,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_wrd9n9u.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_wrd9n9u.cs(31,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_wrd9n9u.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_wrd9n9u.cs(32,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_wrd9n9u.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_wrd9n9u.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_wrd9n9u.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_wrd9n9u.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_wrd9n9u.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_wrd9n9u.cs(40,28): error CS1579: foreach'
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n
    - 2);\n            result.Add(tri1);\n            result.Add(tri1 + tri2);\n            result.Add(tri1
    + tri2 + tri1);\n            return result;\n        }\n        long tri1 = Tri(n
    - 1);\n        long tri2 = Tri(n - 2);\n        result.Add(tri1);\n        result.Add(tri1
    + tri2);\n        result.Add(tri1 + tri2 + tri1);\n        result.Add(tri1 + tri2
    + tri1 + tri2);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbydrilh.cs(41,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpmbydrilh.cs(41,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmbydrilh.cs(42,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpmbydrilh.cs(42,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmbydrilh.cs(48,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmbydrilh.cs(49,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 3 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n - 3));\n        result.Add(Tri(n - 2) + Tri(n - 3) + Tri(n - 4));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkn6xp_lu.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkn6xp_lu.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkn6xp_lu.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2yhgp_7i.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2yhgp_7i.cs(43,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg21ia01d.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpg21ia01d.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add(tri1);\n
    \       result.Add(tri2);\n        result.Add(tri3);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp958cq88d.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp958cq88d.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp958cq88d.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = a + b;\n        result.Add(c);\n        result.Add(a);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqi9k_34c.cs(29,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpqi9k_34c.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqi9k_34c.cs(30,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpqi9k_34c.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqi9k_34c.cs(31,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpqi9k_34c.cs(35,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpqi9k_34c.cs(36,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            List<long> tri1 = Tri(n - 1);\n            List<long>
    tri2 = Tri(n - 2);\n            tri1.AddRange(tri2);\n            result.AddRange(tri1);\n
    \       } else {\n            List<long> tri1 = Tri(n - 1);\n            List<long>
    tri2 = Tri(n - 2);\n            tri1.AddRange(tri2);\n            result.AddRange(tri1);\n
    \           result.AddRange(tri2);\n            result.AddRange(tri1);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <034f2038b8c14a80b79b5b9f6217d99f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <034f2038b8c14a80b79b5b9f6217d99f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           return result;\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n            return result;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2kjyxjxo.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2kjyxjxo.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long
    tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n
    - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long
    tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 =
    Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n -
    14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long
    tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19 =
    Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n -
    21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long
    tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 =
    Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n -
    28);\n        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n        long
    tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long tri33 =
    Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35 = Tri(n -
    35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long
    tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 =
    Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n -
    42);\n        long tri43 = Tri(n - 43);\n        long tri44 = Tri(n - 44);\n        long
    tri45 = Tri\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppxwq6g4f.cs(83,25): error CS1002: ; expected

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    - 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpveb89ai7.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpveb89ai7.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpveb89ai7.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        }\n
    \       else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +
    Tri(n + 2));\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp56hlqswn.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp56hlqswn.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp56hlqswn.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n -
    1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n
    \           result.AddRange(tri1);\n            result.AddRange(tri2);\n            result.AddRange(tri3);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3qa7lbnr.cs(43,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3qa7lbnr.cs(43,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qa7lbnr.cs(44,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3qa7lbnr.cs(44,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qa7lbnr.cs(45,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qa7lbnr.cs(46,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp3qa7lbnr.cs(47,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp3qa7lbnr.cs(48,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp3qa7lbnr.cs(51,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qa7lbnr.cs(52,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3qa7lbnr.cs(53,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp3qa7lbnr.cs(54,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n        }\n        else {\n            result.Add(Tri(n - 1)
    + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzjr5nhhi.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzjr5nhhi.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2) + Tri(n - 3);\n
    \           result.AddRange(a);\n            result.AddRange(b);\n            result.AddRange(c);\n
    \       } else {\n            long a = Tri(n - 1);\n            long b = Tri(n
    - 2) + Tri(n - 1) + Tri(n - 3);\n            result.AddRange(a);\n            result.AddRange(b);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpemlnucjk.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpemlnucjk.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpemlnucjk.cs(31,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpemlnucjk.cs(32,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpemlnucjk.cs(33,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpemlnucjk.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpemlnucjk.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpemlnucjk.cs(37,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpemlnucjk.cs(38,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpemlnucjk.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwfjtegal.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwfjtegal.cs(40,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgj5kbq9.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpxgj5kbq9.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ab2nut5.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6ab2nut5.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        }\n        else
    {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyabgy6p3.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpyabgy6p3.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpyabgy6p3.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long
    tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n
    - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long
    tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 =
    Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n -
    14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long
    tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19 =
    Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n -
    21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long
    tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 =
    Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n -
    28);\n        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n        long
    tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long tri33 =
    Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35 = Tri(n -
    35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long
    tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 =
    Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n -
    42);\n        long tri43 = Tri(n - 43);\n        long tri44 = \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4stltulg.cs(85,21): error CS1525: Invalid expression term ''}''

    /tmp/tmp4stltulg.cs(85,21): error CS1002: ; expected

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            List<long>
    tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach (long triNumber
    in tri) {\n                result.Add(triNumber);\n            }\n        } else
    {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach
    (long triNumber in tri) {\n                result.Add(triNumber + 1);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0el2ds8.cs(30,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpa0el2ds8.cs(35,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n            result.Add(n
    / 2);\n            return result;\n        }\n        List<long> left = Tri(n
    - 1);\n        List<long> right = Tri(n - 2);\n        List<long> middle = new
    List<long>();\n        middle.Add(left[0]);\n        middle.Add(right[0]);\n        middle.Add(left[1]);\n
    \       middle.Add(right[1]);\n        middle.Add(left[2]);\n        middle.Add(right[2]);\n
    \       middle.Add(left[3]);\n        middle.Add(right[3]);\n        result.AddRange(left);\n
    \       result.AddRange(right);\n        result.AddRange(middle);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000f3] in <853c3772f0e14676ab5c1de5de5d6ec6>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <853c3772f0e14676ab5c1de5de5d6ec6>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x000f3]
    in <853c3772f0e14676ab5c1de5de5d6ec6>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <853c3772f0e14676ab5c1de5de5d6ec6>:0 \n"
  stdout: ''
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long sum = a +
    b + c;\n            result.Add(sum);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxnm72n40.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxnm72n40.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxnm72n40.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    - 3) + Tri(n - 1) + Tri(n - 2);\n            long d = Tri(n - 4) + Tri(n - 3)
    + Tri(n - 2) + Tri(n - 1);\n            long e = Tri(n - 5) + Tri(n - 4) + Tri(n
    - 3) + Tri(n - 2) + Tri(n - 1);\n            long f = Tri(n - 6) + Tri(n - 5)
    + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n
    - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n
    - 1);\n            long h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5)
    + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long i = Tri(n
    - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n
    - 3) + Tri(n - 2) + Tri(n - 1);\n            long j = Tri(n - 10) + Tri(n - 9)
    + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3)
    + Tri(n - 2) + Tri(n - 1);\n            long k = Tri(n - 11) + Tri(n - 10) + Tri(n
    - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n
    - 3) + Tri(n - 2) + Tri(n - 1);\n            long l = Tri(n - 12) + Tri(n - 11)
    + Tri(n - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5)
    + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long m = Tri(n
    - 13) + Tri(n - 12) + Tri(n - 11) + Tri(n - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n
    - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplesvlras.cs(42,186): error CS1026: ) expected

    /tmp/tmplesvlras.cs(42,186): error CS1002: ; expected

    /tmp/tmplesvlras.cs(44,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmplesvlras.cs(57,2): error CS1513: } expected

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2, 3 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            foreach (var item in a) {\n                result.Add(item);\n
    \           }\n            foreach (var item in b) {\n                result.Add(item);\n
    \           }\n            foreach (var item in c) {\n                result.Add(item);\n
    \           }\n            return result;\n        }\n        else {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            foreach (var item in a) {\n                result.Add(item);\n
    \           }\n            foreach (var item in b) {\n                result.Add(item);\n
    \           }\n            foreach (var item in c) {\n                result.Add(item);\n
    \           }\n            return result;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgh8df9k.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxgh8df9k.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxgh8df9k.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxgh8df9k.cs(33,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxgh8df9k.cs(36,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxgh8df9k.cs(39,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxgh8df9k.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxgh8df9k.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxgh8df9k.cs(47,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxgh8df9k.cs(48,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxgh8df9k.cs(51,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxgh8df9k.cs(54,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n +
    1);\n            foreach (long i in tri) {\n                result.Add(i);\n            }\n
    \       } else {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1);\n            foreach (long i in tri) {\n                result.Add(i);\n
    \           }\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdhyn3hz6.cs(29,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpdhyn3hz6.cs(34,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpdhyn3hz6.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c))
    {\n                result.Add(item);\n            }\n        } else {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            long d = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))
    {\n                result.Add(item);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpof5jte24.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpof5jte24.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpof5jte24.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpof5jte24.cs(32,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpof5jte24.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpof5jte24.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpof5jte24.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpof5jte24.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpof5jte24.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            long sum = a + b + c;\n            result.Add(sum);\n        }\n
    \       else {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n + 1);\n            long sum = a + b + c;\n            result.Add(sum);\n
    \           result.Add(sum);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprxfhhnbh.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprxfhhnbh.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprxfhhnbh.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprxfhhnbh.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprxfhhnbh.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprxfhhnbh.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        List<long> first = new List<long>();\n        List<long>
    second = new List<long>();\n        List<long> third = new List<long>();\n        first.Add(1);\n
    \       second.Add(2);\n        third.Add(3);\n        List<long> fourth = new
    List<long>();\n        fourth.Add(4);\n        List<long> fifth = new List<long>();\n
    \       fifth.Add(5);\n        List<long> sixth = new List<long>();\n        sixth.Add(6);\n
    \       List<long> seventh = new List<long>();\n        seventh.Add(7);\n        List<long>
    eighth = new List<long>();\n        eighth.Add(8);\n        List<long> ninth =
    new List<long>();\n        ninth.Add(9);\n        List<long> tenth = new List<long>();\n
    \       tenth.Add(10);\n        List<long> eleventh = new List<long>();\n        eleventh.Add(11);\n
    \       List<long> twelfth = new List<long>();\n        twelfth.Add(12);\n        List<long>
    thirteenth = new List<long>();\n        thirteenth.Add(13);\n        List<long>
    fourteenth = new List<long>();\n        fourteenth.Add(14);\n        List<long>
    fifteenth = new List<long>();\n        fifteenth.Add(15);\n        List<long>
    sixteenth = new List<long>();\n        sixteenth.Add(16);\n        List<long>
    seventeenth = new List<long>();\n        seventeenth.Add(17);\n        List<long>
    eighteenth = new List<long>();\n        eighteenth.Add(18);\n        List<long>
    nineteenth = new List<long>();\n        nineteenth.Add(19);\n        List<long>
    twentieth = new List<long>();\n        twentieth.Add(20);\n        List<long>
    twentyfirst = new List<long>();\n        twentyfirst.Add(21);\n        List<long>
    twentysecond = new List<long>();\n        twentysecond.Add(22);\n        List<long>
    twentythird = new List<long>();\n        twentythird.Add(23);\n        List<long>
    twentyfourth = new List<long>();\n        twentyfourth.Add(24\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfm8oa8c5.cs(86,28): error CS1026: ) expected

    /tmp/tmpfm8oa8c5.cs(86,28): error CS1002: ; expected

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n            return
    result;\n        } else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n            long
    d = Tri(n - 3);\n            result.Add(d);\n            return result;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphbqh1kae.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphbqh1kae.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphbqh1kae.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphbqh1kae.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphbqh1kae.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3lkzp7bt.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp3lkzp7bt.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0)\n        {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \       }\n        else if (n == 1)\n        {\n            result.Add(1);\n            result.Add(1);\n
    \           result.Add(1);\n        }\n        else\n        {\n            long
    tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3
    = Tri(n - 3);\n            result.Add(tri1);\n            result.Add(tri2);\n
    \           result.Add(tri3);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6oclhxxc.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6oclhxxc.cs(41,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6oclhxxc.cs(42,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0)\n        {\n            result.Add(3);\n            return result;\n        }\n
    \       if (n == 1)\n        {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0)\n        {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\n        {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp130lu1rt.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp130lu1rt.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppdb94cw4.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmppdb94cw4.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyk58axlc.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpyk58axlc.cs(44,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            long sum = 0;\n            foreach (long x in a) sum += x;\n
    \           foreach (long x in b) sum += x;\n            foreach (long x in c)
    sum += x;\n            result.Add(sum);\n        } else {\n            long a
    = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n +
    1);\n            long sum = 0;\n            foreach (long x in a) sum += x;\n
    \           foreach (long x in b) sum += x;\n            foreach (long x in c)
    sum += x;\n            result.Add(sum);\n            result.Add(sum);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2xzuz5i.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi2xzuz5i.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi2xzuz5i.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi2xzuz5i.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpi2xzuz5i.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpi2xzuz5i.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpi2xzuz5i.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi2xzuz5i.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi2xzuz5i.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi2xzuz5i.cs(43,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpi2xzuz5i.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpi2xzuz5i.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wgasare.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9wgasare.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4f77q2iw.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp4f77q2iw.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long
    tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n
    - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long
    tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 =
    Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n -
    14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long
    tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19 =
    Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n -
    21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long
    tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 =
    Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n -
    28);\n        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n        long
    tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long tri33 =
    Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35 = Tri(n -
    35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long
    tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 =
    Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n -
    42);\n        long tri43 = Tri(n - 43);\n        long tri44 = Tri(n - 44);\n        long
    tri45 = Tri\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgxhvla4.cs(83,25): error CS1002: ; expected

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n        }\n
    \       else {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n            long
    d = Tri(n - 3);\n            result.Add(d);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvhf98h7r.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvhf98h7r.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvhf98h7r.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvhf98h7r.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvhf98h7r.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n
    \           long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long
    sum = 0;\n            foreach (var item in a) {\n                sum += item;\n
    \           }\n            foreach (var item in b) {\n                sum += item;\n
    \           }\n            foreach (var item in c) {\n                sum += item;\n
    \           }\n            result.Add(sum);\n        }\n        else {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            long sum = 0;\n            foreach (var item in a) {\n                sum
    += item;\n            }\n            foreach (var item in b) {\n                sum
    += item;\n            }\n            foreach (var item in c) {\n                sum
    += item;\n            }\n            result.Add(sum);\n            long d = Tri(n
    - 3);\n            long e = Tri(n - 4);\n            long f = Tri(n - 5);\n            long
    g = Tri(n - 6);\n            long sum = 0;\n            foreach (var item in d)
    {\n                sum += item;\n            }\n            foreach (var item
    in e) {\n                sum += item;\n            }\n            foreach (var
    item in f) {\n                sum += item;\n            }\n            foreach
    (var item in g) {\n                sum += item;\n            }\n            result.Add(sum);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4u9zjz90.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4u9zjz90.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4u9zjz90.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4u9zjz90.cs(40,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4u9zjz90.cs(43,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4u9zjz90.cs(46,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4u9zjz90.cs(52,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4u9zjz90.cs(53,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4u9zjz90.cs(54,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4u9zjz90.cs(56,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4u9zjz90.cs(59,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4u9zjz90.cs(62,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4u9zjz90.cs(66,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpneq47b29.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpneq47b29.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        return Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsybry0dc.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsybry0dc.cs(29,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = Tri(n - 3);\n        long d = a + b + c;\n        result.Add(d);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjj4ez88g.cs(42,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjj4ez88g.cs(43,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjj4ez88g.cs(44,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n            return
    result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +
    Tri(n + 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptfa1zs3x.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmptfa1zs3x.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmptfa1zs3x.cs(41,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1 + tri2 + tri3;\n
    \       result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n
    \       result.Add(tri4);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7c02k0o.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc7c02k0o.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc7c02k0o.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            long sum = 0;\n            foreach (long i in a) sum += i;\n
    \           foreach (long i in b) sum += i;\n            foreach (long i in c)
    sum += i;\n            result.Add(sum);\n            return result;\n        }\n
    \       else {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n + 1);\n            long sum = 0;\n            foreach
    (long i in a) sum += i;\n            foreach (long i in b) sum += i;\n            foreach
    (long i in c) sum += i;\n            result.Add(sum);\n            result.Add(sum);\n
    \           return result;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrxgwn9l.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrxgwn9l.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrxgwn9l.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrxgwn9l.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvrxgwn9l.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvrxgwn9l.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvrxgwn9l.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrxgwn9l.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrxgwn9l.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrxgwn9l.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvrxgwn9l.cs(46,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvrxgwn9l.cs(47,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1) {\n            result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(3);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n            return result;\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n            return result;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp12w92nq1.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp12w92nq1.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    + 1));\n        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5esbnx2d.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5esbnx2d.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp5esbnx2d.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    - 3) + Tri(n - 1) + Tri(n - 2) + Tri(n - 3);\n            long d = Tri(n - 4)
    + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 4);\n            long e = Tri(n
    - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 5);\n            long
    f = Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1)
    + Tri(n - 6);\n            long g = Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n
    - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 7);\n            long h
    = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3)
    + Tri(n - 2) + Tri(n - 1) + Tri(n - 8);\n            long i = Tri(n - 9) + Tri(n
    - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n
    - 2) + Tri(n - 1) + Tri(n - 9);\n            long j = Tri(n - 10) + Tri(n - 9)
    + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3)
    + Tri(n - 2) + Tri(n - 1) + Tri(n - 10);\n            long k = Tri(n - 11) + Tri(n
    - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n
    - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1) + Tri(n - 11);\n            long l
    = Tri(n - 12) + Tri(n - 11) + Tri(n - 10) + Tri(n - 9) + Tri(n - 8) + Tri(n -
    7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n -
    1) + Tri(n - 12);\n            long m = Tri(n - 13) + Tri\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprarijkhc.cs(53,39): error CS1002: ; expected

    /tmp/tmprarijkhc.cs(55,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmprarijkhc.cs(68,2): error CS1513: } expected

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            long
    tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3
    = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri1);\n
    \           result.Add(tri2);\n            result.Add(tri3);\n            result.Add(tri4);\n
    \           return result;\n        }\n        else {\n            long tri1 =
    Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n
    - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri1);\n
    \           result.Add(tri2);\n            result.Add(tri3);\n            result.Add(tri4);\n
    \           result.Add(tri1 + tri2 + tri3);\n            return result;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_hl6xs6.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo_hl6xs6.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo_hl6xs6.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo_hl6xs6.cs(48,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo_hl6xs6.cs(49,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo_hl6xs6.cs(50,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n            long sum
    = tri1 + tri2 + tri3;\n            result.Add(sum);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4hjfjw15.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4hjfjw15.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4hjfjw15.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n -
    1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n
    \           long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long
    tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n            long tri8
    = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n            long tri10 = Tri(n
    - 10);\n            long tri11 = Tri(n - 11);\n            long tri12 = Tri(n
    - 12);\n            long tri13 = Tri(n - 13);\n            long tri14 = Tri(n
    - 14);\n            long tri15 = Tri(n - 15);\n            long tri16 = Tri(n
    - 16);\n            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n
    - 18);\n            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n
    - 20);\n            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n
    - 22);\n            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n
    - 24);\n            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n
    - 26);\n            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n
    - 28);\n            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n
    - 30);\n            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n
    - 32);\n            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n
    - 34);\n            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n
    - 36);\n            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n
    - 38);\n            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n
    - 40);\n            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n
    - 42);\n            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n
    - 44);\n            \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0k61mct.cs(86,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpa0k61mct.cs(99,2): error CS1513: } expected

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        else
    {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) +
    Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n            return result;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbdx5rbx5.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbdx5rbx5.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n
    - 2);\n            long tri3 = Tri(n + 1);\n            foreach (long i in tri1)
    result.Add(i);\n            foreach (long i in tri2) result.Add(i);\n            foreach
    (long i in tri3) result.Add(i);\n        } else {\n            long tri1 = Tri(n
    - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n
    \           foreach (long i in tri1) result.Add(i);\n            foreach (long
    i in tri2) result.Add(i);\n            foreach (long i in tri3) result.Add(i);\n
    \           long tri4 = Tri(n - 3);\n            foreach (long i in tri4) result.Add(i);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpokmrpq86.cs(29,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpokmrpq86.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpokmrpq86.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpokmrpq86.cs(32,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpokmrpq86.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpokmrpq86.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpokmrpq86.cs(36,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpokmrpq86.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpokmrpq86.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpokmrpq86.cs(39,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpokmrpq86.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpokmrpq86.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpokmrpq86.cs(42,25): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2yhgp_7i.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2yhgp_7i.cs(43,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        List<long> left = new List<long>();\n        List<long>
    right = new List<long>();\n        left.Add(1);\n        right.Add(1);\n        left.AddRange(Tri(n
    - 1));\n        right.AddRange(Tri(n - 2));\n        left.AddRange(Tri(n + 1));\n
    \       right.AddRange(Tri(n + 1));\n        result.AddRange(left);\n        result.AddRange(right);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659794713
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n
    \           long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n
    \           return result;\n        }\n        long a = Tri(n - 1);\n        long
    b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n        result.Add(a
    + b);\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppl8h35oh.cs(40,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmppl8h35oh.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppl8h35oh.cs(41,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmppl8h35oh.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppl8h35oh.cs(42,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmppl8h35oh.cs(46,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppl8h35oh.cs(47,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcy8uezr.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmppcy8uezr.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmppcy8uezr.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpet4bbupk.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpet4bbupk.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpet4bbupk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n
    - 2));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }
    else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr3ksfpew.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpr3ksfpew.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpr3ksfpew.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpr3ksfpew.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n
    - 6));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphogdek7n.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmphogdek7n.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1) {\n            result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(3);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n            foreach (long
    i in tri1) {\n                result.Add(i);\n            }\n            foreach
    (long i in tri2) {\n                result.Add(i);\n            }\n            foreach
    (long i in tri3) {\n                result.Add(i);\n            }\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n + 1);\n        foreach (long i in tri1) {\n            result.Add(i);\n
    \       }\n        foreach (long i in tri2) {\n            result.Add(i);\n        }\n
    \       foreach (long i in tri3) {\n            result.Add(i);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplq1nj5t7.cs(35,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmplq1nj5t7.cs(35,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplq1nj5t7.cs(36,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmplq1nj5t7.cs(36,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplq1nj5t7.cs(37,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmplq1nj5t7.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplq1nj5t7.cs(38,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmplq1nj5t7.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmplq1nj5t7.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmplq1nj5t7.cs(49,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplq1nj5t7.cs(50,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplq1nj5t7.cs(51,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplq1nj5t7.cs(52,28): error CS1579: foreach'
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n
    - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long
    tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n
    - 9);\n        long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n
    \       long tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long
    tri14 = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 =
    Tri(n - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n -
    18);\n        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long
    tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 =
    Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n -
    25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long
    tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30 =
    Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n -
    32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long
    tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 =
    Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n -
    39);\n        long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpim30xt1c.cs(90,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpim30xt1c.cs(90,29): error CS1026: ) expected

    /tmp/tmpim30xt1c.cs(90,29): error CS1002: ; expected

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    - 2) + Tri(n - 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n - 3));\n            result.Add(Tri(n - 3) + Tri(n - 2) + Tri(n -
    1));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2w4lcdqs.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2w4lcdqs.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2w4lcdqs.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2w4lcdqs.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxx3yrfpu.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpxx3yrfpu.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) +
    Tri(n - 6) + Tri(n - 7) + Tri(n - 8);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiajwl_32.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpiajwl_32.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp31t_avc1.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp31t_avc1.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8g4oxxs7.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp8g4oxxs7.cs(38,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc3egqk2u.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpc3egqk2u.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp70aaxd6e.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp70aaxd6e.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n - 3));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpntj1mqco.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpntj1mqco.cs(38,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5aogunwo.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5aogunwo.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n -
    1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n
    \           long sum = 0;\n            foreach (long i in tri1) {\n                sum
    += i;\n            }\n            foreach (long i in tri2) {\n                sum
    += i;\n            }\n            foreach (long i in tri3) {\n                sum
    += i;\n            }\n            result.Add(sum);\n            return result;\n
    \       }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n
    \       long tri3 = Tri(n + 1);\n        long sum = 0;\n        foreach (long
    i in tri1) {\n            sum += i;\n        }\n        foreach (long i in tri2)
    {\n            sum += i;\n        }\n        foreach (long i in tri3) {\n            sum
    += i;\n        }\n        result.Add(sum);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfba_pw0b.cs(43,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfba_pw0b.cs(43,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfba_pw0b.cs(44,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfba_pw0b.cs(44,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfba_pw0b.cs(45,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfba_pw0b.cs(45,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfba_pw0b.cs(46,18): error CS0136: A local or parameter named ''sum'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpfba_pw0b.cs(47,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfba_pw0b.cs(50,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfba_pw0b.cs(53,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfba_pw0b.cs(59,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfba_pw0b.cs(60,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.L'
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n == 2) {\n            result.Add(3);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4
    = tri1 + tri2 + tri3;\n            result.Add(tri4);\n            return result;\n
    \       }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n
    \       long tri3 = tri1 + tri2;\n        result.Add(tri3);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi7ns5e5s.cs(39,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpi7ns5e5s.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi7ns5e5s.cs(40,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpi7ns5e5s.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi7ns5e5s.cs(41,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpi7ns5e5s.cs(41,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi7ns5e5s.cs(46,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpi7ns5e5s.cs(47,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        result.Add(Tri(n + 1));\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyd36zd4g.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpyd36zd4g.cs(44,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpyd36zd4g.cs(45,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n
    \       result.Add(tri3);\n        result.Add(tri1 + tri2 + tri3);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipfgzvoz.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpipfgzvoz.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpipfgzvoz.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    + 1) + Tri(n + 2));\n        }\n        else {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpor3_5s5l.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpor3_5s5l.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpor3_5s5l.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n
    - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n
    \           long tri5 = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n            long
    tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n            long tri9
    = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n            long tri11 =
    Tri(n - 11);\n            long tri12 = Tri(n - 12);\n            long tri13 =
    Tri(n - 13);\n            long tri14 = Tri(n - 14);\n            long tri15 =
    Tri(n - 15);\n            long tri16 = Tri(n - 16);\n            long tri17 =
    Tri(n - 17);\n            long tri18 = Tri(n - 18);\n            long tri19 =
    Tri(n - 19);\n            long tri20 = Tri(n - 20);\n            long tri21 =
    Tri(n - 21);\n            long tri22 = Tri(n - 22);\n            long tri23 =
    Tri(n - 23);\n            long tri24 = Tri(n - 24);\n            long tri25 =
    Tri(n - 25);\n            long tri26 = Tri(n - 26);\n            long tri27 =
    Tri(n - 27);\n            long tri28 = Tri(n - 28);\n            long tri29 =
    Tri(n - 29);\n            long tri30 = Tri(n - 30);\n            long tri31 =
    Tri(n - 31);\n            long tri32 = Tri(n - 32);\n            long tri33 =
    Tri(n - 33);\n            long tri34 = Tri(n - 34);\n            long tri35 =
    Tri(n - 35);\n            long tri36 = Tri(n - 36);\n            long tri37 =
    Tri(n - 37);\n            long tri38 = Tri(n - 38);\n            long tri39 =
    Tri(n - 39);\n            long tri40 = Tri(n - 40);\n            long tri41 =
    Tri(n - 41);\n            long tri42 = Tri(n - 42);\n            long tri43 =
    Tri(n - 43);\n            long tri44\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9eteuphw.cs(85,23): error CS1002: ; expected

    /tmp/tmp9eteuphw.cs(87,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp9eteuphw.cs(100,2): error CS1513: } expected

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0j5zpqtn.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0j5zpqtn.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4
    = tri1 + tri2 + tri3;\n            result.Add(tri1);\n            result.Add(tri2);\n
    \           result.Add(tri3);\n            result.Add(tri4);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1 + tri2 + tri3;\n
    \       result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n
    \       result.Add(tri4);\n        result.Add(tri1 + tri2 + tri3);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiw_3yxei.cs(39,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiw_3yxei.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpiw_3yxei.cs(40,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiw_3yxei.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpiw_3yxei.cs(41,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiw_3yxei.cs(41,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpiw_3yxei.cs(42,18): error CS0136: A local or parameter named ''tri4''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiw_3yxei.cs(49,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpiw_3yxei.cs(50,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpiw_3yxei.cs(51,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n == 2) {\n            result.Add(3);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp07w0nppr.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp07w0nppr.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvjxq90lk.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvjxq90lk.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n
    \           result.Add(Tri(n + 1));\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy8fjs28b.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpy8fjs28b.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpy8fjs28b.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpy8fjs28b.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpy8fjs28b.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ab2nut5.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6ab2nut5.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphyi74roj.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmphyi74roj.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long
    tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n
    - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long
    tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 =
    Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n -
    14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long
    tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19 =
    Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n -
    21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long
    tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 =
    Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n -
    28);\n        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n        long
    tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long tri33 =
    Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35 = Tri(n -
    35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long
    tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 =
    Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n -
    42);\n        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwu1wf3b_.cs(88,13): error CS1001: Identifier expected

    /tmp/tmpwu1wf3b_.cs(88,13): error CS1002: ; expected

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbqmgxtgk.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbqmgxtgk.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            foreach (long x in a) result.Add(x);\n            foreach (long
    x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n            return
    result;\n        } else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long x
    in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n            foreach
    (long x in c) result.Add(x);\n            long d = Tri(n - 3);\n            foreach
    (long x in d) result.Add(x);\n            return result;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzhw61u9b.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzhw61u9b.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzhw61u9b.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzhw61u9b.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpzhw61u9b.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpzhw61u9b.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpzhw61u9b.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzhw61u9b.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzhw61u9b.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpzhw61u9b.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpzhw61u9b.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpzhw61u9b.cs(43,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpzhw61u9b.cs(44,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) result.Add(1 + n / 2);\n        else result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl1fjtb5f.cs(30,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            foreach (var item in a) {\n                result.Add(item);\n
    \           }\n            foreach (var item in b) {\n                result.Add(item);\n
    \           }\n            foreach (var item in c) {\n                result.Add(item);\n
    \           }\n        } else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (var item
    in a) {\n                result.Add(item);\n            }\n            foreach
    (var item in b) {\n                result.Add(item);\n            }\n            foreach
    (var item in c) {\n                result.Add(item);\n            }\n            result.Add(1);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8b43bksa.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8b43bksa.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8b43bksa.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8b43bksa.cs(33,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp8b43bksa.cs(36,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp8b43bksa.cs(39,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp8b43bksa.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8b43bksa.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8b43bksa.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8b43bksa.cs(46,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp8b43bksa.cs(49,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp8b43bksa.cs(52,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            int
    a = Tri(n / 2);\n            int b = Tri(n - 1);\n            int c = Tri(n -
    2);\n            int sum = a.Sum() + b.Sum() + c.Sum();\n            result.Add(sum);\n
    \           return result;\n        }\n        else {\n            int a = Tri(n
    / 2);\n            int b = Tri(n - 1);\n            int c = Tri(n - 2);\n            int
    sum = a.Sum() + b.Sum() + c.Sum();\n            result.Add(sum);\n            return
    result;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpitt_ckeg.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''int''

    /tmp/tmpitt_ckeg.cs(31,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''int''

    /tmp/tmpitt_ckeg.cs(32,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''int''

    /tmp/tmpitt_ckeg.cs(33,23): error CS1929: ''int'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpitt_ckeg.cs(33,33): error CS1929: ''int'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpitt_ckeg.cs(33,43): error CS1929: ''int'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpitt_ckeg.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''int''

    /tmp/tmpitt_ckeg.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''int''

    /tmp/tmpitt_ckeg.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''int''

    /tmp/tmpitt_ckeg.cs(41,23): error CS1929: ''int'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpitt_ckeg.cs(41,33): error CS1929: ''int'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpitt_ckeg.cs(41,43): error CS1929: ''int'' does not contain a definition
    for ''S'
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_0zqykn2.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp_0zqykn2.cs(47,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvg_3746h.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvg_3746h.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpvg_3746h.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1) +
    Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi51pw675.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpi51pw675.cs(38,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long> { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n        }\n        else
    {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long
    c = a + b;\n            result.Add(c);\n            result.Add(a + b);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpen9sx_aq.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpen9sx_aq.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpen9sx_aq.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpen9sx_aq.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wgasare.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9wgasare.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long c = Tri(n
    - 2);\n            long d = a + b + c;\n            result.Add(d);\n        }\n
    \       else {\n            long a = Tri(n / 2);\n            long b = Tri(n -
    1);\n            long c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n
    \           long e = Tri(n - 3);\n            result.Add(e);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrdospuc.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrdospuc.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrdospuc.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrdospuc.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrdospuc.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrdospuc.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvrdospuc.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return
    Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp70aaxd6e.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp70aaxd6e.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(2);\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwtpl65cx.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwtpl65cx.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwtpl65cx.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwtpl65cx.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n
    \       result.AddRange(tri2);\n        result.AddRange(tri3);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfq3ydnha.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfq3ydnha.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfq3ydnha.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfq3ydnha.cs(43,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpfq3ydnha.cs(44,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpfq3ydnha.cs(45,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            foreach (long x in a) {\n                result.Add(x + b +
    c);\n            }\n        } else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long x
    in b) {\n                result.Add(x + a + c);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4l0reh71.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4l0reh71.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4l0reh71.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4l0reh71.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp4l0reh71.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4l0reh71.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4l0reh71.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4l0reh71.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        result.Add(Tri(n - 2) + Tri(n - 1) + Tri(n + 1));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3mwuaijy.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp3mwuaijy.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp3mwuaijy.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2yhgp_7i.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2yhgp_7i.cs(43,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4
    = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 = Tri(n
    - 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n
    \           long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n            long
    tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n            long
    tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n            long
    tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n            long
    tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n            long
    tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n            long
    tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n            long
    tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n            long
    tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n            long
    tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n            long
    tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n            long
    tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n            long
    tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n            long
    tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n            long
    tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n            long
    tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n            long
    tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n            long
    tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n            long
    tri45 = Tri(n - 45);\n            long tri46 = Tri(n - 46);\n            \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpskijvnu7.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpskijvnu7.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxx3yrfpu.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpxx3yrfpu.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794708
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp94hsno4f.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp94hsno4f.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n
    - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long
    tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n
    - 9);\n        long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n
    \       long tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long
    tri14 = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 =
    Tri(n - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n -
    18);\n        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long
    tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 =
    Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n -
    25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long
    tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30 =
    Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n -
    32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long
    tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 =
    Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n -
    39);\n        long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long
    tri42 = Tri(n - 42);\n        long tri43 = Tri(n - 43);\n        long tri44 =
    Tri(n - 44);\n        long \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2osawgaq.cs(84,13): error CS1001: Identifier expected

    /tmp/tmp2osawgaq.cs(84,13): error CS1002: ; expected

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_fdv5_1z.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp_fdv5_1z.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           return result;\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1));\n            return result;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2rzhsykk.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp2rzhsykk.cs(33,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 3 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2));\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyrbbma0.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsyrbbma0.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3
    = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n            long tri5 = Tri(n
    - 5);\n            long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n
    \           long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n            long
    tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n            long
    tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n            long
    tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n            long
    tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n            long
    tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n            long
    tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n            long
    tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n            long
    tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n            long
    tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n            long
    tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n            long
    tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n            long
    tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n            long
    tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n            long
    tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n            long
    tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n            long
    tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n            long
    tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n            long
    tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpclpbeiuj.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpclpbeiuj.cs(90,2): error CS1513: } expected

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz4qv97eb.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpz4qv97eb.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpz4qv97eb.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3
    = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n            long tri5 = Tri(n
    - 5);\n            long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n
    \           long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n            long
    tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n            long
    tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n            long
    tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n            long
    tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n            long
    tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n            long
    tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n            long
    tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n            long
    tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n            long
    tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n            long
    tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n            long
    tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n            long
    tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n            long
    tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n            long
    tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n            long
    tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n            long
    tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n            long
    tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n            long
    tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpclpbeiuj.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpclpbeiuj.cs(90,2): error CS1513: } expected

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1) {\n            result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(3);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4
    = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 = Tri(n
    - 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n
    \           long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n            long
    tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n            long
    tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n            long
    tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n            long
    tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n            long
    tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n            long
    tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n            long
    tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n            long
    tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n            long
    tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n            long
    tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n            long
    tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n            long
    tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n            long
    tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n            long
    tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n            long
    tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n            long
    tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n            long
    tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n            long
    tri45 = Tri(n - 45);\n            long tri46 = Tri(\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvb9j3xhi.cs(80,30): error CS1026: ) expected

    /tmp/tmpvb9j3xhi.cs(80,30): error CS1002: ; expected

    /tmp/tmpvb9j3xhi.cs(82,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvb9j3xhi.cs(95,2): error CS1513: } expected

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(1);\n            result.Add(Tri(n - 1)
    + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjyo1gfg.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprjyo1gfg.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprjyo1gfg.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        long
    tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n
    - 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n        long
    tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long tri8 = Tri(n
    - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n - 10);\n        long
    tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n        long tri13 =
    Tri(n - 13);\n        long tri14 = Tri(n - 14);\n        long tri15 = Tri(n -
    15);\n        long tri16 = Tri(n - 16);\n        long tri17 = Tri(n - 17);\n        long
    tri18 = Tri(n - 18);\n        long tri19 = Tri(n - 19);\n        long tri20 =
    Tri(n - 20);\n        long tri21 = Tri(n - 21);\n        long tri22 = Tri(n -
    22);\n        long tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long
    tri25 = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 =
    Tri(n - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n -
    29);\n        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long
    tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 =
    Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n -
    36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long
    tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41 =
    Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n -
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6zenru6l.cs(86,29): error CS1525: Invalid expression term ''}''

    /tmp/tmp6zenru6l.cs(86,29): error CS1026: ) expected

    /tmp/tmp6zenru6l.cs(86,29): error CS1002: ; expected

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        result.AddRange(tri1);\n
    \       result.AddRange(tri2);\n        result.AddRange(tri3);\n        result.AddRange(tri4);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpatbazuwr.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpatbazuwr.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpatbazuwr.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpatbazuwr.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpatbazuwr.cs(43,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpatbazuwr.cs(44,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpatbazuwr.cs(45,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpatbazuwr.cs(46,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794710
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            List<long> tri1 = Tri(n - 1);\n            List<long>
    tri2 = Tri(n - 2);\n            tri1.AddRange(tri2);\n            result.AddRange(tri1);\n
    \       } else {\n            List<long> tri1 = Tri(n - 1);\n            tri1.AddRange(Tri(n
    - 2));\n            result.AddRange(tri1);\n            tri1.AddRange(Tri(n -
    3));\n            result.AddRange(tri1);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85d4b20e381c4fa2a34f4682e0017c75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85d4b20e381c4fa2a34f4682e0017c75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0myngrz.cs(35,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpf0myngrz.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n
    - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2
    + tri3;\n            result.Add(tri4);\n            return result;\n        }\n
    \       else {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n
    - 2);\n            long tri3 = tri1 + tri2;\n            result.Add(tri3);\n            return
    result;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdxc12q38.cs(29,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdxc12q38.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdxc12q38.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdxc12q38.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdxc12q38.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6cr_06jj.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6cr_06jj.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6cr_06jj.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1) {\n            result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            return
    result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpit1c7xp6.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpit1c7xp6.cs(34,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.Add(tri1
    + tri2 + tri3);\n        }\n        else {\n            long tri1 = Tri(n - 1);\n
    \           long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.Add(tri1
    + tri2 + tri3);\n            result.Add(tri1 + tri2 + tri3);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvx9nhltl.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvx9nhltl.cs(40,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvx9nhltl.cs(41,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvx9nhltl.cs(45,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvx9nhltl.cs(46,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvx9nhltl.cs(47,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794710
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n            return
    result;\n        }\n        List<long> tri1 = Tri(n - 1);\n        List<long>
    tri2 = Tri(n - 2);\n        List<long> tri3 = Tri(n - 3);\n        List<long>
    tri4 = tri1.Concat(tri2).Concat(tri3).ToList();\n        result.AddRange(tri4);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12bc6178e7a246b1b671a4405c5686df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12bc6178e7a246b1b671a4405c5686df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        long
    a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n - 3) + Tri(n
    - 1) + Tri(n - 2);\n        result.AddRange(a);\n        result.AddRange(b);\n
    \       result.AddRange(c);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkeq15ut.cs(41,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmptkeq15ut.cs(42,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmptkeq15ut.cs(43,18): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmptkeq15ut.cs(44,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmptkeq15ut.cs(45,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmptkeq15ut.cs(46,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n + 1);\n            foreach (var item in a) {\n
    \               result.Add(item);\n            }\n            foreach (var item
    in b) {\n                result.Add(item);\n            }\n            foreach
    (var item in c) {\n                result.Add(item);\n            }\n        }
    else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long
    c = Tri(n + 1);\n            foreach (var item in a) {\n                result.Add(item);\n
    \           }\n            foreach (var item in b) {\n                result.Add(item);\n
    \           }\n            foreach (var item in c) {\n                result.Add(item);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnz17pozx.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnz17pozx.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnz17pozx.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnz17pozx.cs(32,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpnz17pozx.cs(35,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpnz17pozx.cs(38,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpnz17pozx.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnz17pozx.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnz17pozx.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpnz17pozx.cs(45,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpnz17pozx.cs(48,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpnz17pozx.cs(51,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long
    tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4
    = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 = Tri(n
    - 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n
    \           long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n            long
    tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n            long
    tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n            long
    tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n            long
    tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n            long
    tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n            long
    tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n            long
    tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n            long
    tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n            long
    tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n            long
    tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n            long
    tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n            long
    tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n            long
    tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n            long
    tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n            long
    tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n            long
    tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n            long
    tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n            long
    tri45 = Tri(n - 45);\n            long tri46 = Tri(n - 46);\n            \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpskijvnu7.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpskijvnu7.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659794709
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(2);\n
    \       if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        else
    result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxh6wcxv0.cs(29,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpxh6wcxv0.cs(30,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long
    tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n
    - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long
    tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 =
    Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n -
    14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long
    tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19 =
    Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n -
    21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long
    tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 =
    Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n -
    28);\n        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n        long
    tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long tri33 =
    Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35 = Tri(n -
    35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long
    tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 =
    Tri(n - 40);\n        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n -
    42);\n        long tri43 = Tri(n - 43);\n        long tri44 = Tri(n - 44);\n        long
    tri45 = Tri\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgxhvla4.cs(83,25): error CS1002: ; expected

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n
    \       result.AddRange(tri3);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkawlygvx.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkawlygvx.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkawlygvx.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkawlygvx.cs(42,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpkawlygvx.cs(43,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpkawlygvx.cs(44,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            result.Add(1);\n            return result;\n
    \       }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5iukwy4s.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5iukwy4s.cs(48,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5iukwy4s.cs(49,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5iukwy4s.cs(50,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    1) {\n            result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(3);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long i
    in a) {\n                result.Add(i);\n            }\n            foreach (long
    j in b) {\n                result.Add(j);\n            }\n            foreach
    (long k in c) {\n                result.Add(k);\n            }\n            return
    result;\n        }\n        else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long i
    in a) {\n                result.Add(i);\n            }\n            foreach (long
    j in b) {\n                result.Add(j);\n            }\n            foreach
    (long k in c) {\n                result.Add(k);\n            }\n            return
    result;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk9ee7oe1.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9ee7oe1.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9ee7oe1.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9ee7oe1.cs(38,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpk9ee7oe1.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpk9ee7oe1.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpk9ee7oe1.cs(50,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9ee7oe1.cs(51,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9ee7oe1.cs(52,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9ee7oe1.cs(53,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpk9ee7oe1.cs(56,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpk9ee7oe1.cs(59,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2, 3 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    - 3) + Tri(n - 1) + Tri(n - 2) + Tri(n - 3);\n            long sum = a + b + c;\n
    \           while (sum < n) {\n                result.Add(sum);\n                sum
    += 2;\n            }\n        } else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2) + Tri(n - 1);\n            long c = Tri(n - 3) + Tri(n - 2) + Tri(n
    - 1);\n            long sum = a + b + c;\n            while (sum < n) {\n                result.Add(sum);\n
    \               sum += 3;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhh4esgw.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbhh4esgw.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbhh4esgw.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbhh4esgw.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbhh4esgw.cs(40,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbhh4esgw.cs(41,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(1);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1 + tri2 + tri3;\n
    \       result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n
    \       result.Add(tri4);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplx0epswo.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplx0epswo.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplx0epswo.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n / 2);\n            long b = Tri(n / 2 + 1);\n            long c = Tri(n
    / 2 + 2);\n            long sum = 0;\n            foreach (long i in a) sum +=
    i;\n            foreach (long i in b) sum += i;\n            foreach (long i in
    c) sum += i;\n            result.Add(sum);\n        } else {\n            long
    a = Tri(n / 2);\n            long b = Tri(n / 2 + 1);\n            long c = Tri(n
    / 2 + 2);\n            long sum = 0;\n            foreach (long i in a) sum +=
    i;\n            foreach (long i in b) sum += i;\n            foreach (long i in
    c) sum += i;\n            result.Add(sum);\n            long d = Tri(n / 2 + 1);\n
    \           long e = Tri(n / 2 + 2);\n            long f = Tri(n / 2);\n            long
    sum = 0;\n            foreach (long i in d) sum += i;\n            foreach (long
    i in e) sum += i;\n            foreach (long i in f) sum += i;\n            result.Add(sum);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprklgqsyt.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprklgqsyt.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprklgqsyt.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprklgqsyt.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprklgqsyt.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprklgqsyt.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprklgqsyt.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprklgqsyt.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprklgqsyt.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprklgqsyt.cs(43,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprklgqsyt.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprklgqsyt.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprklgqsyt.cs(47,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = a + b;\n            result.Add(c);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = a + b;\n        result.Add(c);\n        result.Add(Tri(n - 3));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp82rqby6f.cs(29,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp82rqby6f.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp82rqby6f.cs(30,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp82rqby6f.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp82rqby6f.cs(31,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp82rqby6f.cs(35,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp82rqby6f.cs(36,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp82rqby6f.cs(39,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) {\n            long tri = Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1);\n            result.Add(tri);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphdjz0kiq.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgj5kbq9.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpxgj5kbq9.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = Tri(n - 3);\n        long sum = 0;\n        foreach (var item
    in a) {\n            sum += item;\n        }\n        foreach (var item in b)
    {\n            sum += item;\n        }\n        foreach (var item in c) {\n            sum
    += item;\n        }\n        result.Add(sum);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2mildfil.cs(39,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2mildfil.cs(40,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2mildfil.cs(41,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2mildfil.cs(43,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2mildfil.cs(46,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2mildfil.cs(49,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            foreach (var item in a) {\n                result.Add(item);\n
    \           }\n            foreach (var item in b) {\n                result.Add(item);\n
    \           }\n            foreach (var item in c) {\n                result.Add(item);\n
    \           }\n        } else {\n            long a = Tri(n - 1);\n            long
    b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (var item
    in a) {\n                result.Add(item);\n            }\n            foreach
    (var item in b) {\n                result.Add(item);\n            }\n            foreach
    (var item in c) {\n                result.Add(item);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxmhulv9g.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxmhulv9g.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxmhulv9g.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxmhulv9g.cs(33,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxmhulv9g.cs(36,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxmhulv9g.cs(39,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxmhulv9g.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxmhulv9g.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxmhulv9g.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxmhulv9g.cs(46,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxmhulv9g.cs(49,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpxmhulv9g.cs(52,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        long
    tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n
    - 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n        long
    tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long tri8 = Tri(n
    - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n - 10);\n        long
    tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n        long tri13 =
    Tri(n - 13);\n        long tri14 = Tri(n - 14);\n        long tri15 = Tri(n -
    15);\n        long tri16 = Tri(n - 16);\n        long tri17 = Tri(n - 17);\n        long
    tri18 = Tri(n - 18);\n        long tri19 = Tri(n - 19);\n        long tri20 =
    Tri(n - 20);\n        long tri21 = Tri(n - 21);\n        long tri22 = Tri(n -
    22);\n        long tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long
    tri25 = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 =
    Tri(n - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n -
    29);\n        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long
    tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 =
    Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n -
    36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long
    tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41 =
    Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n -
    43);\n        long tri44 = Tri(n - 44\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpviykz3q4.cs(84,32): error CS1026: ) expected

    /tmp/tmpviykz3q4.cs(84,32): error CS1002: ; expected

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(2);\n
    \           return result;\n        }\n        if (n % 2 == 0) {\n            long
    tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3
    = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri1);\n
    \           result.Add(tri2);\n            result.Add(tri3);\n            result.Add(tri4);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        long tri3 = tri1 + tri2;\n        result.Add(tri1);\n
    \       result.Add(tri2);\n        result.Add(tri3);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnop8dwc.cs(41,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphnop8dwc.cs(41,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphnop8dwc.cs(42,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphnop8dwc.cs(42,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphnop8dwc.cs(43,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphnop8dwc.cs(43,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphnop8dwc.cs(51,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmphnop8dwc.cs(52,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n        }\n        else {\n            result.Add(Tri(n - 1)
    + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzjr5nhhi.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzjr5nhhi.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794707
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n
    - 2);\n            long tri3 = Tri(n + 1);\n            foreach (long i in tri1)
    {\n                result.Add(i);\n            }\n            foreach (long i
    in tri2) {\n                result.Add(i);\n            }\n            foreach
    (long i in tri3) {\n                result.Add(i);\n            }\n        } else
    {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n
    \           long tri3 = Tri(n + 1);\n            foreach (long i in tri1) {\n
    \               result.Add(i);\n            }\n            foreach (long i in
    tri2) {\n                result.Add(i);\n            }\n            foreach (long
    i in tri3) {\n                result.Add(i);\n            }\n            foreach
    (long i in tri1) {\n                result.Add(i);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsqr8ss98.cs(29,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsqr8ss98.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsqr8ss98.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsqr8ss98.cs(32,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpsqr8ss98.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpsqr8ss98.cs(38,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpsqr8ss98.cs(42,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsqr8ss98.cs(43,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsqr8ss98.cs(44,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsqr8ss98.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpsqr8ss98.cs(48,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpsqr8ss98.cs(51,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpsqr8ss98.cs(54,32): error CS1579: foreach statement cannot operate on
    v'
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            return result;\n        }\n        if
    (n == 1) {\n            result.Add(1);\n            return result;\n        }\n
    \       if (n == 2) {\n            result.Add(3);\n            return result;\n
    \       }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2) +
    Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa14969f8.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpa14969f8.cs(42,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpa14969f8.cs(43,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2));\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsgttbznp.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsgttbznp.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n
    / 2);\n            return result;\n        }\n        List<long> tri1 = Tri(n
    - 1);\n        List<long> tri2 = Tri(n - 2);\n        List<long> tri3 = Tri(n
    - 3);\n        List<long> tri4 = tri1.Concat(tri2).Concat(tri3).ToList();\n        result.AddRange(tri4);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e4546a8469c4357bd1368efa2d021d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e4546a8469c4357bd1368efa2d021d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n
    \       else if (n % 2 == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n
    \       else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl749ysuj.cs(31,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpl749ysuj.cs(33,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n
    / 2);\n            result.Add(n / 2);\n            return result;\n        }\n
    \       List<long> left = Tri(n - 1);\n        List<long> right = Tri(n - 2);\n
    \       List<long> middle = left.Concat(right).ToList();\n        middle.Add(n);\n
    \       result.AddRange(middle);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2541d6c8a9b4904bed85c78dae71361>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2541d6c8a9b4904bed85c78dae71361>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n
    \       if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        else
    result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lkfh67p.cs(29,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp8lkfh67p.cs(30,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n - 3));\n        result.Add(Tri(n - 2) + Tri(n - 3) + Tri(n - 4));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7p8mxedd.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7p8mxedd.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7p8mxedd.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            List<long>
    tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach (long i in tri)
    {\n                result.Add(i);\n            }\n        } else {\n            List<long>
    tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            foreach (long i in tri)
    {\n                result.Add(i);\n            }\n            tri = Tri(n - 1)
    + Tri(n - 2) + Tri(n + 1);\n            foreach (long i in tri) {\n                result.Add(i);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjt7x7be.cs(30,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbjt7x7be.cs(35,30): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbjt7x7be.cs(39,19): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n -
    2);\n            long c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c))
    {\n                result.Add(item);\n            }\n        } else {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n
    + 1);\n            long d = Tri(n - 3);\n            long e = Tri(n - 4);\n            long
    f = Tri(n - 5);\n            long g = Tri(n - 6);\n            long h = Tri(n
    - 7);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d).Concat(e).Concat(f).Concat(g).Concat(h))
    {\n                result.Add(item);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprh9lzw25.cs(29,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(32,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmprh9lzw25.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprh9lzw25.cs(44,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794710
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n
    / 2);\n            return result;\n        }\n        long tri1 = Tri(n - 1);\n
    \       long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long
    tri4 = tri1 + tri2 + tri3;\n        result.Add(tri1);\n        result.Add(tri2);\n
    \       result.Add(tri3);\n        result.Add(tri4);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe39b1w7t.cs(47,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpe39b1w7t.cs(48,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpe39b1w7t.cs(49,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(2);\n            return result;\n        }\n
    \       if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n
    + 1));\n        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n -
    2));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplm9me9yt.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplm9me9yt.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(2);\n            result.Add(1);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        result.Add(tri1);\n
    \       result.Add(tri2);\n        result.Add(tri3);\n        result.Add(tri4);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuxi6xzld.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpuxi6xzld.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpuxi6xzld.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpuxi6xzld.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcwwiy3wk.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpcwwiy3wk.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcwwiy3wk.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794706
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n
    \       long c = Tri(n - 3);\n        long sum = 0;\n        foreach (long i in
    a) {\n            sum += i;\n        }\n        foreach (long i in b) {\n            sum
    += i;\n        }\n        foreach (long i in c) {\n            sum += i;\n        }\n
    \       result.Add(sum);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk9yt21r3.cs(39,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9yt21r3.cs(40,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9yt21r3.cs(41,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk9yt21r3.cs(43,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpk9yt21r3.cs(46,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpk9yt21r3.cs(49,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \           return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n -
    2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfws5f9c3.cs(29,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpfws5f9c3.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpfws5f9c3.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4qmy5_7.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpi4qmy5_7.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(3);\n            return
    result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n
    - 2);\n        long tri3 = Tri(n - 3);\n        long sum = 0;\n        foreach
    (long i in tri1) {\n            sum += i;\n        }\n        foreach (long i
    in tri2) {\n            sum += i;\n        }\n        foreach (long i in tri3)
    {\n            sum += i;\n        }\n        result.Add(sum);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwfkzbl48.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwfkzbl48.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwfkzbl48.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwfkzbl48.cs(43,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpwfkzbl48.cs(46,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpwfkzbl48.cs(49,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n
    + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n
    - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpksrah5ht.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpksrah5ht.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpksrah5ht.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            return
    result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n
    \           return result;\n        }\n        long tri1 = Tri(n - 1);\n        long
    tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1
    + tri2 + tri3;\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n
    \       result.Add(tri4);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwjivweuh.cs(40,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwjivweuh.cs(41,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpwjivweuh.cs(42,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           result.Add(1);\n            return result;\n        }\n        if
    (n == 2) {\n            result.Add(1);\n            result.Add(2);\n            return
    result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n -
    1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n
    - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmwfl918r.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpmwfl918r.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n
    \           return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n
    \           result.Add(2);\n            return result;\n        }\n        if
    (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n
    \       } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)
    + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpszkvswyy.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpszkvswyy.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794711
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) return result;\n        if (n == 1) return new List<long>() { 1 };\n        if
    (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n            long
    a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = a + b;\n
    \           result.Add(c);\n            return result;\n        }\n        long
    a = Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n
    \       result.Add(a + b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_5y7hzu.cs(30,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpq_5y7hzu.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpq_5y7hzu.cs(31,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpq_5y7hzu.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpq_5y7hzu.cs(32,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpq_5y7hzu.cs(36,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpq_5y7hzu.cs(37,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794711
