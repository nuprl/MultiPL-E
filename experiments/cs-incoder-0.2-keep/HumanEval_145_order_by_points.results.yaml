language: cs
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjz2sa6_z.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjz2sa6_z.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3n4ncoeq.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3n4ncoeq.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) return nums;\n        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long num in nums) {\n         \
    \   sum += num;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ (x, y) => x - y);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xb6tpfo.cs(24,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp_xb6tpfo.cs(24,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3dj0cfx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpq3dj0cfx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => SumOfDigits(a) - SumOfDigits(b));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1nljw_j.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpj1nljw_j.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppb0t6q2l.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmppb0t6q2l.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) return nums;\n        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpklcsajw4.cs(24,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpklcsajw4.cs(24,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count < 2)\n            return nums;\n        long sum = 0;\n   \
    \     long maxSum = nums.Max();\n        long minSum = nums.Min();\n        long\
    \ maxDiff = maxSum - minSum;\n        long minDiff = maxSum - nums.Min();\n  \
    \      long maxDiffIndex = nums.IndexOf(maxDiff);\n        long minDiffIndex =\
    \ nums.IndexOf(minDiff);\n        long maxSumIndex = nums.IndexOf(maxSum);\n \
    \       long minSumIndex = nums.IndexOf(minSum);\n        long maxSumPoint = nums[maxSumIndex];\n\
    \        long minSumPoint = nums[minSumIndex];\n        long maxDiffPoint = nums[maxDiffIndex];\n\
    \        long minDiffPoint = nums[minDiffIndex];\n        List<long> result =\
    \ new List<long>();\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            if (sum == maxSum) {\n                result.Add(num);\n \
    \               sum -= maxSumPoint;\n            } else if (sum == minSum) {\n\
    \                result.Add(num);\n                sum -= minSumPoint;\n     \
    \       } else if (sum == maxDiff) {\n                result.Add(num);\n     \
    \           sum -= maxDiffPoint;\n            } else if (sum == minDiff) {\n \
    \               result.Add(num);\n                sum -= minDiffPoint;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1moxwsfv.cs(28,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1moxwsfv.cs(29,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1moxwsfv.cs(30,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1moxwsfv.cs(31,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)\
    \ - SumDigits(y)));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq7mgovt4.cs(23,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpq7mgovt4.cs(23,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => {\n    \
    \        long xSum = x.ToString().Sum(c => c - '0');\n            long ySum =\
    \ y.ToString().Sum(c => c - '0');\n            return xSum - ySum;\n        }));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpitnysvap.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpitnysvap.cs(26,20): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2407dsiu.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2407dsiu.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        long sum = 0;\n      \
    \  long maxSum = 0;\n        long maxSumIndex = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum > maxSum) {\n     \
    \           maxSum = sum;\n                maxSumIndex = nums.IndexOf(num);\n\
    \            }\n        }\n        long maxSumIndexValue = nums[maxSumIndex];\n\
    \        long maxSumValue = 0;\n        foreach (long num in nums) {\n       \
    \     if (num == maxSumIndexValue) {\n                maxSumValue += num;\n  \
    \          }\n        }\n        foreach (long num in nums) {\n            if\
    \ (num == maxSumValue) {\n                result.Add(num);\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3xwuu4r3.cs(31,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3dj0cfx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpq3dj0cfx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x)\
    \ - SumOfDigits(y)));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_lm3tw7.cs(23,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpj_lm3tw7.cs(23,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw71htcsl.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpw71htcsl.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count < 2)\n            return nums;\n        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        long minSum = nums.Min();\n        long maxSumIndex = 0;\n        long\
    \ minSumIndex = 0;\n        long maxSumPoint = maxSum;\n        long minSumPoint\
    \ = minSum;\n        long maxSumPointIndex = -1;\n        long minSumPointIndex\
    \ = -1;\n        long maxSumPointPoint = maxSumPoint;\n        long minSumPointPoint\
    \ = minSumPoint;\n        long maxSumPointPointIndex = -1;\n        long minSumPointPointIndex\
    \ = -1;\n        foreach (long num in nums) {\n            sum += num;\n     \
    \       if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex\
    \ = nums.IndexOf(num);\n            }\n            if (sum < minSum) {\n     \
    \           minSum = sum;\n                minSumIndex = nums.IndexOf(num);\n\
    \            }\n            if (sum > maxSumPoint) {\n                maxSumPoint\
    \ = sum;\n                maxSumPointIndex = nums.IndexOf(num);\n            }\n\
    \            if (sum < minSumPoint) {\n                minSumPoint = sum;\n  \
    \              minSumPointIndex = nums.IndexOf(num);\n            }\n        \
    \    if (sum > maxSumPointPoint) {\n                maxSumPointPoint = sum;\n\
    \                maxSumPointPointIndex = nums.IndexOf(num);\n            }\n \
    \           if (sum < minSumPointPoint) {\n                minSumPointPoint =\
    \ sum;\n                minSumPointPointIndex = nums.IndexOf(num);\n         \
    \   }\n        }\n        result.Add(maxSumIndex);\n        result.Add(minSumIndex);\n\
    \        result.Add(maxSumPointIndex);\n        result.Add(minSumPointIndex);\n\
    \        result.Add(maxSumPointPointIndex);\n        result.Add(minSumPointPointIndex);\n\
    \        result.Add(maxSumPointPoint);\n        result.Add(minSumPointPoint);\n\
    \        result.Add(maxSumPointPoint);\n        result.Add(minSumPointPoint);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc8f1733e715402689f9778b927dd4b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc8f1733e715402689f9778b927dd4b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) {\n            return nums;\n        }\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = nums.IndexOf(num);\n            }\n        }\n\
    \        long maxSumSum = maxSum;\n        long maxSumIndexSum = maxSumIndex;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSumSum) {\n                maxSumSum = sum;\n                maxSumIndexSum\
    \ = nums.IndexOf(num);\n            }\n        }\n        bool isAscending = maxSumSum\
    \ < maxSumIndexSum;\n        long maxSumSumIndexSum = maxSumIndexSum;\n      \
    \  foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > maxSumSumIndexSum) {\n                maxSumSumIndexSum = sum;\n         \
    \       maxSumIndexSum = nums.IndexOf(num);\n            }\n        }\n      \
    \  bool isDescending = maxSumSumIndexSum < maxSum;\n        if (isAscending) {\n\
    \            foreach (long num in nums) {\n                result.Add(num);\n\
    \            }\n        } else {\n            foreach (long num in nums) {\n \
    \               result.Insert(nums.IndexOf(num), num);\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39076293665949198c80856cab8c9b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39076293665949198c80856cab8c9b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count < 2) return nums;\n        long sum = 0;\n        long maxSum\
    \ = nums.Max();\n        long minSum = nums.Min();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum > maxSum) {\n     \
    \           maxSum = sum;\n            }\n            if (sum < minSum) {\n  \
    \              minSum = sum;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long curSum = sum;\n        long curMax = maxSum;\n\
    \        long curMin = minSum;\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > curMax) {\n                result.Add(num);\n\
    \                curMax = sum;\n            }\n            if (sum < curMin) {\n\
    \                result.Add(num);\n                curMin = sum;\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60cd33755f394b63aaa4a72f9503a37f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60cd33755f394b63aaa4a72f9503a37f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0)\n            return nums;\n        List<long> nums2 =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            nums2.Add(sum);\n        }\n        nums2.Sort();\n\
    \        List<long> result = new List<long>();\n        foreach (long n in nums2)\
    \ {\n            result.Add(nums.IndexOf(n));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3302435da1f74792b1abd8cf42ed720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3302435da1f74792b1abd8cf42ed720e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums == null || nums.Count == 0)\n            return nums;\n        long\
    \ sum = 0;\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            result.Add(n);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpea8n2v8d.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpea8n2v8d.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2407dsiu.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2407dsiu.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoo736m6_.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpoo736m6_.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3n4ncoeq.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3n4ncoeq.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = nums.Max();\n        long minSum = nums.Min();\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n \
    \               result.Add(num);\n                sum = num;\n            } else\
    \ if (sum < minSum) {\n                result.Add(num);\n                sum =\
    \ num;\n            } else if (sum == maxSum) {\n                result.Add(num);\n\
    \                sum = num;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32fe90e5be0844fea7e461ab1c955273>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32fe90e5be0844fea7e461ab1c955273>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Max\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x0000a]\
    \ in <32fe90e5be0844fea7e461ab1c955273>:0 \n"
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e56529568c94820adc8d10a0ed4aeac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e56529568c94820adc8d10a0ed4aeac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprl5yb3qh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprl5yb3qh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3dj0cfx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpq3dj0cfx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6lbdbjs.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpt6lbdbjs.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2407dsiu.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2407dsiu.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoo736m6_.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpoo736m6_.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) return nums;\n        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpklcsajw4.cs(24,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpklcsajw4.cs(24,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)\
    \ - SumDigits(y)));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq7mgovt4.cs(23,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpq7mgovt4.cs(23,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ max = 0;\n        long min = 0;\n        foreach (long n in nums) {\n      \
    \      sum += n;\n            if (sum > max) {\n                max = sum;\n \
    \           }\n            if (sum < min) {\n                min = sum;\n    \
    \        }\n            result.Add(n);\n        }\n        List<long> ordered\
    \ = new List<long>();\n        long curSum = sum;\n        long curMax = max;\n\
    \        long curMin = min;\n        foreach (long n in result) {\n          \
    \  if (curSum == sum) {\n                ordered.Add(n);\n                curSum\
    \ -= n;\n                curMax -= n;\n                curMin -= n;\n        \
    \    } else if (curSum > sum) {\n                ordered.Add(n);\n           \
    \     curSum -= n;\n                curMax -= n;\n            } else if (curSum\
    \ < sum) {\n                ordered.Add(n);\n                curSum -= n;\n  \
    \              curMin -= n;\n            }\n        }\n        return ordered;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7305b2984514118afa6ba6b0f99120b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7305b2984514118afa6ba6b0f99120b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsygc8hi.cs(23,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmplsygc8hi.cs(23,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxIndex = -1;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n                maxIndex = num;\n            }\n        }\n\
    \        foreach (long num in nums) {\n            if (num == maxIndex) {\n  \
    \              result.Add(num);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5e04c4b3bf7466a92bff20700e66938>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5e04c4b3bf7466a92bff20700e66938>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ max = 0;\n        foreach (long n in nums) {\n            sum += n;\n      \
    \      if (sum > max) {\n                max = sum;\n            }\n         \
    \   result.Add(n);\n        }\n        long maxSum = max;\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            if (sum > maxSum) {\n     \
    \           maxSum = sum;\n            }\n        }\n        long maxSumIndex\
    \ = nums.FindIndex(n => n == maxSum);\n        List<long> sortedNums = new List<long>();\n\
    \        sortedNums.AddRange(nums.Take(maxSumIndex));\n        sortedNums.AddRange(nums.Skip(maxSumIndex));\n\
    \        sortedNums.Sort();\n        return sortedNums;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1cy1_wk5.cs(36,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp1cy1_wk5.cs(37,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3vg57rpa.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3vg57rpa.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoo736m6_.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpoo736m6_.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0)\n            return nums;\n        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n     \
    \   long maxSumIndex = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n  \
    \              maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult2\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult3\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult4\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult5\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult6\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult7\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long maxSumIndexInResult8\
    \ = nums.IndexOf(maxSumIndex);\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        long max\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rxbl6jv.cs(94,17): error CS1002: ; expected

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3734b8490e544ca9bd4fbc3a2fc1b5c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3734b8490e544ca9bd4fbc3a2fc1b5c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0)\n            return nums;\n        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        long\
    \ maxSum = sum;\n        long maxSumIndex = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            sum += nums[i];\n            if (sum > maxSum) {\n     \
    \           maxSum = sum;\n                maxSumIndex = i;\n            }\n \
    \       }\n        List<long> sortedResult = new List<long>();\n        sortedResult.Add(nums[maxSumIndex]);\n\
    \        for (int i = maxSumIndex + 1; i < nums.Count; i++) {\n            sum\
    \ += nums[i];\n            if (sum > maxSum) {\n                sortedResult.Add(nums[i]);\n\
    \                maxSum = sum;\n                maxSumIndex = i;\n           \
    \ }\n        }\n        return sortedResult;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpga1apgzz.cs(35,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpga1apgzz.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0)\n            return nums;\n        long sum = 0;\n  \
    \      List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg8kn3fwl.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpg8kn3fwl.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count < 2) return nums;\n        long sum = 0;\n        long maxSum\
    \ = nums.Max();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long maxSumIndex\
    \ = nums.FindIndex(num => sum == maxSum);\n        foreach (long num in nums)\
    \ {\n            if (sum == maxSum) {\n                result.Add(num);\n    \
    \        }\n            sum += num;\n            if (sum > maxSum) {\n       \
    \         result.Add(num);\n                sum -= num;\n            }\n     \
    \   }\n        if (sum > 0) {\n            result.Add(nums[maxSumIndex]);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcly8ktvy.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjz2sa6_z.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjz2sa6_z.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3dj0cfx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpq3dj0cfx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        long sum = 0;\n      \
    \  long maxSum = nums.Max();\n        long minSum = nums.Min();\n        long\
    \ maxPoint = maxSum;\n        long minPoint = minSum;\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            if (sum > maxSum) {\n       \
    \         maxSum = sum;\n                maxPoint = n;\n            }\n      \
    \      if (sum < minSum) {\n                minSum = sum;\n                minPoint\
    \ = n;\n            }\n        }\n        long maxDiff = maxPoint - maxSum;\n\
    \        long minDiff = minPoint - minSum;\n        long maxPointIndex = nums.IndexOf(maxPoint);\n\
    \        long minPointIndex = nums.IndexOf(minPoint);\n        long maxSumIndex\
    \ = nums.IndexOf(maxSum);\n        long minSumIndex = nums.IndexOf(minSum);\n\
    \        long maxSumPoint = nums[maxSumIndex];\n        long minSumPoint = nums[minSumIndex];\n\
    \        long maxPointSum = nums[maxPointIndex];\n        long minPointSum = nums[minPointIndex];\n\
    \        long maxDiffPoint = nums[maxDiffIndex];\n        long minDiffPoint =\
    \ nums[minDiffIndex];\n        long maxSumPointIndex = nums.IndexOf(maxSumPoint);\n\
    \        long minSumPointIndex = nums.IndexOf(minSumPoint);\n        long maxDiffPointIndex\
    \ = nums.IndexOf(maxDiffPoint);\n        long minDiffPointIndex = nums.IndexOf(minDiffPoint);\n\
    \        long maxSumPointSum = nums[maxSumPointIndex];\n        long minSumPointSum\
    \ = nums[minSumPointIndex];\n        long maxDiffPointSum = nums[maxDiffPointIndex];\n\
    \        long minDiffPointSum = nums[minDiffPointIndex];\n        long maxSumPointSumIndex\
    \ = nums.IndexOf(maxSumPointSum);\n        long minSumPointSumIndex = nums.IndexOf(minSumPointSum);\n\
    \        long maxDiffPointSumIndex = nums.IndexOf(maxDiffPointSum);\n        long\
    \ minDiffPointSumIndex = nums.IndexOf(minDiffPointSum);\n        long maxSumPointDiff\
    \ = nums[maxSumPointSumIndex];\n        long minSumPointDiff = nums[minSumPointSumIndex];\n\
    \        long maxDiffPointDiff = nums[maxDiffPointSum\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvivcbn1.cs(63,53): error CS1003: Syntax error, '']'' expected

    /tmp/tmphvivcbn1.cs(63,53): error CS1002: ; expected

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2407dsiu.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2407dsiu.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjz2sa6_z.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjz2sa6_z.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxIndex = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n                maxIndex = num;\n            }\n        }\n\
    \        result.Add(maxIndex);\n        foreach (long num in nums) {\n       \
    \     sum -= num;\n            if (sum < maxSum) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9a26d69d2dd4f1f8cd229e0a291590f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b9a26d69d2dd4f1f8cd229e0a291590f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)\
    \ - SumDigits(y)));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe9wqlg69.cs(23,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpe9wqlg69.cs(23,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) {\n            return nums;\n        }\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        long maxSumPoint = 0;\n        long maxSumPointIndex\
    \ = 0;\n        long maxSumPointIndex2 = 0;\n        long maxSumPointIndex3 =\
    \ 0;\n        long maxSumPointIndex4 = 0;\n        long maxSumPointIndex5 = 0;\n\
    \        long maxSumPointIndex6 = 0;\n        long maxSumPointIndex7 = 0;\n  \
    \      long maxSumPointIndex8 = 0;\n        long maxSumPointIndex9 = 0;\n    \
    \    long maxSumPointIndex10 = 0;\n        long maxSumPointIndex11 = 0;\n    \
    \    long maxSumPointIndex12 = 0;\n        long maxSumPointIndex13 = 0;\n    \
    \    long maxSumPointIndex14 = 0;\n        long maxSumPointIndex15 = 0;\n    \
    \    long maxSumPointIndex16 = 0;\n        long maxSumPointIndex17 = 0;\n    \
    \    long maxSumPointIndex18 = 0;\n        long maxSumPointIndex19 = 0;\n    \
    \    long maxSumPointIndex20 = 0;\n        long maxSumPointIndex21 = 0;\n    \
    \    long maxSumPointIndex22 = 0;\n        long maxSumPointIndex23 = 0;\n    \
    \    long maxSumPointIndex24 = 0;\n        long maxSumPointIndex25 = 0;\n    \
    \    long maxSumPointIndex26 = 0;\n        long maxSumPointIndex27 = 0;\n    \
    \    long maxSumPointIndex28 = 0;\n        long maxSumPointIndex29 = 0;\n    \
    \    long maxSumPointIndex30 = 0;\n        long maxSumPointIndex31 = 0;\n    \
    \    long maxSumPointIndex32 = 0;\n        long maxSumPointIndex33 = 0;\n    \
    \    long maxSumPointIndex34 = 0;\n        long maxSumPointIndex35 = 0;\n    \
    \    long maxSumPointIndex36 = 0;\n        long maxSumPointIndex37 = 0;\n    \
    \    long maxSumPointIndex38 = 0;\n        long maxSumPointIndex39 = 0;\n    \
    \    long maxSumPointIndex40 = 0;\n        long maxSumPointIndex41 = 0;\n    \
    \    long maxSumPointIndex42 = 0;\n        long maxSumPointIndex43 = 0;\n    \
    \    long maxSumPointIndex44 = 0;\n        long maxSumPointIndex45 = 0;\n    \
    \    long maxSumPointIndex46 = 0;\n        long maxSumPointIndex47 = 0;\n    \
    \    long maxSumPointIndex48 = 0;\n        long maxSumPointIndex49 = 0;\n    \
    \    long maxSumPointIndex50 = 0;\n        long maxSumPointIndex51 = 0;\n    \
    \    long maxSumPointIndex52 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8usyx_b2.cs(21,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp8usyx_b2.cs(22,14): warning CS0219: The variable ''maxSum'' is assigned
    but its value is never used

    /tmp/tmp8usyx_b2.cs(23,14): warning CS0219: The variable ''maxSumIndex'' is assigned
    but its value is never used

    /tmp/tmp8usyx_b2.cs(24,14): warning CS0219: The variable ''maxSumPoint'' is assigned
    but its value is never used

    /tmp/tmp8usyx_b2.cs(25,14): warning CS0219: The variable ''maxSumPointIndex''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(26,14): warning CS0219: The variable ''maxSumPointIndex2''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(27,14): warning CS0219: The variable ''maxSumPointIndex3''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(28,14): warning CS0219: The variable ''maxSumPointIndex4''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(29,14): warning CS0219: The variable ''maxSumPointIndex5''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(30,14): warning CS0219: The variable ''maxSumPointIndex6''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(31,14): warning CS0219: The variable ''maxSumPointIndex7''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(32,14): warning CS0219: The variable ''maxSumPointIndex8''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(33,14): warning CS0219: The variable ''maxSumPointIndex9''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(34,14): warning CS0219: The variable ''maxSumPointIndex10''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(35,14): warning CS0219: The variable ''maxSumPointIndex11''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(36,14): warning CS0219: The variable ''maxSumPointIndex12''
    is assigned but its value is never used

    /tmp/tmp8usyx_b2.cs(37,14): warning CS0219: The variable ''maxSumPointIndex13''
    is ass'
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2407dsiu.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2407dsiu.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) return nums;\n        long sum = 0;\n        long maxSum\
    \ = nums.Max();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long curSum\
    \ = 0;\n        foreach (long num in nums) {\n            curSum += num;\n   \
    \         if (curSum > maxSum) {\n                result.Add(num);\n         \
    \       curSum -= num;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85c5aef4fde24590bebb93b3b9875f14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85c5aef4fde24590bebb93b3b9875f14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)\
    \ - SumDigits(y)));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq7mgovt4.cs(23,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpq7mgovt4.cs(23,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2407dsiu.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2407dsiu.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ max = 0;\n        long min = 0;\n        foreach (long num in nums) {\n    \
    \        sum += num;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n            if (sum < min) {\n                min = sum;\n   \
    \         }\n        }\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum == max) {\n                result.Add(num);\n \
    \           }\n            if (sum == min) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15c593f962f74473895bf3a8b5555169>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15c593f962f74473895bf3a8b5555169>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprfii6czn.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprfii6czn.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0)\n            return nums;\n        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n     \
    \   long maxIndex = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            if (sum > maxSum) {\n                maxSum = sum;\n       \
    \         maxIndex = n;\n            }\n        }\n        long maxSumIndex =\
    \ 0;\n        foreach (long n in nums) {\n            if (n == maxIndex)\n   \
    \             maxSumIndex++;\n            else\n                break;\n     \
    \   }\n        long maxSumIndex2 = maxSumIndex + 1;\n        foreach (long n in\
    \ nums) {\n            if (n == maxSumIndex2)\n                maxSumIndex2++;\n\
    \            else\n                break;\n        }\n        long maxSumIndex3\
    \ = maxSumIndex2 + 1;\n        foreach (long n in nums) {\n            if (n ==\
    \ maxSumIndex3)\n                maxSumIndex3++;\n            else\n         \
    \       break;\n        }\n        long maxSumIndex4 = maxSumIndex3 + 1;\n   \
    \     foreach (long n in nums) {\n            if (n == maxSumIndex4)\n       \
    \         maxSumIndex4++;\n            else\n                break;\n        }\n\
    \        long maxSumIndex5 = maxSumIndex4 + 1;\n        foreach (long n in nums)\
    \ {\n            if (n == maxSumIndex5)\n                maxSumIndex5++;\n   \
    \         else\n                break;\n        }\n        long maxSumIndex6 =\
    \ maxSumIndex5 + 1;\n        foreach (long n in nums) {\n            if (n ==\
    \ maxSumIndex6)\n                maxSumIndex6++;\n            else\n         \
    \       break;\n        }\n        long maxSumIndex7 = maxSumIndex6 + 1;\n   \
    \     foreach (long n in nums) {\n            if (n == maxSumIndex7)\n       \
    \         maxSumIndex7++;\n            else\n                break;\n        }\n\
    \        long maxSumIndex8 = maxSumIndex7 + 1;\n        foreach (long n in nums)\
    \ {\n            if (n == maxSumIndex8)\n                maxSumIndex8++;\n   \
    \         else\n                break;\n        }\n        long maxSumIndex9 =\
    \ maxSumIndex8 + 1;\n        foreach (long n in nums) {\n            if (n ==\
    \ maxSumIndex9)\n                maxSumIndex9++;\n            else\n         \
    \       break;\n        }\n        long maxSumIndex10 = maxSumIndex9 + 1;\n  \
    \      foreach (long n in nums) {\n            if (n == maxSumIndex10)\n     \
    \           maxSumIndex10++;\n            else\n                break;\n     \
    \   }\n        long maxSumIndex11 = maxSumIndex10 + 1;\n        foreach (long\
    \ n in nums) {\n            if (n == maxSumIndex11)\n                maxSumIndex11++;\n\
    \            else\n                break;\n        }\n        long maxSumIndex12\
    \ = maxSumIndex\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppd_g8tln.cs(107,41): error CS1002: ; expected

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) {\n            return nums;\n        }\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        long minSum = nums.Min();\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n            }\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        long maxPoint = maxSum;\n        long\
    \ minPoint = minSum;\n        long maxIndex = 0;\n        long minIndex = 0;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSum) {\n                maxSum = sum;\n                maxIndex =\
    \ num;\n            }\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n                minIndex = num;\n            }\n        }\n        long\
    \ maxPointIndex = nums.IndexOf(maxIndex);\n        long minPointIndex = nums.IndexOf(minIndex);\n\
    \        long maxPointSum = maxSum;\n        long minPointSum = minSum;\n    \
    \    long maxPointPoint = maxPoint;\n        long minPointPoint = minPoint;\n\
    \        long maxPointPointIndex = nums.IndexOf(maxPointIndex);\n        long\
    \ minPointPointIndex = nums.IndexOf(minPointIndex);\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum > maxSum) {\n     \
    \           maxSum = sum;\n                maxPoint = num;\n                maxPointIndex\
    \ = num;\n                maxPointSum = sum;\n            }\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minPoint = num;\n\
    \                minPointIndex = num;\n                minPointSum = sum;\n  \
    \          }\n        }\n        long maxPointPointSum = maxSum;\n        long\
    \ minPointPointSum = minSum;\n        long maxPointPointPoint = maxPointPoint;\n\
    \        long minPointPointPoint = minPointPoint;\n        long maxPointPointPointIndex\
    \ = nums.IndexOf(maxPointPointIndex);\n        long minPointPointPointIndex =\
    \ nums.IndexOf(minPointPointIndex);\n        foreach (long num in nums) {\n  \
    \          sum += num;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxPointPoint = num;\n                maxPointPointIndex\
    \ = num;\n                maxPointPointSum = sum;\n                maxPointPointPoint\
    \ = maxPoint;\n            }\n            if (sum < \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0vqjnmc.cs(86,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpa0vqjnmc.cs(86,22): error CS1026: ) expected

    /tmp/tmpa0vqjnmc.cs(86,22): error CS1002: ; expected

    /tmp/tmpa0vqjnmc.cs(88,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpa0vqjnmc.cs(97,2): error CS1513: } expected

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7xanuqe.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpb7xanuqe.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e56529568c94820adc8d10a0ed4aeac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e56529568c94820adc8d10a0ed4aeac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = nums.Max();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            if (sum > maxSum) {\n                result.Add(sum);\n    \
    \            sum = 0;\n            }\n        }\n        if (sum > 0) {\n    \
    \        result.Add(sum);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61280dbdcb04899ae2c3878ae3f6534>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61280dbdcb04899ae2c3878ae3f6534>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Max\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x0000a]\
    \ in <a61280dbdcb04899ae2c3878ae3f6534>:0 \n"
  stdout: ''
  timestamp: 1659797998
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxIndex = -1;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxIndex = n;\n            }\n        }\n        result.Add(maxIndex);\n\
    \        foreach (long n in nums) {\n            sum -= n;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n                maxIndex = n;\n\
    \            }\n        }\n        result.Add(maxIndex);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c548526470464685ad3613dea0e480c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c548526470464685ad3613dea0e480c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797998
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3dj0cfx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpq3dj0cfx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return a.CompareTo(sum); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpakszznug.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpakszznug.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3n4ncoeq.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3n4ncoeq.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjz2sa6_z.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjz2sa6_z.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) return nums;\n        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpst8yqz7h.cs(24,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpst8yqz7h.cs(24,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, new Comparator<long>((x, y) => { return\
    \ x - y; }));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpknkrkp34.cs(23,32): error CS0246: The type or namespace name ''Comparator<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw71htcsl.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpw71htcsl.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3n4ncoeq.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3n4ncoeq.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoo736m6_.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpoo736m6_.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3vg57rpa.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3vg57rpa.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2407dsiu.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2407dsiu.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsygc8hi.cs(23,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmplsygc8hi.cs(23,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) return nums;\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => SumOfDigits(x) - SumOfDigits(y));\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa3fpijfy.cs(24,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpa3fpijfy.cs(24,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnwis485.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjnwis485.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0) {\n            return nums;\n        }\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSum) {\n                result.Add(num);\n                sum -= maxSum;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78876385869e42158a6d3b3169c8b969>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78876385869e42158a6d3b3169c8b969>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797998
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x)\
    \ - SumOfDigits(y)));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_lm3tw7.cs(23,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpj_lm3tw7.cs(23,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxIndex = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n                maxIndex = num;\n            }\n        }\n\
    \        foreach (long num in nums) {\n            if (num == maxIndex) {\n  \
    \              result.Add(num);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <963bbb15f463481688f04a4b30808a05>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <963bbb15f463481688f04a4b30808a05>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797998
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => sum - x));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc5f2e5cb.cs(23,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpc5f2e5cb.cs(23,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count == 0)\n            return nums;\n        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        long minSum = nums.Min();\n        long maxPoint = maxSum;\n        long\
    \ minPoint = minSum;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            if (sum > maxSum) {\n                maxSum = sum;\n     \
    \           maxPoint = num;\n            }\n            if (sum < minSum) {\n\
    \                minSum = sum;\n                minPoint = num;\n            }\n\
    \        }\n        long maxDigit = maxPoint - minPoint;\n        long minDigit\
    \ = maxPoint - minPoint;\n        long maxSumDigit = maxSum - minSum;\n      \
    \  long minSumDigit = maxSum - minSum;\n        long maxDigitSum = maxDigit -\
    \ minDigit;\n        long minDigitSum = maxDigit - minDigit;\n        long maxSumDigitSum\
    \ = maxSumDigit - minSumDigit;\n        long minSumDigitSum = maxSumDigit - minSumDigit;\n\
    \        long maxPointSum = maxPoint + minPoint;\n        long minPointSum = maxPoint\
    \ + minPoint;\n        long maxPointSumDigit = maxPointSum - minPointSum;\n  \
    \      long minPointSumDigit = maxPointSum - minPointSum;\n        long maxPointSumDigitSum\
    \ = maxPointSumDigit - minPointSumDigit;\n        long minPointSumDigitSum = maxPointSumDigit\
    \ - minPointSumDigit;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            if (sum > maxSum) {\n                maxSum = sum;\n     \
    \           maxPoint = num;\n            }\n            if (sum < minSum) {\n\
    \                minSum = sum;\n                minPoint = num;\n            }\n\
    \        }\n        long maxDigit = maxPoint - minPoint;\n        long minDigit\
    \ = maxPoint - minPoint;\n        long maxSumDigit = maxSum - minSum;\n      \
    \  long minSumDigit = maxSum - minSum;\n        long maxDigitSum = maxDigit -\
    \ minDigit;\n        long minDigitSum = maxDigit - minDigit;\n        long maxSumDigitSum\
    \ = maxSumDigit - minSumDigit;\n        long minSumDigitSum = maxSumDigit - minSumDigit;\n\
    \        long maxPoint\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9c2a1y60.cs(69,22): error CS1002: ; expected

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxSumIndex = 0;\n        long maxSumDigit = 0;\n\
    \        long maxSumDigitIndex = 0;\n        foreach (long num in nums) {\n  \
    \          sum += num;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxSumIndex = nums.IndexOf(num);\n                maxSumDigit\
    \ = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n            }\n\
    \        }\n        foreach (long num in nums) {\n            if (num == maxSumDigit)\
    \ {\n                result.Add(maxSumIndex);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L,\
    \ (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-11L,\
    \ (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L, (long)423L,\
    \ (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L, (long)56L,\
    \ (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L,\
    \ (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,\
    \ (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4159808356ae45af8846aa45d6d99700>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4159808356ae45af8846aa45d6d99700>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797998
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e56529568c94820adc8d10a0ed4aeac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e56529568c94820adc8d10a0ed4aeac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm6j96cx.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprm6j96cx.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptq9xpqvw.cs(23,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmptq9xpqvw.cs(23,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfh_0uh.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpglfh_0uh.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe8lvwz9.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfe8lvwz9.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj3epsgrp.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpj3epsgrp.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797998
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5q77nao.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpv5q77nao.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjz2sa6_z.cs(23,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjz2sa6_z.cs(23,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([])\
    \ == []\n    public static List<long> OrderByPoints(List<long> nums) {\n     \
    \   if (nums.Count < 1) return nums;\n        long sum = 0;\n        long maxSum\
    \ = nums.Max();\n        foreach (long n in nums) {\n            sum += n;\n \
    \           if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long currentSum\
    \ = sum;\n        long currentMaxSum = maxSum;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            long n = nums[i];\n            sum += n;\n            if\
    \ (sum > currentMaxSum) {\n                currentMaxSum = sum;\n            }\n\
    \            if (sum < currentSum) {\n                result.Add(n);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7a57717ed7f4b5daeba90965e03d7ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7a57717ed7f4b5daeba90965e03d7ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659797998
