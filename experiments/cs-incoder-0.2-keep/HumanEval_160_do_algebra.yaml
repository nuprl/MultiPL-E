name: HumanEval_160_do_algebra
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n    // the second list is a list of integers. Use the\
  \ two given lists to build the algebric \n    // expression and return the evaluation\
  \ of this expression.\n    // The basic algebra operations:\n    // Addition ( +\
  \ ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division\
  \ ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
  \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
  \ => result = 9\n    // Note:\n    // The length of operator list is equal to the\
  \ length of operand list minus one.\n    // Operand is a list of of non-negative\
  \ integers.\n    // Operator list has at least one operator, and operand list has\
  \ at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>\
  \ operand) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
  \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
  \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
  *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
  \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
  //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
  \ == (8L));\n    }\n\n}\n"
completions: ["        long result = 0;\n        foreach (string opr in op) {\n  \
    \          long oprVal = 0;\n            foreach (long op in operand) {\n    \
    \            switch (opr) {\n                    case \"+\":\n               \
    \         oprVal += op;\n                        break;\n                    case\
    \ \"-\":\n                        oprVal -= op;\n                        break;\n\
    \                    case \"*\":\n                        oprVal *= op;\n    \
    \                    break;\n                    case \"//\":\n              \
    \          oprVal /= op;\n                        break;\n                   \
    \ case \"**\":\n                        oprVal **= op;\n                     \
    \   break;\n                }\n            }\n            result += oprVal;\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[0];\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string s in op) {\n            switch (s) {\n                case\
    \ \"+\":\n                    result += operand[0];\n                    operand.RemoveAt(0);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    operand.RemoveAt(0);\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    operand.RemoveAt(0);\n                    break;\n\
    \                case \"//\":\n                    result /= operand[0];\n   \
    \                 operand.RemoveAt(0);\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[0];\n                    operand.RemoveAt(0);\n   \
    \                 break;\n            }\n        }\n        return result;", " \
    \       long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            switch\
    \ (opr) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  long operand3 = operand[2];\n            long operand4 = operand[3];\n    \
    \        long operand5 = operand[4];\n            long operand6 = operand[5];\n\
    \            long operand7 = operand[6];\n            long operand8 = operand[7];\n\
    \            long operand9 = operand[8];\n            long operand10 = operand[9];\n\
    \            long operand11 = operand[10];\n            long operand12 = operand[11];\n\
    \            long operand13 = operand[12];\n            long operand14 = operand[13];\n\
    \            long operand15 = operand[14];\n            long operand16 = operand[15];\n\
    \            long operand17 = operand[16];\n            long operand18 = operand[17];\n\
    \            long operand19 = operand[18];\n            long operand20 = operand[19];\n\
    \            long operand21 = operand[20];\n            long operand22 = operand[21];\n\
    \            long operand23 = operand[22];\n            long operand24 = operand[23];\n\
    \            long operand25 = operand[24];\n            long operand26 = operand[25];\n\
    \            long operand27 = operand[26];\n            long operand28 = operand[27];\n\
    \            long operand29 = operand[28];\n            long operand30 = operand[29];\n\
    \            long operand31 = operand[30];\n            long operand32 = operand[31];\n\
    \            long operand33 = operand[32];\n            long operand34 = operand[33];\n\
    \            long operand35 = operand[34];\n            long operand36 = operand[35];\n\
    \            long operand37 = operand[36];\n            long operand38 = operand[37];\n\
    \            long operand39 = operand[38];\n            long operand40 = operand[39];\n\
    \            long operand41 = operand[40];\n            long operand42 = operand[41];\n\
    \            long operand43 = operand[42];\n            long operand44 = operand[43];\n\
    \            long operand45 = operand[44];\n            long operand46 = operand[45];\n\
    \            long operand47 = operand[46];\n            long operand48 = operand[47];\n\
    \            long operand49 = operand[48];\n            long operand50 = operand[49];\n\
    \            long operand51 = operand[50];\n            long operand52 = operand[51];\n\
    \            long operand53 = operand[52];\n            ", "        long result\
    \ = 0;\n        foreach (string opr in op) {\n            long oprValue = operand.FirstOrDefault(x\
    \ => x.ToString() == opr);\n            if (oprValue != 0) {\n               \
    \ result += oprValue;\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (string oper in op) {\n            switch\
    \ (oper) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  switch (op) {\n                case \"+\":\n                    result += operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1;\n                    break;\n                case \"*\"\
    :\n                    result *= operand1;\n                    break;\n     \
    \           case \"//\":\n                    result /= operand1;\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand2;\n                    break;\n                default:\n          \
    \          throw new Exception(\"Invalid operator\");\n            }\n       \
    \ }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op1 in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result **= op2;\n                        break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"/\":\n                        if (op2 != 0) {\n          \
    \                  result /= op2;\n                        }\n               \
    \         break;\n                    case \"//\":\n                        if\
    \ (op2 != 0) {\n                            result /= op2;\n                 \
    \       }\n                        break;\n                    case \"**\":\n\
    \                        result *= op2;\n                        break;\n    \
    \            }\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string s in op) {\n            switch (s) {\n\
    \                case \"+\":\n                    result += operand[0];\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result *= operand[0];\n                   \
    \ break;\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string op1 in op) {\n            foreach (long op2 in\
    \ operand) {\n                switch (op1) {\n                    case \"+\":\n\
    \                        result += op2;\n                        break;\n    \
    \                case \"-\":\n                        result -= op2;\n       \
    \                 break;\n                    case \"*\":\n                  \
    \      result *= op2;\n                        break;\n                    case\
    \ \"//\":\n                        result /= op2;\n                        break;\n\
    \                    case \"**\":\n                        result **= op2;\n \
    \                       break;\n                }\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string opr\
    \ in op) {\n            long oprValue = operand.FirstOrDefault(x => x.ToString()\
    \ == opr);\n            if (oprValue != 0) {\n                result += oprValue;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            long operand2 = operand.First();\n\
    \            long operand1 = operand.Last();\n            long operand3 = operand.Skip(1).First();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result *= operand2;\n                    break;\n            \
    \    default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            switch (op) {\n        \
    \        case \"+\":\n                    result += operand1;\n              \
    \      result += operand2;\n                    break;\n                case \"\
    -\":\n                    result -= operand1;\n                    result -= operand2;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    result *= operand2;\n             \
    \       break;\n                case \"//\":\n                    result /= operand1;\n\
    \                    result /= operand2;\n                    break;\n       \
    \         case \"**\":\n                    result **= operand1;\n           \
    \         result **= operand2;\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string opr in op) {\n            long oprVal = 0;\n          \
    \  foreach (long oprInt in operand) {\n                switch (opr) {\n      \
    \              case \"+\":\n                        oprVal += oprInt;\n      \
    \                  break;\n                    case \"-\":\n                 \
    \       oprVal -= oprInt;\n                        break;\n                  \
    \  case \"*\":\n                        oprVal *= oprInt;\n                  \
    \      break;\n                    case \"//\":\n                        oprVal\
    \ /= oprInt;\n                        break;\n                    case \"**\"\
    :\n                        oprVal **= oprInt;\n                        break;\n\
    \                }\n            }\n            result += oprVal;\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string op\
    \ in op) {\n            foreach (long operand in operand) {\n                switch\
    \ (op) {\n                    case \"+\":\n                        result += operand;\n\
    \                        break;\n                    case \"-\":\n           \
    \             result -= operand;\n                        break;\n           \
    \         case \"*\":\n                        result *= operand;\n          \
    \              break;\n                    case \"//\":\n                    \
    \    result /= operand;\n                        break;\n                    case\
    \ \"**\":\n                        result *= operand;\n                      \
    \  result *= operand;\n                        break;\n                }\n   \
    \         }\n        }\n        return result;", "        long result = 0;\n \
    \       foreach (string op in op) {\n            result += operand[op.Length -\
    \ 1];\n        }\n        return result;", "        long result = 0;\n       \
    \ foreach (string opr in op) {\n            long operand1 = operand[0];\n    \
    \        long operand2 = operand[1];\n            long operand3 = operand[2];\n\
    \            long operand4 = operand[3];\n            switch (opr) {\n       \
    \         case \"+\":\n                    result += operand1 + operand2;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1 - operand2;\n                    break;\n                case \"\
    *\":\n                    result *= operand1 * operand2;\n                   \
    \ break;\n                case \"/\":\n                    result /= operand1\
    \ / operand2;\n                    break;\n                case \"//\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"**\":\n                    result *= operand1;\n                \
    \    break;\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
