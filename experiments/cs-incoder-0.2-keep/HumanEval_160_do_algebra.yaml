name: HumanEval_160_do_algebra
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n    // the second list is a list of integers. Use the\
  \ two given lists to build the algebric \n    // expression and return the evaluation\
  \ of this expression.\n    // The basic algebra operations:\n    // Addition ( +\
  \ ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division\
  \ ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
  \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
  \ => result = 9\n    // Note:\n    // The length of operator list is equal to the\
  \ length of operand list minus one.\n    // Operand is a list of of non-negative\
  \ integers.\n    // Operator list has at least one operator, and operand list has\
  \ at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>\
  \ operand) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
  \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
  \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
  *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
  \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
  //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
  \ == (8L));\n    }\n\n}\n"
completions: ["        long result = 0;\n        foreach (string opr in op) {\n  \
    \          long oprVal = 0;\n            foreach (long op in operand) {\n    \
    \            switch (opr) {\n                    case \"+\":\n               \
    \         oprVal += op;\n                        break;\n                    case\
    \ \"-\":\n                        oprVal -= op;\n                        break;\n\
    \                    case \"*\":\n                        oprVal *= op;\n    \
    \                    break;\n                    case \"//\":\n              \
    \          oprVal /= op;\n                        break;\n                   \
    \ case \"**\":\n                        oprVal **= op;\n                     \
    \   break;\n                }\n            }\n            result += oprVal;\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[0];\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string s in op) {\n            switch (s) {\n                case\
    \ \"+\":\n                    result += operand[0];\n                    operand.RemoveAt(0);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    operand.RemoveAt(0);\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    operand.RemoveAt(0);\n                    break;\n\
    \                case \"//\":\n                    result /= operand[0];\n   \
    \                 operand.RemoveAt(0);\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[0];\n                    operand.RemoveAt(0);\n   \
    \                 break;\n            }\n        }\n        return result;", " \
    \       long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            switch\
    \ (opr) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  long operand3 = operand[2];\n            long operand4 = operand[3];\n    \
    \        long operand5 = operand[4];\n            long operand6 = operand[5];\n\
    \            long operand7 = operand[6];\n            long operand8 = operand[7];\n\
    \            long operand9 = operand[8];\n            long operand10 = operand[9];\n\
    \            long operand11 = operand[10];\n            long operand12 = operand[11];\n\
    \            long operand13 = operand[12];\n            long operand14 = operand[13];\n\
    \            long operand15 = operand[14];\n            long operand16 = operand[15];\n\
    \            long operand17 = operand[16];\n            long operand18 = operand[17];\n\
    \            long operand19 = operand[18];\n            long operand20 = operand[19];\n\
    \            long operand21 = operand[20];\n            long operand22 = operand[21];\n\
    \            long operand23 = operand[22];\n            long operand24 = operand[23];\n\
    \            long operand25 = operand[24];\n            long operand26 = operand[25];\n\
    \            long operand27 = operand[26];\n            long operand28 = operand[27];\n\
    \            long operand29 = operand[28];\n            long operand30 = operand[29];\n\
    \            long operand31 = operand[30];\n            long operand32 = operand[31];\n\
    \            long operand33 = operand[32];\n            long operand34 = operand[33];\n\
    \            long operand35 = operand[34];\n            long operand36 = operand[35];\n\
    \            long operand37 = operand[36];\n            long operand38 = operand[37];\n\
    \            long operand39 = operand[38];\n            long operand40 = operand[39];\n\
    \            long operand41 = operand[40];\n            long operand42 = operand[41];\n\
    \            long operand43 = operand[42];\n            long operand44 = operand[43];\n\
    \            long operand45 = operand[44];\n            long operand46 = operand[45];\n\
    \            long operand47 = operand[46];\n            long operand48 = operand[47];\n\
    \            long operand49 = operand[48];\n            long operand50 = operand[49];\n\
    \            long operand51 = operand[50];\n            long operand52 = operand[51];\n\
    \            long operand53 = operand[52];\n            ", "        long result\
    \ = 0;\n        foreach (string opr in op) {\n            long oprValue = operand.FirstOrDefault(x\
    \ => x.ToString() == opr);\n            if (oprValue != 0) {\n               \
    \ result += oprValue;\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (string oper in op) {\n            switch\
    \ (oper) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  switch (op) {\n                case \"+\":\n                    result += operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1;\n                    break;\n                case \"*\"\
    :\n                    result *= operand1;\n                    break;\n     \
    \           case \"//\":\n                    result /= operand1;\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand2;\n                    break;\n                default:\n          \
    \          throw new Exception(\"Invalid operator\");\n            }\n       \
    \ }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op1 in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result **= op2;\n                        break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"/\":\n                        if (op2 != 0) {\n          \
    \                  result /= op2;\n                        }\n               \
    \         break;\n                    case \"//\":\n                        if\
    \ (op2 != 0) {\n                            result /= op2;\n                 \
    \       }\n                        break;\n                    case \"**\":\n\
    \                        result *= op2;\n                        break;\n    \
    \            }\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string s in op) {\n            switch (s) {\n\
    \                case \"+\":\n                    result += operand[0];\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result *= operand[0];\n                   \
    \ break;\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string op1 in op) {\n            foreach (long op2 in\
    \ operand) {\n                switch (op1) {\n                    case \"+\":\n\
    \                        result += op2;\n                        break;\n    \
    \                case \"-\":\n                        result -= op2;\n       \
    \                 break;\n                    case \"*\":\n                  \
    \      result *= op2;\n                        break;\n                    case\
    \ \"//\":\n                        result /= op2;\n                        break;\n\
    \                    case \"**\":\n                        result **= op2;\n \
    \                       break;\n                }\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string opr\
    \ in op) {\n            long oprValue = operand.FirstOrDefault(x => x.ToString()\
    \ == opr);\n            if (oprValue != 0) {\n                result += oprValue;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            long operand2 = operand.First();\n\
    \            long operand1 = operand.Last();\n            long operand3 = operand.Skip(1).First();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result *= operand2;\n                    break;\n            \
    \    default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            switch (op) {\n        \
    \        case \"+\":\n                    result += operand1;\n              \
    \      result += operand2;\n                    break;\n                case \"\
    -\":\n                    result -= operand1;\n                    result -= operand2;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    result *= operand2;\n             \
    \       break;\n                case \"//\":\n                    result /= operand1;\n\
    \                    result /= operand2;\n                    break;\n       \
    \         case \"**\":\n                    result **= operand1;\n           \
    \         result **= operand2;\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string opr in op) {\n            long oprVal = 0;\n          \
    \  foreach (long oprInt in operand) {\n                switch (opr) {\n      \
    \              case \"+\":\n                        oprVal += oprInt;\n      \
    \                  break;\n                    case \"-\":\n                 \
    \       oprVal -= oprInt;\n                        break;\n                  \
    \  case \"*\":\n                        oprVal *= oprInt;\n                  \
    \      break;\n                    case \"//\":\n                        oprVal\
    \ /= oprInt;\n                        break;\n                    case \"**\"\
    :\n                        oprVal **= oprInt;\n                        break;\n\
    \                }\n            }\n            result += oprVal;\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string op\
    \ in op) {\n            foreach (long operand in operand) {\n                switch\
    \ (op) {\n                    case \"+\":\n                        result += operand;\n\
    \                        break;\n                    case \"-\":\n           \
    \             result -= operand;\n                        break;\n           \
    \         case \"*\":\n                        result *= operand;\n          \
    \              break;\n                    case \"//\":\n                    \
    \    result /= operand;\n                        break;\n                    case\
    \ \"**\":\n                        result *= operand;\n                      \
    \  result *= operand;\n                        break;\n                }\n   \
    \         }\n        }\n        return result;", "        long result = 0;\n \
    \       foreach (string op in op) {\n            result += operand[op.Length -\
    \ 1];\n        }\n        return result;", "        long result = 0;\n       \
    \ foreach (string opr in op) {\n            long operand1 = operand[0];\n    \
    \        long operand2 = operand[1];\n            long operand3 = operand[2];\n\
    \            long operand4 = operand[3];\n            switch (opr) {\n       \
    \         case \"+\":\n                    result += operand1 + operand2;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1 - operand2;\n                    break;\n                case \"\
    *\":\n                    result *= operand1 * operand2;\n                   \
    \ break;\n                case \"/\":\n                    result /= operand1\
    \ / operand2;\n                    break;\n                case \"//\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"**\":\n                    result *= operand1;\n                \
    \    break;\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op in op) {\n            switch (op) {\n\
    \                case \"+\":\n                    result += operand[0];\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n\
    \                        result *= operand[i];\n                    }\n      \
    \              break;\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (string oper in op) {\n            switch\
    \ (oper) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result *= operand[0];\n                \
    \    break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op1 in op) {\n            foreach (long op2 in operand.Skip(1))\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result /= op2;\n                        break;\n          \
    \      }\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string op in op) {\n            switch (op) {\n     \
    \           case \"+\":\n                    result += operand[0];\n         \
    \           break;\n                case \"-\":\n                    result -=\
    \ operand[0];\n                    break;\n                case \"*\":\n     \
    \               result *= operand[0];\n                    break;\n          \
    \      case \"//\":\n                    result /= operand[0];\n             \
    \       break;\n                case \"**\":\n                    result *= operand[0];\n\
    \                    result /= operand[1];\n                    break;\n     \
    \       }\n        }\n        return result;", "        long result = 0;\n   \
    \     foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result **= op2;\n     \
    \                   break;\n                }\n            }\n        }\n    \
    \    return result;", "        long result = 0;\n        foreach (string op in\
    \ op) {\n            switch (op) {\n                case \"+\":\n            \
    \        result += operand[0];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[0];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[0];\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    result /= operand[0];\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator\");\n            }\n        }\n   \
    \     return result;", "        long result = 0;\n        foreach (string op1\
    \ in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result **= op2;\n                        break;\n\
    \                    default:\n                        throw new ArgumentException(\"\
    Invalid operator\");\n                }\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string op1 in op) {\n\
    \            foreach (long op2 in operand) {\n                switch (op1) {\n\
    \                    case \"+\":\n                        result += op2;\n   \
    \                     break;\n                    case \"-\":\n              \
    \          result -= op2;\n                        break;\n                  \
    \  case \"*\":\n                        result *= op2;\n                     \
    \   break;\n                    case \"//\":\n                        result /=\
    \ op2;\n                        break;\n                    case \"**\":\n   \
    \                     result *= op2;\n                        break;\n       \
    \         }\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op1 in op) {\n            foreach (long\
    \ op2 in operand) {\n                switch (op1) {\n                    case\
    \ \"+\":\n                        result += op2;\n                        break;\n\
    \                    case \"-\":\n                        result -= op2;\n   \
    \                     break;\n                    case \"*\":\n              \
    \          result *= op2;\n                        break;\n                  \
    \  case \"//\":\n                        result /= op2;\n                    \
    \    break;\n                    case \"**\":\n                        result\
    \ **= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[1];\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op in op) {\n            switch (op) {\n              \
    \  case \"+\":\n                    result += operand[0];\n                  \
    \  break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              for (int i = 1; i < operand.Count; i++) {\n                   \
    \     result *= operand[i];\n                    }\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            result += operand[op.Length\
    \ - 1];\n        }\n        return result;", "        long result = 0;\n     \
    \   foreach (string op in op) {\n            long operand1 = operand[0];\n   \
    \         long operand2 = operand[1];\n            switch (op) {\n           \
    \     case \"+\":\n                    result = operand1 + operand2;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ = operand1 - operand2;\n                    break;\n                case \"\
    *\":\n                    result = operand1 * operand2;\n                    break;\n\
    \                case \"//\":\n                    result = operand1 // operand2;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = operand1 ** operand2;\n                    break;\n            }\n\
    \            operand[0] = result;\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[0];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            long\
    \ operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result *= operand2;\n                    break;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[1];\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            long operand2 = operand.First();\n\
    \            long operand1 = operand.Last();\n            switch (opr) {\n   \
    \             case \"+\":\n                    result += operand2;\n         \
    \           break;\n                case \"-\":\n                    result -=\
    \ operand2;\n                    break;\n                case \"*\":\n       \
    \             result *= operand2;\n                    break;\n              \
    \  case \"//\":\n                    result /= operand2;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand2;\n\
    \                    break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n            operand.RemoveAt(operand.Count\
    \ - 1);\n            operand.RemoveAt(operand.Count - 1);\n        }\n       \
    \ return result;", "        long result = 0;\n        foreach (string opr in op)\
    \ {\n            long oprVal = 0;\n            foreach (long oprVal2 in operand)\
    \ {\n                switch (opr) {\n                    case \"+\":\n       \
    \                 oprVal += oprVal2;\n                        break;\n       \
    \             case \"-\":\n                        oprVal -= oprVal2;\n      \
    \                  break;\n                    case \"*\":\n                 \
    \       oprVal *= oprVal2;\n                        break;\n                 \
    \   case \"//\":\n                        oprVal /= oprVal2;\n               \
    \         break;\n                    case \"**\":\n                        oprVal\
    \ **= oprVal2;\n                        break;\n                }\n          \
    \  }\n            result += oprVal;\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  switch (opr) {\n                case \"+\":\n                    result +=\
    \ operand1 + operand2;\n                    break;\n                case \"-\"\
    :\n                    result -= operand1 - operand2;\n                    break;\n\
    \                case \"*\":\n                    result *= operand1 * operand2;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand1 / operand2;\n                    break;\n              \
    \  case \"**\":\n                    result *= operand1;\n                   \
    \ result /= operand2;\n                    break;\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string op1\
    \ in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result *= op2;\n                        result\
    \ *= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op2 in op) {\n            foreach (long op3 in operand) {\n        \
    \        switch (op2) {\n                    case \"+\":\n                   \
    \     result += op3;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op3;\n                        break;\n\
    \                    case \"*\":\n                        result *= op3;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op3;\n                        break;\n                 \
    \   case \"**\":\n                        result *= op3;\n                   \
    \     result /= op3;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string oper in op) {\n            long operand2 = operand.Last();\n\
    \            long operand1 = operand.First();\n            switch (oper) {\n \
    \               case \"+\":\n                    result += operand1;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result /= operand2;\n                    break;\n       \
    \         default:\n                    throw new Exception(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        long result = 0;\n        foreach (string opr in\
    \ op) {\n            switch (opr) {\n                case \"+\":\n           \
    \         result += operand[0];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[0];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[0];\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    result /= operand[1];\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator: \" + opr);\n            }\n      \
    \  }\n        return result;", "        long result = 0;\n        foreach (string\
    \ opr in op) {\n            long oprValue = Convert.ToInt64(opr);\n          \
    \  long oprValue2 = Convert.ToInt64(operand[op.Count - 1]);\n            switch\
    \ (opr) {\n                case \"+\":\n                    result += oprValue;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= oprValue;\n                    break;\n                case \"*\"\
    :\n                    result *= oprValue;\n                    break;\n     \
    \           case \"//\":\n                    result /= oprValue;\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ oprValue2;\n                    break;\n                default:\n         \
    \           break;\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string opr in op) {\n            switch (opr) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    operand.RemoveAt(0);\n                    break;\n                case \"\
    -\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    operand.RemoveAt(0);\n          \
    \          break;\n                case \"//\":\n                    result /=\
    \ operand[0];\n                    operand.RemoveAt(0);\n                    break;\n\
    \                case \"**\":\n                    result *= operand[0];\n   \
    \                 result *= operand[0];\n                    operand.RemoveAt(0);\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator\");\n            }\n        }\n   \
    \     return result;", "        long result = 0;\n        foreach (string op1\
    \ in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result **= op2;\n                        break;\n\
    \                    default:\n                        throw new Exception(\"\
    Invalid operator: \" + op1);\n                }\n            }\n        }\n  \
    \      return result;", "        long result = 0;\n        foreach (string opr\
    \ in op) {\n            long operand1 = operand.First();\n            long operand2\
    \ = operand.Skip(1).First();\n            switch (opr) {\n                case\
    \ \"+\":\n                    result += operand1 + operand2;\n               \
    \     break;\n                case \"-\":\n                    result -= operand1\
    \ - operand2;\n                    break;\n                case \"*\":\n     \
    \               result *= operand1 * operand2;\n                    break;\n \
    \               case \"//\":\n                    result /= operand1 / operand2;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    result *= operand2;\n            \
    \        break;\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op in op) {\n            result += operand[op.Length\
    \ - 1];\n        }\n        return result;", "        long result = 0;\n     \
    \   foreach (string op1 in op) {\n            foreach (long op2 in operand.Skip(1))\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \          default:\n                        throw new Exception(\"Invalid operator\"\
    );\n                }\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (string opr in op) {\n            long\
    \ oprValue = operand[operand.Count - 1];\n            long oprValue2 = operand[operand.Count\
    \ - 2];\n            long oprValue3 = operand[operand.Count - 3];\n          \
    \  long oprValue4 = operand[operand.Count - 4];\n            long oprValue5 =\
    \ operand[operand.Count - 5];\n            long oprValue6 = operand[operand.Count\
    \ - 6];\n            long oprValue7 = operand[operand.Count - 7];\n          \
    \  long oprValue8 = operand[operand.Count - 8];\n            long oprValue9 =\
    \ operand[operand.Count - 9];\n            long oprValue10 = operand[operand.Count\
    \ - 10];\n            long oprValue11 = operand[operand.Count - 11];\n       \
    \     long oprValue12 = operand[operand.Count - 12];\n            long oprValue13\
    \ = operand[operand.Count - 13];\n            long oprValue14 = operand[operand.Count\
    \ - 14];\n            long oprValue15 = operand[operand.Count - 15];\n       \
    \     long oprValue16 = operand[operand.Count - 16];\n            long oprValue17\
    \ = operand[operand.Count - 17];\n            long oprValue18 = operand[operand.Count\
    \ - 18];\n            long oprValue19 = operand[operand.Count - 19];\n       \
    \     long oprValue20 = operand[operand.Count - 20];\n            long oprValue21\
    \ = operand[operand.Count - 21];\n            long oprValue22 = operand[operand.Count\
    \ - 22];\n            long oprValue23 = operand[operand.Count - 23];\n       \
    \     long oprValue24 = operand[operand.Count - 24];\n            long oprValue25\
    \ = operand[operand.Count - 25];\n            long oprValue26 = operand[operand.Count\
    \ - 26];\n            long oprValue27 = operand[operand.Count - 27];\n       \
    \     long oprValue28 = operand[operand.Count - 28];\n            long oprValue29\
    \ = operand[operand.Count - 29];\n            long oprValue30 = operand[operand.Count\
    \ - 30];\n            long oprValue31 = operand[operand.Count - 31];\n       \
    \     long oprValue32 = operand[operand.Count - 32];\n            ", "       \
    \ long result = 0;\n        foreach (string opr in op) {\n            long oprValue\
    \ = operand.FirstOrDefault(x => x == 0);\n            long oprValue2 = operand.FirstOrDefault(x\
    \ => x == 1);\n            long oprValue3 = operand.FirstOrDefault(x => x == 2);\n\
    \            long oprValue4 = operand.FirstOrDefault(x => x == 3);\n         \
    \   long oprValue5 = operand.FirstOrDefault(x => x == 4);\n            long oprValue6\
    \ = operand.FirstOrDefault(x => x == 5);\n            long oprValue7 = operand.FirstOrDefault(x\
    \ => x == 6);\n            long oprValue8 = operand.FirstOrDefault(x => x == 7);\n\
    \            long oprValue9 = operand.FirstOrDefault(x => x == 8);\n         \
    \   long oprValue10 = operand.FirstOrDefault(x => x == 9);\n            long oprValue11\
    \ = operand.FirstOrDefault(x => x == 10);\n            long oprValue12 = operand.FirstOrDefault(x\
    \ => x == 11);\n            long oprValue13 = operand.FirstOrDefault(x => x ==\
    \ 12);\n            long oprValue14 = operand.FirstOrDefault(x => x == 13);\n\
    \            long oprValue15 = operand.FirstOrDefault(x => x == 14);\n       \
    \     long oprValue16 = operand.FirstOrDefault(x => x == 15);\n            long\
    \ oprValue17 = operand.FirstOrDefault(x => x == 16);\n            long oprValue18\
    \ = operand.FirstOrDefault(x => x == 17);\n            long oprValue19 = operand.FirstOrDefault(x\
    \ => x == 18);\n            long oprValue20 = operand.FirstOrDefault(x => x ==\
    \ 19);\n            long oprValue21 = operand.FirstOrDefault(x => x == 20);\n\
    \            long oprValue22 = operand.FirstOrDefault(x => x == 21);\n       \
    \     long oprValue23 = operand.FirstOrDefault(x => x == 22);\n            long\
    \ oprValue24 = operand.FirstOrDefault(x => x == 23);\n            long oprValue25\
    \ = operand.FirstOrDefault(x => x == 24);\n            long oprValue26 = operand.FirstOrDefault(x\
    \ => x == 25);\n            long oprValue27 = operand.FirstOrDefault(x => x ==\
    \ 26);\n            long oprValue28 = operand.FirstOrDefault(x => x == 27);\n\
    \            long oprValue29 = operand.FirstOrDefault(x => x == 28);\n       \
    \     long oprValue30 = operand.", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            switch (opr) {\n                case \"+\"\
    :\n                    result += operand[0];\n                    break;\n   \
    \             case \"-\":\n                    result -= operand[0];\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           for (int i = 1; i < operand.Count; i++) {\n                      \
    \  result *= operand[i];\n                    }\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            switch (op) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result *= operand[0];\n                    break;\n           \
    \     default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op2 in op) {\n            switch (op2) {\n          \
    \      case \"+\":\n                    result += operand[0];\n              \
    \      break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result *= operand[0];\n                    break;\n           \
    \     default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string opr in op) {\n            long oprVal = 0;\n   \
    \         foreach (long oprVal2 in operand) {\n                switch (opr) {\n\
    \                    case \"+\":\n                        oprVal += oprVal2;\n\
    \                        break;\n                    case \"-\":\n           \
    \             oprVal -= oprVal2;\n                        break;\n           \
    \         case \"*\":\n                        oprVal *= oprVal2;\n          \
    \              break;\n                    case \"//\":\n                    \
    \    oprVal /= oprVal2;\n                        break;\n                    case\
    \ \"**\":\n                        oprVal **= oprVal2;\n                     \
    \   break;\n                }\n            }\n            result += oprVal;\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            long operand2 = operand.FirstOrDefault();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand2;\n                    break;\n                case \"-\"\
    :\n                    result -= operand2;\n                    break;\n     \
    \           case \"*\":\n                    result *= operand2;\n           \
    \         break;\n                case \"//\":\n                    result /=\
    \ operand2;\n                    break;\n                case \"**\":\n      \
    \              result *= operand2;\n                    break;\n             \
    \   default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n            operand.RemoveAt(0);\n        }\n        return result;",
  "        long result = 0;\n        foreach (string oper in op) {\n            switch\
    \ (oper) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    for (int i = 1; i < operand.Count; i++)\
    \ {\n                        result *= operand[i];\n                    }\n  \
    \                  break;\n                default:\n                    throw\
    \ new ArgumentException(\"Operator not recognized.\");\n            }\n      \
    \  }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op1 in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result *= op2;\n                        result\
    \ *= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            long oprValue = Convert.ToInt64(opr);\n  \
    \          long operandValue = Convert.ToInt64(operand[operand.Count - 1]);\n\
    \            long oprValue2 = Convert.ToInt64(opr);\n            long operandValue2\
    \ = Convert.ToInt64(operand[operand.Count - 2]);\n            switch (opr) {\n\
    \                case \"+\":\n                    result += oprValue + operandValue;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= oprValue - operandValue;\n                    break;\n           \
    \     case \"*\":\n                    result *= oprValue * operandValue;\n  \
    \                  break;\n                case \"//\":\n                    result\
    \ /= oprValue / operandValue;\n                    break;\n                case\
    \ \"**\":\n                    result **= oprValue ** operandValue;\n        \
    \            break;\n            }\n        }\n        return result;", "    \
    \    long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        result *= op2;\n                \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string opr in op) {\n            long\
    \ operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result *= operand2;\n                    break;\n            \
    \    default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string oper in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            long operand3 = operand[2];\n\
    \            long operand4 = operand[3];\n            switch (oper) {\n      \
    \          case \"+\":\n                    result = operand1 + operand2 + operand3\
    \ + operand4;\n                    break;\n                case \"-\":\n     \
    \               result = operand1 - operand2 - operand3 - operand4;\n        \
    \            break;\n                case \"*\":\n                    result =\
    \ operand1 * operand2 * operand3 * operand4;\n                    break;\n   \
    \             case \"//\":\n                    result = operand1 / (operand2\
    \ % operand3);\n                    break;\n                case \"**\":\n   \
    \                 result = operand1 * (operand2 * operand3);\n               \
    \     break;\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op in op) {\n            switch (op) {\n\
    \                case \"+\":\n                    result += operand[0];\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result /= operand[0];\n                   \
    \ break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string oper in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  switch (oper) {\n                case \"+\":\n                    result =\
    \ operand1 + operand2;\n                    break;\n                case \"-\"\
    :\n                    result = operand1 - operand2;\n                    break;\n\
    \                case \"*\":\n                    result = operand1 * operand2;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result = operand1 // operand2;\n                    break;\n              \
    \  case \"**\":\n                    result = operand1 ** operand2;\n        \
    \            break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n            operand[0] = result;\n      \
    \  }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op1 in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result **= op2;\n                        break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string opr in op) {\n            long temp\
    \ = 0;\n            foreach (long op in operand) {\n                switch (opr)\
    \ {\n                    case \"+\":\n                        temp = temp + op;\n\
    \                        break;\n                    case \"-\":\n           \
    \             temp = temp - op;\n                        break;\n            \
    \        case \"*\":\n                        temp = temp * op;\n            \
    \            break;\n                    case \"//\":\n                      \
    \  temp = temp / op;\n                        break;\n                    case\
    \ \"**\":\n                        temp = temp ** op;\n                      \
    \  break;\n                }\n            }\n            result = result + temp;\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op1 in op) {\n            foreach (long op2 in operand) {\n        \
    \        switch (op1) {\n                    case \"+\":\n                   \
    \     result += op2;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op2;\n                        break;\n\
    \                    case \"*\":\n                        result *= op2;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op2;\n                        break;\n                 \
    \   case \"**\":\n                        result *= op2;\n                   \
    \     break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string oper in op) {\n            switch (oper) {\n          \
    \      case \"+\":\n                    result += operand[0];\n              \
    \      break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              for (int i = 1; i < operand.Count; i++) {\n                   \
    \     result *= operand[i];\n                    }\n                    break;\n\
    \                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            long\
    \ operand2 = operand.FirstOrDefault();\n            long operand1 = operand.Skip(1).FirstOrDefault();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result **= operand1 ** operand2;\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string opr in op) {\n            switch\
    \ (opr) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    for (int i = 1; i < operand.Count; i++)\
    \ {\n                        result *= operand[i];\n                    }\n  \
    \                  break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string op1 in op) {\n\
    \            foreach (long op2 in operand) {\n                switch (op1) {\n\
    \                    case \"+\":\n                        result += op2;\n   \
    \                     break;\n                    case \"-\":\n              \
    \          result -= op2;\n                        break;\n                  \
    \  case \"*\":\n                        result *= op2;\n                     \
    \   break;\n                    case \"//\":\n                        result /=\
    \ op2;\n                        break;\n                    case \"**\":\n   \
    \                     result **= op2;\n                        break;\n      \
    \          }\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string opr in op) {\n            long operand1\
    \ = operand.First();\n            long operand2 = operand.Skip(1).First();\n \
    \           switch (opr) {\n                case \"+\":\n                    result\
    \ += operand1 + operand2;\n                    break;\n                case \"\
    -\":\n                    result -= operand1 - operand2;\n                   \
    \ break;\n                case \"*\":\n                    result *= operand1\
    \ * operand2;\n                    break;\n                case \"//\":\n    \
    \                result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result *= operand2;\n                    break;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[1];\n                    break;\n            }\n  \
    \      }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result *= operand[0];\n                    break;\n                default:\n\
    \                    throw new Exception(\"Invalid operator\");\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        for (int i = 1; i < operand.Count; i++) {\n                        result\
    \ *= operand[i];\n                    }\n                    break;\n        \
    \    }\n        }\n        return result;", "        long result = 0;\n      \
    \  foreach (string opr in op) {\n            switch (opr) {\n                case\
    \ \"+\":\n                    result += operand[0];\n                    operand.RemoveAt(0);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    operand.RemoveAt(0);\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    operand.RemoveAt(0);\n                    break;\n\
    \                case \"//\":\n                    result /= operand[0];\n   \
    \                 operand.RemoveAt(0);\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        for (int i = 1; i < operand.Count; i++) {\n                        result\
    \ *= operand[i];\n                    }\n                    operand.RemoveAt(0);\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator: \" + opr);\n            }\n      \
    \  }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op in op) {\n            long operand1 = operand[0];\n            long operand2\
    \ = operand[1];\n            switch (op) {\n                case \"+\":\n    \
    \                result = operand1 + operand2;\n                    break;\n \
    \               case \"-\":\n                    result = operand1 - operand2;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result = operand1 * operand2;\n                    break;\n                case\
    \ \"//\":\n                    result = operand1 // operand2;\n              \
    \      break;\n                case \"**\":\n                    result = operand1\
    \ ** operand2;\n                    break;\n            }\n        }\n       \
    \ return result;", "        long result = 0;\n        foreach (string op in op)\
    \ {\n            long operand1 = operand[0];\n            long operand2 = operand[1];\n\
    \            switch (op) {\n                case \"+\":\n                    result\
    \ = operand1 + operand2;\n                    break;\n                case \"\
    -\":\n                    result = operand1 - operand2;\n                    break;\n\
    \                case \"*\":\n                    result = operand1 * operand2;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result = operand1 // operand2;\n                    break;\n              \
    \  case \"**\":\n                    result = operand1 ** operand2;\n        \
    \            break;\n            }\n            operand[0] = result;\n       \
    \ }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op1 in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result **= op2;\n                        break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string op in op) {\n            long operand1\
    \ = operand[0];\n            long operand2 = operand[1];\n            long operand3\
    \ = operand[2];\n            long operand4 = operand[3];\n            long operand5\
    \ = operand[4];\n            long operand6 = operand[5];\n            long operand7\
    \ = operand[6];\n            long operand8 = operand[7];\n            long operand9\
    \ = operand[8];\n            long operand10 = operand[9];\n            long operand11\
    \ = operand[10];\n            long operand12 = operand[11];\n            long\
    \ operand13 = operand[12];\n            long operand14 = operand[13];\n      \
    \      long operand15 = operand[14];\n            long operand16 = operand[15];\n\
    \            switch (op) {\n                case \"+\":\n                    result\
    \ = operand1 + operand2;\n                    break;\n                case \"\
    -\":\n                    result = operand1 - operand2;\n                    break;\n\
    \                case \"*\":\n                    result = operand1 * operand2;\n\
    \                    break;\n                case \"/\":\n                   \
    \ result = operand1 / operand2;\n                    break;\n                case\
    \ \"//\":\n                    result = operand1 // operand2;\n              \
    \      break;\n                case \"**\":\n                    result = operand1\
    \ ** operand2;\n                    break;\n            }\n        }\n       \
    \ return result;", "        long result = 0;\n        foreach (string opr in op)\
    \ {\n            long temp = 0;\n            foreach (long op in operand) {\n\
    \                switch (opr) {\n                    case \"+\":\n           \
    \             temp = temp + op;\n                        break;\n            \
    \        case \"-\":\n                        temp = temp - op;\n            \
    \            break;\n                    case \"*\":\n                       \
    \ temp = temp * op;\n                        break;\n                    case\
    \ \"//\":\n                        temp = temp / op;\n                       \
    \ break;\n                    case \"**\":\n                        temp = temp\
    \ ** op;\n                        break;\n                }\n            }\n \
    \           result += temp;\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op in op) {\n            switch (op) {\n\
    \                case \"+\":\n                    result += operand[0];\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result /= operand[1];\n                   \
    \ break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            switch\
    \ (opr) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    for (int i = 1; i < operand.Count; i++)\
    \ {\n                        result *= operand[i];\n                    }\n  \
    \                  break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator\");\n            }\n        }\n   \
    \     return result;", "        long result = 0;\n        foreach (string s in\
    \ op) {\n            switch (s) {\n                case \"+\":\n             \
    \       result += operand[0];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[0];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[0];\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    result /= operand[1];\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator\");\n            }\n        }\n   \
    \     return result;", "        long result = 0;\n        foreach (string op in\
    \ op) {\n            switch (op) {\n                case \"+\":\n            \
    \        result += operand[0];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[0];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[0];\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    for (int i = 1;\
    \ i < operand.Count; i++) {\n                        result *= operand[i];\n \
    \                   }\n                    break;\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string op1\
    \ in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result *= op2;\n                        result\
    \ *= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            switch (opr) {\n                case \"+\"\
    :\n                    result += operand[0];\n                    break;\n   \
    \             case \"-\":\n                    result -= operand[0];\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new ArgumentException(\"Invalid operator:\
    \ \" + opr);\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op1 in op) {\n            foreach (long\
    \ op2 in operand) {\n                switch (op1) {\n                    case\
    \ \"+\":\n                        result += op2;\n                        break;\n\
    \                    case \"-\":\n                        result -= op2;\n   \
    \                     break;\n                    case \"*\":\n              \
    \          result *= op2;\n                        break;\n                  \
    \  case \"//\":\n                        result /= op2;\n                    \
    \    break;\n                    case \"**\":\n                        result\
    \ **= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[1];\n                    break;\n                default:\n\
    \                    throw new Exception(\"Invalid operator\");\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string s in op) {\n            switch (s) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[1];\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Operator not found.\");\n \
    \           }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            switch (op) {\n        \
    \        case \"+\":\n                    result += operand1;\n              \
    \      break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"/\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"//\":\n                    result /= operand1;\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand1;\n                    break;\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string opr in op) {\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand[0];\n                    break;\n                case \"-\"\
    :\n                    result -= operand[0];\n                    break;\n   \
    \             case \"*\":\n                    result *= operand[0];\n       \
    \             break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    result /= operand[0];\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator\");\n            }\n        }\n   \
    \     return result;", "        long result = 0;\n        foreach (string opr\
    \ in op) {\n            switch (opr) {\n                case \"+\":\n        \
    \            result += operand[0];\n                    break;\n             \
    \   case \"-\":\n                    result -= operand[0];\n                 \
    \   break;\n                case \"*\":\n                    result *= operand[0];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[0];\n                    break;\n                case \"\
    **\":\n                    result **= operand[0];\n                    break;\n\
    \                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[0];\n                \
    \    break;\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string s in op) {\n            switch(s) {\n \
    \               case \"+\":\n                    result += operand[0];\n     \
    \               break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result /= operand[1];\n                   \
    \ break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            switch\
    \ (opr) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    for (int i = 1; i < operand.Count; i++)\
    \ {\n                        result *= operand[i];\n                    }\n  \
    \                  break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string opr in op) {\n\
    \            long oprValue = Convert.ToInt64(opr);\n            long oprValue2\
    \ = Convert.ToInt64(oprValue);\n            long oprValue3 = Convert.ToInt64(oprValue2);\n\
    \            long oprValue4 = Convert.ToInt64(oprValue3);\n            long oprValue5\
    \ = Convert.ToInt64(oprValue4);\n            long oprValue6 = Convert.ToInt64(oprValue5);\n\
    \            long oprValue7 = Convert.ToInt64(oprValue6);\n            long oprValue8\
    \ = Convert.ToInt64(oprValue7);\n            long oprValue9 = Convert.ToInt64(oprValue8);\n\
    \            long oprValue10 = Convert.ToInt64(oprValue9);\n            long oprValue11\
    \ = Convert.ToInt64(oprValue10);\n            long oprValue12 = Convert.ToInt64(oprValue11);\n\
    \            long oprValue13 = Convert.ToInt64(oprValue12);\n            long\
    \ oprValue14 = Convert.ToInt64(oprValue13);\n            long oprValue15 = Convert.ToInt64(oprValue14);\n\
    \            long oprValue16 = Convert.ToInt64(oprValue15);\n            long\
    \ oprValue17 = Convert.ToInt64(oprValue16);\n            long oprValue18 = Convert.ToInt64(oprValue17);\n\
    \            long oprValue19 = Convert.ToInt64(oprValue18);\n            long\
    \ oprValue20 = Convert.ToInt64(oprValue19);\n            long oprValue21 = Convert.ToInt64(oprValue20);\n\
    \            long oprValue22 = Convert.ToInt64(oprValue21);\n            long\
    \ oprValue23 = Convert.ToInt64(oprValue22);\n            long oprValue24 = Convert.ToInt64(oprValue23);\n\
    \            long oprValue25 = Convert.ToInt64(oprValue24);\n            long\
    \ oprValue26 = Convert.ToInt64(oprValue25);\n            long oprValue27 = Convert.ToInt64(oprValue26);\n\
    \            long oprValue28 = Convert.ToInt64(oprValue27);\n            long\
    \ oprValue29 = Convert.ToInt64(oprValue28);\n            long oprValue30 = Convert.ToInt64(",
  "        long result = 0;\n        foreach (string s in op) {\n            switch\
    \ (s) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  switch (op) {\n                case \"+\":\n                    result = operand1\
    \ + operand2;\n                    break;\n                case \"-\":\n     \
    \               result = operand1 - operand2;\n                    break;\n  \
    \              case \"*\":\n                    result = operand1 * operand2;\n\
    \                    break;\n                case \"/\":\n                   \
    \ result = operand1 / operand2;\n                    break;\n                case\
    \ \"//\":\n                    result = operand1 // operand2;\n              \
    \      break;\n                case \"**\":\n                    result = operand1\
    \ ** operand2;\n                    break;\n                default:\n       \
    \             throw new ArgumentException(\"Invalid operator\");\n           \
    \ }\n            operand[0] = result;\n        }\n        return result;", " \
    \       long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        result *= op2;\n                \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        result *= op2;\n                \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        result *= op2;\n                \
    \        break;\n                    default:\n                        throw new\
    \ ArgumentException(\"Invalid operator\");\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[1];\n                    break;\n                default:\n\
    \                    throw new Exception(\"Invalid operator\");\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op1 in op) {\n            foreach (long op2 in operand) {\n        \
    \        switch (op1) {\n                    case \"+\":\n                   \
    \     result += op2;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op2;\n                        break;\n\
    \                    case \"*\":\n                        result *= op2;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op2;\n                        break;\n                 \
    \   case \"**\":\n                        result **= op2;\n                  \
    \      break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string opr in op) {\n            long\
    \ oprVal = 0;\n            foreach (long op in operand) {\n                switch\
    \ (opr) {\n                    case \"+\":\n                        oprVal +=\
    \ op;\n                        break;\n                    case \"-\":\n     \
    \                   oprVal -= op;\n                        break;\n          \
    \          case \"*\":\n                        oprVal *= op;\n              \
    \          break;\n                    case \"//\":\n                        oprVal\
    \ /= op;\n                        break;\n                    case \"**\":\n \
    \                       oprVal **= op;\n                        break;\n     \
    \           }\n            }\n            result += oprVal;\n        }\n     \
    \   return result;", "        long result = 0;\n        foreach (string opr in\
    \ op) {\n            switch (opr) {\n                case \"+\":\n           \
    \         result += operand[0];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[0];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[0];\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    for (int i = 1;\
    \ i < operand.Count; i++) {\n                        result *= operand[i];\n \
    \                   }\n                    break;\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string op1\
    \ in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result *= op2;\n                        result\
    \ *= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            switch (opr) {\n                case \"+\"\
    :\n                    result += operand[0];\n                    break;\n   \
    \             case \"-\":\n                    result -= operand[0];\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            long operand1 = operand.First();\n\
    \            long operand2 = operand.Skip(1).First();\n            long oprValue\
    \ = Convert.ToInt64(opr);\n            switch (opr) {\n                case \"\
    +\":\n                    result += operand1 + operand2;\n                   \
    \ break;\n                case \"-\":\n                    result -= operand1\
    \ - operand2;\n                    break;\n                case \"*\":\n     \
    \               result *= operand1 * operand2;\n                    break;\n \
    \               case \"//\":\n                    result /= operand1 / operand2;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    result *= operand2;\n            \
    \        break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        break;\n                    default:\n\
    \                        throw new Exception(\"Invalid operator\");\n        \
    \        }\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string op in op) {\n            switch (op) {\n     \
    \           case \"+\":\n                    result += operand[0];\n         \
    \           break;\n                case \"-\":\n                    result -=\
    \ operand[0];\n                    break;\n                case \"*\":\n     \
    \               result *= operand[0];\n                    break;\n          \
    \      case \"//\":\n                    result /= operand[0];\n             \
    \       break;\n                case \"**\":\n                    result *= operand[0];\n\
    \                    result *= operand[0];\n                    break;\n     \
    \           default:\n                    throw new Exception(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op in op) {\n            switch (op) {\n       \
    \         case \"+\":\n                    result += operand[0];\n           \
    \         break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \     default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            result += operand.FirstOrDefault(x\
    \ => x.Equals(op))\n                * Convert.ToInt64(op.Substring(op.Length -\
    \ 1));\n        }\n        return result;", "        long result = 0;\n      \
    \  foreach (string opr in op) {\n            switch (opr) {\n                case\
    \ \"+\":\n                    result += operand[0];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[0];\n    \
    \                break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            switch (opr) {\n          \
    \      case \"+\":\n                    result += operand[0];\n              \
    \      break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[0];\n                    break;\n           \
    \     default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            switch (op) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \     default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string opr in op) {\n            switch (opr) {\n     \
    \           case \"+\":\n                    result += operand[0];\n         \
    \           break;\n                case \"-\":\n                    result -=\
    \ operand[0];\n                    break;\n                case \"*\":\n     \
    \               result *= operand[0];\n                    break;\n          \
    \      case \"//\":\n                    result /= operand[0];\n             \
    \       break;\n                case \"**\":\n                    result *= operand[0];\n\
    \                    result /= operand[1];\n                    break;\n     \
    \           default:\n                    throw new Exception(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string oper in op) {\n            long operand1 = operand.First();\n\
    \            long operand2 = operand.Skip(1).First();\n            switch (oper)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result *= operand2;\n                    break;\n       \
    \     }\n        }\n        return result;", "        long result = 0;\n     \
    \   foreach (string op1 in op) {\n            foreach (long op2 in operand) {\n\
    \                switch (op1) {\n                    case \"+\":\n           \
    \             result += op2;\n                        break;\n               \
    \     case \"-\":\n                        result -= op2;\n                  \
    \      break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result **= op2;\n     \
    \                   break;\n                }\n            }\n        }\n    \
    \    return result;", "        long result = 0;\n        foreach (string opr in\
    \ op) {\n            switch (opr) {\n                case \"+\":\n           \
    \         result += operand[0];\n                    break;\n                case\
    \ \"-\":\n                    result -= operand[0];\n                    break;\n\
    \                case \"*\":\n                    result *= operand[0];\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    result /= operand[1];\n\
    \                    break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string opr in op) {\n\
    \            long temp = 0;\n            foreach (long op in operand) {\n    \
    \            switch (opr) {\n                    case \"+\":\n               \
    \         temp = temp + op;\n                        break;\n                \
    \    case \"-\":\n                        temp = temp - op;\n                \
    \        break;\n                    case \"*\":\n                        temp\
    \ = temp * op;\n                        break;\n                    case \"//\"\
    :\n                        temp = temp / op;\n                        break;\n\
    \                    case \"**\":\n                        temp = temp ** op;\n\
    \                        break;\n                }\n            }\n          \
    \  result = result + temp;\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op1 in op) {\n            foreach (long\
    \ op2 in operand) {\n                switch (op1) {\n                    case\
    \ \"+\":\n                        result += op2;\n                        break;\n\
    \                    case \"-\":\n                        result -= op2;\n   \
    \                     break;\n                    case \"*\":\n              \
    \          result *= op2;\n                        break;\n                  \
    \  case \"//\":\n                        result /= op2;\n                    \
    \    break;\n                    case \"**\":\n                        result\
    \ *= op2;\n                        result *= op2;\n                        break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    for (int i = 1; i < operand.Count; i++)\
    \ {\n                        result *= operand[i];\n                    }\n  \
    \                  break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string opr in op) {\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand[0];\n                    break;\n                case \"-\"\
    :\n                    result -= operand[0];\n                    break;\n   \
    \             case \"*\":\n                    result *= operand[0];\n       \
    \             break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    result /= operand[1];\n\
    \                    break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string opr in op) {\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand[0];\n                    break;\n                case \"-\"\
    :\n                    result -= operand[0];\n                    break;\n   \
    \             case \"*\":\n                    result *= operand[0];\n       \
    \             break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result *= operand[0];\n                    result /= operand[1];\n\
    \                    break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string op in op) {\n \
    \           switch (op) {\n                case \"+\":\n                    result\
    \ += operand[0];\n                    break;\n                case \"-\":\n  \
    \                  result -= operand[0];\n                    break;\n       \
    \         case \"*\":\n                    result *= operand[0];\n           \
    \         break;\n                case \"//\":\n                    result /=\
    \ operand[0];\n                    break;\n                case \"**\":\n    \
    \                result **= operand[0];\n                    break;\n        \
    \    }\n        }\n        return result;", "        long result = 0;\n      \
    \  foreach (string op in op) {\n            long operand1 = operand[0];\n    \
    \        long operand2 = operand[1];\n            switch (op) {\n            \
    \    case \"+\":\n                    result = operand1 + operand2;\n        \
    \            break;\n                case \"-\":\n                    result =\
    \ operand1 - operand2;\n                    break;\n                case \"*\"\
    :\n                    result = operand1 * operand2;\n                    break;\n\
    \                case \"//\":\n                    result = operand1 // operand2;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = operand1 ** operand2;\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n            operand[0] = result;\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result *= operand[0];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \      }\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string oper in op) {\n            switch (oper) {\n \
    \               case \"+\":\n                    result += operand[0];\n     \
    \               break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result *= operand[0];\n                   \
    \ break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            long\
    \ operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result *= operand2;\n                    break;\n            \
    \    default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op1 in op) {\n            foreach (long op2 in operand.Skip(1))\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \          default:\n                        throw new ArgumentException(\"Invalid\
    \ operator: \" + op1);\n                }\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string op1 in op) {\n\
    \            foreach (long op2 in operand) {\n                switch (op1) {\n\
    \                    case \"+\":\n                        result += op2;\n   \
    \                     break;\n                    case \"-\":\n              \
    \          result -= op2;\n                        break;\n                  \
    \  case \"*\":\n                        result *= op2;\n                     \
    \   break;\n                    case \"//\":\n                        result /=\
    \ op2;\n                        break;\n                    case \"**\":\n   \
    \                     result *= op2;\n                        result *= op2;\n\
    \                        break;\n                }\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string op1\
    \ in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"/\":\n                      \
    \  result /= op2;\n                        break;\n                    case \"\
    //\":\n                        result /= op2;\n                        break;\n\
    \                    case \"**\":\n                        result *= op2;\n  \
    \                      break;\n                }\n            }\n        }\n \
    \       return result;", "        long result = 0;\n        foreach (string op\
    \ in op) {\n            switch(op) {\n                case \"+\":\n          \
    \          result += operand[0];\n                    break;\n               \
    \ case \"-\":\n                    result -= operand[0];\n                   \
    \ break;\n                case \"*\":\n                    result *= operand[0];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[0];\n                    break;\n                case \"\
    **\":\n                    result *= operand[0];\n                    result /=\
    \ operand[1];\n                    break;\n                default:\n        \
    \            throw new ArgumentException(\"Invalid operator\");\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op1 in op) {\n            foreach (long op2 in operand) {\n        \
    \        switch (op1) {\n                    case \"+\":\n                   \
    \     result += op2;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op2;\n                        break;\n\
    \                    case \"*\":\n                        result *= op2;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op2;\n                        break;\n                 \
    \   case \"**\":\n                        result **= op2;\n                  \
    \      break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        break;\n                }\n     \
    \       }\n        }\n        return result;", "        long result = 0;\n   \
    \     foreach (string oper in op) {\n            switch (oper) {\n           \
    \     case \"+\":\n                    result += operand[0];\n               \
    \     break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \     default:\n                    throw new ArgumentException(\"Operator not\
    \ found.\");\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op1 in op) {\n            foreach (long\
    \ op2 in operand) {\n                switch (op1) {\n                    case\
    \ \"+\":\n                        result += op2;\n                        break;\n\
    \                    case \"-\":\n                        result -= op2;\n   \
    \                     break;\n                    case \"*\":\n              \
    \          result *= op2;\n                        break;\n                  \
    \  case \"//\":\n                        result /= op2;\n                    \
    \    break;\n                    case \"**\":\n                        result\
    \ *= op2;\n                        result *= op2;\n                        break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand.Skip(1)) {\n                switch (op1) {\n          \
    \          case \"+\":\n                        result += op2;\n             \
    \           break;\n                    case \"-\":\n                        result\
    \ -= op2;\n                        break;\n                    case \"*\":\n \
    \                       result *= op2;\n                        break;\n     \
    \               case \"//\":\n                        result /= op2;\n       \
    \                 break;\n                    case \"**\":\n                 \
    \       result *= op2;\n                        result *= op2;\n             \
    \           break;\n                    default:\n                        throw\
    \ new Exception(\"Invalid operator\");\n                }\n            }\n   \
    \     }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op1 in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result *= op2;\n                        result\
    \ *= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string oper in op) {\n            switch (oper) {\n                case \"\
    +\":\n                    result += operand[0];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[0];\n    \
    \                break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string oper in op) {\n            long operand1 = operand.First();\n\
    \            long operand2 = operand.Last();\n            switch (oper) {\n  \
    \              case \"+\":\n                    result += operand1;\n        \
    \            break;\n                case \"-\":\n                    result -=\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result *= operand1;\n                    break;\n              \
    \  case \"//\":\n                    result /= operand1;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Operator not found.\");\n            }\n           \
    \ operand.RemoveAt(operand.Count - 1);\n        }\n        return result;", " \
    \       long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        break;\n                }\n     \
    \       }\n        }\n        return result;", "        long result = 0;\n   \
    \     foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result **= op2;\n     \
    \                   break;\n                    default:\n                   \
    \     throw new ArgumentException(\"Invalid operator\");\n                }\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            switch (op) {\n        \
    \        case \"+\":\n                    result += operand1;\n              \
    \      break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          result *= operand2;\n                    break;\n                default:\n\
    \                    throw new Exception(\"Invalid operator: \" + op);\n     \
    \       }\n        }\n        return result;", "        long result = 0;\n   \
    \     foreach (string opr in op) {\n            long operand2 = operand.FirstOrDefault();\n\
    \            long operand1 = operand.LastOrDefault();\n            switch (opr)\
    \ {\n                case \"+\":\n                    result += operand1 + operand2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1 - operand2;\n                    break;\n               \
    \ case \"*\":\n                    result *= operand1 * operand2;\n          \
    \          break;\n                case \"/\":\n                    result /=\
    \ operand1 / operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n            }\n        }\n        return result;", "      \
    \  long result = 0;\n        foreach (string opr in op) {\n            long operand1\
    \ = operand[0];\n            long operand2 = operand[1];\n            long operand3\
    \ = operand[2];\n            long operand4 = operand[3];\n            switch (opr)\
    \ {\n                case \"+\":\n                    result += operand1 + operand2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1 - operand2;\n                    break;\n               \
    \ case \"*\":\n                    result *= operand1 * operand2;\n          \
    \          break;\n                case \"//\":\n                    result /=\
    \ operand1 / operand2;\n                    break;\n                case \"**\"\
    :\n                    result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string opr in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            switch (opr) {\n       \
    \         case \"+\":\n                    result += operand1;\n             \
    \       result += operand2;\n                    break;\n                case\
    \ \"-\":\n                    result -= operand1;\n                    result\
    \ -= operand2;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand1;\n                    result /= operand2;\n            \
    \        break;\n                case \"**\":\n                    result **=\
    \ operand1;\n                    result **= operand2;\n                    break;\n\
    \                default:\n                    throw new Exception(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result **= op2;\n     \
    \                   break;\n                }\n            }\n        }\n    \
    \    return result;", "        long result = 0;\n        foreach (string op1 in\
    \ op) {\n            foreach (long op2 in operand) {\n                switch (op1)\
    \ {\n                    case \"+\":\n                        result += op2;\n\
    \                        break;\n                    case \"-\":\n           \
    \             result -= op2;\n                        break;\n               \
    \     case \"*\":\n                        result *= op2;\n                  \
    \      break;\n                    case \"//\":\n                        result\
    \ /= op2;\n                        break;\n                    case \"**\":\n\
    \                        result **= op2;\n                        break;\n   \
    \                 default:\n                        throw new ArgumentException(\"\
    Invalid operator\");\n                }\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string opr in op) {\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand[0];\n                    break;\n                case \"-\"\
    :\n                    result -= operand[0];\n                    break;\n   \
    \             case \"*\":\n                    result *= operand[0];\n       \
    \             break;\n                case \"//\":\n                    result\
    \ /= operand[0];\n                    break;\n                case \"**\":\n \
    \                   result **= operand[0];\n                    break;\n     \
    \       }\n        }\n        return result;", "        long result = 0;\n   \
    \     foreach (string op1 in op) {\n            foreach (long op2 in operand.Skip(1))\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \          default:\n                        throw new Exception(\"Invalid operator\"\
    );\n                }\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string opr in op) {\n            switch (opr) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              for (int i = 1; i < operand.Count; i++) {\n                   \
    \     result *= operand[i];\n                    }\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            switch (op) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \ }\n        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            switch (opr) {\n                case \"+\"\
    :\n                    result += operand[0];\n                    break;\n   \
    \             case \"-\":\n                    result -= operand[0];\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string s in op) {\n            switch (s) {\n              \
    \  case \"+\":\n                    result += operand[0];\n                  \
    \  break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \     default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            switch (op) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              for (int i = 1; i < operand.Count; i++) {\n                   \
    \     result *= operand[i];\n                    }\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            long operand2 = operand.Last();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand2;\n                    break;\n                case \"-\"\
    :\n                    result -= operand2;\n                    break;\n     \
    \           case \"*\":\n                    result *= operand2;\n           \
    \         break;\n                case \"//\":\n                    result /=\
    \ operand2;\n                    break;\n                case \"**\":\n      \
    \              result *= operand2;\n                    break;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[0];\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op in op) {\n            switch (op) {\n              \
    \  case \"+\":\n                    result += operand[0];\n                  \
    \  break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \ }\n        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            long operand1 = operand.First();\n       \
    \     long operand2 = operand.Skip(1).First();\n            long operand3 = operand.Skip(2).First();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result *= operand2;\n                    break;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op1 in op) {\n            foreach (long op2 in operand) {\n        \
    \        switch (op1) {\n                    case \"+\":\n                   \
    \     result += op2;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op2;\n                        break;\n\
    \                    case \"*\":\n                        result *= op2;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op2;\n                        break;\n                 \
    \   case \"**\":\n                        result **= op2;\n                  \
    \      break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        result *= op2;\n                \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result *= op2;\n                        result *= op2;\n                \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    for (int i = 1; i < operand.Count; i++)\
    \ {\n                        result *= operand[i];\n                    }\n  \
    \                  break;\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op in op) {\n            switch (op) {\n              \
    \  case \"+\":\n                    result += operand[0];\n                  \
    \  break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result *= operand[0];\n                    break;\n           \
    \     default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            switch (op) {\n        \
    \        case \"+\":\n                    result += operand1;\n              \
    \      break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          result *= operand2;\n                    break;\n            }\n  \
    \      }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            switch (opr) {\n                case \"+\"\
    :\n                    result += operand[0];\n                    break;\n   \
    \             case \"-\":\n                    result -= operand[0];\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result *= operand[0];\n                    break;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result **= operand[0];\n           \
    \         break;\n            }\n        }\n        return result;", "       \
    \ long result = 0;\n        foreach (string op in op) {\n            switch (op)\
    \ {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string oper in op) {\n            long\
    \ operand1 = operand[0];\n            long operand2 = operand[1];\n          \
    \  switch (oper) {\n                case \"+\":\n                    result +=\
    \ operand1;\n                    result += operand2;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              result -= operand2;\n                    break;\n             \
    \   case \"*\":\n                    result *= operand1;\n                   \
    \ result *= operand2;\n                    break;\n                case \"/\"\
    :\n                    result /= operand1;\n                    result /= operand2;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand1;\n                    result *= operand2;\n            \
    \        break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result *= operand2;\n                    break;\n       \
    \     }\n        }\n        return result;", "        long result = 0;\n     \
    \   foreach (string op1 in op) {\n            foreach (long op2 in operand) {\n\
    \                switch (op1) {\n                    case \"+\":\n           \
    \             result += op2;\n                        break;\n               \
    \     case \"-\":\n                        result -= op2;\n                  \
    \      break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \      }\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string op2 in op) {\n            foreach (long op3 in\
    \ operand) {\n                switch (op2) {\n                    case \"+\":\n\
    \                        result += op3;\n                        break;\n    \
    \                case \"-\":\n                        result -= op3;\n       \
    \                 break;\n                    case \"*\":\n                  \
    \      result *= op3;\n                        break;\n                    case\
    \ \"//\":\n                        result /= op3;\n                        break;\n\
    \                    case \"**\":\n                        result *= op3;\n  \
    \                      result *= op3;\n                        break;\n      \
    \          }\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op2 in op) {\n            foreach (long\
    \ op3 in operand) {\n                switch (op2) {\n                    case\
    \ \"+\":\n                        result += op3;\n                        break;\n\
    \                    case \"-\":\n                        result -= op3;\n   \
    \                     break;\n                    case \"*\":\n              \
    \          result *= op3;\n                        break;\n                  \
    \  case \"//\":\n                        result /= op3;\n                    \
    \    break;\n                    case \"**\":\n                        result\
    \ **= op3;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            long operand1 = operand.First();\n       \
    \     long operand2 = operand.Skip(1).First();\n            switch (opr) {\n \
    \               case \"+\":\n                    result += operand1 + operand2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1 - operand2;\n                    break;\n               \
    \ case \"*\":\n                    result *= operand1 * operand2;\n          \
    \          break;\n                case \"//\":\n                    result /=\
    \ operand1 / operand2;\n                    break;\n                case \"**\"\
    :\n                    result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n                default:\n                    throw\
    \ new Exception(\"Invalid operator\");\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        foreach (string opr in op) {\n\
    \            long oprVal = 0;\n            foreach (long op in operand) {\n  \
    \              oprVal += op;\n            }\n            switch (opr) {\n    \
    \            case \"+\":\n                    result += oprVal;\n            \
    \        break;\n                case \"-\":\n                    result -= oprVal;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= oprVal;\n                    break;\n                case \"//\":\n\
    \                    result /= oprVal;\n                    break;\n         \
    \       case \"**\":\n                    result **= oprVal;\n               \
    \     break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string oper in op) {\n            switch\
    \ (oper) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result *= operand[0];\n                \
    \    break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string op in op) {\n            result\
    \ += operand[op.Length - 1];\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string s in op) {\n            switch (s) {\n\
    \                case \"+\":\n                    result += operand[0];\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n\
    \                        result *= operand[i];\n                    }\n      \
    \              break;\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[1];\n                \
    \    break;\n                default:\n                    throw new ArgumentException(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            long\
    \ oprValue = operand.FirstOrDefault(x => x == 0);\n            if (oprValue !=\
    \ 0) {\n                switch (opr) {\n                    case \"+\":\n    \
    \                    result += oprValue;\n                        break;\n   \
    \                 case \"-\":\n                        result -= oprValue;\n \
    \                       break;\n                    case \"*\":\n            \
    \            result *= oprValue;\n                        break;\n           \
    \         case \"//\":\n                        result /= oprValue;\n        \
    \                break;\n                    case \"**\":\n                  \
    \      result **= oprValue;\n                        break;\n                }\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string oper in op) {\n            switch (oper) {\n        \
    \        case \"+\":\n                    result += operand[0];\n            \
    \        break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \ }\n        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op1 in op) {\n            foreach (long op2 in operand) {\n        \
    \        switch (op1) {\n                    case \"+\":\n                   \
    \     result += op2;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op2;\n                        break;\n\
    \                    case \"*\":\n                        result *= op2;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op2;\n                        break;\n                 \
    \   case \"**\":\n                        result **= op2;\n                  \
    \      break;\n                }\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op1 in op) {\n            foreach\
    \ (long op2 in operand) {\n                switch (op1) {\n                  \
    \  case \"+\":\n                        result += op2;\n                     \
    \   break;\n                    case \"-\":\n                        result -=\
    \ op2;\n                        break;\n                    case \"*\":\n    \
    \                    result *= op2;\n                        break;\n        \
    \            case \"//\":\n                        result /= op2;\n          \
    \              break;\n                    case \"**\":\n                    \
    \    result **= op2;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result **= op2;\n     \
    \                   break;\n                }\n            }\n        }\n    \
    \    return result;", "        long result = 0;\n        foreach (string op1 in\
    \ op) {\n            foreach (long op2 in operand) {\n                switch (op1)\
    \ {\n                    case \"+\":\n                        result += op2;\n\
    \                        break;\n                    case \"-\":\n           \
    \             result -= op2;\n                        break;\n               \
    \     case \"*\":\n                        result *= op2;\n                  \
    \      break;\n                    case \"//\":\n                        result\
    \ /= op2;\n                        break;\n                    case \"**\":\n\
    \                        result *= op2;\n                        result *= op2;\n\
    \                        break;\n                    default:\n              \
    \          throw new Exception(\"Invalid operator\");\n                }\n   \
    \         }\n        }\n        return result;", "        long result = 0;\n \
    \       foreach (string opr in op) {\n            switch (opr) {\n           \
    \     case \"+\":\n                    result += operand[0];\n               \
    \     break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              for (int i = 1; i < operand.Count; i++) {\n                   \
    \     result *= operand[i];\n                    }\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op in op) {\n            switch (op) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[0];\n                    break;\n           \
    \ }\n        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op1 in op) {\n            foreach (long op2 in operand.Skip(1)) {\n\
    \                switch (op1) {\n                    case \"+\":\n           \
    \             result += op2;\n                        break;\n               \
    \     case \"-\":\n                        result -= op2;\n                  \
    \      break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"/\":\n \
    \                       result /= op2;\n                        break;\n     \
    \               case \"//\":\n                        result /= op2;\n       \
    \                 break;\n                    case \"**\":\n                 \
    \       result *= op2;\n                        break;\n                    default:\n\
    \                        throw new ArgumentException(\"Invalid operator\");\n\
    \                }\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
