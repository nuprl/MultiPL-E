name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1,\
  \ 1]) == None\n    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long second = smallest;\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                second = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                second = smallest;\n                smallest = lst[i];\n    \
    \            found = true;\n            } else if (lst[i] > smallest) {\n    \
    \            second = smallest;\n                smallest = lst[i];\n        \
    \        found = true;\n            }\n        }\n        if (found) {\n     \
    \       return new Nullable<long>(smallest);\n        }\n        return null;",
  "        if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var smallestIndex = 0;\n        var smallestIndex2 = 0;\n        var\
    \ smallestIndex3 = 0;\n        var smallestIndex4 = 0;\n        var smallestIndex5\
    \ = 0;\n        var smallestIndex6 = 0;\n        var smallestIndex7 = 0;\n   \
    \     var smallestIndex8 = 0;\n        var smallestIndex9 = 0;\n        var smallestIndex10\
    \ = 0;\n        var smallestIndex11 = 0;\n        var smallestIndex12 = 0;\n \
    \       var smallestIndex13 = 0;\n        var smallestIndex14 = 0;\n        var\
    \ smallestIndex15 = 0;\n        var smallestIndex16 = 0;\n        var smallestIndex17\
    \ = 0;\n        var smallestIndex18 = 0;\n        var smallestIndex19 = 0;\n \
    \       var smallestIndex20 = 0;\n        var smallestIndex21 = 0;\n        var\
    \ smallestIndex22 = 0;\n        var smallestIndex23 = 0;\n        var smallestIndex24\
    \ = 0;\n        var smallestIndex25 = 0;\n        var smallestIndex26 = 0;\n \
    \       var smallestIndex27 = 0;\n        var smallestIndex28 = 0;\n        var\
    \ smallestIndex29 = 0;\n        var smallestIndex30 = 0;\n        var smallestIndex31\
    \ = 0;\n        var smallestIndex32 = 0;\n        var smallestIndex33 = 0;\n \
    \       var smallestIndex34 = 0;\n        var smallestIndex35 = 0;\n        var\
    \ smallestIndex36 = 0;\n        var smallestIndex37 = 0;\n        var smallestIndex38\
    \ = 0;\n        var smallestIndex39 = 0;\n        var smallestIndex40 = 0;\n \
    \       var smallestIndex41 = 0;\n        var smallestIndex42 = 0;\n        var\
    \ smallestIndex43 = 0;\n        var smallestIndex44 = 0;\n        var smallestIndex45\
    \ = 0;\n        var smallestIndex46 = 0;\n        var smallestIndex47 = 0;\n \
    \       var smallestIndex48 = 0;\n        var smallestIndex49 = 0;\n        var\
    \ smallestIndex50 = 0;\n        var smallestIndex51 = 0;\n        var smallestIndex52\
    \ = 0;\n        var smallestIndex53 = 0;\n        var smallestIndex54 = 0;\n \
    \       var smallestIndex55 = 0;\n        var smallestIndex56 = 0;\n        var\
    \ smallestIndex57 = 0;\n        var smallestIndex58 = 0;\n        var smallestIndex59\
    \ = 0;\n        var smallestIndex60 = 0;\n        var smallestIndex61 = 0;\n \
    \       var smallestIndex62 = 0;\n        var smallestIndex63 = 0;\n        var\
    \ smallestIndex64 = 0;\n        var smallestIndex65 = 0;\n        var smallestIndex66\
    \ = 0;\n        var smallestIndex67 = 0;\n        var smallestIndex68 = 0;\n \
    \       var smallestIndex69 = 0;\n        var smallestIndex70 = 0;\n        var\
    \ smallestIndex71 = 0;\n        var smallestIndex", "        if (lst.Count ==\
    \ 0) {\n            return null;\n        }\n        long min = lst[0];\n    \
    \    long max = lst[0];\n        foreach (long i in lst) {\n            if (i\
    \ < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        if (min > max) {\n         \
    \   long tmp = min;\n            min = max;\n            max = tmp;\n        }\n\
    \        long mid = (min + max) / 2;\n        if (mid == min) {\n            return\
    \ max;\n        }\n        if (mid == max) {\n            return min;\n      \
    \  }\n        if (mid > max) {\n            return NextSmallest(lst.Skip(1).Take(1).Concat(new[]\
    \ { mid }).ToList());\n        }\n        if (mid < min) {\n            return\
    \ NextSmallest(lst.Take(1).Concat(new[] { mid }).ToList());\n        }\n     \
    \   return mid;", "        if (lst.Count == 0)\n            return null;\n   \
    \     var smallest = lst[0];\n        var smallestIndex = lst.IndexOf(smallest);\n\
    \        if (smallestIndex == 0)\n            return null;\n        var secondSmallest\
    \ = lst[smallestIndex - 1];\n        var secondSmallestIndex = lst.IndexOf(secondSmallest);\n\
    \        if (secondSmallestIndex == 0)\n            return null;\n        if (smallestIndex\
    \ < secondSmallestIndex)\n            return secondSmallest;\n        else\n \
    \           return smallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        var smallest = lst[0];\n        var secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        bool found = false;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n                found = true;\n            }\n\
    \            if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n        if (found) {\n            return max;\n        }\n       \
    \ return null;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        foreach (var item in lst) {\n            if (item < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = item;\n\
    \            } else if (item < secondSmallest) {\n                secondSmallest\
    \ = item;\n            }\n        }\n        return secondSmallest;", "      \
    \  if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        long thirdSmallest\
    \ = lst[2];\n        long fourthSmallest = lst[3];\n        long fifthSmallest\
    \ = lst[4];\n        long sixthSmallest = lst[5];\n        long seventhSmallest\
    \ = lst[6];\n        long eighthSmallest = lst[7];\n        long ninthSmallest\
    \ = lst[8];\n        long tenthSmallest = lst[9];\n        long eleventhSmallest\
    \ = lst[10];\n        long twelfthSmallest = lst[11];\n        long thirteenthSmallest\
    \ = lst[12];\n        long fourteenthSmallest = lst[13];\n        long fifteenthSmallest\
    \ = lst[14];\n        long sixteenthSmallest = lst[15];\n        long seventeenthSmallest\
    \ = lst[16];\n        long eighteenthSmallest = lst[17];\n        long nineteenthSmallest\
    \ = lst[18];\n        long twentiethSmallest = lst[19];\n        long twentyFirstSmallest\
    \ = lst[20];\n        long twentySecondSmallest = lst[21];\n        long twentyThirdSmallest\
    \ = lst[22];\n        long twentyFourthSmallest = lst[23];\n        long twentyFifthSmallest\
    \ = lst[24];\n        long twentySixthSmallest = lst[25];\n        long twentySeventhSmallest\
    \ = lst[26];\n        long twentyEighthSmallest = lst[27];\n        long twentyNinthSmallest\
    \ = lst[28];\n        long thirtiethSmallest = lst[29];\n        long thirtyFirstSmallest\
    \ = lst[30];\n        long thirtySecondSmallest = lst[31];\n        long thirtyThirdSmallest\
    \ = lst[32];\n        long thirtyFourthSmallest = lst[33];\n        long thirtyFifthSmallest\
    \ = lst[34];\n        long thirtySixthSmallest = lst[35];\n        long thirtySeventhSmallest\
    \ = lst[36];\n        long thirtyEighthSmallest = lst[37];\n", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        bool found = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    if (found) {\n            return secondSmallest;\n        } else {\n    \
    \        return null;\n        }", "        if (lst.Count == 0) {\n          \
    \  return null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       long min2 = lst[0];\n        long max2 = lst[0];\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n                min\
    \ = lst[i];\n            }\n            if (lst[i] > max) {\n                max\
    \ = lst[i];\n            }\n            if (lst[i] < min2) {\n               \
    \ min2 = lst[i];\n            }\n            if (lst[i] > max2) {\n          \
    \      max2 = lst[i];\n            }\n        }\n        if (min == max) {\n \
    \           return max;\n        }\n        if (min2 < max2) {\n            return\
    \ min2;\n        }\n        return max2;", "        if (lst.Count == 0) {\n  \
    \          return null;\n        }\n        var smallest = lst[0];\n        var\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        foreach (long i in lst) {\n        \
    \    if (i < smallest) {\n                secondSmallest = smallest;\n       \
    \         smallest = i;\n            } else if (i < secondSmallest) {\n      \
    \          secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n\
    \        foreach (long x in lst) {\n            if (x < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = x;\n         \
    \   } else if (x < secondSmallest) {\n                secondSmallest = x;\n  \
    \          }\n        }\n        if (secondSmallest == smallest) {\n         \
    \   return null;\n        }\n        return secondSmallest;", "        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ > smallest) {\n                secondSmallest = lst[i];\n            }\n   \
    \     }\n        return secondSmallest == lst[1] ? null : secondSmallest;"]
stop_tokens:
- "\n    }\n"
