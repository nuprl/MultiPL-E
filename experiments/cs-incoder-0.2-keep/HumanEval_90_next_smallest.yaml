name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1,\
  \ 1]) == None\n    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long second = smallest;\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                second = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                second = smallest;\n                smallest = lst[i];\n    \
    \            found = true;\n            } else if (lst[i] > smallest) {\n    \
    \            second = smallest;\n                smallest = lst[i];\n        \
    \        found = true;\n            }\n        }\n        if (found) {\n     \
    \       return new Nullable<long>(smallest);\n        }\n        return null;",
  "        if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var smallestIndex = 0;\n        var smallestIndex2 = 0;\n        var\
    \ smallestIndex3 = 0;\n        var smallestIndex4 = 0;\n        var smallestIndex5\
    \ = 0;\n        var smallestIndex6 = 0;\n        var smallestIndex7 = 0;\n   \
    \     var smallestIndex8 = 0;\n        var smallestIndex9 = 0;\n        var smallestIndex10\
    \ = 0;\n        var smallestIndex11 = 0;\n        var smallestIndex12 = 0;\n \
    \       var smallestIndex13 = 0;\n        var smallestIndex14 = 0;\n        var\
    \ smallestIndex15 = 0;\n        var smallestIndex16 = 0;\n        var smallestIndex17\
    \ = 0;\n        var smallestIndex18 = 0;\n        var smallestIndex19 = 0;\n \
    \       var smallestIndex20 = 0;\n        var smallestIndex21 = 0;\n        var\
    \ smallestIndex22 = 0;\n        var smallestIndex23 = 0;\n        var smallestIndex24\
    \ = 0;\n        var smallestIndex25 = 0;\n        var smallestIndex26 = 0;\n \
    \       var smallestIndex27 = 0;\n        var smallestIndex28 = 0;\n        var\
    \ smallestIndex29 = 0;\n        var smallestIndex30 = 0;\n        var smallestIndex31\
    \ = 0;\n        var smallestIndex32 = 0;\n        var smallestIndex33 = 0;\n \
    \       var smallestIndex34 = 0;\n        var smallestIndex35 = 0;\n        var\
    \ smallestIndex36 = 0;\n        var smallestIndex37 = 0;\n        var smallestIndex38\
    \ = 0;\n        var smallestIndex39 = 0;\n        var smallestIndex40 = 0;\n \
    \       var smallestIndex41 = 0;\n        var smallestIndex42 = 0;\n        var\
    \ smallestIndex43 = 0;\n        var smallestIndex44 = 0;\n        var smallestIndex45\
    \ = 0;\n        var smallestIndex46 = 0;\n        var smallestIndex47 = 0;\n \
    \       var smallestIndex48 = 0;\n        var smallestIndex49 = 0;\n        var\
    \ smallestIndex50 = 0;\n        var smallestIndex51 = 0;\n        var smallestIndex52\
    \ = 0;\n        var smallestIndex53 = 0;\n        var smallestIndex54 = 0;\n \
    \       var smallestIndex55 = 0;\n        var smallestIndex56 = 0;\n        var\
    \ smallestIndex57 = 0;\n        var smallestIndex58 = 0;\n        var smallestIndex59\
    \ = 0;\n        var smallestIndex60 = 0;\n        var smallestIndex61 = 0;\n \
    \       var smallestIndex62 = 0;\n        var smallestIndex63 = 0;\n        var\
    \ smallestIndex64 = 0;\n        var smallestIndex65 = 0;\n        var smallestIndex66\
    \ = 0;\n        var smallestIndex67 = 0;\n        var smallestIndex68 = 0;\n \
    \       var smallestIndex69 = 0;\n        var smallestIndex70 = 0;\n        var\
    \ smallestIndex71 = 0;\n        var smallestIndex", "        if (lst.Count ==\
    \ 0) {\n            return null;\n        }\n        long min = lst[0];\n    \
    \    long max = lst[0];\n        foreach (long i in lst) {\n            if (i\
    \ < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        if (min > max) {\n         \
    \   long tmp = min;\n            min = max;\n            max = tmp;\n        }\n\
    \        long mid = (min + max) / 2;\n        if (mid == min) {\n            return\
    \ max;\n        }\n        if (mid == max) {\n            return min;\n      \
    \  }\n        if (mid > max) {\n            return NextSmallest(lst.Skip(1).Take(1).Concat(new[]\
    \ { mid }).ToList());\n        }\n        if (mid < min) {\n            return\
    \ NextSmallest(lst.Take(1).Concat(new[] { mid }).ToList());\n        }\n     \
    \   return mid;", "        if (lst.Count == 0)\n            return null;\n   \
    \     var smallest = lst[0];\n        var smallestIndex = lst.IndexOf(smallest);\n\
    \        if (smallestIndex == 0)\n            return null;\n        var secondSmallest\
    \ = lst[smallestIndex - 1];\n        var secondSmallestIndex = lst.IndexOf(secondSmallest);\n\
    \        if (secondSmallestIndex == 0)\n            return null;\n        if (smallestIndex\
    \ < secondSmallestIndex)\n            return secondSmallest;\n        else\n \
    \           return smallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        var smallest = lst[0];\n        var secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        bool found = false;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n                found = true;\n            }\n\
    \            if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n        if (found) {\n            return max;\n        }\n       \
    \ return null;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        foreach (var item in lst) {\n            if (item < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = item;\n\
    \            } else if (item < secondSmallest) {\n                secondSmallest\
    \ = item;\n            }\n        }\n        return secondSmallest;", "      \
    \  if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        long thirdSmallest\
    \ = lst[2];\n        long fourthSmallest = lst[3];\n        long fifthSmallest\
    \ = lst[4];\n        long sixthSmallest = lst[5];\n        long seventhSmallest\
    \ = lst[6];\n        long eighthSmallest = lst[7];\n        long ninthSmallest\
    \ = lst[8];\n        long tenthSmallest = lst[9];\n        long eleventhSmallest\
    \ = lst[10];\n        long twelfthSmallest = lst[11];\n        long thirteenthSmallest\
    \ = lst[12];\n        long fourteenthSmallest = lst[13];\n        long fifteenthSmallest\
    \ = lst[14];\n        long sixteenthSmallest = lst[15];\n        long seventeenthSmallest\
    \ = lst[16];\n        long eighteenthSmallest = lst[17];\n        long nineteenthSmallest\
    \ = lst[18];\n        long twentiethSmallest = lst[19];\n        long twentyFirstSmallest\
    \ = lst[20];\n        long twentySecondSmallest = lst[21];\n        long twentyThirdSmallest\
    \ = lst[22];\n        long twentyFourthSmallest = lst[23];\n        long twentyFifthSmallest\
    \ = lst[24];\n        long twentySixthSmallest = lst[25];\n        long twentySeventhSmallest\
    \ = lst[26];\n        long twentyEighthSmallest = lst[27];\n        long twentyNinthSmallest\
    \ = lst[28];\n        long thirtiethSmallest = lst[29];\n        long thirtyFirstSmallest\
    \ = lst[30];\n        long thirtySecondSmallest = lst[31];\n        long thirtyThirdSmallest\
    \ = lst[32];\n        long thirtyFourthSmallest = lst[33];\n        long thirtyFifthSmallest\
    \ = lst[34];\n        long thirtySixthSmallest = lst[35];\n        long thirtySeventhSmallest\
    \ = lst[36];\n        long thirtyEighthSmallest = lst[37];\n", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        bool found = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    if (found) {\n            return secondSmallest;\n        } else {\n    \
    \        return null;\n        }", "        if (lst.Count == 0) {\n          \
    \  return null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       long min2 = lst[0];\n        long max2 = lst[0];\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n                min\
    \ = lst[i];\n            }\n            if (lst[i] > max) {\n                max\
    \ = lst[i];\n            }\n            if (lst[i] < min2) {\n               \
    \ min2 = lst[i];\n            }\n            if (lst[i] > max2) {\n          \
    \      max2 = lst[i];\n            }\n        }\n        if (min == max) {\n \
    \           return max;\n        }\n        if (min2 < max2) {\n            return\
    \ min2;\n        }\n        return max2;", "        if (lst.Count == 0) {\n  \
    \          return null;\n        }\n        var smallest = lst[0];\n        var\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        foreach (long i in lst) {\n        \
    \    if (i < smallest) {\n                secondSmallest = smallest;\n       \
    \         smallest = i;\n            } else if (i < secondSmallest) {\n      \
    \          secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n\
    \        foreach (long x in lst) {\n            if (x < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = x;\n         \
    \   } else if (x < secondSmallest) {\n                secondSmallest = x;\n  \
    \          }\n        }\n        if (secondSmallest == smallest) {\n         \
    \   return null;\n        }\n        return secondSmallest;", "        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ > smallest) {\n                secondSmallest = lst[i];\n            }\n   \
    \     }\n        return secondSmallest == lst[1] ? null : secondSmallest;", " \
    \       if (lst.Count == 0)\n            return null;\n        var min2 = lst.Min();\n\
    \        var min1 = lst.Min();\n        var min3 = lst.Min();\n        var min4\
    \ = lst.Min();\n        var min5 = lst.Min();\n        var min6 = lst.Min();\n\
    \        var min7 = lst.Min();\n        var min8 = lst.Min();\n        var min9\
    \ = lst.Min();\n        var min10 = lst.Min();\n        var min11 = lst.Min();\n\
    \        var min12 = lst.Min();\n        var min13 = lst.Min();\n        var min14\
    \ = lst.Min();\n        var min15 = lst.Min();\n        var min16 = lst.Min();\n\
    \        var min17 = lst.Min();\n        var min18 = lst.Min();\n        var min19\
    \ = lst.Min();\n        var min20 = lst.Min();\n        var min21 = lst.Min();\n\
    \        var min22 = lst.Min();\n        var min23 = lst.Min();\n        var min24\
    \ = lst.Min();\n        var min25 = lst.Min();\n        var min26 = lst.Min();\n\
    \        var min27 = lst.Min();\n        var min28 = lst.Min();\n        var min29\
    \ = lst.Min();\n        var min30 = lst.Min();\n        var min31 = lst.Min();\n\
    \        var min32 = lst.Min();\n        var min33 = lst.Min();\n        var min34\
    \ = lst.Min();\n        var min35 = lst.Min();\n        var min36 = lst.Min();\n\
    \        var min37 = lst.Min();\n        var min38 = lst.Min();\n        var min39\
    \ = lst.Min();\n        var min40 = lst.Min();\n        var min41 = lst.Min();\n\
    \        var min42 = lst.Min();\n        var min43 = lst.Min();\n        var min44\
    \ = lst.Min();\n        var min45 = lst.Min();\n        var min46 = lst.Min();\n\
    \        var min47 = lst.Min();\n        var min48 = lst.Min();\n        var min49\
    \ = lst.Min();\n        var min50 = lst.Min();\n        var min51 = lst.Min();\n\
    \        var min52 = lst.Min();\n        var min53 = lst.Min();\n        var min54\
    \ = lst.Min();\n        var min55 = lst.Min();\n        var min56 = lst.Min();\n\
    \        var min57 = lst.Min();\n        var ", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long second = smallest;\n        bool found = false;\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n           \
    \     second = smallest;\n                smallest = lst[i];\n               \
    \ found = true;\n            }\n            else if (lst[i] > smallest) {\n  \
    \              second = smallest;\n                smallest = lst[i];\n      \
    \          found = true;\n            }\n            else if (lst[i] == smallest)\
    \ {\n                second = lst[i];\n                found = true;\n       \
    \     }\n        }\n        if (found) {\n            return second;\n       \
    \ }\n        return null;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        foreach (long i in lst)\
    \ {\n            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long n in lst) {\n            if (n < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = n;\n\
    \            } else if (n < secondSmallest) {\n                secondSmallest\
    \ = n;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long num\
    \ in lst) {\n            if (num < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = num;\n            } else if (num < secondSmallest)\
    \ {\n                secondSmallest = num;\n            }\n        }\n       \
    \ return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (found) {\n            return\
    \ secondSmallest;\n        }\n        return null;", "        if (lst.Count ==\
    \ 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        long thirdSmallest = lst[2];\n\
    \        long fourthSmallest = lst[3];\n        long fifthSmallest = lst[4];\n\
    \        long sixthSmallest = lst[5];\n        long seventhSmallest = lst[6];\n\
    \        long eighthSmallest = lst[7];\n        long ninthSmallest = lst[8];\n\
    \        long tenthSmallest = lst[9];\n        long eleventhSmallest = lst[10];\n\
    \        long twelfthSmallest = lst[11];\n        long thirteenthSmallest = lst[12];\n\
    \        long fourteenthSmallest = lst[13];\n        long fifteenthSmallest =\
    \ lst[14];\n        long sixteenthSmallest = lst[15];\n        long seventeenthSmallest\
    \ = lst[16];\n        long eighteenthSmallest = lst[17];\n        long nineteenthSmallest\
    \ = lst[18];\n        long twentiethSmallest = lst[19];\n        long twentyFirstSmallest\
    \ = lst[20];\n        long thirtyFirstSmallest = lst[21];\n        long thirtySecondSmallest\
    \ = lst[22];\n        long thirtyThirdSmallest = lst[23];\n        long thirtyFourthSmallest\
    \ = lst[24];\n        long thirtyFifthSmallest = lst[25];\n        long thirtySixthSmallest\
    \ = lst[26];\n        long thirtySeventhSmallest = lst[27];\n        long thirtyEighthSmallest\
    \ = lst[28];\n        long thirtyNinthSmallest = lst[29];\n        long thirtyTenthSmallest\
    \ = lst[30];\n        long thirtyEleventhSmallest = lst[31];\n        long thirtyTwelfthSmallest\
    \ = lst[32];\n        long thirtyThirteenthSmallest = lst[33];\n        long thirtyFourteenthSmallest\
    \ = lst[34];\n        long thirtyFifteenthSmallest = lst[35];\n        long thirtySixteenthSmallest\
    \ = lst[36];\n        long thirtySeventeenthSmallest = lst[37];", "        if\
    \ (lst.Count == 0) return null;\n        var smallest = lst[0];\n        var secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[0];\n        foreach (long x in lst) {\n     \
    \       if (x < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = x;\n            }\n            else if (x < secondSmallest)\
    \ {\n                secondSmallest = x;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        foreach (long num in lst) {\n      \
    \      if (num < smallest) {\n                secondSmallest = smallest;\n   \
    \             smallest = num;\n            } else if (num < secondSmallest) {\n\
    \                secondSmallest = num;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long min = lst[0];\n        long max = lst[0];\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min)\n                min =\
    \ lst[i];\n            if (lst[i] > max)\n                max = lst[i];\n    \
    \    }\n        if (min == max)\n            return null;\n        long mid =\
    \ min + (max - min) / 2;\n        if (mid == min)\n            return max;\n \
    \       if (mid == max)\n            return min;\n        if (mid < min)\n   \
    \         return NextSmallest(lst.Skip(1).Take(1).Concat(new[] { mid }).ToList());\n\
    \        if (mid > max)\n            return NextSmallest(lst.Take(1).Concat(new[]\
    \ { mid }).ToList());\n        return mid;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long min = lst[0];\n        long max = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\n\
    \                min = lst[i];\n            if (lst[i] > max)\n              \
    \  max = lst[i];\n        }\n        if (min == max)\n            return null;\n\
    \        return max;", "        if (lst.Count == 0)\n            return null;\n\
    \        var min = lst[0];\n        var min2 = lst[1];\n        for (int i = 2;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min) {\n                min\
    \ = lst[i];\n                min2 = lst[i - 1];\n            }\n        }\n  \
    \      return min2;", "        if (lst.Count == 0) return null;\n        var smallest\
    \ = lst[0];\n        var secondSmallest = lst[1];\n        foreach (var item in\
    \ lst.Skip(2))\n        {\n            if (item < smallest)\n            {\n \
    \               secondSmallest = smallest;\n                smallest = item;\n\
    \            }\n            else if (item > secondSmallest)\n            {\n \
    \               secondSmallest = item;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long smallest = lst[0];\n        long secondSmallest = lst[0];\n     \
    \   for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var smallest_index = lst.IndexOf(smallest);\n        if (smallest_index\
    \ == 0)\n            return smallest;\n        var second_smallest = lst[smallest_index\
    \ - 1];\n        var second_smallest_index = lst.IndexOf(second_smallest);\n \
    \       if (second_smallest_index == 0)\n            return second_smallest;\n\
    \        if (second_smallest < smallest)\n            return second_smallest;\n\
    \        if (second_smallest_index == lst.Count - 1)\n            return lst[smallest_index\
    \ + 1];\n        var third_smallest = lst[smallest_index + 1];\n        var third_smallest_index\
    \ = lst.IndexOf(third_smallest);\n        if (third_smallest_index == lst.Count\
    \ - 1)\n            return third_smallest;\n        if (third_smallest < second_smallest)\n\
    \            return third_smallest;\n        if (third_smallest_index == lst.Count\
    \ - 2)\n            return lst[smallest_index + 2];\n        var fourth_smallest\
    \ = lst[smallest_index + 2];\n        var fourth_smallest_index = lst.IndexOf(fourth_smallest);\n\
    \        if (fourth_smallest_index == lst.Count - 2)\n            return fourth_smallest;\n\
    \        if (fourth_smallest < third_smallest)\n            return fourth_smallest;\n\
    \        if (fourth_smallest_index == lst.Count - 3)\n            return lst[smallest_index\
    \ + 3];\n        var fifth_smallest = lst[smallest_index + 3];\n        var fifth_smallest_index\
    \ = lst.IndexOf(fifth_smallest);\n        if (fifth_smallest_index == lst.Count\
    \ - 3)\n            return fifth_smallest;\n        if (fifth_smallest < fourth_smallest)\n\
    \            return fifth_smallest;\n        if (fifth_smallest_index == lst.Count\
    \ - 4)\n            return lst[smallest_index + 4];\n        var sixth_smallest\
    \ = lst[smallest_index + 4];\n        var sixth_smallest_index = lst.IndexOf(sixth_smallest);\n\
    \        if (sixth_smallest_index == lst.Count - 4)\n            return sixth_smallest;\n\
    \        if (sixth_smallest < fifth_smallest)\n            return sixth_smallest;\n\
    \        if (sixth_smallest_index == lst.Count - 5)\n            return lst[smallest_index\
    \ + 5];\n        var seventh_smallest = lst[smallest_index + 5];\n        var\
    \ seventh_smallest_index = lst.IndexOf(seventh_smallest);\n        if (seventh_smallest_index\
    \ == lst.Count - 5)\n            return seventh_smallest;\n        if (seven",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n            } else if (lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        }\n        if\
    \ (min == max) return null;\n        return max;", "        if (lst.Count == 0)\
    \ {\n            return null;\n        }\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[0];\n        foreach (long i in lst) {\n    \
    \        if (i < smallest) {\n                secondSmallest = smallest;\n   \
    \             smallest = i;\n            } else if (i < secondSmallest) {\n  \
    \              secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        bool foundSmallest =\
    \ false;\n        bool foundSecondSmallest = false;\n        foreach (long i in\
    \ lst) {\n            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n                foundSmallest = true;\n      \
    \      }\n            if (i == smallest) {\n                foundSmallest = true;\n\
    \            }\n            if (foundSmallest && foundSecondSmallest) {\n    \
    \            break;\n            }\n            if (i == secondSmallest) {\n \
    \               foundSecondSmallest = true;\n            }\n        }\n      \
    \  if (foundSmallest && foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        if (foundSmallest) {\n            return smallest;\n     \
    \   }\n        return null;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n    \
    \    var smallestIndex = lst.IndexOf(smallest);\n        if (smallestIndex ==\
    \ 0) return smallest;\n        var nextSmallest = lst[smallestIndex - 1];\n  \
    \      var nextSmallestIndex = lst.IndexOf(nextSmallest);\n        if (nextSmallestIndex\
    \ == lst.Count - 1) return nextSmallest;\n        var nextSmallest2 = lst[nextSmallestIndex\
    \ + 1];\n        if (nextSmallest2 == smallest) return nextSmallest;\n       \
    \ if (nextSmallest2 < smallest) return nextSmallest2;\n        return smallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        foreach (long i in lst) {\n     \
    \       if (i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            } else if (i > smallest) {\n         \
    \       secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        if (secondSmallest\
    \ == smallest) {\n            return null;\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[0];\n        foreach (long i in lst) {\n       \
    \     if (i < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            } else if (i == smallest) {\n          \
    \      secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == lst[0]) return null;\n        return secondSmallest;", "        if (lst.Count\
    \ == 0)\n            return null;\n        long min = lst[0];\n        long max\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < min)\n   \
    \             min = i;\n            if (i > max)\n                max = i;\n \
    \       }\n        if (min == max)\n            return null;\n        long mid\
    \ = min + (max - min) / 2;\n        if (mid == min)\n            return max;\n\
    \        if (mid == max)\n            return min;\n        if (mid < min)\n  \
    \          return NextSmallest(new List<long> { mid });\n        if (mid > max)\n\
    \            return NextSmallest(new List<long> { mid });\n        return NextSmallest(new\
    \ List<long> { min, mid });", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        foreach\
    \ (long n in lst) {\n            if (n < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = n;\n                foundSmallest =\
    \ true;\n            }\n            else if (n < secondSmallest) {\n         \
    \       secondSmallest = n;\n                foundSecondSmallest = true;\n   \
    \         }\n        }\n        if (foundSmallest) {\n            return secondSmallest;\n\
    \        }\n        if (foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long i in lst) {\n            if (smallest * 2 > i) {\n    \
    \            secondSmallest = smallest;\n                smallest = i;\n     \
    \           foundSmallest = true;\n            }\n            else if (smallest\
    \ * 2 < i) {\n                secondSmallest = i;\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        bool foundSmallest = false;\n\
    \        bool foundSecondSmallest = false;\n        foreach (long n in lst) {\n\
    \            if (n < smallest) {\n                secondSmallest = smallest;\n\
    \                secondSmallest = n;\n                foundSmallest = true;\n\
    \            }\n            else if (n == smallest) {\n                foundSmallest\
    \ = true;\n            }\n            else if (n < secondSmallest) {\n       \
    \         secondSmallest = n;\n                foundSecondSmallest = true;\n \
    \           }\n        }\n        if (foundSmallest)\n            return secondSmallest;\n\
    \        if (foundSecondSmallest)\n            return secondSmallest;\n      \
    \  return null;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (!found) {\n            return null;\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                foundSmallest = true;\n            }\n        \
    \    else if (i == smallest) {\n                foundSmallest = true;\n      \
    \      }\n            else if (foundSmallest) {\n                if (i < secondSmallest)\
    \ {\n                    secondSmallest = i;\n                    foundSecondSmallest\
    \ = true;\n                }\n                else if (i == secondSmallest) {\n\
    \                    foundSecondSmallest = true;\n                }\n        \
    \    }\n        }\n        if (foundSmallest && foundSecondSmallest) {\n     \
    \       return secondSmallest;\n        }\n        if (foundSmallest) {\n    \
    \        return smallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long min =\
    \ lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) {\n            return null;\n\
    \        }\n        return max;", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    foreach (long i in lst) {\n            if (i < smallest) {\n            \
    \    secondSmallest = smallest;\n                smallest = i;\n            }\
    \ else if (i < secondSmallest) {\n                secondSmallest = i;\n      \
    \      }\n        }\n        if (secondSmallest == smallest) return secondSmallest;\n\
    \        return null;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        bool foundSmallest = false;\n\
    \        bool foundSecondSmallest = false;\n        foreach (long i in lst) {\n\
    \            if (i == smallest) {\n                foundSmallest = true;\n   \
    \         }\n            if (i == secondSmallest) {\n                foundSecondSmallest\
    \ = true;\n            }\n            if (foundSmallest && foundSecondSmallest)\n\
    \                break;\n            if (i < smallest) {\n                secondSmallest\
    \ = i;\n                foundSecondSmallest = true;\n            }\n         \
    \   if (i > secondSmallest) {\n                smallest = i;\n               \
    \ foundSmallest = true;\n            }\n        }\n        if (foundSmallest &&\
    \ foundSecondSmallest)\n            return secondSmallest;\n        if (foundSmallest)\n\
    \            return smallest;\n        if (foundSecondSmallest)\n            return\
    \ secondSmallest;\n        return null;", "        if (lst.Count == 0) {\n   \
    \         return null;\n        }\n        long min = lst[0];\n        long max\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < min) {\n \
    \               min = i;\n            }\n            if (i > max) {\n        \
    \        max = i;\n            }\n        }\n        if (min == max) {\n     \
    \       return null;\n        }\n        if (min > max) {\n            long tmp\
    \ = min;\n            min = max;\n            max = tmp;\n        }\n        long\
    \ mid = min + (max - min) / 2;\n        long left = 0;\n        long right = 0;\n\
    \        bool found = false;\n        foreach (long i in lst) {\n            if\
    \ (i == mid) {\n                found = true;\n                break;\n      \
    \      }\n            if (i < mid) {\n                left++;\n            }\n\
    \            if (i > mid) {\n                right++;\n            }\n       \
    \ }\n        if (found) {\n            return mid;\n        }\n        if (left\
    \ == right) {\n            return null;\n        }\n        if (left > right)\
    \ {\n            return NextSmallest(lst.Skip(left).ToList());\n        }\n  \
    \      return NextSmallest(lst.Skip(right).ToList());", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        var smallest = lst[0];\n\
    \        var smallestIndex = 0;\n        var smallestIndex2 = 0;\n        var\
    \ smallestIndex3 = 0;\n        var smallestIndex4 = 0;\n        var smallestIndex5\
    \ = 0;\n        var smallestIndex6 = 0;\n        var smallestIndex7 = 0;\n   \
    \     var smallestIndex8 = 0;\n        var smallestIndex9 = 0;\n        var smallestIndex10\
    \ = 0;\n        var smallestIndex11 = 0;\n        var smallestIndex12 = 0;\n \
    \       var smallestIndex13 = 0;\n        var smallestIndex14 = 0;\n        var\
    \ smallestIndex15 = 0;\n        var smallestIndex16 = 0;\n        var smallestIndex17\
    \ = 0;\n        var smallestIndex18 = 0;\n        var smallestIndex19 = 0;\n \
    \       var smallestIndex20 = 0;\n        var smallestIndex21 = 0;\n        var\
    \ smallestIndex22 = 0;\n        var smallestIndex23 = 0;\n        var smallestIndex24\
    \ = 0;\n        var smallestIndex25 = 0;\n        var smallestIndex26 = 0;\n \
    \       var smallestIndex27 = 0;\n        var smallestIndex28 = 0;\n        var\
    \ smallestIndex29 = 0;\n        var smallestIndex30 = 0;\n        var smallestIndex31\
    \ = 0;\n        var smallestIndex32 = 0;\n        var smallestIndex33 = 0;\n \
    \       var smallestIndex34 = 0;\n        var smallestIndex35 = 0;\n        var\
    \ smallestIndex36 = 0;\n        var smallestIndex37 = 0;\n        var smallestIndex38\
    \ = 0;\n        var smallestIndex39 = 0;\n        var smallestIndex40 = 0;\n \
    \       var smallestIndex41 = 0;\n        var smallestIndex42 = 0;\n        var\
    \ smallestIndex43 = 0;\n        var smallestIndex44 = 0;\n        var smallestIndex45\
    \ = 0;\n        var smallestIndex46 = 0;\n        var smallestIndex47 = 0;\n \
    \       var smallestIndex48 = 0;\n        var smallestIndex49 = 0;\n        var\
    \ smallestIndex50 = 0;\n        var smallestIndex51 = 0;\n        var smallestIndex52\
    \ = 0;\n        var smallestIndex53 = 0;\n        var smallestIndex54 = 0;\n \
    \       var smallestIndex55 = 0;\n        var smallestIndex56 = 0;\n        var\
    \ smallestIndex57 = 0;\n        var smallestIndex58 = 0;\n        var smallestIndex59\
    \ = 0;\n        var smallestIndex60 = 0;\n        var smallestIndex61 = 0;\n \
    \       var smallestIndex62 = 0;\n        var smallestIndex63 = 0;\n        var\
    \ smallestIndex64 = 0;\n        var smallestIndex65 = 0;\n        var smallestIndex66\
    \ = 0;\n        var smallestIndex67 = 0;\n        var smallestIndex68 = 0;\n \
    \       var smallestIndex69 = 0;\n        var smallestIndex70 = 0;\n        var\
    \ smallestIndex71 = 0;\n        var smalle", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\n              \
    \  min = lst[i];\n            if (lst[i] > max)\n                max = lst[i];\n\
    \        }\n        if (min == max)\n            return null;\n        if (min\
    \ < max)\n            return min;\n        return max;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long min = lst[0];\n \
    \       long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n            }\n\
    \            if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n        if (min == max) {\n            return null;\n        }\n \
    \       if (min > max) {\n            long tmp = min;\n            min = max;\n\
    \            max = tmp;\n        }\n        return max;", "        if (lst.Count\
    \ == 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ second = smallest;\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                second = smallest;\n                smallest = i;\n     \
    \       } else if (i > smallest) {\n                second = i;\n            }\n\
    \        }\n        if (second == smallest)\n            return null;\n      \
    \  return second;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i == smallest) {\n                secondSmallest = i;\n\
    \            }\n        }\n        if (secondSmallest == smallest)\n         \
    \   return null;\n        else\n            return secondSmallest;", "       \
    \ long smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       var smallest = lst[0];\n        var secondSmallest = lst[0];\n       \
    \ for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n\
    \                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long min = lst[0];\n\
    \        long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           long cur = lst[i];\n            if (cur < min)\n                min\
    \ = cur;\n            else if (cur > max)\n                max = cur;\n      \
    \  }\n        if (min == max)\n            return null;\n        else\n      \
    \      return max;", "        if (lst.Count == 0) return null;\n        long min\
    \ = lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) return null;\n        if (min\
    \ > max) return max;\n        return min;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (var item in lst) {\n\
    \            if (item < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = item;\n            } else if (item < secondSmallest)\
    \ {\n                secondSmallest = item;\n            }\n        }\n      \
    \  if (secondSmallest == lst[0]) {\n            return null;\n        } else {\n\
    \            return secondSmallest;\n        }", "        if (lst.Count == 0)\
    \ {\n            return null;\n        }\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > smallest) {\n                secondSmallest =\
    \ lst[i];\n            }\n        }\n        return secondSmallest;", "      \
    \  if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = lst[i];\n          \
    \      foundSmallest = true;\n            }\n            else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < smallest) {\n                secondSmallest = smallest;\n             \
    \   smallest = i;\n            } else if (i < secondSmallest) {\n            \
    \    secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        var\
    \ smallest = lst[0];\n        var secondSmallest = lst[0];\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = lst[i];\n     \
    \       }\n            else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        foreach\
    \ (long num in lst) {\n            if (num < smallest) {\n                secondSmallest\
    \ = smallest;\n                foundSmallest = true;\n            }\n        \
    \    else if (num < secondSmallest) {\n                secondSmallest = num;\n\
    \                foundSecondSmallest = true;\n            }\n        }\n     \
    \   if (foundSmallest) {\n            return secondSmallest;\n        }\n    \
    \    if (foundSecondSmallest) {\n            return secondSmallest;\n        }\n\
    \        return null;", "        if (lst.Count == 0)\n            return null;\n\
    \        var min1 = lst.Min();\n        var min2 = lst.Min();\n        var min3\
    \ = lst.Min();\n        var min4 = lst.Min();\n        var min5 = lst.Min();\n\
    \        var min6 = lst.Min();\n        var min7 = lst.Min();\n        var min8\
    \ = lst.Min();\n        var min9 = lst.Min();\n        var min10 = lst.Min();\n\
    \        var min11 = lst.Min();\n        var min12 = lst.Min();\n        var min13\
    \ = lst.Min();\n        var min14 = lst.Min();\n        var min15 = lst.Min();\n\
    \        var min16 = lst.Min();\n        var min17 = lst.Min();\n        var min18\
    \ = lst.Min();\n        var min19 = lst.Min();\n        var min20 = lst.Min();\n\
    \        var min21 = lst.Min();\n        var min22 = lst.Min();\n        var min23\
    \ = lst.Min();\n        var min24 = lst.Min();\n        var min25 = lst.Min();\n\
    \        var min26 = lst.Min();\n        var min27 = lst.Min();\n        var min28\
    \ = lst.Min();\n        var min29 = lst.Min();\n        var min30 = lst.Min();\n\
    \        var min31 = lst.Min();\n        var min32 = lst.Min();\n        var min33\
    \ = lst.Min();\n        var min34 = lst.Min();\n        var min35 = lst.Min();\n\
    \        var min36 = lst.Min();\n        var min37 = lst.Min();\n        var min38\
    \ = lst.Min();\n        var min39 = lst.Min();\n        var min40 = lst.Min();\n\
    \        var min41 = lst.Min();\n        var min42 = lst.Min();\n        var min43\
    \ = lst.Min();\n        var min44 = lst.Min();\n        var min45 = lst.Min();\n\
    \        var min46 = lst.Min();\n        var min47 = lst.Min();\n        var min48\
    \ = lst.Min();\n        var min49 = lst.Min();\n        var min50 = lst.Min();\n\
    \        var min51 = lst.Min();\n        var min52 = lst.Min();\n        var min53\
    \ = lst.Min();\n        var min54 = lst.Min();\n        var min55 = lst.Min();\n\
    \        var min56 = lst.Min();\n        var min57 = lst.Min();\n        var ",
  "        long smallest = lst[0];\n        long secondSmallest = lst[1];\n      \
    \  bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n  \
    \      foreach (long i in lst) {\n            if (i == smallest) {\n         \
    \       foundSmallest = true;\n            }\n            if (i == secondSmallest)\
    \ {\n                foundSecondSmallest = true;\n            }\n        }\n \
    \       if (foundSmallest) {\n            return secondSmallest;\n        }\n\
    \        if (foundSecondSmallest) {\n            return smallest;\n        }\n\
    \        return null;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            }\n            else if (i == smallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        if (secondSmallest == smallest) {\n\
    \            return null;\n        }\n        return secondSmallest;", "     \
    \   if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        bool foundSmallest = false;\n      \
    \  bool foundSecondSmallest = false;\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n                foundSmallest = true;\n \
    \           } else if (lst[i] == smallest) {\n                foundSmallest =\
    \ true;\n            }\n            if (lst[i] < secondSmallest) {\n         \
    \       secondSmallest = lst[i];\n                foundSecondSmallest = true;\n\
    \            } else if (lst[i] == secondSmallest) {\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return smallest;\n        } else if (foundSecondSmallest) {\n            return\
    \ secondSmallest;\n        } else {\n            return null;\n        }", " \
    \       if (lst.Count == 0)\n            return null;\n        var smallest =\
    \ lst[0];\n        var secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var min = lst[0];\n        var min2 = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                min2 = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count == 0) {\n            return null;\n \
    \       }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        foreach (long n in lst) {\n            if (n < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = n;\n         \
    \   } else if (n < secondSmallest) {\n                secondSmallest = n;\n  \
    \          }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0)\n            return null;\n        var smallest = lst[0];\n        var\
    \ secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        var min\
    \ = lst.Min();\n        var max = lst.Max();\n        var mid = min + (max - min)\
    \ / 2;\n        if (mid == min) {\n            return min;\n        }\n      \
    \  if (mid == max) {\n            return max;\n        }\n        if (mid < min)\
    \ {\n            return NextSmallest(lst.Skip(1).Take(1).Concat(new[] { mid }));\n\
    \        }\n        if (mid > max) {\n            return NextSmallest(new[] {\
    \ mid }).Concat(NextSmallest(lst.Skip(1).Take(1)));\n        }\n        return\
    \ mid;", "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    Nullable<long> result = null;\n        long smallest = lst.Min();\n     \
    \   long largest = lst.Max();\n        if (smallest == largest) {\n          \
    \  return smallest;\n        }\n        long mid = lst.Count / 2;\n        long\
    \ midValue = lst[mid];\n        if (midValue < smallest) {\n            result\
    \ = NextSmallest(lst.Skip(mid).Take(1).ToList());\n        }\n        if (midValue\
    \ > largest) {\n            result = NextSmallest(lst.Skip(mid).Take(1).ToList());\n\
    \        }\n        if (result == null) {\n            result = NextSmallest(lst.Skip(mid).Take(2).ToList());\n\
    \        }\n        return result;", "        if (lst.Count == 0)\n          \
    \  return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            } else if (lst[i] > smallest && lst[i] < secondSmallest) {\n    \
    \            secondSmallest = lst[i];\n            }\n        }\n        if (found)\n\
    \            return secondSmallest;\n        else\n            return null;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) {\n            return null;\n\
    \        }\n        return max;", "        if (lst.Count == 0) return null;\n\
    \        var smallest = lst[0];\n        var secondSmallest = lst[1];\n      \
    \  for (int i = 2; i < lst.Count; i++) {\n            var current = lst[i];\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n            }\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        long mid = (min + max) / 2;\n\
    \        if (mid == min) {\n            return max;\n        }\n        if (mid\
    \ == max) {\n            return min;\n        }\n        if (mid < min) {\n  \
    \          return min;\n        }\n        if (mid > max) {\n            return\
    \ max;\n        }\n        return mid;", "        if (lst.Count == 0)\n      \
    \      return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = lst[i];\n          \
    \      foundSmallest = true;\n            }\n            if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        foreach (long num\
    \ in lst) {\n            if (num < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = num;\n                foundSmallest\
    \ = true;\n            }\n            else if (num < secondSmallest) {\n     \
    \           secondSmallest = num;\n                foundSecondSmallest = true;\n\
    \            }\n        }\n        if (foundSmallest) {\n            return secondSmallest;\n\
    \        }\n        if (foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0) {\n          \
    \  return null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min = lst[i];\n            }\n            if (lst[i] > max)\
    \ {\n                max = lst[i];\n            }\n        }\n        if (min\
    \ == max) {\n            return null;\n        }\n        return max;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = lst[i];\n          \
    \      foundSmallest = true;\n            }\n            else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        else if (foundSecondSmallest) {\n\
    \            return secondSmallest;\n        }\n        return null;", "     \
    \   if (lst.Count == 0)\n            return null;\n        var min = lst[0];\n\
    \        var min2 = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < min) {\n                min = lst[i];\n             \
    \   min2 = lst[i];\n            }\n            else if (lst[i] < min2) {\n   \
    \             min2 = lst[i];\n            }\n        }\n        return min2;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long second = smallest;\n        bool found = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       second = smallest;\n                smallest = lst[i];\n             \
    \   found = true;\n            } else if (lst[i] == smallest) {\n            \
    \    second = lst[i];\n            }\n        }\n        if (found) return second;\n\
    \        return null;", "        if (lst.Count == 0) return null;\n        var\
    \ smallest = lst[0];\n        var secondSmallest = lst[1];\n        for (int i\
    \ = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = lst[i];\n     \
    \       } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        bool found = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (secondSmallest == smallest)\
    \ {\n            found = true;\n        }\n        return found ? secondSmallest\
    \ : null;", "        if (lst.Count == 0)\n            return null;\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        foreach (long num\
    \ in lst) {\n            if (num < smallest) {\n                secondSmallest\
    \ = smallest;\n                foundSmallest = true;\n            }\n        \
    \    else if (num < secondSmallest) {\n                secondSmallest = num;\n\
    \                foundSecondSmallest = true;\n            }\n        }\n     \
    \   if (foundSmallest) {\n            return secondSmallest;\n        }\n    \
    \    if (foundSecondSmallest) {\n            return secondSmallest;\n        }\n\
    \        return null;", "        if (lst.Count == 0) return null;\n        var\
    \ smallest = lst[0];\n        var secondSmallest = lst[0];\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = lst[i];\n     \
    \       } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var smallest = lst[0];\n      \
    \  var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        if (secondSmallest == smallest) {\n\
    \            return null;\n        }\n        return secondSmallest;", "     \
    \   if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (found) {\n            return secondSmallest;\n        }\n        return null;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        for (int i = 2;\
    \ i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = lst[i];\n          \
    \      foundSmallest = true;\n            }\n            else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long min =\
    \ lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) {\n            return null;\n\
    \        }\n        return max;", "        if (lst.Count == 0) {\n           \
    \ return null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        bool foundSmallest = false;\n        bool foundSecondSmallest\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n                foundSmallest = true;\n            }\n          \
    \  else if (lst[i] < secondSmallest) {\n                secondSmallest = lst[i];\n\
    \                foundSecondSmallest = true;\n            }\n        }\n     \
    \   if (foundSmallest && foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        if (foundSmallest) {\n            return smallest;\n     \
    \   }\n        if (foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        foreach\
    \ (long x in lst) {\n            if (smallest * 2 > x) {\n                secondSmallest\
    \ = smallest;\n                smallest = x;\n                foundSmallest =\
    \ true;\n            }\n            if (secondSmallest * 2 < x) {\n          \
    \      secondSmallest = x;\n                foundSecondSmallest = true;\n    \
    \        }\n        }\n        if (foundSmallest) {\n            return secondSmallest;\n\
    \        }\n        if (foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0) {\n          \
    \  return null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        if (secondSmallest == smallest) {\n            return null;\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        foreach (long x in lst) {\n            if (x < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = x;\n         \
    \   } else if (x < secondSmallest) {\n                secondSmallest = x;\n  \
    \          }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long min = lst[0];\n \
    \       long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n            }\n\
    \            if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n        if (min == max) {\n            return null;\n        }\n \
    \       return max;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        long thirdSmallest = lst[2];\n        long fourthSmallest = lst[3];\n\
    \        long fifthSmallest = lst[4];\n        long sixthSmallest = lst[5];\n\
    \        long seventhSmallest = lst[6];\n        long eighthSmallest = lst[7];\n\
    \        long ninthSmallest = lst[8];\n        long tenthSmallest = lst[9];\n\
    \        long eleventhSmallest = lst[10];\n        long twelfthSmallest = lst[11];\n\
    \        long thirteenthSmallest = lst[12];\n        long fourteenthSmallest =\
    \ lst[13];\n        long fifteenthSmallest = lst[14];\n        long sixteenthSmallest\
    \ = lst[15];\n        long seventeenthSmallest = lst[16];\n        long eighteenthSmallest\
    \ = lst[17];\n        long nineteenthSmallest = lst[18];\n        long twentiethSmallest\
    \ = lst[19];\n        long twentyFirstSmallest = lst[20];\n        long twentySecondSmallest\
    \ = lst[21];\n        long twentyThirdSmallest = lst[22];\n        long twentyFourthSmallest\
    \ = lst[23];\n        long twentyFifthSmallest = lst[24];\n        long twentySixthSmallest\
    \ = lst[25];\n        long twentySeventhSmallest = lst[26];\n        long twentyEighthSmallest\
    \ = lst[27];\n        long twentyNinthSmallest = lst[28];\n        long thirtiethSmallest\
    \ = lst[29];\n        long thirtyFirstSmallest = lst[30];\n        long thirtySecondSmallest\
    \ = lst[31];\n        long thirtyThirdSmallest = lst[32];\n        long thirtyFourthSmallest\
    \ = lst[33];\n        long thirtyFifthSmallest = lst[34];\n        long thirtySixthSmallest\
    \ = lst[35];\n        long thirtySeventhSmallest = lst[36];\n        long thirtyEighthSmallest\
    \ = lst[37];\n", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        var smallest = lst[0];\n       \
    \ var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = lst[i];\n\
    \                smallest = secondSmallest;\n            }\n        }\n      \
    \  return smallest;", "        if (lst.Count == 0)\n            return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long num in lst) {\n            if (num < smallest) {\n    \
    \            secondSmallest = smallest;\n                smallest = num;\n   \
    \             foundSmallest = true;\n            }\n            else if (num <\
    \ secondSmallest) {\n                secondSmallest = num;\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest)\n            return\
    \ smallest;\n        if (foundSecondSmallest)\n            return secondSmallest;\n\
    \        return null;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            }\n            else if (lst[i] < secondSmallest) {\n            \
    \    secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long min = lst[0];\n\
    \        long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < min)\n                min = lst[i];\n            if (lst[i]\
    \ > max)\n                max = lst[i];\n        }\n        if (min == max)\n\
    \            return null;\n        long mid = min + (max - min) / 2;\n       \
    \ if (mid == max)\n            return max;\n        if (mid == min)\n        \
    \    return min;\n        if (mid < min)\n            return NextSmallest(lst.Skip(1).Take(1).Concat(new[]\
    \ { mid }).ToList());\n        if (mid > max)\n            return NextSmallest(lst.Skip(1).Take(1).Concat(new[]\
    \ { max }).ToList());\n        return mid;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        long thirdSmallest = lst[2];\n        long fourthSmallest\
    \ = lst[3];\n        long fifthSmallest = lst[4];\n        long sixthSmallest\
    \ = lst[5];\n        long seventhSmallest = lst[6];\n        long eighthSmallest\
    \ = lst[7];\n        long ninthSmallest = lst[8];\n        long tenthSmallest\
    \ = lst[9];\n        long eleventhSmallest = lst[10];\n        long twelfthSmallest\
    \ = lst[11];\n        long thirteenthSmallest = lst[12];\n        long fourteenthSmallest\
    \ = lst[13];\n        long fifteenthSmallest = lst[14];\n        long sixteenthSmallest\
    \ = lst[15];\n        long seventeenthSmallest = lst[16];\n        long eighteenthSmallest\
    \ = lst[17];\n        long nineteenthSmallest = lst[18];\n        long twentiethSmallest\
    \ = lst[19];\n        long twentyFirstSmallest = lst[20];\n        long thirtyFirstSmallest\
    \ = lst[21];\n        long thirtySecondSmallest = lst[22];\n        long thirtyThirdSmallest\
    \ = lst[23];\n        long thirtyFourthSmallest = lst[24];\n        long thirtyFifthSmallest\
    \ = lst[25];\n        long thirtySixthSmallest = lst[26];\n        long thirtySeventhSmallest\
    \ = lst[27];\n        long thirtyEighthSmallest = lst[28];\n        long thirtyNinthSmallest\
    \ = lst[29];\n        long thirtyTenthSmallest = lst[30];\n        long thirtyEleventhSmallest\
    \ = lst[31];\n        long thirtyTwelfthSmallest = lst[32];\n        long thirtyThirteenthSmallest\
    \ = lst[33];\n        long thirtyFourteenthSmallest = lst[34];\n        long thirtyFifteenthSmallest\
    \ = lst[35];\n        long thirtySixteenthSmallest = lst[36];\n        long thirtySeventeenthSmallest\
    \ = lst[37];\n        long thirtyEighteenthSmallest = ", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        bool found = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        return\
    \ found ? secondSmallest : null;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < min)\n                min = i;\n    \
    \        if (i > max)\n                max = i;\n        }\n        if (min ==\
    \ max)\n            return null;\n        long mid = min + (max - min) / 2;\n\
    \        if (mid == max)\n            return max;\n        if (mid == min)\n \
    \           return min;\n        if (mid < min)\n            return min;\n   \
    \     if (mid > max)\n            return max;\n        return mid;", "       \
    \ if (lst.Count == 0) {\n            return null;\n        }\n        var smallest\
    \ = lst[0];\n        var secondSmallest = lst[0];\n        for (var i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            }\n           \
    \ else if (lst[i] < secondSmallest) {\n                secondSmallest = lst[i];\n\
    \            }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0)\n            return null;\n        var smallest = lst[0];\n        var\
    \ smallestIndex = lst.IndexOf(smallest);\n        if (smallestIndex == 0)\n  \
    \          return null;\n        var nextSmallest = lst[smallestIndex - 1];\n\
    \        var nextSmallestIndex = lst.IndexOf(nextSmallest);\n        if (nextSmallestIndex\
    \ == lst.Count - 1)\n            return null;\n        if (nextSmallest < smallest)\n\
    \            return nextSmallest;\n        return smallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        Nullable<long> result = null;\n       \
    \ long smallest = lst[0];\n        long largest = lst[0];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                smallest = i;\n\
    \            }\n            if (i > largest) {\n                largest = i;\n\
    \            }\n        }\n        if (smallest == largest) {\n            return\
    \ smallest;\n        }\n        if (smallest < largest) {\n            result\
    \ = smallest;\n            smallest = next_smallest(smallest, largest);\n    \
    \        if (smallest == null) {\n                return null;\n            }\n\
    \        }\n        result = smallest;\n        smallest = next_smallest(smallest,\
    \ largest);\n        if (smallest == null) {\n            return null;\n     \
    \   }\n        return result;", "        if (lst.Count == 0) return null;\n  \
    \      long min = lst[0];\n        long max = lst[0];\n        foreach (long i\
    \ in lst) {\n            if (i < min) min = i;\n            if (i > max) max =\
    \ i;\n        }\n        if (min == max) return null;\n        if (min == lst[lst.Count\
    \ - 1]) return null;\n        if (max == lst[0]) return null;\n        if (min\
    \ == lst[lst.Count - 2]) return null;\n        long mid = min + (max - min) /\
    \ 2;\n        if (mid == lst[lst.Count - 3]) return null;\n        if (mid ==\
    \ lst[lst.Count - 2]) return null;\n        if (mid == lst[lst.Count - 1]) return\
    \ null;\n        if (mid == lst[0]) return null;\n        if (mid == lst[lst.Count\
    \ - 1]) return null;\n        if (mid == lst[lst.Count - 2]) return null;\n  \
    \      if (mid == lst[lst.Count - 3]) return null;\n        if (mid == lst[lst.Count\
    \ - 4]) return null;\n        if (mid == lst[lst.Count - 5]) return null;\n  \
    \      if (mid == lst[lst.Count - 6]) return null;\n        if (mid == lst[lst.Count\
    \ - 7]) return null;\n        if (mid == lst[lst.Count - 8]) return null;\n  \
    \      if (mid == lst[lst.Count - 9]) return null;\n        if (mid == lst[lst.Count\
    \ - 10]) return null;\n        if (mid == lst[lst.Count - 11]) return null;\n\
    \        if (mid == lst[lst.Count - 12]) return null;\n        if (mid == lst[lst.Count\
    \ - 13]) return null;\n        if (mid == lst[lst.Count - 14]) return null;\n\
    \        if (mid == lst[lst.Count - 15]) return null;\n        if (mid == lst[lst.Count\
    \ - 16]) return null;\n        if (mid == lst[lst.Count - 17]) return null;\n\
    \        if (mid == lst[lst.Count - 18]) return null;\n        if (mid == lst[lst.Count\
    \ - 19]) return null;\n        if (mid == lst[lst.Count - 20]) return null;\n\
    \        if (mid == lst[lst.Count - 21]) return null;\n        if (mid == lst[lst.Count\
    \ - 22]) return null;\n        if (mid == lst[lst.Count - 23]) return null;\n\
    \        if (mid == lst[lst.Count - 24]) return null;\n        if (mid == lst[lst.Count\
    \ - 25]) return null;\n        if (mid == lst[lst.Count - 26]) return null;\n\
    \        if (mid == lst[lst.Count - 27]) return null;\n        if (", "      \
    \  if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n                found = true;\n         \
    \   } else if (lst[i] < secondSmallest) {\n                secondSmallest = lst[i];\n\
    \            }\n        }\n        if (found) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var minValue = lst[0];\n        var minIndex = 0;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < minValue) {\n  \
    \              minValue = lst[i];\n                minIndex = i;\n           \
    \ }\n        }\n        if (minIndex == lst.Count - 1)\n            return null;\n\
    \        return lst[minIndex + 1];", "        if (lst.Count == 0) {\n        \
    \    return null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n\
    \        long min2 = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n            if (i == min2) {\n \
    \               min2 = i;\n            }\n        }\n        if (min2 != min)\
    \ {\n            return min2;\n        }\n        return max;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long min = lst[0];\n \
    \       long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n            }\n\
    \            if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n        if (min == max) {\n            return null;\n        }\n \
    \       if (min > max) {\n            return max;\n        }\n        return min;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         } else if (lst[i] > max) {\n                max = lst[i];\n        \
    \    }\n        }\n        if (min == max) {\n            return null;\n     \
    \   }\n        return max;", "        if (lst.Count == 0) return null;\n     \
    \   long min = lst[0];\n        long max = lst[0];\n        foreach (long i in\
    \ lst) {\n            if (i < min) min = i;\n            if (i > max) max = i;\n\
    \        }\n        if (min == max) return null;\n        if (min > max) return\
    \ null;\n        return max;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       long min2 = lst[0];\n        long max2 = lst[0];\n        foreach (long\
    \ num in lst) {\n            if (num < min) {\n                min = num;\n  \
    \          }\n            if (num > max) {\n                max = num;\n     \
    \       }\n            if (num < min2) {\n                min2 = num;\n      \
    \      }\n            if (num > max2) {\n                max2 = num;\n       \
    \     }\n        }\n        if (min == max) {\n            return max2;\n    \
    \    }\n        if (min > max) {\n            return null;\n        }\n      \
    \  if (min2 < max2) {\n            return min2;\n        }\n        return max2;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        for (int i = 2;\
    \ i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = lst[i];\n          \
    \      foundSmallest = true;\n            }\n            if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long num\
    \ in lst) {\n            if (num < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = num;\n            }\n            else\
    \ if (num < secondSmallest) {\n                secondSmallest = num;\n       \
    \     }\n        }\n        return secondSmallest;", "        if (lst.Count ==\
    \ 0) return null;\n        long min = lst[0];\n        long max = lst[0];\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n            } else if (lst[i] > max) {\n     \
    \           max = lst[i];\n            }\n        }\n        if (min == max) return\
    \ max;\n        return min;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        bool foundSmallest = false;\n        bool foundSecondSmallest\
    \ = false;\n        foreach (long n in lst) {\n            if (n < smallest) {\n\
    \                secondSmallest = smallest;\n                foundSmallest = true;\n\
    \            }\n            else if (n < secondSmallest) {\n                secondSmallest\
    \ = n;\n                foundSecondSmallest = true;\n            }\n        }\n\
    \        if (foundSmallest) {\n            return secondSmallest;\n        }\n\
    \        if (foundSecondSmallest) {\n            return secondSmallest;\n    \
    \    }\n        return null;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\n              \
    \  min = lst[i];\n            if (lst[i] > max)\n                max = lst[i];\n\
    \        }\n        if (min == max)\n            return null;\n        if (min\
    \ < max)\n            return min;\n        return max;", "        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long i in\
    \ lst) {\n            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            }\n            else if (i == smallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        if\
    \ (secondSmallest == 0) {\n            return null;\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (var item in lst) {\n            if (item < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = item;\n\
    \            } else if (item < secondSmallest) {\n                secondSmallest\
    \ = item;\n            }\n        }\n        if (secondSmallest == lst[0]) {\n\
    \            return null;\n        }\n        return secondSmallest;", "     \
    \   if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long x in\
    \ lst) {\n            if (x < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = x;\n            }\n            else if (x < secondSmallest)\
    \ {\n                secondSmallest = x;\n            }\n        }\n        return\
    \ secondSmallest;", "        long min = lst.Min();\n        long max = lst.Max();\n\
    \        long mid = min + (max - min) / 2;\n        if (mid == min) {\n      \
    \      return mid;\n        }\n        if (mid == max) {\n            return mid;\n\
    \        }\n        if (mid < min) {\n            return NextSmallest(lst.Where(x\
    \ => x < mid).ToList());\n        }\n        if (mid > max) {\n            return\
    \ NextSmallest(lst.Where(x => x > mid).ToList());\n        }\n        return mid;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n                found = true;\n            } else if (lst[i] == smallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    if (found) {\n            return secondSmallest;\n        }\n        return\
    \ null;", "        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    foreach (long x in lst) {\n            if (x < smallest) {\n            \
    \    secondSmallest = smallest;\n                smallest = x;\n            }\
    \ else if (x < secondSmallest) {\n                secondSmallest = x;\n      \
    \      }\n        }\n        return secondSmallest;", "        if (lst.Count ==\
    \ 0) {\n            return null;\n        }\n        long min = lst[0];\n    \
    \    long max = lst[0];\n        foreach (long i in lst) {\n            if (i\
    \ < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        if (min > max) {\n         \
    \   long temp = min;\n            min = max;\n            max = temp;\n      \
    \  }\n        long mid = (min + max) / 2;\n        long mid2 = mid / 2;\n    \
    \    if (mid2 % 2 == 0) {\n            return mid;\n        }\n        long mid3\
    \ = mid / 2;\n        if (mid3 % 2 == 1) {\n            return mid;\n        }\n\
    \        long mid4 = mid / 2;\n        if (mid4 % 2 == 2) {\n            return\
    \ mid;\n        }\n        long mid5 = mid / 2;\n        if (mid5 % 2 == 3) {\n\
    \            return mid;\n        }\n        long mid6 = mid / 2;\n        if\
    \ (mid6 % 2 == 4) {\n            return mid;\n        }\n        long mid7 = mid\
    \ / 2;\n        if (mid7 % 2 == 5) {\n            return mid;\n        }\n   \
    \     long mid8 = mid / 2;\n        if (mid8 % 2 == 6) {\n            return mid;\n\
    \        }\n        long mid9 = mid / 2;\n        if (mid9 % 2 == 7) {\n     \
    \       return mid;\n        }\n        long mid10 = mid / 2;\n        if (mid10\
    \ % 2 == 8) {\n            return mid;\n        }\n        long mid11 = mid /\
    \ 2;\n        if (mid11 % 2 == 9) {\n            return mid;\n        }\n    \
    \    long mid12 = mid / 2;\n        if (mid12 % 2 == 10) {\n            return\
    \ mid;\n        }\n        long mid13 = mid / 2;\n        if (mid13 % 2 == 11)\
    \ {\n            return mid;\n        }\n        long mid14 = mid / 2;\n     \
    \   if (mid14 % 2 == 12) {\n            return mid;\n        }\n        long mid15\
    \ = mid / 2;\n        if (mid15 % 2 == 13) {\n            return mid;\n      \
    \  }\n        long mid16 = mid / 2;\n        if (mid16 % 2 == 14) {\n        \
    \    return mid;\n        }\n        long mid17 = mid / 2;\n        if (mid17\
    \ % 2 == 15) {\n            return mid;\n        }\n        long mid18 = mid /\
    \ 2;\n        if (mid18 % 2 == 16) {\n            return mid;\n        }\n   \
    \     long mid19 = mid / 2;\n        if (mid19 % 2 == 17) {\n            return\
    \ mid;\n        }\n        long mid", "        if (lst.Count == 0) return null;\n\
    \        long min = lst[0];\n        long max = lst[0];\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n                min\
    \ = lst[i];\n            }\n            if (lst[i] > max) {\n                max\
    \ = lst[i];\n            }\n        }\n        if (min == max) return null;\n\
    \        if (min > max) return null;\n        return max;", "        if (lst.Count\
    \ == 0)\n            return null;\n        var smallest = lst[0];\n        var\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        long thirdSmallest = lst[2];\n        long fourthSmallest\
    \ = lst[3];\n        long fifthSmallest = lst[4];\n        long sixthSmallest\
    \ = lst[5];\n        long seventhSmallest = lst[6];\n        long eighthSmallest\
    \ = lst[7];\n        long ninthSmallest = lst[8];\n        long tenthSmallest\
    \ = lst[9];\n        long eleventhSmallest = lst[10];\n        long twelfthSmallest\
    \ = lst[11];\n        long thirteenthSmallest = lst[12];\n        long fourteenthSmallest\
    \ = lst[13];\n        long fifteenthSmallest = lst[14];\n        long sixteenthSmallest\
    \ = lst[15];\n        long seventeenthSmallest = lst[16];\n        long eighteenthSmallest\
    \ = lst[17];\n        long nineteenthSmallest = lst[18];\n        long twentiethSmallest\
    \ = lst[19];\n        long twentyFirstSmallest = lst[20];\n        long twentySecondSmallest\
    \ = lst[21];\n        long twentyThirdSmallest = lst[22];\n        long twentyFourthSmallest\
    \ = lst[23];\n        long twentyFifthSmallest = lst[24];\n        long twentySixthSmallest\
    \ = lst[25];\n        long twentySeventhSmallest = lst[26];\n        long twentyEighthSmallest\
    \ = lst[27];\n        long twentyNinthSmallest = lst[28];\n        long thirtiethSmallest\
    \ = lst[29];\n        long thirtyFirstSmallest = lst[30];\n        long thirtySecondSmallest\
    \ = lst[31];\n        long thirtyThirdSmallest = lst[32];\n        long thirtyFourthSmallest\
    \ = lst[33];\n        long thirtyFifthSmallest = lst[34];\n        long thirtySixthSmallest\
    \ = lst[35];\n        long thirtySeventhSmallest = lst[36];\n        long thirtyEighthSmallest\
    \ = lst[37];\n        long thirtyNinthSmallest = lst[", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long min = lst[0];\n \
    \       long max = lst[0];\n        long index = 0;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                min =\
    \ lst[i];\n                index = i;\n            }\n            if (lst[i] >\
    \ max) {\n                max = lst[i];\n            }\n        }\n        if\
    \ (index == lst.Count - 1) {\n            return max;\n        }\n        if (lst[index\
    \ + 1] == max) {\n            return max;\n        }\n        return lst[index\
    \ + 1];", "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n\
    \        long second = smallest;\n        bool found = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         second = smallest;\n                smallest = lst[i];\n           \
    \     found = true;\n            } else if (lst[i] == smallest) {\n          \
    \      second = smallest;\n                smallest = lst[i];\n              \
    \  found = true;\n            } else if (lst[i] > smallest) {\n              \
    \  second = smallest;\n                smallest = lst[i];\n                found\
    \ = true;\n            }\n        }\n        if (found) return second;\n     \
    \   return null;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest)\n                secondSmallest = smallest;\n   \
    \         else if (i < secondSmallest)\n                secondSmallest = i;\n\
    \            else\n                return secondSmallest;\n        }\n       \
    \ return secondSmallest;", "        if (lst.Count == 0) return null;\n       \
    \ long smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                foundSmallest = true;\n            } else if (lst[i] == smallest)\
    \ {\n                secondSmallest = lst[i];\n                foundSmallest =\
    \ true;\n            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n                foundSecondSmallest = true;\n            }\n    \
    \    }\n        if (foundSmallest) {\n            return secondSmallest;\n   \
    \     } else if (foundSecondSmallest) {\n            return secondSmallest;\n\
    \        } else {\n            return null;\n        }", "        if (lst.Count\
    \ == 0) return null;\n        var smallest = lst[0];\n        var secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var smallest = lst[0];\n      \
    \  var secondSmallest = lst[1];\n        foreach (var item in lst.Skip(2))\n \
    \       {\n            if (item < smallest)\n            {\n                secondSmallest\
    \ = smallest;\n                smallest = item;\n            }\n            else\
    \ if (item < secondSmallest)\n            {\n                secondSmallest =\
    \ item;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0)\n            return null;\n        var min = lst[0];\n    \
    \    var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n      \
    \      if (lst[i] < min) {\n                min = lst[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == 0)\n            return\
    \ null;\n        if (minIndex == lst.Count - 1)\n            return lst[minIndex\
    \ + 1];\n        return lst[minIndex + 1];", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        foreach (long i in lst) {\n\
    \            if (i < min) {\n                min = i;\n            }\n       \
    \     if (i > max) {\n                max = i;\n            }\n        }\n   \
    \     if (min == max) {\n            return null;\n        }\n        long mid\
    \ = min + (max - min) / 2;\n        if (mid == max) {\n            return max;\n\
    \        }\n        if (mid == min) {\n            return min;\n        }\n  \
    \      if (mid < max) {\n            return mid;\n        }\n        return max;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        long\
    \ thirdSmallest = lst[2];\n        long fourthSmallest = lst[3];\n        long\
    \ fifthSmallest = lst[4];\n        long sixthSmallest = lst[5];\n        long\
    \ seventhSmallest = lst[6];\n        long eighthSmallest = lst[7];\n        long\
    \ ninthSmallest = lst[8];\n        long tenthSmallest = lst[9];\n        long\
    \ eleventhSmallest = lst[10];\n        long twelfthSmallest = lst[11];\n     \
    \   long thirteenthSmallest = lst[12];\n        long fourteenthSmallest = lst[13];\n\
    \        long fifteenthSmallest = lst[14];\n        long sixteenthSmallest = lst[15];\n\
    \        long seventeenthSmallest = lst[16];\n        long eighteenthSmallest\
    \ = lst[17];\n        long nineteenthSmallest = lst[18];\n        long twentiethSmallest\
    \ = lst[19];\n        long twentyFirstSmallest = lst[20];\n        long twentySecondSmallest\
    \ = lst[21];\n        long twentyThirdSmallest = lst[22];\n        long twentyFourthSmallest\
    \ = lst[23];\n        long twentyFifthSmallest = lst[24];\n        long twentySixthSmallest\
    \ = lst[25];\n        long twentySeventhSmallest = lst[26];\n        long twentyEighthSmallest\
    \ = lst[27];\n        long twentyNinthSmallest = lst[28];\n        long thirtiethSmallest\
    \ = lst[29];\n        long thirtyFirstSmallest = lst[30];\n        long thirtySecondSmallest\
    \ = lst[31];\n        long thirtyThirdSmallest = lst[32];\n        long thirtyFourthSmallest\
    \ = lst[33];\n        long thirtyFifthSmallest = lst[34];\n        long thirtySixthSmallest\
    \ = lst[35];\n        long thirtySeventhSmallest = lst[36];\n        long thirtyEighthSmallest\
    \ = lst[37];\n        long thirtyNinthSmallest = lst[", "        if (lst.Count\
    \ == 0) return null;\n        var smallest = lst[0];\n        var smallest_index\
    \ = 0;\n        var smallest_value = smallest;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                smallest_index\
    \ = i;\n                smallest_value = lst[i];\n            }\n        }\n \
    \       if (smallest_index == lst.Count - 1) {\n            return smallest;\n\
    \        }\n        var next_smallest = lst[smallest_index + 1];\n        return\
    \ smallest_value == next_smallest ? next_smallest : null;", "        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (secondSmallest == smallest)\
    \ {\n            return null;\n        }\n        return secondSmallest;", " \
    \       if (lst.Count == 0) {\n            return null;\n        }\n        var\
    \ smallest = lst[0];\n        var smallest_index = lst.IndexOf(smallest);\n  \
    \      if (smallest_index == lst.Count - 1) {\n            return smallest;\n\
    \        }\n        var next_smallest = lst[smallest_index + 1];\n        if (next_smallest\
    \ < smallest) {\n            return next_smallest;\n        }\n        return\
    \ smallest;", "        if (lst.Count == 0)\n            return null;\n       \
    \ long smallest = lst[0];\n        long secondSmallest = lst[1];\n        foreach\
    \ (long x in lst) {\n            if (x < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = x;\n            }\n            else\
    \ if (x < secondSmallest) {\n                secondSmallest = x;\n           \
    \ }\n        }\n        return secondSmallest;", "        if (lst.Count == 0)\
    \ {\n            return null;\n        }\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    var smallest = lst[0];\n        var smallestIndex = lst.IndexOf(smallest);\n\
    \        if (smallestIndex == 0) return null;\n        var secondSmallest = lst[smallestIndex\
    \ - 1];\n        var secondSmallestIndex = lst.IndexOf(secondSmallest);\n    \
    \    if (secondSmallestIndex == 0) return null;\n        if (smallestIndex < secondSmallestIndex)\
    \ {\n            return smallest;\n        } else {\n            return secondSmallest;\n\
    \        }", "        if (lst.Count == 0) {\n            return null;\n      \
    \  }\n        long min = lst[0];\n        long max = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n            }\n            if (lst[i] > max) {\n         \
    \       max = lst[i];\n            }\n        }\n        if (min == max) {\n \
    \           return null;\n        }\n        return max;", "        if (lst.Count\
    \ == 0) return null;\n        long min = lst[0];\n        long max = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min = lst[i];\n            }\n            if (lst[i] > max)\
    \ {\n                max = lst[i];\n            }\n        }\n        if (min\
    \ == max) return min;\n        if (min > max) return null;\n        long mid =\
    \ min + (max - min) / 2;\n        if (mid == max) return mid;\n        if (mid\
    \ > max) return null;\n        long nextMin = mid;\n        long nextMax = mid;\n\
    \        while (nextMin < max) {\n            if (lst[nextMin] < mid) {\n    \
    \            nextMin++;\n            } else {\n                nextMax--;\n  \
    \          }\n        }\n        if (nextMin == max) return mid;\n        if (nextMin\
    \ > max) return null;\n        return nextMin;", "        if (lst.Count == 0)\
    \ {\n            return null;\n        }\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[0];\n        foreach (long i in lst) {\n    \
    \        if (i < smallest) {\n                secondSmallest = smallest;\n   \
    \             smallest = i;\n            }\n            else if (i == smallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        if\
    \ (secondSmallest == smallest) {\n            return null;\n        }\n      \
    \  return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        var min = lst[0];\n        var minIndex = 0;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == lst.Count - 1) {\n            return null;\n\
    \        }\n        return lst[minIndex + 1];", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        Nullable<long> result = null;\n       \
    \ long smallest = lst.Min();\n        long largest = lst.Max();\n        if (smallest\
    \ == largest) {\n            return smallest;\n        }\n        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long mid = lst.Count /\
    \ 2;\n        long midValue = lst[mid];\n        if (midValue < smallest) {\n\
    \            result = midValue;\n        }\n        if (midValue > largest) {\n\
    \            result = midValue;\n        }\n        if (result == null) {\n  \
    \          foreach (long n in lst) {\n                if (n < smallest) {\n  \
    \                  result = n;\n                }\n                if (n > largest)\
    \ {\n                    result = n;\n                }\n            }\n     \
    \   }\n        return result;", "        if (lst.Count == 0) return null;\n  \
    \      long min = lst[0];\n        long max = lst[0];\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min) {\n                min\
    \ = lst[i];\n            } else if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) return null;\n        return\
    \ max;", "        if (lst.Count == 0)\n            return null;\n        var minValue\
    \ = lst[0];\n        var minIndex = 0;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (minValue > lst[i]) {\n                minValue = lst[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == lst.Count - 1)\n            return null;\n        return lst.ElementAt(minIndex\
    \ + 1);", "        if (lst.Count == 0)\n            return null;\n        var\
    \ minValue = lst[0];\n        var minIndex = 0;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < minValue) {\n                minValue = lst[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == 0)\n            return null;\n        if (minIndex == 1)\n            return\
    \ lst[1];\n        var minValue = lst[minIndex];\n        var minIndex2 = minIndex\
    \ + 1;\n        for (int i = minIndex + 1; i < lst.Count; i++) {\n           \
    \ if (lst[i] < minValue) {\n                minValue = lst[i];\n             \
    \   minIndex2 = i;\n            }\n        }\n        if (minIndex2 == lst.Count)\n\
    \            return null;\n        if (minIndex2 == lst.Count + 1)\n         \
    \   return lst[minIndex2];\n        var minValue2 = lst[minIndex2];\n        var\
    \ minIndex3 = minIndex2 + 1;\n        for (int i = minIndex2 + 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < minValue2) {\n                minValue2 = lst[i];\n\
    \                minIndex3 = i;\n            }\n        }\n        if (minIndex3\
    \ == lst.Count)\n            return null;\n        if (minIndex3 == lst.Count\
    \ + 1)\n            return lst[minIndex3];\n        var minValue3 = lst[minIndex3];\n\
    \        var minIndex4 = minIndex3 + 1;\n        for (int i = minIndex3 + 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < minValue3) {\n               \
    \ minValue3 = lst[i];\n                minIndex4 = i;\n            }\n       \
    \ }\n        if (minIndex4 == lst.Count)\n            return null;\n        if\
    \ (minIndex4 == lst.Count + 1)\n            return lst[minIndex4];\n        var\
    \ minValue4 = lst[minIndex4];\n        var minIndex5 = minIndex4 + 1;\n      \
    \  for (int i = minIndex4 + 1; i < lst.Count; i++) {\n            if (lst[i] <\
    \ minValue4) {\n                minValue4 = lst[i];\n                minIndex5\
    \ = i;\n            }\n        }\n        if (minIndex5 == lst.Count)\n      \
    \      return null;\n        if (minIndex5 == lst.Count + 1)\n            return\
    \ lst[minIndex5];\n        var minValue5 = lst[minIndex5];\n        var minIndex6\
    \ = minIndex5 + 1;\n        for (int i = minIndex5 + 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < minValue5) {\n                minValue5 = lst[i];\n\
    \                minIndex6 = i;\n            }\n        }\n        if (minIndex6\
    \ == lst.Count)\n            return null;\n        if (minIndex6 == lst.Count\
    \ + 1)\n            return lst[minIndex6];\n", "        if (lst.Count == 0) return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < min) min = i;\n            if (i > max)\
    \ max = i;\n        }\n        if (min == max) return null;\n        if (min ==\
    \ lst[1]) return lst[1];\n        if (max == lst[lst.Count - 1]) return lst[lst.Count\
    \ - 1];\n        long mid = min + (max - min) / 2;\n        if (mid == lst[mid])\
    \ return lst[mid];\n        if (mid == lst[mid-1]) return lst[mid-1];\n      \
    \  if (mid == lst[mid+1]) return lst[mid+1];\n        return null;", "       \
    \ if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool found = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (found) {\n            return secondSmallest;\n        }\n        return null;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        foreach (long i in lst) {\n     \
    \       if (i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            } else if (i > secondSmallest) {\n   \
    \             secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long second = smallest;\n        bool found = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       second = smallest;\n                smallest = lst[i];\n             \
    \   found = true;\n            } else if (lst[i] == smallest) {\n            \
    \    second = smallest;\n                smallest = lst[i];\n                found\
    \ = true;\n            } else if (lst[i] > smallest) {\n                second\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            }\n        }\n        if (found) return second;\n        return null;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        if (secondSmallest\
    \ == smallest) {\n            return null;\n        }\n        return secondSmallest;"]
stop_tokens:
- "\n    }\n"
