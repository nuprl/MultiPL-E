name: HumanEval_18_how_many_times
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n\
  \    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
  \ 'aa')\n    // 3\n    public static long HowManyTimes(string str, string substring)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
  \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) ==\
  \ (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
  \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
  }\n"
completions: ["        if (string.IsNullOrEmpty(str) || string.IsNullOrEmpty(substring))\n\
    \            return 0;\n        long count = 0;\n        long start = 0;\n   \
    \     long end = 0;\n        long len = 0;\n        bool found = false;\n    \
    \    do {\n            found = false;\n            start = str.IndexOf(substring,\
    \ start);\n            if (start == -1)\n                break;\n            end\
    \ = str.IndexOf(substring, start + 1);\n            if (end == -1)\n         \
    \       end = str.Length;\n            len = end - start + 1;\n            count\
    \ += 1;\n            found = true;\n        } while (found && len > 0);\n    \
    \    return count;", "        long count = 0;\n        long start = 0;\n     \
    \   long end = 0;\n        bool found = false;\n        do {\n            start\
    \ = str.IndexOf(substring, start);\n            if (start == -1) break;\n    \
    \        end = str.IndexOf(substring, start + 1);\n            if (end == -1)\
    \ break;\n            found = true;\n            count += end - start + 1;\n \
    \           start = end + 1;\n        } while (start < str.Length);\n        if\
    \ (!found) return 0;\n        return count;", "        if (string.IsNullOrEmpty(str)\
    \ || string.IsNullOrEmpty(substring)) {\n            return 0;\n        }\n  \
    \      long count = 0;\n        long start = 0;\n        long end = 0;\n     \
    \   long len = 0;\n        bool found = false;\n        do {\n            found\
    \ = false;\n            start = str.IndexOf(substring, start);\n            if\
    \ (start == -1) {\n                break;\n            }\n            end = str.IndexOf(substring,\
    \ start + 1);\n            if (end == -1) {\n                end = str.Length;\n\
    \            }\n            len = end - start + 1;\n            count += 1;\n\
    \            found = true;\n        } while (end != -1);\n        return count;",
  "        long count = 0;\n        foreach (char c in str) {\n            if (c ==\
    \ substring[0]) {\n                count += HowManyTimes(str.Substring(1, str.Length\
    \ - 1), substring);\n            }\n            else if (c == substring[substring.Length\
    \ - 1]) {\n                count += HowManyTimes(str.Substring(0, str.Length -\
    \ 1), substring);\n            }\n            else {\n                count +=\
    \ HowManyTimes(str.Substring(0, str.Length - 1), substring) + HowManyTimes(str.Substring(1,\
    \ str.Length - 1), substring);\n            }\n        }\n        return count;",
  "        long count = 0;\n        foreach (char c in substring) {\n            count\
    \ += str.IndexOf(c, 0) > -1 ? 1 : 0;\n        }\n        return count;", "   \
    \     long count = 0;\n        foreach (char c in substring) {\n            count\
    \ += str.IndexOf(c, str.Length - substring.Length);\n        }\n        return\
    \ count;", "        long count = 0;\n        foreach (char c in substring) {\n\
    \            count += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0\
    \ ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n    \
    \    foreach (char c in str) {\n            if (c == substring[0]) {\n       \
    \         count += HowManyTimes(str.Substring(1, str.Length - 1), substring);\n\
    \            }\n            if (c == substring[substring.Length - 1]) {\n    \
    \            count += HowManyTimes(str.Substring(0, str.Length - 1), substring);\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (char c in str) {\n            if (c == substring[0]) {\n   \
    \             count += HowManyTimes(str.Substring(1, str.Length - 1), substring);\n\
    \            }\n            if (c == substring[substring.Length - 1]) {\n    \
    \            count += HowManyTimes(str.Substring(0, str.Length - 1), substring);\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (char c in substring) {\n            if (str.Contains(c)) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       long count = 0;\n        foreach (char c in substring) {\n           \
    \ count += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in substring) {\n            if (str.Contains(c)) {\n              \
    \  count++;\n            }\n        }\n        return count;", "        long count\
    \ = 0;\n        foreach (char c in str) {\n            if (c == substring[0])\
    \ {\n                count += HowManyTimes(str.Substring(1, str.Length - 1), substring);\n\
    \            }\n            else if (c == substring[substring.Length - 1]) {\n\
    \                count += HowManyTimes(str.Substring(0, str.Length - 1), substring);\n\
    \            }\n            else {\n                count += HowManyTimes(str.Substring(0,\
    \ str.Length - 1), substring) + HowManyTimes(str.Substring(1, str.Length - 1),\
    \ substring);\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (char c in substring) {\n            count += str.IndexOf(c,\
    \ StringComparison.OrdinalIgnoreCase) >= 0 ? 1 : 0;\n        }\n        return\
    \ count;", "        long count = 0;\n        long start = 0;\n        long end\
    \ = 0;\n        long length = 0;\n        bool found = false;\n        bool foundStart\
    \ = false;\n        bool foundEnd = false;\n        bool foundLength = false;\n\
    \        bool foundSub = false;\n        bool foundSubStart = false;\n       \
    \ bool foundSubEnd = false;\n        bool foundSubLength = false;\n        bool\
    \ foundSubSub = false;\n        bool foundSubSubStart = false;\n        bool foundSubSubEnd\
    \ = false;\n        bool foundSubSubLength = false;\n        bool foundSubSubSub\
    \ = false;\n        bool foundSubSubSubStart = false;\n        bool foundSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubLength = false;\n        bool foundSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubStart = false;\n        bool foundSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubLength = false;\n        bool foundSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEnd\
    \ = false;\n        bool foundSubSubSubSubSubLength = false;\n        bool foundSubSubSubSubSubSub\
    \ = false;\n        bool foundSubSubSubSubSubStart = false;\n        bool foundSubSubSubSubSubEn",
  "        long count = 0;\n        foreach (char c in substring) {\n            count\
    \ += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >= 0;\n        }\n   \
    \     return count;", "        long count = 0;\n        foreach (char c in substring)\
    \ {\n            count += str.IndexOf(c, StringComparison.OrdinalIgnoreCase) >=\
    \ 0 ? 1 : 0;\n        }\n        return count;", "        long count = 0;\n  \
    \      foreach (char c in substring) {\n            count += str.IndexOf(c, StringComparison.OrdinalIgnoreCase)\
    \ >= 0;\n        }\n        return count;", "        if (string.IsNullOrEmpty(str)\
    \ || string.IsNullOrEmpty(substring)) {\n            return 0;\n        }\n  \
    \      long count = 0;\n        long start = 0;\n        long end = str.Length\
    \ - substring.Length;\n        long current = 0;\n        bool found = false;\n\
    \        do {\n            current = str.IndexOf(substring, start);\n        \
    \    if (current == -1) {\n                break;\n            }\n           \
    \ found = true;\n            start = current + 1;\n            while (current\
    \ < end && str[current] == substring[substring.Length]) {\n                current++;\n\
    \            }\n            count++;\n        } while (current < end);\n     \
    \   return count;", "        long count = 0;\n        long start = 0;\n      \
    \  long end = 0;\n        long len = 0;\n        bool found = false;\n       \
    \ bool startFound = false;\n        bool endFound = false;\n        bool lenFound\
    \ = false;\n        bool startFoundOverlap = false;\n        bool endFoundOverlap\
    \ = false;\n        bool lenFoundOverlap = false;\n        bool startFoundOverlapOverlap\
    \ = false;\n        bool endFoundOverlapOverlap = false;\n        bool lenFoundOverlapOverlap\
    \ = false;\n        bool startFoundOverlapOverlapOverlap = false;\n        bool\
    \ endFoundOverlapOverlapOverlap = false;\n        bool lenFoundOverlapOverlapOverlap\
    \ = false;\n        bool startFoundOverlapOverlapOverlapOverlap = false;\n   \
    \     bool endFoundOverlapOverlapOverlapOverlap = false;\n        bool lenFoundOverlapOverlapOverlapOverlap\
    \ = false;\n        bool startFoundOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool endFoundOverlapOverlapOverlapOverlapOverlap = false;\n        bool\
    \ lenFoundOverlapOverlapOverlapOverlapOverlap = false;\n        bool startFoundOverlapOverlapOverlapOverlapOverlap\
    \ = false;\n        bool endFoundOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n  \
    \      bool startFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n  \
    \      bool endFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n    \
    \    bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n      \
    \  bool startFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n      \
    \  bool endFoundOverlapOverlapOverlapOverlapOverlapOverlap = false;\n        bool\
    \ lenFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap = false;\n       \
    \ bool startFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool endFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool startFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool endFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool lenFoundOverlapOverlapOverlapOverlapOverlapOverlapOverlap = false;\n\
    \        bool startFoundOverlapOverlapOverlap"]
stop_tokens:
- "\n    }\n"
