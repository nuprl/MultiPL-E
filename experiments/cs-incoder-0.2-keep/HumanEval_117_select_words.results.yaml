language: cs
name: HumanEval_117_select_words
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        string word = \"\";\n        bool isConsonant = false;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=
    c;\n                if (char.IsUpper(c))\n                    isConsonant = true;\n
    \           }\n            if (isConsonant) {\n                if (word.Length
    == n)\n                    result.Add(word);\n                word = \"\";\n                isConsonant
    = false;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <957a1ae7b488429ab25c92097b1251ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <957a1ae7b488429ab25c92097b1251ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = true;\n        bool
    isLastConsonant = true;\n        bool isLastConsonantLast = true;\n        bool
    isLastConsonantFirst = true;\n        bool isFirstConsonant = true;\n        bool
    isFirstConsonantLast = true;\n        bool isFirstConsonantFirst = true;\n        bool
    isLastWord = true;\n        bool isFirstWord = true;\n        bool isFirstWordLast
    = true;\n        bool isFirstWordFirst = true;\n        bool isLastWordFirst =
    true;\n        bool isFirstWordLastFirst = true;\n        bool isLastWordLast
    = true;\n        bool isFirstWordLastLast = true;\n        bool isLastWordLastFirst
    = true;\n        bool isFirstWordLastLastFirst = true;\n        bool isLastWordLastLast
    = true;\n        bool isFirstWordLastLastLast = true;\n        bool isLastWordLastLastFirst
    = true;\n        bool isFirstWordLastLastLastFirst = true;\n        bool isLastWordLastLastLast
    = true;\n        bool isFirstWordLastLastLastLast = true;\n        bool isLastWordLastLastLastFirst
    = true;\n        bool isFirstWordLastLastLastLastFirst = true;\n        bool isLastWordLastLastLastLast
    = true;\n        bool isFirstWordLastLastLastLastLast = true;\n        bool isLastWordLastLastLastLastFirst
    = true;\n        bool isFirstWordLastLastLastLastLastFirst = true;\n        bool
    isLastWordLastLastLastLastLast = true;\n        bool isFirstWordLastLastLastLastLastFirst
    = true;\n        bool isLastWordLastLastLastLastLast = true;\n        bool isFirstWordLastLastLastLastLastLast
    = true;\n        bool isLastWordLastLastLastLastLastFirst = true;\n        bool
    isFirstWordLastLastLastLastLastLastFirst = true;\n        bool isLastWordLastLastLastLastLastLast
    = true;\n        bool isFirstWordLastLastLastLastLastLastFirst = true;\n        bool
    isLastWordLastLastLastLastLastLast = true;\n        bool isFirstWordLastLastLastLastLastLastLastFirst
    = true;\n        bool isLastWordLastLastLastLastLastLastLast = true;\n        bool
    isFirstWordLastLastLastLastLastLastLastFirst = true;\n        bool isLastWordLastLastLastLastLastLastLast
    = true;\n        bool isFirstWordLastLastLast\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptemtvsx1.cs(68,37): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        int[] count
    = new int[26];\n        int[] count2 = new int[26];\n        int[] count3 = new
    int[26];\n        int[] count4 = new int[26];\n        int[] count5 = new int[26];\n
    \       int[] count6 = new int[26];\n        int[] count7 = new int[26];\n        int[]
    count8 = new int[26];\n        int[] count9 = new int[26];\n        int[] count10
    = new int[26];\n        int[] count11 = new int[26];\n        int[] count12 =
    new int[26];\n        int[] count13 = new int[26];\n        int[] count14 = new
    int[26];\n        int[] count15 = new int[26];\n        int[] count16 = new int[26];\n
    \       int[] count17 = new int[26];\n        int[] count18 = new int[26];\n        int[]
    count19 = new int[26];\n        int[] count20 = new int[26];\n        int[] count21
    = new int[26];\n        int[] count22 = new int[26];\n        int[] count23 =
    new int[26];\n        int[] count24 = new int[26];\n        int[] count25 = new
    int[26];\n        int[] count26 = new int[26];\n        int[] count27 = new int[26];\n
    \       int[] count28 = new int[26];\n        int[] count29 = new int[26];\n        int[]
    count30 = new int[26];\n        int[] count31 = new int[26];\n        int[] count32
    = new int[26];\n        int[] count33 = new int[26];\n        int[] count34 =
    new int[26];\n        int[] count35 = new int[26];\n        int[] count36 = new
    int[26];\n        int[] count37 = new int[26];\n        int[] count38 = new int[26];\n
    \       int[] count39 = new int[26];\n        int[] count40 = new int[26];\n        int[]
    count41 = new int[26];\n        int[] count42 = new int[26];\n        int[] count43
    = new int[26];\n        int[] count44\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprinatr2a.cs(69,22): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    rest = s.Substring(s.Length - 1);\n        List<string> words = SelectWords(rest,
    n);\n        foreach (string word in words) {\n            if (word.Contains(word))
    {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7kpcwb2x.cs(28,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        int[] count
    = new int[26];\n        for (int i = 0; i < chars.Length; i++) {\n            char
    c = chars[i];\n            count[c - 'a']++;\n        }\n        List<string>
    words = new List<string>();\n        long total = 0;\n        for (int i = 0;
    i < count.Length; i++) {\n            total += count[i];\n            if (total
    >= n) {\n                words.Add(new string(chars, i, 1));\n                total
    -= count[i];\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x00037] in <aab69b305aec4fa7b5e6c1a7d1d9d913>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <aab69b305aec4fa7b5e6c1a7d1d9d913>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00037] in
    <aab69b305aec4fa7b5e6c1a7d1d9d913>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <aab69b305aec4fa7b5e6c1a7d1d9d913>:0 \n"
  stdout: ''
  timestamp: 1659805408
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLower(c)) {\n                consonants.Add(c);\n            }\n        }\n
    \       List<string> words = new List<string>();\n        foreach (char c in consonants)
    {\n            words.AddRange(SelectWords(s, n - 1));\n        }\n        foreach
    (string word in words) {\n            string newWord = word;\n            foreach
    (char c in consonants) {\n                newWord = newWord.Replace(c.ToString(),
    \"\");\n            }\n            result.Add(newWord);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        bool
    isConsonant = false;\n        string vowels = \"aeiou\";\n        string consonants
    = \"bcdfghjklmnpqrstvwxyz\";\n        foreach (char c in word) {\n            if
    (vowels.Contains(c)) {\n                isConsonant = true;\n            }\n            if
    (consonants.Contains(c)) {\n                isConsonant = false;\n            }\n
    \       }\n        if (isConsonant) {\n            result.Add(word);\n        }\n
    \       long count = 0;\n        foreach (char c in word) {\n            if (consonants.Contains(c))
    {\n                count++;\n            }\n        }\n        if (count == n)
    {\n            result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb5738700e664739bec77d2795674413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb5738700e664739bec77d2795674413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       long count = 0;\n        foreach (char c in chars) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count != n)
    {\n            return result;\n        }\n        char[] chars2 = s.ToCharArray();\n
    \       Array.Sort(chars2);\n        count = 0;\n        foreach (char c in chars2)
    {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       char[] chars3 = s.ToCharArray();\n        Array.Sort(chars3);\n        count
    = 0;\n        foreach (char c in chars3) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count != n)
    {\n            return result;\n        }\n        char[] chars4 = s.ToCharArray();\n
    \       Array.Sort(chars4);\n        count = 0;\n        foreach (char c in chars4)
    {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       char[] chars5 = s.ToCharArray();\n        Array.Sort(chars5);\n        count
    = 0;\n        foreach (char c in chars5) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count != n)
    {\n            return result;\n        }\n        char[] chars6 = s.ToCharArray();\n
    \       Array.Sort(chars6);\n        count = 0;\n        foreach (char c in chars6)
    {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       char[] chars7 = s.ToCharArray();\n        Array.Sort(chars7);\n        count
    = 0;\n        foreach (char c in chars7) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count != n)
    {\n            return result;\n        }\n        char[] chars8 = s.ToCharArray();\n
    \       Array.Sort(chars8);\n        count = 0;\n        foreach (char c in chars8)
    {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       char[] chars9 = s.ToCharArray();\n        Array.Sort(chars9);\n        count
    = 0;\n        foreach (char c in chars9) {\n            if (char.Is\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxl1qi_y.cs(117,24): error CS1026: ) expected

    /tmp/tmpmxl1qi_y.cs(117,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpmxl1qi_y.cs(117,24): error CS1002: ; expected

    /tmp/tmpmxl1qi_y.cs(119,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmxl1qi_y.cs(129,2): error CS1513: } expected

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word == \"\") {\n            return result;\n        }\n
    \       string word2 = \"\";\n        long count = 0;\n        foreach (char c
    in word) {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       foreach (char c in word) {\n            if (char.IsLetter(c)) {\n                word2
    += c;\n            }\n        }\n        foreach (char c in word2) {\n            if
    (char.IsLetter(c)) {\n                result.Add(word2);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <647434ddb91e4fd29e002755abd7f14e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <647434ddb91e4fd29e002755abd7f14e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string vowels = \"aeiou\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n
    \       string consonants2 = consonants + \"AEIOU\";\n        string consonants3
    = consonants2 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants4 = consonants3
    + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants5 = consonants4 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n
    \       string consonants6 = consonants5 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string
    consonants7 = consonants6 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants8
    = consonants7 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants9 = consonants8
    + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants10 = consonants9 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n
    \       string consonants11 = consonants10 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string
    consonants12 = consonants11 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants13
    = consonants12 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants14 = consonants13
    + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants15 = consonants14 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n
    \       string consonants16 = consonants15 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string
    consonants17 = consonants16 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants18
    = consonants17 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants19 = consonants18
    + \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants20 = consonants19 + \"BCDFGHJKLMNPQRSTVWXYZ\";\n
    \       string consonants21 = consonants\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7fkif_s6.cs(46,41): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = \"\";\n        bool isConsonant = false;\n        bool
    isWord = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                isWord = true;\n                word += c;\n            }\n
    \           if (char.IsWhiteSpace(c)) {\n                if (isWord) {\n                    result.Add(word);\n
    \                   isWord = false;\n                }\n            }\n            if
    (char.IsLetter(c) && char.IsWhiteSpace(c)) {\n                isConsonant = true;\n
    \           }\n            if (char.IsLetter(c) && !char.IsWhiteSpace(c)) {\n
    \               isConsonant = false;\n            }\n        }\n        if (isWord)
    {\n            result.Add(word);\n        }\n        if (result.Count == 0) {\n
    \           return result;\n        }\n        List<string> result2 = new List<string>();\n
    \       foreach (string word in result) {\n            int count = 0;\n            foreach
    (char c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                result2.Add(word);\n
    \           }\n        }\n        return result2;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpko7q2xnm.cs(53,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpko7q2xnm.cs(26,14): warning CS0219: The variable ''isConsonant'' is assigned
    but its value is never used

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                consonants.Add(c);\n            }\n
    \       }\n        char[] consonantChars = consonants.ToArray();\n        List<char>
    vowels = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                vowels.Add(c);\n            }\n        }\n
    \       char[] vowelChars = vowels.ToArray();\n        List<char> vowelsAndConsonants
    = new List<char>();\n        vowelsAndConsonants.AddRange(vowelChars);\n        vowelsAndConsonants.AddRange(consonantChars);\n
    \       vowelsAndConsonants.Sort();\n        List<char> vowelsAndConsonants2 =
    new List<char>();\n        vowelsAndConsonants2.AddRange(vowelChars);\n        vowelsAndConsonants2.AddRange(consonantChars);\n
    \       vowelsAndConsonants2.Sort();\n        List<char> vowelsAndConsonants3
    = new List<char>();\n        vowelsAndConsonants3.AddRange(vowelChars);\n        vowelsAndConsonants3.AddRange(consonantChars);\n
    \       vowelsAndConsonants3.Sort();\n        List<char> vowelsAndConsonants4
    = new List<char>();\n        vowelsAndConsonants4.AddRange(vowelChars);\n        vowelsAndConsonants4.AddRange(consonantChars);\n
    \       vowelsAndConsonants4.Sort();\n        List<char> vowelsAndConsonants5
    = new List<char>();\n        vowelsAndConsonants5.AddRange(vowelChars);\n        vowelsAndConsonants5.AddRange(consonantChars);\n
    \       vowelsAndConsonants5.Sort();\n        List<char> vowelsAndConsonants6
    = new List<char>();\n        vowelsAndConsonants6.AddRange(vowelChars);\n        vowelsAndConsonants6.AddRange(consonantChars);\n
    \       vowelsAndConsonants6.Sort();\n        List<char> vowelsAndConsonants7
    = new List<char>();\n        vowelsAndConsonants7.AddRange(vowelChars);\n        vowelsAndConsonants7.AddRange(consonantChars);\n
    \       vowelsAndConsonants7.Sort();\n        List<\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0lq177cq.cs(68,14): error CS1525: Invalid expression term ''}''

    /tmp/tmp0lq177cq.cs(68,14): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n        bool
    isLastConsonant = false;\n        bool isLastConsonantLastWord = false;\n        bool
    isLastConsonantLastWordLastWord = false;\n        bool isLastConsonantLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord =
    false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonant\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ialugm1.cs(49,29): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = string.Empty;\n        string
    currentWord = string.Empty;\n        string currentWord2 = string.Empty;\n        string
    currentWord3 = string.Empty;\n        string currentWord4 = string.Empty;\n        string
    currentWord5 = string.Empty;\n        string currentWord6 = string.Empty;\n        string
    currentWord7 = string.Empty;\n        string currentWord8 = string.Empty;\n        string
    currentWord9 = string.Empty;\n        string currentWord10 = string.Empty;\n        string
    currentWord11 = string.Empty;\n        string currentWord12 = string.Empty;\n
    \       string currentWord13 = string.Empty;\n        string currentWord14 = string.Empty;\n
    \       string currentWord15 = string.Empty;\n        string currentWord16 = string.Empty;\n
    \       string currentWord17 = string.Empty;\n        string currentWord18 = string.Empty;\n
    \       string currentWord19 = string.Empty;\n        string currentWord20 = string.Empty;\n
    \       string currentWord21 = string.Empty;\n        string currentWord22 = string.Empty;\n
    \       string currentWord23 = string.Empty;\n        string currentWord24 = string.Empty;\n
    \       string currentWord25 = string.Empty;\n        string currentWord26 = string.Empty;\n
    \       string currentWord27 = string.Empty;\n        string currentWord28 = string.Empty;\n
    \       string currentWord29 = string.Empty;\n        string currentWord30 = string.Empty;\n
    \       string currentWord31 = string.Empty;\n        string currentWord32 = string.Empty;\n
    \       string currentWord33 = string.Empty;\n        string currentWord34 = string.Empty;\n
    \       string currentWord35 = string.Empty;\n        string currentWord36 = string.Empty;\n
    \       string currentWord37 = string.Empty;\n        string currentWord38 = string.Empty;\n
    \       string currentWord39 = string.Empty;\n        string currentWord40 = string.Empty;\n
    \       string currentWord41 = string.Empty;\n        string currentWord42 = string.Empty;\n
    \       string currentWord43 = string.Empty;\n        string currentWord44 = string.Empty;\n
    \       string currentWord45 = string.Empty;\n        string currentWord46 = string.Empty;\n
    \       string currentWord47 = string.Empty;\n        string currentWord48 = string.Empty;\n
    \       string currentWord49 = string.Empty;\n        string currentWord50 = string.Empty;\n
    \       string currentWord51 = string.\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp367s8vd7.cs(73,39): error CS1001: Identifier expected

    /tmp/tmp367s8vd7.cs(73,39): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                consonants.Add(c);\n            }\n
    \       }\n        long count = 0;\n        foreach (char c in consonants) {\n
    \           count += (int)c;\n        }\n        long remain = n;\n        long
    index = 0;\n        List<string> words = new List<string>();\n        while (count
    > 0) {\n            words.Add(s.Substring(index, count + 1));\n            count
    -= (int)consonants[index];\n            index++;\n        }\n        foreach (string
    word in words) {\n            int count = 0;\n            foreach (char c in word)
    {\n                if (char.IsLetterOrDigit(c)) {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy15i6gqa.cs(40,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpy15i6gqa.cs(40,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpy15i6gqa.cs(41,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpy15i6gqa.cs(45,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        bool isWord
    = false;\n        foreach (char c in s) {\n            if (isWord) {\n                word
    += c;\n                if (word.Length == n) {\n                    result.Add(word);\n
    \                   word = \"\";\n                    isWord = false;\n                }\n
    \           } else {\n                if (c == 'a' || c == 'e' || c == 'i' ||
    c == 'o' || c == 'u') {\n                    isWord = true;\n                }\n
    \           }\n        }\n        if (word.Length > 0) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2ab77089ce842b083592e0a736315a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2ab77089ce842b083592e0a736315a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqzi0yqr.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1026: ) expected

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       string word = \"\";\n        bool flag = false;\n        for (int i =
    0; i < chars.Length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e'
    || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                flag
    = true;\n                word += chars[i];\n            }\n            if (flag)
    {\n                result.Add(word);\n                word = \"\";\n                flag
    = false;\n            }\n        }\n        if (word != \"\") {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce7c05e7954043828c00e6ab25afa79b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce7c05e7954043828c00e6ab25afa79b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        long count = 0;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       char[] chars = s.ToCharArray();\n        List<char> charList = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n                charList.Add(c);\n
    \           }\n        }\n        charList.Sort();\n        char[] charArray =
    charList.ToArray();\n        List<string> words = new List<string>();\n        foreach
    (char c in charArray) {\n            string word = s.Substring(0, s.IndexOf(c));\n
    \           words.Add(word);\n            s = s.Substring(word.Length);\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965b4327be14471894fc1911874be625>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965b4327be14471894fc1911874be625>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        bool isLastWordConsonant = lastWord.Length
    == 1 && lastWord.ToUpper() == \"A\";\n        bool isWordConsonant = word.Length
    == 1 && word.ToUpper() == \"A\";\n        if (isLastWordConsonant && isWordConsonant)
    {\n            result.Add(word);\n        }\n        if (isLastWordConsonant &&
    !isWordConsonant) {\n            result.Add(word);\n        }\n        if (!isLastWordConsonant
    && isWordConsonant) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f7173cadaf343748f254cf7e6e21dce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f7173cadaf343748f254cf7e6e21dce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       long n = Math.Abs(n);\n        string firstLetter = s[0];\n        string
    lastLetter = s[s.Length - 1];\n        long firstLetterCount = s.Count(x => x
    == firstLetter);\n        long lastLetterCount = s.Count(x => x == lastLetter);\n
    \       if (firstLetterCount == 0)\n            return result;\n        if (lastLetterCount
    == 0)\n            return result;\n        long firstLetterCountAbs = Math.Abs(firstLetterCount);\n
    \       long lastLetterCountAbs = Math.Abs(lastLetterCount);\n        long totalLetterCount
    = firstLetterCountAbs + lastLetterCountAbs;\n        if (totalLetterCount > n)\n
    \           return result;\n        long totalLetterCountAbs = Math.Abs(totalLetterCount);\n
    \       long totalLetterCountAbsMinusOne = totalLetterCountAbs - 1;\n        long
    totalLetterCountAbsMinusTwo = totalLetterCountAbs - 2;\n        long totalLetterCountAbsMinusThree
    = totalLetterCountAbs - 3;\n        long totalLetterCountAbsMinusFour = totalLetterCountAbs
    - 4;\n        long totalLetterCountAbsMinusFive = totalLetterCountAbs - 5;\n        long
    totalLetterCountAbsMinusSix = totalLetterCountAbs - 6;\n        long totalLetterCountAbsMinusSeven
    = totalLetterCountAbs - 7;\n        long totalLetterCountAbsMinusEight = totalLetterCountAbs
    - 8;\n        long totalLetterCountAbsMinusNine = totalLetterCountAbs - 9;\n        long
    totalLetterCountAbsMinusTen = totalLetterCountAbs - 10;\n        long totalLetterCountAbsMinusEleven
    = totalLetterCountAbs - 11;\n        long totalLetterCountAbsMinusTwelve = totalLetterCountAbs
    - 12;\n        long totalLetterCountAbsMinusThirteen = totalLetterCountAbs - 13;\n
    \       long totalLetterCountAbsMinusFourteen = totalLetterCountAbs - 14;\n        long
    totalLetterCountAbsMinusFifteen = totalLetterCountAbs - 15;\n        long totalLetterCountAbsMinusSixteen
    = totalLetterCountAbs - 16;\n        long totalLetterCountAbsMinusSeventeen =
    totalLetterCountAbs - 17;\n        long totalLetterCountAbsMinusEighteen = totalLetterCountAbs
    - 18;\n        long totalLetterCountAb\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpegffgzt6.cs(57,32): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word == \"\") {\n            return result;\n        }\n
    \       List<string> words = SelectWords(word, n);\n        foreach (string word
    in words) {\n            result.Add(word);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiq4f_tn7.cs(32,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string
    word = \"\";\n        long count = 0;\n        foreach (char c in chars) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n                count++;\n                if
    (count == n) result.Add(word);\n                word = \"\";\n                count
    = 0;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f2a0342e3c84097ade0d3a69f8999b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f2a0342e3c84097ade0d3a69f8999b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") return result;\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                if (word.Length
    == n) result.Add(word);\n                word = \"\";\n            }\n        }\n
    \       if (word.Length != n) result.Add(word);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d21fb239bc8d4c0eb730a06a0f7ab6c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d21fb239bc8d4c0eb730a06a0f7ab6c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcq_l7zko.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcq_l7zko.cs(58,51): error CS1026: ) expected

    /tmp/tmpcq_l7zko.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        List<char> chars = new List<char>();\n        foreach
    (char c in s) {\n            chars.Add(c);\n        }\n        chars.Sort();\n
    \       chars.Reverse();\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       chars.RemoveAt(0);\n        chars.RemoveAt(0);\n        chars.RemoveAt(0);\n
    \       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8csjo7ia.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        bool flag =
    false;\n        foreach (char c in s) {\n            if (flag == true) {\n                word
    += c;\n                if (word.Length == n) {\n                    result.Add(word);\n
    \                   flag = false;\n                    word = \"\";\n                }\n
    \           }\n            if (char.IsLetter(c)) {\n                flag = true;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe8bd3dd5cac484590780ed30ab6847f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe8bd3dd5cac484590780ed30ab6847f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        long maxLen = s.Length;\n        long curLen = 0;\n        bool
    isWord = false;\n        string curWord = \"\";\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) {\n                curLen += 1;\n                if
    (curLen > maxLen)\n                    maxLen = curLen;\n                isWord
    = true;\n                curWord += c;\n            }\n            else\n                isWord
    = false;\n        }\n        if (maxLen != curLen)\n            return result;\n
    \       if (n == 0)\n            return result;\n        long curCount = 0;\n
    \       long curIndex = 0;\n        long maxCount = 0;\n        bool isWord =
    false;\n        string curWord = \"\";\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                curCount += 1;\n                if (curCount
    == n) {\n                    isWord = true;\n                    curWord += c;\n
    \               }\n                else\n                    isWord = false;\n
    \           }\n            else\n                isWord = false;\n        }\n
    \       if (isWord)\n            result.Add(curWord);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq6wgb1fj.cs(46,14): error CS0128: A local variable or function named ''isWord''
    is already defined in this scope

    /tmp/tmpq6wgb1fj.cs(47,16): error CS0128: A local variable or function named ''curWord''
    is already defined in this scope

    /tmp/tmpq6wgb1fj.cs(44,14): warning CS0219: The variable ''curIndex'' is assigned
    but its value is never used

    /tmp/tmpq6wgb1fj.cs(45,14): warning CS0219: The variable ''maxCount'' is assigned
    but its value is never used

    /tmp/tmpq6wgb1fj.cs(46,14): warning CS0219: The variable ''isWord'' is assigned
    but its value is never used

    /tmp/tmpq6wgb1fj.cs(47,16): warning CS0219: The variable ''curWord'' is assigned
    but its value is never used

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = \"\";\n        string lastWord = \"\";\n
    \       bool isFirst = true;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                if (isFirst) {\n                    word
    = c.ToString();\n                    isFirst = false;\n                } else
    {\n                    lastWord = word + c.ToString();\n                    result.Add(lastWord);\n
    \                   lastWord = \"\";\n                }\n            }\n        }\n
    \       if (lastWord.Length > 0) {\n            lastWord = lastWord + c.ToString();\n
    \           result.Add(lastWord);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpca1wmxdt.cs(41,35): error CS0103: The name ''c'' does not exist in the
    current context

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        long
    count = 0;\n        foreach (char c in chars) {\n            if (char.IsLetter(c))
    {\n                count++;\n                if (count == n) result.Add(s.Substring(0,
    s.IndexOf(c)));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff689a05faee42fd8d13f3b8150d46fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff689a05faee42fd8d13f3b8150d46fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = string.Empty;\n        bool isConsonant
    = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n                isConsonant = true;\n            }\n
    \           if (isConsonant) {\n                result.Add(word);\n                word
    = string.Empty;\n                isConsonant = false;\n            }\n        }\n
    \       if (word.Length > 0) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05b05088e355474dbd5a32b629b094b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05b05088e355474dbd5a32b629b094b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       string word = \"\";\n        long count = 0;\n        foreach (char c
    in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n                count++;\n
    \           }\n            if (count == n) {\n                result.Add(word);\n
    \               word = \"\";\n                count = 0;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f20a9c1421c34d0a92c8ae68f32c8bbe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f20a9c1421c34d0a92c8ae68f32c8bbe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n        bool
    isLastConsonant = false;\n        bool isLastConsonantOrLastWord = false;\n        bool
    isLastConsonantOrLastWordOrLastWord = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpijivkikf.cs(43,89): error CS1002: ; expected

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string word2
    = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvspi3hkq.cs(22,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(23,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(24,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(25,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(26,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(27,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(28,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(29,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(30,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(31,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(32,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(33,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(34,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(35,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(36,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(37,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(38,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(39,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(40,'
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n
    \       bool isConsonantLast = false;\n        bool isConsonantLast2 = false;\n
    \       bool isConsonantLast3 = false;\n        bool isConsonantLast4 = false;\n
    \       bool isConsonantLast5 = false;\n        bool isConsonantLast6 = false;\n
    \       bool isConsonantLast7 = false;\n        bool isConsonantLast8 = false;\n
    \       bool isConsonantLast9 = false;\n        bool isConsonantLast10 = false;\n
    \       bool isConsonantLast11 = false;\n        bool isConsonantLast12 = false;\n
    \       bool isConsonantLast13 = false;\n        bool isConsonantLast14 = false;\n
    \       bool isConsonantLast15 = false;\n        bool isConsonantLast16 = false;\n
    \       bool isConsonantLast17 = false;\n        bool isConsonantLast18 = false;\n
    \       bool isConsonantLast19 = false;\n        bool isConsonantLast20 = false;\n
    \       bool isConsonantLast21 = false;\n        bool isConsonantLast22 = false;\n
    \       bool isConsonantLast23 = false;\n        bool isConsonantLast24 = false;\n
    \       bool isConsonantLast25 = false;\n        bool isConsonantLast26 = false;\n
    \       bool isConsonantLast27 = false;\n        bool isConsonantLast28 = false;\n
    \       bool isConsonantLast29 = false;\n        bool isConsonantLast30 = false;\n
    \       bool isConsonantLast31 = false;\n        bool isConsonantLast32 = false;\n
    \       bool isConsonantLast33 = false;\n        bool isConsonantLast34 = false;\n
    \       bool isConsonantLast35 = false;\n        bool isConsonantLast36 = false;\n
    \       bool isConsonantLast37 = false;\n        bool isConsonantLast38 = false;\n
    \       bool isConsonantLast39 = false;\n        bool isConsonantLast40 = false;\n
    \       bool isConsonantLast41 = false;\n        bool isConsonantLast42 = false;\n
    \       bool isConsonantLast43 = false;\n        bool isConsonantLast44 = false;\n
    \       bool isConsonantLast45 = false;\n        bool is\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3s8u1i20.cs(73,14): error CS1001: Identifier expected

    /tmp/tmp3s8u1i20.cs(73,14): error CS1002: ; expected

    /tmp/tmp3s8u1i20.cs(73,14): error CS1525: Invalid expression term ''is''

    /tmp/tmp3s8u1i20.cs(73,16): error CS1031: Type expected

    /tmp/tmp3s8u1i20.cs(73,16): error CS1002: ; expected

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string word2
    = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvspi3hkq.cs(22,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(23,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(24,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(25,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(26,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(27,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(28,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(29,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(30,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(31,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(32,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(33,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(34,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(35,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(36,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(37,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(38,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(39,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(40,'
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLower(c)) {\n                consonants.Add(c);\n            }\n        }\n
    \       List<char> vowels = new List<char>();\n        foreach (char c in chars)
    {\n            if (char.IsUpper(c)) {\n                vowels.Add(c);\n            }\n
    \       }\n        List<char> consonants_vowels = consonants.Union(vowels).ToList();\n
    \       List<char> consonants_vowels_sorted = consonants_vowels.OrderBy(c => c).ToList();\n
    \       List<char> consonants_vowels_sorted_reverse = consonants_vowels_sorted.Reverse().ToList();\n
    \       List<char> consonants_vowels_sorted_reverse_sorted = consonants_vowels_sorted_reverse.OrderBy(c
    => c).ToList();\n        List<char> consonants_vowels_sorted_reverse_sorted_reverse
    = consonants_vowels_sorted_reverse_sorted.Reverse().ToList();\n        List<char>
    consonants_vowels_sorted_reverse_sorted_reverse_sorted = consonants_vowels_sorted_reverse_sorted_reverse.OrderBy(c
    => c).ToList();\n        List<char> consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse
    = consonants_vowels_sorted_reverse_sorted_reverse_sorted.Reverse().ToList();\n
    \       List<char> consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted
    = consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse.OrderBy(c =>
    c).ToList();\n        List<char> consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse
    = consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted.Reverse().ToList();\n
    \       List<char> consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse
    = consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse.OrderBy(c
    => c).ToList();\n        List<char> consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted
    = consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted.OrderBy(c
    => c).ToList();\n        List<char> consonants_vowels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponfmyh36.cs(49,112): error CS1002: ; expected

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        List<char> chars = new List<char>();\n        foreach
    (char c in s) {\n            if (chars.Contains(c)) {\n                continue;\n
    \           }\n            chars.Add(c);\n            result.Add(s);\n        }\n
    \       chars.RemoveAt(0);\n        foreach (char c in chars) {\n            result.RemoveAll(x
    => x.Contains(c));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ec47fc8bb384096a91b8d6b838ca9cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ec47fc8bb384096a91b8d6b838ca9cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        string word2 = \"\";\n        foreach (char c in word) {\n
    \           if (char.IsLetter(c)) {\n                word2 += c;\n            }\n
    \       }\n        long count = 0;\n        foreach (char c in word2) {\n            if
    (char.IsLetter(c)) {\n                count++;\n            }\n        }\n        if
    (count != n) {\n            return result;\n        }\n        List<string> words
    = new List<string>();\n        foreach (char c in word2) {\n            if (char.IsLetter(c))
    {\n                words.Add(word2);\n            }\n        }\n        foreach
    (string word in words) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmr6rrhzm.cs(49,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        long maxCount = 0;\n        foreach (char c in s)\n            maxCount
    = Math.Max(maxCount, CountConsonants(c));\n        if (maxCount != n)\n            return
    result;\n        long maxCount2 = 0;\n        foreach (char c in s)\n            maxCount2
    = Math.Max(maxCount2, CountConsonants(c));\n        if (maxCount2 != n)\n            return
    result;\n        long maxCount3 = 0;\n        foreach (char c in s)\n            maxCount3
    = Math.Max(maxCount3, CountConsonants(c));\n        if (maxCount3 != n)\n            return
    result;\n        long maxCount4 = 0;\n        foreach (char c in s)\n            maxCount4
    = Math.Max(maxCount4, CountConsonants(c));\n        if (maxCount4 != n)\n            return
    result;\n        long maxCount5 = 0;\n        foreach (char c in s)\n            maxCount5
    = Math.Max(maxCount5, CountConsonants(c));\n        if (maxCount5 != n)\n            return
    result;\n        long maxCount6 = 0;\n        foreach (char c in s)\n            maxCount6
    = Math.Max(maxCount6, CountConsonants(c));\n        if (maxCount6 != n)\n            return
    result;\n        long maxCount7 = 0;\n        foreach (char c in s)\n            maxCount7
    = Math.Max(maxCount7, CountConsonants(c));\n        if (maxCount7 != n)\n            return
    result;\n        long maxCount8 = 0;\n        foreach (char c in s)\n            maxCount8
    = Math.Max(maxCount8, CountConsonants(c));\n        if (maxCount8 != n)\n            return
    result;\n        long maxCount9 = 0;\n        foreach (char c in s)\n            maxCount9
    = Math.Max(maxCount9, CountConsonants(c));\n        if (maxCount9 != n)\n            return
    result;\n        long maxCount10 = 0;\n        foreach (char c in s)\n            maxCount10
    = Math.Max(maxCount10, CountConsonants(c));\n        if (maxCount10 != n)\n            return
    result;\n        long maxCount11 = 0;\n        foreach (char c in s)\n            maxCount11
    = Math.Max(maxCount11, CountConsonants(c));\n        if (maxCount11 != n)\n            return
    result;\n        long maxCount12 = 0;\n        foreach (char c in s)\n            maxCount12
    = Math.Max(maxCount12, CountConsonants(c));\n        if (maxCount12 != n)\n            return
    result;\n        long maxCount13 = 0;\n        foreach (char c in s)\n            maxCount13
    = Math.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi3ew89hb.cs(86,31): error CS1001: Identifier expected

    /tmp/tmpi3ew89hb.cs(86,31): error CS1002: ; expected

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = string.Empty;\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n                count++;\n            }\n        }\n
    \       if (count == n) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0bd599937d646a79500b659c0337056>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0bd599937d646a79500b659c0337056>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        long count = 0;\n        foreach (char c in s)\n            if
    (char.IsLetter(c))\n                count++;\n        if (count != n)\n            return
    result;\n        string word = \"\";\n        foreach (char c in s)\n            if
    (char.IsLetter(c))\n                word += c;\n        result.Add(word);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2823535eec294c8dabf48d56c48edeb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2823535eec294c8dabf48d56c48edeb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = \"\";\n        string lastWord = \"\";\n        bool
    isFirst = true;\n        foreach (char c in s) {\n            if (isFirst) {\n
    \               isFirst = false;\n                word = c.ToString();\n                lastWord
    = word;\n            }\n            else {\n                if (c.ToString() ==
    lastWord) {\n                    lastWord = word + c.ToString();\n                }\n
    \               else {\n                    if (word.Length == n) {\n                        result.Add(word);\n
    \                   }\n                    word = \"\";\n                    isFirst
    = true;\n                    word = c.ToString();\n                    lastWord
    = word;\n                }\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6338d1e5950147c28488048a7e9b7a89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6338d1e5950147c28488048a7e9b7a89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<string>
    words = new List<string>();\n        foreach (char c in chars) {\n            if
    (IsConsonant(c)) {\n                words.Add(s.Substring(0, s.IndexOf(c)));\n
    \               s = s.Substring(s.IndexOf(c) + 1);\n            }\n        }\n
    \       if (words.Count > n) {\n            words.RemoveAt(0);\n        }\n        foreach
    (string word in words) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7f_uqspb.cs(28,17): error CS0103: The name ''IsConsonant'' does not exist
    in the current context

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) consonants.Add(c);\n
    \       }\n        List<char> vowels = new List<char>();\n        foreach (char
    c in chars) {\n            if (char.IsUpper(c)) vowels.Add(c);\n        }\n        List<char>
    consonants2 = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLower(c)) consonants2.Add(c);\n        }\n        List<char> vowels2 =
    new List<char>();\n        foreach (char c in chars) {\n            if (char.IsUpper(c))
    vowels2.Add(c);\n        }\n        List<char> consonants3 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) consonants3.Add(c);\n
    \       }\n        List<char> vowels3 = new List<char>();\n        foreach (char
    c in chars) {\n            if (char.IsUpper(c)) vowels3.Add(c);\n        }\n        List<char>
    consonants4 = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLower(c)) consonants4.Add(c);\n        }\n        List<char> vowels4 =
    new List<char>();\n        foreach (char c in chars) {\n            if (char.IsUpper(c))
    vowels4.Add(c);\n        }\n        List<char> consonants5 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) consonants5.Add(c);\n
    \       }\n        List<char> vowels5 = new List<char>();\n        foreach (char
    c in chars) {\n            if (char.IsUpper(c)) vowels5.Add(c);\n        }\n        List<char>
    consonants6 = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLower(c)) consonants6.Add(c);\n        }\n        List<char> vowels6 =
    new List<char>();\n        foreach (char c in chars) {\n            if (char.IsUpper(c))
    vowels6.Add(c);\n        }\n        List<char> consonants7 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) consonants7.Add(c);\n
    \       }\n        List<char> vowels7 = new List<char>();\n        foreach (char
    c in chars) {\n            if (char.IsUpper(c)) \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6f9aheay.cs(78,33): error CS1525: Invalid expression term ''}''

    /tmp/tmp6f9aheay.cs(78,33): error CS1002: ; expected

    /tmp/tmp6f9aheay.cs(80,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp6f9aheay.cs(90,2): error CS1513: } expected

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        string lastWord
    = string.Empty;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n                if (word.Length == n) {\n                    result.Add(word);\n
    \                   word = string.Empty;\n                }\n            }\n            else
    {\n                if (word.Length > 0) {\n                    lastWord = word;\n
    \                   word = string.Empty;\n                }\n            }\n        }\n
    \       if (word.Length > 0) {\n            lastWord = word;\n            result.Add(lastWord);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29cd2f18a6b04374b53dd794b79eb2aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29cd2f18a6b04374b53dd794b79eb2aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string rest = s.Substring(s.Length
    - 1);\n        List<string> words = SelectWords(rest, n);\n        foreach (string
    word in words) {\n            if (word.Contains(word))\n                result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjk0c1gxo.cs(27,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \           if (word.Length == n) {\n                result.Add(word);\n                word
    = \"\";\n            }\n        }\n        if (word.Length > 0) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d722ed285cee425d9af180d3975b98fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d722ed285cee425d9af180d3975b98fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n
    \       bool isLastConsonant = false;\n        bool isLastConsonantLastWord =
    false;\n        bool isLastConsonantLastWordLastWord = false;\n        bool isLastConsonantLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord =
    false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConson\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1k0vgkco.cs(50,26): error CS1002: ; expected

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") return result;\n        char[]
    chars = s.ToCharArray();\n        Array.Sort(chars);\n        string word = \"\";\n
    \       long count = 0;\n        foreach (char c in chars) {\n            if (char.IsLetter(c))
    {\n                word += c;\n                count++;\n            }\n            if
    (count == n) {\n                result.Add(word);\n                word = \"\";\n
    \               count = 0;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <507626184271449e89379aea9110f4a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <507626184271449e89379aea9110f4a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        long nConsonants = n;\n        string word = \"\";\n
    \       string lastWord = \"\";\n        bool isFirst = true;\n        foreach
    (char c in s) {\n            if (isFirst) {\n                isFirst = false;\n
    \               word += c;\n            } else {\n                if (c == ' ')
    {\n                    result.Add(word);\n                    word = \"\";\n                }
    else {\n                    word += c;\n                }\n            }\n        }\n
    \       if (word.Length > 0) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <560f53e5fc1740dd8db375a0ad049be6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <560f53e5fc1740dd8db375a0ad049be6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqzi0yqr.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1026: ) expected

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        long count = 0;\n        foreach (char c in s)\n            if
    (char.IsLetterOrDigit(c))\n                count++;\n        if (count != n)\n
    \           return result;\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       StringBuilder sb = new StringBuilder();\n        foreach (char c in chars)\n
    \           if (char.IsLetterOrDigit(c))\n                sb.Append(c);\n        result.Add(sb.ToString());\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f003f04c4d64fa29b838b6791cb0ca3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f003f04c4d64fa29b838b6791cb0ca3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s.Substring(0, s.Length - 1);\n        string
    rest = s.Substring(s.Length - 1);\n        List<string> words = SelectWords(rest,
    n);\n        foreach (string word in words) {\n            if (word.Contains(word))
    {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_kpt0qh6.cs(28,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        foreach (string word in s.Split(' '))\n
    \       {\n            foreach (char c in word)\n            {\n                if
    (c.ToString() == \"a\" || c.ToString() == \"e\" || c.ToString() == \"i\" || c.ToString()
    == \"o\" || c.ToString() == \"u\" || c.ToString() == \"y\")\n                {\n
    \                   result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f719e36a039548478f2a336bcf9af680>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f719e36a039548478f2a336bcf9af680>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        string word = string.Empty;\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=
    c;\n                count++;\n            }\n        }\n        if (count != n)\n
    \           return result;\n        string word2 = word;\n        string word3
    = word;\n        string word4 = word;\n        string word5 = word;\n        string
    word6 = word;\n        string word7 = word;\n        string word8 = word;\n        string
    word9 = word;\n        string word10 = word;\n        string word11 = word;\n
    \       string word12 = word;\n        string word13 = word;\n        string word14
    = word;\n        string word15 = word;\n        string word16 = word;\n        string
    word17 = word;\n        string word18 = word;\n        string word19 = word;\n
    \       string word20 = word;\n        string word21 = word;\n        string word22
    = word;\n        string word23 = word;\n        string word24 = word;\n        string
    word25 = word;\n        string word26 = word;\n        string word27 = word;\n
    \       string word28 = word;\n        string word29 = word;\n        string word30
    = word;\n        string word31 = word;\n        string word32 = word;\n        string
    word33 = word;\n        string word34 = word;\n        string word35 = word;\n
    \       string word36 = word;\n        string word37 = word;\n        string word38
    = word;\n        string word39 = word;\n        string word40 = word;\n        string
    word41 = word;\n        string word42 = word;\n        string word43 = word;\n
    \       string word44 = word;\n        string word45 = word;\n        string word46
    = word;\n        string word47 = word;\n        string word48 = word;\n        string
    word49 = word;\n        string word50 = word;\n        string word51 = word;\n
    \       string word52 = word;\n        string word53 = word;\n        string word54
    = word;\n        string word55 = word;\n        string word56 = word;\n        string
    word57 = word;\n        string word58 = word;\n\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4arw7hmg.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        foreach (string word in s.Split(' '))\n
    \       {\n            foreach (char c in word)\n            {\n                if
    (IsConsonant(c))\n                {\n                    if (result.Count >= n)\n
    \                   {\n                        break;\n                    }\n
    \                   result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe496mh7a.cs(26,21): error CS0103: The name ''IsConsonant'' does not exist
    in the current context

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = \"\";\n        string
    lastWord2 = \"\";\n        string lastWord3 = \"\";\n        string lastWord4
    = \"\";\n        string lastWord5 = \"\";\n        string lastWord6 = \"\";\n
    \       string lastWord7 = \"\";\n        string lastWord8 = \"\";\n        string
    lastWord9 = \"\";\n        string lastWord10 = \"\";\n        string lastWord11
    = \"\";\n        string lastWord12 = \"\";\n        string lastWord13 = \"\";\n
    \       string lastWord14 = \"\";\n        string lastWord15 = \"\";\n        string
    lastWord16 = \"\";\n        string lastWord17 = \"\";\n        string lastWord18
    = \"\";\n        string lastWord19 = \"\";\n        string lastWord20 = \"\";\n
    \       string lastWord21 = \"\";\n        string lastWord22 = \"\";\n        string
    lastWord23 = \"\";\n        string lastWord24 = \"\";\n        string lastWord25
    = \"\";\n        string lastWord26 = \"\";\n        string lastWord27 = \"\";\n
    \       string lastWord28 = \"\";\n        string lastWord29 = \"\";\n        string
    lastWord30 = \"\";\n        string lastWord31 = \"\";\n        string lastWord32
    = \"\";\n        string lastWord33 = \"\";\n        string lastWord34 = \"\";\n
    \       string lastWord35 = \"\";\n        string lastWord36 = \"\";\n        string
    lastWord37 = \"\";\n        string lastWord38 = \"\";\n        string lastWord39
    = \"\";\n        string lastWord40 = \"\";\n        string lastWord41 = \"\";\n
    \       string lastWord42 = \"\";\n        string lastWord43 = \"\";\n        string
    lastWord44 = \"\";\n        string lastWord45 = \"\";\n        string lastWord46
    = \"\";\n        string lastWord47 = \"\";\n        string lastWord48 = \"\";\n
    \       string lastWord49 = \"\";\n        string lastWord50 = \"\";\n        string
    lastWord51 = \"\";\n        string lastWord52 = \"\";\n        string lastWord53
    = \"\";\n        string lastWord54 = \"\";\n        string lastWord55 = \"\";\n
    \       string lastWord56 = \"\";\n        string lastWord57 = \"\";\n        string
    lastWord58 = \"\";\n        string lastWord59 = \"\";\n        string lastWord60
    = \"\";\n        string lastWord61 = \"\";\n        string lastWord62 = \"\";\n
    \       string lastWord63 = \"\";\n        string lastWord64 = \"\";\n        string
    lastWord65 = \"\";\n        string lastWord66 = \"\";\n        string lastWord67
    = \"\";\n        string lastWord68 = \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcxzi1lvp.cs(26,16): warning CS0219: The variable ''lastWord'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(27,16): warning CS0219: The variable ''lastWord2'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(28,16): warning CS0219: The variable ''lastWord3'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(29,16): warning CS0219: The variable ''lastWord4'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(30,16): warning CS0219: The variable ''lastWord5'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(31,16): warning CS0219: The variable ''lastWord6'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(32,16): warning CS0219: The variable ''lastWord7'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(33,16): warning CS0219: The variable ''lastWord8'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(34,16): warning CS0219: The variable ''lastWord9'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(35,16): warning CS0219: The variable ''lastWord10'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(36,16): warning CS0219: The variable ''lastWord11'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(37,16): warning CS0219: The variable ''lastWord12'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(38,16): warning CS0219: The variable ''lastWord13'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(39,16): warning CS0219: The variable ''lastWord14'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(40,16): warning CS0219: The variable ''lastWord15'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(41,16): warning CS0219: The variable ''lastWord16'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(42,16): warning CS0219: The variable ''lastWord17'' is assigned
    but its value is never used

    /tmp/tmpcxzi1lvp.cs(43,16): warning CS0219: The variable ''las'
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n
    \       bool isLastConsonant = false;\n        bool isLastConsonantLastWord =
    false;\n        bool isLastConsonantLastWordLastConsonant = false;\n        bool
    isLastConsonantLastWordLastConsonantLastWord = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonant
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWord
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonant
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWord
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonant
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWord
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonant
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWord
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonant
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWord
    = false;\n        bool isLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonantLastWordLastConsonant
    = false;\n        bool isLastConson\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkivm0fhu.cs(43,26): error CS1002: ; expected

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        string word = \"\";\n        bool
    isWord = false;\n        long count = 0;\n        foreach (char c in chars) {\n
    \           if (char.IsLetter(c)) {\n                isWord = true;\n                word
    += c;\n                count++;\n            }\n            if (isWord && count
    == n) {\n                result.Add(word);\n                isWord = false;\n
    \               word = \"\";\n                count = 0;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0750ed24807b458dbef57f08b71e7f76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0750ed24807b458dbef57f08b71e7f76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       string word = \"\";\n        bool isFirst = true;\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                if (isFirst) {\n
    \                   isFirst = false;\n                    word = c;\n                }
    else {\n                    string newWord = word + c;\n                    if
    (newWord.Length == n) {\n                        result.Add(newWord);\n                    }\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt4efxgls.cs(29,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = \"\";\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=
    c;\n                count++;\n            }\n        }\n        if (count != n)
    {\n            return result;\n        }\n        string word2 = \"\";\n        long
    count2 = 0;\n        foreach (char c in word) {\n            if (char.IsLetter(c))
    {\n                word2 += c;\n                count2++;\n            }\n        }\n
    \       if (count2 != n) {\n            return result;\n        }\n        string
    word3 = \"\";\n        long count3 = 0;\n        foreach (char c in word2) {\n
    \           if (char.IsLetter(c)) {\n                word3 += c;\n                count3++;\n
    \           }\n        }\n        if (count3 != n) {\n            return result;\n
    \       }\n        string word4 = \"\";\n        long count4 = 0;\n        foreach
    (char c in word3) {\n            if (char.IsLetter(c)) {\n                word4
    += c;\n                count4++;\n            }\n        }\n        if (count4
    != n) {\n            return result;\n        }\n        string word5 = \"\";\n
    \       long count5 = 0;\n        foreach (char c in word4) {\n            if
    (char.IsLetter(c)) {\n                word5 += c;\n                count5++;\n
    \           }\n        }\n        if (count5 != n) {\n            return result;\n
    \       }\n        string word6 = \"\";\n        long count6 = 0;\n        foreach
    (char c in word5) {\n            if (char.IsLetter(c)) {\n                word6
    += c;\n                count6++;\n            }\n        }\n        if (count6
    != n) {\n            return result;\n        }\n        string word7 = \"\";\n
    \       long count7 = 0;\n        foreach (char c in word6) {\n            if
    (char.IsLetter(c)) {\n                word7 += c;\n                count7++;\n
    \           }\n        }\n        if (count7 != n) {\n            return result;\n
    \       }\n        string word8 = \"\";\n        long count8 = 0;\n        foreach
    (char c in word7) {\n            if (char.IsLetter(c)) {\n                word8
    += c;\n                count8++;\n            }\n        }\n        if (count8
    != n) {\n            return result;\n        }\n        string word9 = \"\";\n
    \       long count9 = 0;\n        foreach (char c in word8) {\n            if
    (char.IsLetter(c)) {\n                word9 += c;\n                count9++;\n
    \           }\n        }\n        if (count9 != n) {\n            return result;\n
    \       }\n        string word10 = \"\";\n        long count10 = 0;\n        foreach
    (char c in word9) {\n            if (\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph5j3qzo0.cs(127,17): error CS1525: Invalid expression term ''}''

    /tmp/tmph5j3qzo0.cs(127,17): error CS1026: ) expected

    /tmp/tmph5j3qzo0.cs(127,17): error CS1002: ; expected

    /tmp/tmph5j3qzo0.cs(129,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmph5j3qzo0.cs(139,2): error CS1513: } expected

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        bool isConsonant
    = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n            } else {\n                if (word.Length
    == n) {\n                    result.Add(word);\n                    word = \"\";\n
    \                   isConsonant = true;\n                } else {\n                    isConsonant
    = false;\n                }\n            }\n        }\n        if (word.Length
    > 0) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <482ce811d6174c41a0032e341edf5abf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <482ce811d6174c41a0032e341edf5abf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        long count = 0;\n        bool isConsonant
    = true;\n        bool isFirst = true;\n        string lastWord = \"\";\n        string
    lastWord2 = \"\";\n        string lastWord3 = \"\";\n        string lastWord4
    = \"\";\n        string lastWord5 = \"\";\n        string lastWord6 = \"\";\n
    \       string lastWord7 = \"\";\n        string lastWord8 = \"\";\n        string
    lastWord9 = \"\";\n        string lastWord10 = \"\";\n        string lastWord11
    = \"\";\n        string lastWord12 = \"\";\n        string lastWord13 = \"\";\n
    \       string lastWord14 = \"\";\n        string lastWord15 = \"\";\n        string
    lastWord16 = \"\";\n        string lastWord17 = \"\";\n        string lastWord18
    = \"\";\n        string lastWord19 = \"\";\n        string lastWord20 = \"\";\n
    \       string lastWord21 = \"\";\n        string lastWord22 = \"\";\n        string
    lastWord23 = \"\";\n        string lastWord24 = \"\";\n        string lastWord25
    = \"\";\n        string lastWord26 = \"\";\n        string lastWord27 = \"\";\n
    \       string lastWord28 = \"\";\n        string lastWord29 = \"\";\n        string
    lastWord30 = \"\";\n        string lastWord31 = \"\";\n        string lastWord32
    = \"\";\n        string lastWord33 = \"\";\n        string lastWord34 = \"\";\n
    \       string lastWord35 = \"\";\n        string lastWord36 = \"\";\n        string
    lastWord37 = \"\";\n        string lastWord38 = \"\";\n        string lastWord39
    = \"\";\n        string lastWord40 = \"\";\n        string lastWord41 = \"\";\n
    \       string lastWord42 = \"\";\n        string lastWord43 = \"\";\n        string
    lastWord44 = \"\";\n        string lastWord45 = \"\";\n        string lastWord46
    = \"\";\n        string lastWord47 = \"\";\n        string lastWord48 = \"\";\n
    \       string lastWord49 = \"\";\n        string lastWord50 = \"\";\n        string
    lastWord51 = \"\";\n        string lastWord52 = \"\";\n        string lastWord53
    = \"\";\n        string lastWord54 = \"\";\n        string lastWord55 = \"\";\n
    \       string lastWord56 = \"\";\n        string lastWord57 = \"\";\n        string
    lastWord58 = \"\";\n        string lastWord59 = \"\";\n        string lastWord60
    = \"\";\n        string lastWord61 = \"\";\n        string lastWord62 = \"\";\n
    \       string lastWord63 = \"\";\n        string lastWord64 = \"\";\n        string
    lastWord65 = \"\";\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd9hdkg9w.cs(26,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(27,14): warning CS0219: The variable ''isConsonant'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(28,14): warning CS0219: The variable ''isFirst'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(29,16): warning CS0219: The variable ''lastWord'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(30,16): warning CS0219: The variable ''lastWord2'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(31,16): warning CS0219: The variable ''lastWord3'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(32,16): warning CS0219: The variable ''lastWord4'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(33,16): warning CS0219: The variable ''lastWord5'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(34,16): warning CS0219: The variable ''lastWord6'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(35,16): warning CS0219: The variable ''lastWord7'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(36,16): warning CS0219: The variable ''lastWord8'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(37,16): warning CS0219: The variable ''lastWord9'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(38,16): warning CS0219: The variable ''lastWord10'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(39,16): warning CS0219: The variable ''lastWord11'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(40,16): warning CS0219: The variable ''lastWord12'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(41,16): warning CS0219: The variable ''lastWord13'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(42,16): warning CS0219: The variable ''lastWord14'' is assigned
    but its value is never used

    /tmp/tmpd9hdkg9w.cs(43,16): warning CS0219: The variable ''lastWord15'
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        List<char> consonants
    = new List<char>();\n        foreach (char c in chars) {\n            if (char.IsLower(c))
    {\n                consonants.Add(c);\n            }\n        }\n        List<char>
    vowels = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsUpper(c)) {\n                vowels.Add(c);\n            }\n        }\n
    \       List<char> consonants2 = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLower(c)) {\n                consonants2.Add(c);\n
    \           }\n        }\n        List<char> vowels2 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels2.Add(c);\n
    \           }\n        }\n        List<char> consonants3 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants3.Add(c);\n
    \           }\n        }\n        List<char> vowels3 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels3.Add(c);\n
    \           }\n        }\n        List<char> consonants4 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants4.Add(c);\n
    \           }\n        }\n        List<char> vowels4 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels4.Add(c);\n
    \           }\n        }\n        List<char> consonants5 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants5.Add(c);\n
    \           }\n        }\n        List<char> vowels5 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels5.Add(c);\n
    \           }\n        }\n        List<char> consonants6 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants6.Add(c);\n
    \           }\n        }\n        List<char> vowels6 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels6.Add(c);\n
    \           }\n        }\n        List<char> consonants7 = new List<char>();\n
    \       foreach (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6_x8b7ee.cs(99,18): error CS1525: Invalid expression term ''}''

    /tmp/tmp6_x8b7ee.cs(99,18): error CS1515: ''in'' expected

    /tmp/tmp6_x8b7ee.cs(99,18): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmp6_x8b7ee.cs(99,18): error CS1026: ) expected

    /tmp/tmp6_x8b7ee.cs(99,18): error CS1002: ; expected

    '
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word == \"\") {\n            return result;\n        }\n
    \       long count = 0;\n        foreach (char c in word) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count != n)
    {\n            return result;\n        }\n        string word2 = \"\";\n        foreach
    (char c in word) {\n            if (char.IsLetter(c)) {\n                word2
    += c;\n            }\n        }\n        foreach (char c in word2) {\n            if
    (char.IsLetter(c)) {\n                result.Add(word2);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43472d980c6b4db4bd7e449277112fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43472d980c6b4db4bd7e449277112fe9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = \"\";\n        bool isConsonant = false;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n            if (char.IsWhiteSpace(c)) {\n                if
    (isConsonant) {\n                    result.Add(word);\n                    word
    = \"\";\n                }\n                isConsonant = false;\n            }\n
    \           else {\n                if (isConsonant) {\n                    isConsonant
    = false;\n                }\n                else {\n                    isConsonant
    = true;\n                }\n            }\n        }\n        if (word.Length
    > 0) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed37596d02a644b0aa82792c3dfd7d15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed37596d02a644b0aa82792c3dfd7d15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = \"\";\n        string currentWord =
    \"\";\n        bool isWord = false;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                currentWord = currentWord + c;\n                if
    (currentWord.Length == n) {\n                    isWord = true;\n                }\n
    \           }\n            if (isWord) {\n                result.Add(currentWord);\n
    \               currentWord = \"\";\n                isWord = false;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d57486a4cd9c4841ad542b2ec54736b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d57486a4cd9c4841ad542b2ec54736b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLower(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<char> vowels = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels.Add(c);\n
    \           }\n        }\n        List<char> vowelsAndConsonants = new List<char>();\n
    \       vowelsAndConsonants.AddRange(vowels);\n        vowelsAndConsonants.AddRange(consonants);\n
    \       List<char> consonantsAndVowels = new List<char>();\n        consonantsAndVowels.AddRange(consonants);\n
    \       consonantsAndVowels.AddRange(vowels);\n        List<char> consonantsAndVowelsAndConsonants
    = new List<char>();\n        consonantsAndVowelsAndConsonants.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonants.AddRange(consonantsAndVowels);\n        List<char>
    consonantsAndVowelsAndConsonantsAndVowels = new List<char>();\n        consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConsonantsAndVowels.AddRange(consonantsAndVowels);\n
    \       consonantsAndVowelsAndConson\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpej0ckxw3.cs(57,37): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string word2
    = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwai0wl7x.cs(22,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(23,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(24,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(25,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(26,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(27,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(28,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(29,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(30,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(31,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(32,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(33,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(34,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(35,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(36,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(37,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(38,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(39,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(40,'
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n
    \       bool isLastConsonant = false;\n        bool isLastWord = false;\n        bool
    isLastLastWord = false;\n        bool isLastLastLastWord = false;\n        bool
    isLastLastLastLastWord = false;\n        bool isLastLastLastLastLastWord = false;\n
    \       bool isLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord
    = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n        bool
    isLastLastLastLastLastLastLastWord = false;\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvz0zcuwt.cs(36,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(37,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(38,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(39,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(40,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(41,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(42,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(43,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(44,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(45,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(46,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(47,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz0zcuwt.cs(48,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastLastWord''
    is already defined in this scope

    /tmp/tmpvz'
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        long count
    = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n                count++;\n            }\n        }\n        if (count ==
    n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a2a55d0b930495699828c891eaba9fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a2a55d0b930495699828c891eaba9fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = true;\n        foreach
    (char c in word) {\n            if (char.IsLetter(c)) {\n                isConsonant
    = false;\n                break;\n            }\n        }\n        if (isConsonant)
    {\n            int count = 0;\n            foreach (char c in word) {\n                if
    (char.IsLetter(c)) {\n                    count++;\n                }\n            }\n
    \           if (count == n) {\n                result.Add(word);\n            }\n
    \       }\n        foreach (char c in lastWord) {\n            if (char.IsLetter(c))
    {\n                isConsonant = false;\n                break;\n            }\n
    \       }\n        if (isConsonant) {\n            int count = 0;\n            foreach
    (char c in lastWord) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                result.Add(lastWord);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <953770f8a30a400c94910b45fa78f0d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <953770f8a30a400c94910b45fa78f0d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        long count = 0;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       string word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        result.Add(word);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbfc62f969324380be69f99abf419b44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbfc62f969324380be69f99abf419b44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") return result;\n        char[]
    chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            string word = s.Substring(0, s.IndexOf(c));\n
    \           words.Add(word);\n            s = s.Substring(word.Length);\n        }\n
    \       foreach (string word in words) {\n            if (words.Count(x => x ==
    word) == n) result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd646e35ab364b77801dcd40d77ef3c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd646e35ab364b77801dcd40d77ef3c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        char[] consonants
    = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',
    'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels = new char[]
    { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowels_2 = new char[] { 'a', 'e',
    'i', 'o', 'u', 'y' };\n        char[] vowels_3 = new char[] { 'a', 'e', 'i', 'o',
    'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y' };\n        char[] vowels_4 = new char[]
    { 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o',
    'u', 'y' };\n        char[] vowels_5 = new char[] { 'a', 'e', 'i', 'o', 'u', 'y',
    'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o',
    'u', 'y' };\n        char[] vowels_6 = new char[] { 'a', 'e', 'i', 'o', 'u', 'y',
    'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o',
    'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y' };\n        char[] vowels_7 = new char[]
    { 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o',
    'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e',
    'i', 'o', 'u', 'y' };\n        char[] vowels_8 = new char[] { 'a', 'e', 'i', 'o',
    'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e',
    'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y',
    'a', 'e', 'i', 'o', 'u', 'y' };\n        char[] vowels_9 = new char[] { 'a', 'e',
    'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y',
    'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o',
    'u', 'y', 'a', 'e', 'i', 'o', 'u\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5gr99cdy.cs(35,240): error CS1010: Newline in constant

    /tmp/tmp5gr99cdy.cs(36,6): error CS1002: ; expected

    /tmp/tmp5gr99cdy.cs(37,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp5gr99cdy.cs(47,2): error CS1513: } expected

    '
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        List<char> chars = new List<char>();\n        foreach (char
    c in s) {\n            if (chars.Contains(c)) {\n                continue;\n            }\n
    \           chars.Add(c);\n            int count = 0;\n            foreach (char
    c2 in chars) {\n                if (c2 != c) {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                result.Add(new
    string(chars.ToArray()));\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6b52e4eb26944b6a10190fc3e90d203>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6b52e4eb26944b6a10190fc3e90d203>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) return result;\n        string
    word = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length
    - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n        string
    lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 = s.Substring(s.Length
    - 4, 1);\n        string lastWord5 = s.Substring(s.Length - 5, 1);\n        string
    lastWord6 = s.Substring(s.Length - 6, 1);\n        string lastWord7 = s.Substring(s.Length
    - 7, 1);\n        string lastWord8 = s.Substring(s.Length - 8, 1);\n        string
    lastWord9 = s.Substring(s.Length - 9, 1);\n        string lastWord10 = s.Substring(s.Length
    - 10, 1);\n        string lastWord11 = s.Substring(s.Length - 11, 1);\n        string
    lastWord12 = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length
    - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n        string
    lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16 = s.Substring(s.Length
    - 16, 1);\n        string lastWord17 = s.Substring(s.Length - 17, 1);\n        string
    lastWord18 = s.Substring(s.Length - 18, 1);\n        string lastWord19 = s.Substring(s.Length
    - 19, 1);\n        string lastWord20 = s.Substring(s.Length - 20, 1);\n        string
    lastWord21 = s.Substring(s.Length - 21, 1);\n        string lastWord22 = s.Substring(s.Length
    - 22, 1);\n        string lastWord23 = s.Substring(s.Length - 23, 1);\n        string
    lastWord24 = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length
    - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n        string
    lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28 = s.Substring(s.Length
    - 28, 1);\n        string lastWord29 = s.Substring(s.Length - 29, 1);\n        string
    lastWord30 = s.Substring(s.Length - 30, 1);\n        string lastWord31 = s.Substring(s.Length
    - 31, 1);\n        string lastWord32 = s.Substring(s.Length - 32, 1);\n        string
    lastWord33 = s.Substring(s.Length - 33, 1);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk372q6iq.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        long n = Convert.ToInt64(n);\n        char[] chars = s.ToCharArray();\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLetterOrDigit(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            words.AddRange(SelectWords(s, n - 1));\n
    \       }\n        foreach (string word in words) {\n            if (word.Length
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaubiysgh.cs(25,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpaubiysgh.cs(25,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n
    \       bool isLastConsonant = false;\n        bool isLastConsonantLastWord =
    false;\n        bool isLastConsonantLastWordLastWord = false;\n        bool isLastConsonantLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord =
    false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWord\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm5jpwef2.cs(51,53): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = \"\";\n        string last = \"\";\n
    \       bool isFirst = true;\n        foreach (char c in s) {\n            if
    (isFirst) {\n                word += c;\n                isFirst = false;\n            }
    else {\n                if (c == ' ') {\n                    result.Add(word);\n
    \                   word = \"\";\n                } else {\n                    word
    += c;\n                }\n            }\n        }\n        if (word.Length >
    0) {\n            result.Add(word);\n        }\n        List<string> words = new
    List<string>();\n        foreach (string word in result) {\n            if (word.Length
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpberfi_q0.cs(45,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpberfi_q0.cs(26,16): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    '
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLower(c)) {\n                consonants.Add(c);\n            }\n        }\n
    \       List<string> words = new List<string>();\n        foreach (char c in consonants)
    {\n            string word = s.Substring(0, s.IndexOf(c));\n            words.Add(word);\n
    \           s = s.Substring(word.Length);\n        }\n        foreach (string
    word in words) {\n            long count = words.Count(w => w.Contains(word));\n
    \           if (count == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55739a24d21f4b17925fe7e3292f5f60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55739a24d21f4b17925fe7e3292f5f60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        string word = \"\";\n        foreach (char c
    in consonants) {\n            word += c;\n        }\n        string word2 = \"\";\n
    \       foreach (char c in consonants) {\n            word2 += c;\n        }\n
    \       string word3 = \"\";\n        foreach (char c in consonants) {\n            word3
    += c;\n        }\n        string word4 = \"\";\n        foreach (char c in consonants)
    {\n            word4 += c;\n        }\n        string word5 = \"\";\n        foreach
    (char c in consonants) {\n            word5 += c;\n        }\n        string word6
    = \"\";\n        foreach (char c in consonants) {\n            word6 += c;\n        }\n
    \       string word7 = \"\";\n        foreach (char c in consonants) {\n            word7
    += c;\n        }\n        string word8 = \"\";\n        foreach (char c in consonants)
    {\n            word8 += c;\n        }\n        string word9 = \"\";\n        foreach
    (char c in consonants) {\n            word9 += c;\n        }\n        string word10
    = \"\";\n        foreach (char c in consonants) {\n            word10 += c;\n
    \       }\n        string word11 = \"\";\n        foreach (char c in consonants)
    {\n            word11 += c;\n        }\n        string word12 = \"\";\n        foreach
    (char c in consonants) {\n            word12 += c;\n        }\n        string
    word13 = \"\";\n        foreach (char c in consonants) {\n            word13 +=
    c;\n        }\n        string word14 = \"\";\n        foreach (char c in consonants)
    {\n            word14 += c;\n        }\n        string word15 = \"\";\n        foreach
    (char c in consonants) {\n            word15 += c;\n        }\n        string
    word16 = \"\";\n        foreach (char c in consonants) {\n            word16 +=
    c;\n        }\n        string word17 = \"\";\n        foreach (char c in consonants)
    {\n            word17 += c;\n        }\n        string word18 = \"\";\n        foreach
    (char c in consonants) {\n            word18 += c;\n        }\n        string
    word19 = \"\";\n        foreach (char c in consonants) {\n            word19 +=
    c;\n        }\n        string word20 = \"\";\n        foreach (\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd5_a3epe.cs(107,18): error CS1525: Invalid expression term ''}''

    /tmp/tmpd5_a3epe.cs(107,18): error CS1515: ''in'' expected

    /tmp/tmpd5_a3epe.cs(107,18): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmpd5_a3epe.cs(107,18): error CS1026: ) expected

    /tmp/tmpd5_a3epe.cs(107,18): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = \"\";\n        bool
    isFirst = true;\n        bool isLast = true;\n        bool isMiddle = true;\n
    \       bool isFirstMiddle = true;\n        bool isLastMiddle = true;\n        bool
    isFirstLast = true;\n        bool isMiddleMiddle = true;\n        bool isFirstMiddleLast
    = true;\n        bool isLastMiddleLast = true;\n        bool isFirstLastMiddle
    = true;\n        bool isLastLastMiddle = true;\n        bool isFirstLastLast =
    true;\n        bool isMiddleLastLast = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastMiddleMiddle = true;\n        bool isFirstMiddleLastMiddle
    = true;\n        bool isLastMiddleLastMiddle = true;\n        bool isFirstLastMiddleLast
    = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleLast = true;\n        bool isFirstMiddleLastMiddleLast
    = true;\n        bool isLastMiddleLastMiddleLast = true;\n        bool isFirstLastMiddleMiddleLast
    = true;\n        bool isLastMiddleLastMiddleLast = true;\n        bool isFirstLastMiddleLastMiddleLast
    = true;\n        bool isLastMiddleLastMiddleLast = true;\n        bool isFirstLastMiddleMiddleLastMiddle
    = true;\n        bool isLastMiddleLastMiddleLastMiddle = true;\n        bool isFirstLastMiddleLastMiddleLastMiddle
    = true;\n        bool isLastMiddleLastMiddleLastMiddleLast = true;\n        bool
    isFirstLastMiddleLastMiddleLastMiddleLast = true;\n        bool isLastMiddleLastMiddleLastMiddleLastLast
    = true;\n        bool isFirstLastMiddleLastMiddleLastMiddleLast = true;\n        bool
    isLastMiddleLastMiddleLastMiddleLastLast = true;\n        bool isFirstLastMiddleLastMiddleLastMiddleLastLast
    = true;\n        bool isLastMiddleLastMiddleLastMiddleLastLast = true;\n        bool
    isFirstLastMiddleLastMiddleLastMiddleLastLast = true;\n        bool isLastMiddleLastMiddleLastMiddleLastLastLast
    = true;\n        bool isFirstLastMiddleLastMiddleLastMiddleLastLastLast = true;\n
    \       bool isLastMiddleLastMiddleLastMiddleLastLastLastLast = true;\n        bool
    isFirstLastMiddleLastMiddleLastMiddleLastLastLastLast = true;\n        bool isLastMiddleLastMiddleLastMiddleLastLastLastLastLast
    = true;\n        bool isFirstLastMiddleLastMiddleLastMiddleLastLastLastLastLast
    = true;\n        bool isLastMiddleLastMiddleLastMiddleLastLastLastLastLastLast
    = true;\n        bool isFirstLastMiddleLastMiddle\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsh1v0ihz.cs(72,41): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = string.Empty;\n        string
    tempWord = string.Empty;\n        string tempWord2 = string.Empty;\n        string
    tempWord3 = string.Empty;\n        string tempWord4 = string.Empty;\n        string
    tempWord5 = string.Empty;\n        string tempWord6 = string.Empty;\n        string
    tempWord7 = string.Empty;\n        string tempWord8 = string.Empty;\n        string
    tempWord9 = string.Empty;\n        string tempWord10 = string.Empty;\n        string
    tempWord11 = string.Empty;\n        string tempWord12 = string.Empty;\n        string
    tempWord13 = string.Empty;\n        string tempWord14 = string.Empty;\n        string
    tempWord15 = string.Empty;\n        string tempWord16 = string.Empty;\n        string
    tempWord17 = string.Empty;\n        string tempWord18 = string.Empty;\n        string
    tempWord19 = string.Empty;\n        string tempWord20 = string.Empty;\n        string
    tempWord21 = string.Empty;\n        string tempWord22 = string.Empty;\n        string
    tempWord23 = string.Empty;\n        string tempWord24 = string.Empty;\n        string
    tempWord25 = string.Empty;\n        string tempWord26 = string.Empty;\n        string
    tempWord27 = string.Empty;\n        string tempWord28 = string.Empty;\n        string
    tempWord29 = string.Empty;\n        string tempWord30 = string.Empty;\n        string
    tempWord31 = string.Empty;\n        string tempWord32 = string.Empty;\n        string
    tempWord33 = string.Empty;\n        string tempWord34 = string.Empty;\n        string
    tempWord35 = string.Empty;\n        string tempWord36 = string.Empty;\n        string
    tempWord37 = string.Empty;\n        string tempWord38 = string.Empty;\n        string
    tempWord39 = string.Empty;\n        string tempWord40 = string.Empty;\n        string
    tempWord41 = string.Empty;\n        string tempWord42 = string.Empty;\n        string
    tempWord43 = string.Empty;\n        string tempWord44 = string.Empty;\n        string
    tempWord45 = string.Empty;\n        string tempWord46 = string.Empty;\n        string
    tempWord47 = string.Empty;\n        string tempWord48 = string.Empty;\n        string
    tempWord49 = string.Empty;\n        string tempWord50 = string.Empty;\n        string
    tempWord51 = string.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu4743it5.cs(73,36): error CS1001: Identifier expected

    /tmp/tmpu4743it5.cs(73,36): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        long count = 0;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       string word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        result.Add(word);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bac169d20db4e0abaf15c13bd1375b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bac169d20db4e0abaf15c13bd1375b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        bool flag = false;\n        long
    count = 0;\n        long index = 0;\n        long length = s.Length;\n        string
    temp = \"\";\n        string temp2 = \"\";\n        string temp3 = \"\";\n        string
    temp4 = \"\";\n        string temp5 = \"\";\n        string temp6 = \"\";\n        string
    temp7 = \"\";\n        string temp8 = \"\";\n        string temp9 = \"\";\n        string
    temp10 = \"\";\n        string temp11 = \"\";\n        string temp12 = \"\";\n
    \       string temp13 = \"\";\n        string temp14 = \"\";\n        string temp15
    = \"\";\n        string temp16 = \"\";\n        string temp17 = \"\";\n        string
    temp18 = \"\";\n        string temp19 = \"\";\n        string temp20 = \"\";\n
    \       string temp21 = \"\";\n        string temp22 = \"\";\n        string temp23
    = \"\";\n        string temp24 = \"\";\n        string temp25 = \"\";\n        string
    temp26 = \"\";\n        string temp27 = \"\";\n        string temp28 = \"\";\n
    \       string temp29 = \"\";\n        string temp30 = \"\";\n        string temp31
    = \"\";\n        string temp32 = \"\";\n        string temp33 = \"\";\n        string
    temp34 = \"\";\n        string temp35 = \"\";\n        string temp36 = \"\";\n
    \       string temp37 = \"\";\n        string temp38 = \"\";\n        string temp39
    = \"\";\n        string temp40 = \"\";\n        string temp41 = \"\";\n        string
    temp42 = \"\";\n        string temp43 = \"\";\n        string temp44 = \"\";\n
    \       string temp45 = \"\";\n        string temp46 = \"\";\n        string temp47
    = \"\";\n        string temp48 = \"\";\n        string temp49 = \"\";\n        string
    temp50 = \"\";\n        string temp51 = \"\";\n        string temp52 = \"\";\n
    \       string temp53 = \"\";\n        string temp54 = \"\";\n        string temp55
    = \"\";\n        string temp56 = \"\";\n        string temp57 = \"\";\n        string
    temp58 = \"\";\n        string temp59 = \"\";\n        string temp60 = \"\";\n
    \       string temp61 = \"\";\n        string temp62 = \"\";\n        string temp63
    = \"\";\n        string temp64 = \"\";\n        string temp65 = \"\";\n        string
    temp66 = \"\";\n        string temp67 = \"\";\n        string temp68 = \"\";\n
    \       string temp69 = \"\";\n        string temp70 = \"\";\n        string temp71
    = \"\";\n        string temp72 = \"\";\n        string temp73 = \"\";\n        string
    temp74 = \"\";\n        string temp75 = \"\";\n        \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6tb0uk0.cs(26,14): warning CS0219: The variable ''flag'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(27,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(28,14): warning CS0219: The variable ''index'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(30,16): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(31,16): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(32,16): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(33,16): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(34,16): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(35,16): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(36,16): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(37,16): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(38,16): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(39,16): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(40,16): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(41,16): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(42,16): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(43,16): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(44,16): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmph6tb0uk0.cs(45,16):'
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        HashSet<char>
    set = new HashSet<char>();\n        foreach (char c in chars) {\n            if
    (set.Contains(c)) {\n                continue;\n            }\n            set.Add(c);\n
    \           result.Add(s.Substring(0, s.IndexOf(c)));\n            s = s.Substring(s.IndexOf(c)
    + 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ad5e20b2a874bfc99170ba751cab241>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ad5e20b2a874bfc99170ba751cab241>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == null || s.Length == 0)\n            return
    result;\n        string word = s.Substring(0, s.Length - 1);\n        string lastWord
    = s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n        bool
    isConsonantLast = false;\n        bool isConsonantFirst = false;\n        bool
    isConsonantNext = false;\n        bool isConsonantLastNext = false;\n        bool
    isConsonantFirstNext = false;\n        bool isConsonantNextNext = false;\n        bool
    isConsonantLastLast = false;\n        bool isConsonantFirstLast = false;\n        bool
    isConsonantNextLast = false;\n        bool isConsonantLastNextLast = false;\n
    \       bool isConsonantFirstNextLast = false;\n        bool isConsonantNextNextLast
    = false;\n        bool isConsonantLastLastLast = false;\n        bool isConsonantFirstLastLast
    = false;\n        bool isConsonantNextLastLast = false;\n        bool isConsonantLastNextLastLast
    = false;\n        bool isConsonantFirstNextLastLast = false;\n        bool isConsonantNextNextLastLast
    = false;\n        bool isConsonantLastLastLastLast = false;\n        bool isConsonantFirstLastLastLast
    = false;\n        bool isConsonantNextLastLastLast = false;\n        bool isConsonantLastNextLastLast
    = false;\n        bool isConsonantFirstNextLastLastLast = false;\n        bool
    isConsonantNextNextLastLastLast = false;\n        bool isConsonantLastLastLastLast
    = false;\n        bool isConsonantFirstLastLastLastLast = false;\n        bool
    isConsonantNextLastLastLastLast = false;\n        bool isConsonantLastNextLastLastLast
    = false;\n        bool isConsonantFirstNextLastLastLastLast = false;\n        bool
    isConsonantNextNextLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLast
    = false;\n        bool isConsonantFirstLastLastLastLastLast = false;\n        bool
    isConsonantNextLastLastLastLastLast = false;\n        bool isConsonantLastNextLastLastLastLast
    = false;\n        bool isConsonantFirstNextLastLastLastLastLast = false;\n        bool
    isConsonantNextNextLastLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLast
    = false;\n        bool isConsonantFirstLastLastLastLastLast = false;\n        bool
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqv3rsbqq.cs(65,13): error CS1001: Identifier expected

    /tmp/tmpqv3rsbqq.cs(65,13): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        char[] consonants
    = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',
    'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowels = new char[]
    { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsConsonants = new char[] { 'a',
    'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',
    'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsConsonants2
    = new char[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',
    'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]
    vowelsConsonants3 = new char[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f',
    'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',
    'z' };\n        char[] vowelsConsonants4 = new char[] { 'a', 'e', 'i', 'o', 'u',
    'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',
    'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsConsonants5 = new char[] { 'a',
    'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',
    'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsConsonants6
    = new char[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',
    'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[]
    vowelsConsonants7 = new char[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f',
    'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',
    'z' };\n        char[] vowelsConsonants8 = new char[] { 'a', 'e', 'i', 'o', 'u',
    'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',
    'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsConson\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd5jcsc3g.cs(36,28): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        bool isLastWordConsonant = false;\n
    \       bool isFirstWordConsonant = false;\n        bool isLastWordVowel = false;\n
    \       bool isFirstWordVowel = false;\n        bool isLastWordConsonantOrVowel
    = false;\n        bool isFirstWordConsonantOrVowel = false;\n        bool isLastWordConsonantOrVowelOrSpace
    = false;\n        bool isFirstWordConsonantOrVowelOrSpace = false;\n        bool
    isLastWordConsonantOrVowelOrSpaceOrSpace = false;\n        bool isFirstWordConsonantOrVowelOrSpaceOrSpace
    = false;\n        bool isLastWordConsonantOrVowelOrSpaceOrSpaceOrSpace = false;\n
    \       bool isFirstWordConsonantOrVowelOrSpaceOrSpaceOrSpace = false;\n        bool
    isLastWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpace = false;\n        bool
    isFirstWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpace = false;\n        bool
    isLastWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpace = false;\n        bool
    isFirstWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpace = false;\n        bool
    isLastWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace = false;\n
    \       bool isFirstWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace
    = false;\n        bool isLastWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace
    = false;\n        bool isFirstWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace
    = false;\n        bool isLastWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace
    = false;\n        bool isFirstWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace
    = false;\n        bool isLastWordConsonantOrVowelOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpaceOrSpace\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3syh_ka.cs(49,96): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        List<string> words = SelectWords(word, n);\n        foreach
    (string word in words) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4deadqh.cs(32,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        bool flag = false;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n                if (flag) {\n                    if (word.Length == n)
    {\n                        result.Add(word);\n                        flag = false;\n
    \                       word = string.Empty;\n                    }\n                }\n
    \               else {\n                    flag = true;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49ef8a9a385345acbd657c71fd37e1c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49ef8a9a385345acbd657c71fd37e1c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        string lastWord
    = string.Empty;\n        bool isFirst = true;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                if (!isFirst) {\n                    lastWord
    = word;\n                }\n                isFirst = false;\n                word
    += c;\n            }\n            if (word.Length == n) {\n                result.Add(lastWord);\n
    \               lastWord = string.Empty;\n            }\n        }\n        if
    (lastWord.Length > 0) {\n            result.Add(lastWord);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d91fb1d9b724dfbad19c82cf58d0ca7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d91fb1d9b724dfbad19c82cf58d0ca7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        char[] chars = s.ToCharArray();\n        int[] count = new int[26];\n
    \       for (int i = 0; i < chars.Length; i++) {\n            count[chars[i] -
    'a']++;\n        }\n        for (int i = 0; i < count.Length; i++) {\n            if
    (count[i] >= n) {\n                result.Add(new string(chars, i, 1));\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x0002b] in <bea386524b224f2a8123afdb83c2a484>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bea386524b224f2a8123afdb83c2a484>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0002b] in
    <bea386524b224f2a8123afdb83c2a484>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bea386524b224f2a8123afdb83c2a484>:0 \n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        HashSet<string> words
    = new HashSet<string>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                string word = s.Substring(0, s.IndexOf(c));\n
    \               if (words.Contains(word)) {\n                    continue;\n                }\n
    \               words.Add(word);\n                result.Add(word);\n            }\n
    \       }\n        List<string> result = new List<string>();\n        foreach
    (string word in words) {\n            if (word.Length == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ttn5hyz.cs(37,22): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        bool
    flag = false;\n        foreach (char c in word) {\n            if (flag) {\n                if
    (c == ' ') {\n                    flag = false;\n                }\n                else
    {\n                    result.Add(word);\n                    flag = false;\n
    \               }\n            }\n            if (c == 'a') {\n                flag
    = true;\n            }\n        }\n        if (result.Count > n) {\n            result.RemoveAt(result.Count
    - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b94e7ca909bd42b8a3a92101a49bc362>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b94e7ca909bd42b8a3a92101a49bc362>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") return result;\n        string
    vowels = \"aeiou\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n
    \       string letters = \"abcdefghijklmnopqrstuvwxyz\";\n        string word
    = \"\";\n        long count = 0;\n        string temp = \"\";\n        foreach
    (char c in s) {\n            if (consonants.Contains(c)) {\n                count++;\n
    \               temp += c;\n            }\n            if (count == n) {\n                result.Add(word);\n
    \               count = 0;\n                word = \"\";\n            }\n            if
    (letters.Contains(c)) {\n                word += c;\n            }\n            if
    (vowels.Contains(c)) {\n                word += c;\n            }\n        }\n
    \       if (word != \"\") {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0a8b8e47af459ab5d6beab66ce7932>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0a8b8e47af459ab5d6beab66ce7932>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        HashSet<char> set = new HashSet<char>();\n
    \       foreach (char c in chars) {\n            if (set.Contains(c)) continue;\n
    \           set.Add(c);\n            if (set.Count == n) result.Add(s.Substring(0,
    s.IndexOf(c)));\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94145423e4c64b36b7b61020d58ca713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94145423e4c64b36b7b61020d58ca713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = \"\";\n        bool isConsonant = false;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n            else {\n                isConsonant = true;\n
    \           }\n        }\n        if (isConsonant) {\n            while (word.Length
    > 0) {\n                string temp = word.Substring(0, word.Length - 1);\n                if
    (temp.Contains(\"a\") || temp.Contains(\"e\") || temp.Contains(\"i\") || temp.Contains(\"o\")
    || temp.Contains(\"u\")) {\n                    result.Add(temp);\n                }\n
    \               word = word.Substring(word.Length - 1);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659805416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        bool isWord
    = false;\n        bool isWordStarted = false;\n        bool isWordEnded = false;\n
    \       bool isWordStarted = false;\n        bool isWordEnded = false;\n        bool
    isWordStarted = false;\n        bool isWordEnded = false;\n        bool isWordStarted
    = false;\n        bool isWordEnded = false;\n        bool isWordStarted = false;\n
    \       bool isWordEnded = false;\n        bool isWordStarted = false;\n        bool
    isWordEnded = false;\n        bool isWordStarted = false;\n        bool isWordEnded
    = false;\n        bool isWordStarted = false;\n        bool isWordEnded = false;\n
    \       bool isWordStarted = false;\n        bool isWordEnded = false;\n        bool
    isWordStarted = false;\n        bool isWordEnded = false;\n        bool isWordStarted
    = false;\n        bool isWordEnded = false;\n        bool isWordStarted = false;\n
    \       bool isWordEnded = false;\n        bool isWordStarted = false;\n        bool
    isWordEnded = false;\n        bool isWordStarted = false;\n        bool isWordEnded
    = false;\n        bool isWordStarted = false;\n        bool isWordEnded = false;\n
    \       bool isWordStarted = false;\n        bool isWordEnded = false;\n        bool
    isWordStarted = false;\n        bool isWordEnded = false;\n        bool isWordStarted
    = false;\n        bool isWordEnded = false;\n        bool isWordStarted = false;\n
    \       bool isWordEnded = false;\n        bool isWordStarted = false;\n        bool
    isWordEnded = false;\n        bool isWordStarted = false;\n        bool isWordEnded
    = false;\n        bool isWordStarted = false;\n        bool isWordEnded = false;\n
    \       bool isWordStarted = false;\n        bool isWordEnded = false;\n        bool
    isWordStarted = false;\n        bool isWordEnded = false;\n        bool isWordStarted
    = false;\n        bool isWordEnded = false;\n        bool isWordStarted = false;\n
    \       bool isWordEnded = false;\n        bool isWordStarted = false;\n        bool
    isWordEnded = false;\n        bool isWordStarted = false;\n        bool isWordEnded
    = false;\n        bool isWordStarted = false;\n        bool isWordEnded = false;\n
    \       bool isWordStarted = false;\n        bool isWordEnded = false;\n        bool
    isWordStarted = false;\n        bool is\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfq43li6i.cs(85,14): error CS1001: Identifier expected

    /tmp/tmpfq43li6i.cs(85,14): error CS1002: ; expected

    /tmp/tmpfq43li6i.cs(85,14): error CS1525: Invalid expression term ''is''

    /tmp/tmpfq43li6i.cs(85,16): error CS1031: Type expected

    /tmp/tmpfq43li6i.cs(85,16): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = \"\";\n        bool
    isWord = false;\n        long count = 0;\n        string lastWordWithCount;\n
    \       foreach (char c in word) {\n            if (char.IsLetter(c)) {\n                isWord
    = true;\n                count++;\n            }\n            if (isWord) {\n
    \               lastWordWithCount = lastWord + count;\n                if (lastWordWithCount
    == lastWord) {\n                    result.Add(lastWord);\n                    isWord
    = false;\n                    count = 0;\n                }\n            }\n            lastWord
    = c;\n        }\n        if (lastWordWithCount == lastWord) {\n            result.Add(lastWord);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprrfn3v1z.cs(43,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmprrfn3v1z.cs(45,13): error CS0165: Use of unassigned local variable ''lastWordWithCount''

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    list = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                list.Add(c);\n            }\n        }\n
    \       char[] charsArray = list.ToArray();\n        List<string> list2 = new
    List<string>();\n        foreach (char c in charsArray) {\n            if (char.IsLetterOrDigit(c))
    {\n                list2.Add(c.ToString());\n            }\n        }\n        char[]
    charsArray2 = list2.ToArray();\n        List<string> list3 = new List<string>();\n
    \       foreach (char c in charsArray2) {\n            if (char.IsLetterOrDigit(c))
    {\n                list3.Add(c.ToString());\n            }\n        }\n        char[]
    charsArray3 = list3.ToArray();\n        List<string> list4 = new List<string>();\n
    \       foreach (char c in charsArray3) {\n            if (char.IsLetterOrDigit(c))
    {\n                list4.Add(c.ToString());\n            }\n        }\n        char[]
    charsArray4 = list4.ToArray();\n        List<string> list5 = new List<string>();\n
    \       foreach (char c in charsArray4) {\n            if (char.IsLetterOrDigit(c))
    {\n                list5.Add(c.ToString());\n            }\n        }\n        char[]
    charsArray5 = list5.ToArray();\n        List<string> list6 = new List<string>();\n
    \       foreach (char c in charsArray5) {\n            if (char.IsLetterOrDigit(c))
    {\n                list6.Add(c.ToString());\n            }\n        }\n        char[]
    charsArray6 = list6.ToArray();\n        List<string> list7 = new List<string>();\n
    \       foreach (char c in charsArray6) {\n            if (char.IsLetterOrDigit(c))
    {\n                list7.Add(c.ToString());\n            }\n        }\n        char[]
    charsArray7 = list7.ToArray();\n        List<string> list8 = new List<string>();\n
    \       foreach (char c in charsArray7) {\n            if (char.IsLetterOrDigit(c))
    {\n                list8.Add(c.ToString());\n            }\n        }\n        char[]
    charsArray8 = list8.ToArray();\n        List<string> list9 = new List<string>();\n
    \       foreach (char c in charsArray8) {\n            if (char.IsLetterOrDigit(c))
    {\n                list9.Add(c.ToString());\n            }\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9zu2x9t1.cs(89,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp9zu2x9t1.cs(99,2): error CS1513: } expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string word2
    = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwai0wl7x.cs(22,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(23,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(24,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(25,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(26,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(27,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(28,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(29,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(30,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(31,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(32,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(33,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(34,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(35,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(36,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(37,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(38,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(39,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(40,'
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n        bool
    isLastConsonant = false;\n        bool isLastWord = false;\n        bool isFirstWord
    = false;\n        bool isLastWordConsonant = false;\n        bool isFirstWordConsonant
    = false;\n        bool isFirstWordLastConsonant = false;\n        bool isLastWordFirstConsonant
    = false;\n        bool isFirstWordLastConsonantConsonant = false;\n        bool
    isLastWordFirstConsonantConsonant = false;\n        bool isFirstWordLastConsonantLastConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonant = false;\n        bool
    isFirstWordLastConsonantLastConsonantConsonant = false;\n        bool isLastWordFirstConsonantLastConsonantConsonantConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonantConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonantLastConsonantConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantConsonant
    = false;\n        bool isLastWordFirstConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastCon\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvg3y0ez1.cs(48,123): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isLastWordConsonant = lastWord.All(c
    => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n        if (isLastWordConsonant)\n
    \           result.Add(word);\n        if (s.Length > n)\n            return result;\n
    \       string nextWord = s.Substring(0, s.Length - 1);\n        bool isNextWordConsonant
    = nextWord.All(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n
    \       if (isNextWordConsonant)\n            result.Add(word);\n        if (s.Length
    > n)\n            return result;\n        string nextWord2 = s.Substring(0, s.Length
    - 1);\n        bool isNextWordConsonant2 = nextWord2.All(c => c != 'a' && c !=
    'e' && c != 'i' && c != 'o' && c != 'u');\n        if (isNextWordConsonant2)\n
    \           result.Add(word);\n        if (s.Length > n)\n            return result;\n
    \       string nextWord3 = s.Substring(0, s.Length - 1);\n        bool isNextWordConsonant3
    = nextWord3.All(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n
    \       if (isNextWordConsonant3)\n            result.Add(word);\n        if (s.Length
    > n)\n            return result;\n        string nextWord4 = s.Substring(0, s.Length
    - 1);\n        bool isNextWordConsonant4 = nextWord4.All(c => c != 'a' && c !=
    'e' && c != 'i' && c != 'o' && c != 'u');\n        if (isNextWordConsonant4)\n
    \           result.Add(word);\n        if (s.Length > n)\n            return result;\n
    \       string nextWord5 = s.Substring(0, s.Length - 1);\n        bool isNextWordConsonant5
    = nextWord5.All(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n
    \       if (isNextWordConsonant5)\n            result.Add(word);\n        if (s.Length
    > n)\n            return result;\n        string nextWord6 = s.Substring(0, s.Length
    - 1);\n        bool isNextWordConsonant6 = nextWord6.All(c => c != 'a' && c !=
    'e' && c != 'i' && c != 'o' && c != 'u');\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbx2xwl50.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       List<char> chars = new List<char>();\n        foreach (char c in s)\n
    \           chars.Add(c);\n        chars.Sort();\n        List<char> consonants
    = new List<char>();\n        foreach (char c in chars)\n            if (c != '
    ' && c != '\\t' && c != '\\n')\n                consonants.Add(c);\n        consonants.Sort();\n
    \       List<char> vowels = new List<char>();\n        foreach (char c in chars)\n
    \           if (c != ' ' && c != '\\t' && c != '\\n' && c != '\\r')\n                vowels.Add(c);\n
    \       vowels.Sort();\n        List<char> consonants2 = new List<char>();\n        foreach
    (char c in consonants)\n            if (c != ' ')\n                consonants2.Add(c);\n
    \       consonants2.Sort();\n        List<char> vowels2 = new List<char>();\n
    \       foreach (char c in vowels)\n            if (c != ' ')\n                vowels2.Add(c);\n
    \       vowels2.Sort();\n        List<char> consonants3 = new List<char>();\n
    \       foreach (char c in consonants2)\n            if (c != ' ')\n                consonants3.Add(c);\n
    \       consonants3.Sort();\n        List<char> vowels3 = new List<char>();\n
    \       foreach (char c in vowels2)\n            if (c != ' ')\n                vowels3.Add(c);\n
    \       vowels3.Sort();\n        List<char> consonants4 = new List<char>();\n
    \       foreach (char c in consonants3)\n            if (c != ' ')\n                consonants4.Add(c);\n
    \       consonants4.Sort();\n        List<char> vowels4 = new List<char>();\n
    \       foreach (char c in vowels3)\n            if (c != ' ')\n                vowels4.Add(c);\n
    \       vowels4.Sort();\n        List<char> consonants5 = new List<char>();\n
    \       foreach (char c in consonants4)\n            if (c != ' ')\n                consonants5.Add(c);\n
    \       consonants5.Sort();\n        List<char> vowels5 = new List<char>();\n
    \       foreach (char c in vowels4)\n            if (c != ' ')\n                vowels5.Add(c);\n
    \       vowels5.Sort();\n        List<char> consonants6 = new List<char>();\n
    \       foreach (char c in consonants5)\n            if (c != ' ')\n                consonants6.Add(c);\n
    \       consonants6.Sort();\n        List<char> vowels6 = new List<char>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyu4m9kcx.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        List<char> chars = new List<char>();\n        foreach
    (char c in s) {\n            if (chars.Contains(c)) {\n                continue;\n
    \           }\n            chars.Add(c);\n            string word = s.Substring(0,
    s.IndexOf(c));\n            result.Add(word);\n            string rest = s.Substring(s.IndexOf(c)
    + 1);\n            chars.Clear();\n            foreach (char c2 in rest) {\n                if
    (chars.Contains(c2)) {\n                    continue;\n                }\n                chars.Add(c2);\n
    \               string word2 = s.Substring(0, s.IndexOf(c2));\n                result.Add(word2);\n
    \               string rest2 = s.Substring(s.IndexOf(c2) + 1);\n                chars.Clear();\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e94f7ffcefe54b189756a0dee32c66c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e94f7ffcefe54b189756a0dee32c66c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = \"\";\n        long
    count = 0;\n        bool isWord = false;\n        bool isLastWord = false;\n        bool
    isLastWordIsConsonant = false;\n        bool isLastWordIsConsonantOrLastWord =
    false;\n        bool isLastWordIsConsonantOrLastWordIsConsonant = false;\n        bool
    isLastWordIsConsonantOrLastWordIsConsonantOrLastWord = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord
    = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsCon\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8orxlmcq.cs(43,155): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        HashSet<char> set
    = new HashSet<char>();\n        foreach (char c in chars) {\n            if (set.Contains(c))
    {\n                continue;\n            }\n            set.Add(c);\n            int
    count = 0;\n            while (set.Count != 0) {\n                count++;\n                set.Remove(set.First());\n
    \           }\n            if (count == n) {\n                result.Add(s.Substring(0,
    s.Length - set.Count));\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e994908aa894c2084b0fcde81fe0330>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e994908aa894c2084b0fcde81fe0330>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        long count = 0;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       string word = string.Empty;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n            }\n        }\n        result.Add(word);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41bae4fa885f41618f6a540e15311d82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41bae4fa885f41618f6a540e15311d82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        string lastWord
    = string.Empty;\n        string lastWord2 = string.Empty;\n        string lastWord3
    = string.Empty;\n        string lastWord4 = string.Empty;\n        string lastWord5
    = string.Empty;\n        string lastWord6 = string.Empty;\n        string lastWord7
    = string.Empty;\n        string lastWord8 = string.Empty;\n        string lastWord9
    = string.Empty;\n        string lastWord10 = string.Empty;\n        string lastWord11
    = string.Empty;\n        string lastWord12 = string.Empty;\n        string lastWord13
    = string.Empty;\n        string lastWord14 = string.Empty;\n        string lastWord15
    = string.Empty;\n        string lastWord16 = string.Empty;\n        string lastWord17
    = string.Empty;\n        string lastWord18 = string.Empty;\n        string lastWord19
    = string.Empty;\n        string lastWord20 = string.Empty;\n        string lastWord21
    = string.Empty;\n        string lastWord22 = string.Empty;\n        string lastWord23
    = string.Empty;\n        string lastWord24 = string.Empty;\n        string lastWord25
    = string.Empty;\n        string lastWord26 = string.Empty;\n        string lastWord27
    = string.Empty;\n        string lastWord28 = string.Empty;\n        string lastWord29
    = string.Empty;\n        string lastWord30 = string.Empty;\n        string lastWord31
    = string.Empty;\n        string lastWord32 = string.Empty;\n        string lastWord33
    = string.Empty;\n        string lastWord34 = string.Empty;\n        string lastWord35
    = string.Empty;\n        string lastWord36 = string.Empty;\n        string lastWord37
    = string.Empty;\n        string lastWord38 = string.Empty;\n        string lastWord39
    = string.Empty;\n        string lastWord40 = string.Empty;\n        string lastWord41
    = string.Empty;\n        string lastWord42 = string.Empty;\n        string lastWord43
    = string.Empty;\n        string lastWord44 = string.Empty;\n        string lastWord45
    = string.Empty;\n        string lastWord46 = string.Empty;\n        string lastWord47
    = string.Empty;\n        string lastWord48 = string.Empty;\n        string lastWord49
    = string.Empty;\n        string last\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbpr_j4g.cs(75,20): error CS1002: ; expected

    '
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = \"\";\n        bool isWord = false;\n        long count
    = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                isWord
    = true;\n                word += c;\n                count++;\n            }\n
    \           if (isWord) {\n                if (count == n)\n                    result.Add(word);\n
    \               isWord = false;\n                word = \"\";\n                count
    = 0;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5d33121d9ff43b4969b3046cc106647>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5d33121d9ff43b4969b3046cc106647>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        List<char> consonants
    = new List<char>();\n        foreach (char c in chars) {\n            if (char.IsLower(c))
    {\n                consonants.Add(c);\n            }\n        }\n        string
    word = \"\";\n        foreach (char c in consonants) {\n            word += c;\n
    \       }\n        string word2 = \"\";\n        foreach (char c in consonants)
    {\n            word2 += c;\n        }\n        string word3 = \"\";\n        foreach
    (char c in consonants) {\n            word3 += c;\n        }\n        string word4
    = \"\";\n        foreach (char c in consonants) {\n            word4 += c;\n        }\n
    \       string word5 = \"\";\n        foreach (char c in consonants) {\n            word5
    += c;\n        }\n        string word6 = \"\";\n        foreach (char c in consonants)
    {\n            word6 += c;\n        }\n        string word7 = \"\";\n        foreach
    (char c in consonants) {\n            word7 += c;\n        }\n        string word8
    = \"\";\n        foreach (char c in consonants) {\n            word8 += c;\n        }\n
    \       string word9 = \"\";\n        foreach (char c in consonants) {\n            word9
    += c;\n        }\n        string word10 = \"\";\n        foreach (char c in consonants)
    {\n            word10 += c;\n        }\n        string word11 = \"\";\n        foreach
    (char c in consonants) {\n            word11 += c;\n        }\n        string
    word12 = \"\";\n        foreach (char c in consonants) {\n            word12 +=
    c;\n        }\n        string word13 = \"\";\n        foreach (char c in consonants)
    {\n            word13 += c;\n        }\n        string word14 = \"\";\n        foreach
    (char c in consonants) {\n            word14 += c;\n        }\n        string
    word15 = \"\";\n        foreach (char c in consonants) {\n            word15 +=
    c;\n        }\n        string word16 = \"\";\n        foreach (char c in consonants)
    {\n            word16 += c;\n        }\n        string word17 = \"\";\n        foreach
    (char c in consonants) {\n            word17 += c;\n        }\n        string
    word18 = \"\";\n        foreach (char c in consonants) {\n            word18 +=
    c;\n        }\n        string word19 = \"\";\n        foreach (char c in consonants)
    {\n            word19 += c;\n        }\n        string word20 = \"\";\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpswve7ncq.cs(108,16): warning CS0219: The variable ''word20'' is assigned
    but its value is never used

    /tmp/tmpswve7ncq.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       string word = string.Empty;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n            }\n        }\n        string
    word2 = word;\n        string word3 = word2;\n        string word4 = word3;\n
    \       string word5 = word4;\n        string word6 = word5;\n        string word7
    = word6;\n        string word8 = word7;\n        string word9 = word8;\n        string
    word10 = word9;\n        string word11 = word10;\n        string word12 = word11;\n
    \       string word13 = word12;\n        string word14 = word13;\n        string
    word15 = word14;\n        string word16 = word15;\n        string word17 = word16;\n
    \       string word18 = word17;\n        string word19 = word18;\n        string
    word20 = word19;\n        string word21 = word20;\n        string word22 = word21;\n
    \       string word23 = word22;\n        string word24 = word23;\n        string
    word25 = word24;\n        string word26 = word25;\n        string word27 = word26;\n
    \       string word28 = word27;\n        string word29 = word28;\n        string
    word30 = word29;\n        string word31 = word30;\n        string word32 = word31;\n
    \       string word33 = word32;\n        string word34 = word33;\n        string
    word35 = word34;\n        string word36 = word35;\n        string word37 = word36;\n
    \       string word38 = word37;\n        string word39 = word38;\n        string
    word40 = word39;\n        string word41 = word40;\n        string word42 = word41;\n
    \       string word43 = word42;\n        string word44 = word43;\n        string
    word45 = word44;\n        string word46 = word45;\n        string word47 = word46;\n
    \       string word48 = word47;\n        string word49 = word48;\n        string
    word50 = word49;\n        string word51 = word50;\n        string word52 = word51;\n
    \       string word53 = word52;\n        string word54 = word53;\n        string
    word55 = word54;\n        string word56 = word55;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoialneks.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        bool isWord
    = false;\n        long count = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n                isWord = true;\n
    \               count++;\n            }\n            if (isWord) {\n                if
    (count == n) {\n                    result.Add(word);\n                    isWord
    = false;\n                    count = 0;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c80f45eb94fe44079f3cacc8bb8b99ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c80f45eb94fe44079f3cacc8bb8b99ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string temp
    = \"\";\n        bool flag = false;\n        foreach (char c in s) {\n            if
    (flag == true) {\n                word += c;\n                flag = false;\n
    \           }\n            if (char.IsLetter(c)) {\n                flag = true;\n
    \           }\n            if (char.IsWhiteSpace(c)) {\n                temp +=
    c;\n            }\n            if (word.Length == n) {\n                result.Add(temp);\n
    \               temp = \"\";\n                word = \"\";\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef49537e7ea94911af15f0484653507d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef49537e7ea94911af15f0484653507d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") return result;\n        string
    word = s;\n        string lastWord = \"\";\n        string lastLetter = \"\";\n
    \       bool isFirst = true;\n        bool isLast = true;\n        bool isMiddle
    = true;\n        bool isLastMiddle = true;\n        bool isFirstMiddle = true;\n
    \       bool isLastLast = true;\n        bool isFirstLast = true;\n        bool
    isMiddleMiddle = true;\n        bool isLastMiddleMiddle = true;\n        bool
    isFirstMiddleMiddle = true;\n        bool isLastLastMiddle = true;\n        bool
    isFirstLastLast = true;\n        bool isMiddleLast = true;\n        bool isLastMiddleLast
    = true;\n        bool isFirstMiddleLast = true;\n        bool isLastLastLast =
    true;\n        bool isFirstLastLast = true;\n        bool isMiddleMiddleLast =
    true;\n        bool isLastMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleLast
    = true;\n        bool isLastLastMiddleLast = true;\n        bool isFirstLastLastLast
    = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctjac3cf.cs(79,42): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqzi0yqr.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1026: ) expected

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    rest = s.Substring(s.Length - 1);\n        string lastWord = s.Substring(0, s.Length
    - 1);\n        string lastRest = s.Substring(s.Length - 1);\n        string lastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastRest = s.Substring(s.Length
    - 1);\n        string lastLastLastWord = s.Substring(0, s.Length - 1);\n        string
    lastLastLastRest = s.Substring(s.Length - 1);\n        string lastLastLastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastLastLastRest = s.Substring(s.Length
    - 1);\n        string lastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n
    \       string lastLastLastLastLastRest = s.Substring(s.Length - 1);\n        string
    lastLastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastRest
    = s.Substring(s.Length - 1);\n        string lastLastLastLastLastLastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastRest
    = s.Substring(s.Length - 1);\n        string lastLastLastLastLastLastLastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastRest
    = s.Substring(s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest
    = s.Substring(s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest
    = s.Substring(s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastRest
    = s.Substring(s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastLastWord
    = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastLastRest
    = s.Substring(s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastLastWord
    = s.Sub\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_s5dlhhu.cs(51,72): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        bool isWord =
    false;\n        long count = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                isWord = true;\n                word +=
    c;\n                count++;\n            }\n            if (count == n) {\n                result.Add(word);\n
    \               isWord = false;\n                count = 0;\n                word
    = string.Empty;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a6632044eb742bbb9a0c02b88efe521>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a6632044eb742bbb9a0c02b88efe521>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string last
    = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n                if (word.Length == n) {\n                    result.Add(last);\n
    \                   word = \"\";\n                }\n            }\n            else
    {\n                last = word;\n                word = \"\";\n            }\n
    \       }\n        if (word.Length > 0) {\n            result.Add(last);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9015651775844d8a8576226ab3c40395>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9015651775844d8a8576226ab3c40395>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                consonants.Add(c);\n            }\n
    \       }\n        HashSet<string> words = new HashSet<string>();\n        foreach
    (char c in consonants) {\n            string word = string.Empty;\n            foreach
    (char d in chars) {\n                if (d == c) {\n                    word +=
    c;\n                }\n            }\n            if (words.Contains(word)) {\n
    \               continue;\n            }\n            words.Add(word);\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bb18a164f09469dace4e9e1ea3a97b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bb18a164f09469dace4e9e1ea3a97b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLower(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<char> vowels = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels.Add(c);\n
    \           }\n        }\n        List<char> consonants2 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants2.Add(c);\n
    \           }\n        }\n        List<char> vowels2 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels2.Add(c);\n
    \           }\n        }\n        List<char> consonants3 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants3.Add(c);\n
    \           }\n        }\n        List<char> vowels3 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels3.Add(c);\n
    \           }\n        }\n        List<char> consonants4 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants4.Add(c);\n
    \           }\n        }\n        List<char> vowels4 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels4.Add(c);\n
    \           }\n        }\n        List<char> consonants5 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants5.Add(c);\n
    \           }\n        }\n        List<char> vowels5 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels5.Add(c);\n
    \           }\n        }\n        List<char> consonants6 = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants6.Add(c);\n
    \           }\n        }\n        List<char> vowels6 = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels6.Add(c);\n
    \           }\n        }\n        List<char> \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu8bswjfr.cs(99,19): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") return result;\n        char[]
    chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            string word = s.Replace(c.ToString(), \"\");\n
    \           if (words.Contains(word)) continue;\n            words.Add(word);\n
    \           List<string> newWords = SelectWords(word, n);\n            foreach
    (string newWord in newWords) {\n                words.Add(newWord);\n            }\n
    \       }\n        foreach (string word in words) {\n            if (words.Count(w
    => w.Contains(word)) == n) result.Add(word);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659805416
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string vowels = \"aeiou\";\n        string consonants
    = \"bcdfghjklmnpqrstvwxyz\";\n        string letters = \"abcdefghijklmnopqrstuvwxyz\";\n
    \       string spaces = \"   \";\n        string word = \"\";\n        string
    temp = \"\";\n        bool isVowel = false;\n        bool isConsonant = false;\n
    \       bool isLetter = false;\n        bool isSpace = false;\n        bool isWord
    = false;\n        bool isVowelConsonant = false;\n        bool isVowelLetter =
    false;\n        bool isVowelSpace = false;\n        bool isVowelWord = false;\n
    \       bool isConsonantLetter = false;\n        bool isConsonantSpace = false;\n
    \       bool isConsonantWord = false;\n        bool isLetterSpace = false;\n        bool
    isLetterWord = false;\n        bool isSpaceLetter = false;\n        bool isSpaceWord
    = false;\n        bool isWordLetter = false;\n        bool isWordSpace = false;\n
    \       bool isWordVowel = false;\n        bool isWordConsonant = false;\n        bool
    isWordLetterConsonant = false;\n        bool isWordSpaceConsonant = false;\n        bool
    isWordVowelConsonant = false;\n        bool isWordConsonantLetter = false;\n        bool
    isWordLetterSpace = false;\n        bool isWordLetterVowel = false;\n        bool
    isWordSpaceVowel = false;\n        bool isWordVowelSpace = false;\n        bool
    isWordConsonantSpace = false;\n        bool isWordLetterConsonantSpace = false;\n
    \       bool isWordLetterVowelSpace = false;\n        bool isWordSpaceLetter =
    false;\n        bool isWordLetterSpaceVowel = false;\n        bool isWordVowelLetter
    = false;\n        bool isWordConsonantLetter = false;\n        bool isWordLetterConsonantVowel
    = false;\n        bool isWordSpaceLetterConsonant = false;\n        bool isWordLetterVowelLetter
    = false;\n        bool isWordSpaceLetterVowel = false;\n        bool isWordVowelLetterConsonant
    = false;\n        bool isWordConsonantLetterVowel = false;\n        bool isWordLetterSpaceLetterVowel
    = false;\n        bool isWordVowelLetterConsonantSpace = false;\n        bool
    isWordConsonantLetterSpaceLetterVow\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptmqjsl9m.cs(74,49): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        bool
    isConsonant = true;\n        long count = 0;\n        foreach (char c in word)
    {\n            if (char.IsLetter(c)) {\n                count++;\n                if
    (count == n) {\n                    result.Add(word);\n                    isConsonant
    = true;\n                    count = 0;\n                }\n                else
    {\n                    isConsonant = false;\n                }\n            }\n
    \       }\n        if (isConsonant) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d2bee783b0245f5804c2466a10de7b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d2bee783b0245f5804c2466a10de7b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string temp = s;\n        string temp2 = s;\n        string
    temp3 = s;\n        string temp4 = s;\n        string temp5 = s;\n        string
    temp6 = s;\n        string temp7 = s;\n        string temp8 = s;\n        string
    temp9 = s;\n        string temp10 = s;\n        string temp11 = s;\n        string
    temp12 = s;\n        string temp13 = s;\n        string temp14 = s;\n        string
    temp15 = s;\n        string temp16 = s;\n        string temp17 = s;\n        string
    temp18 = s;\n        string temp19 = s;\n        string temp20 = s;\n        string
    temp21 = s;\n        string temp22 = s;\n        string temp23 = s;\n        string
    temp24 = s;\n        string temp25 = s;\n        string temp26 = s;\n        string
    temp27 = s;\n        string temp28 = s;\n        string temp29 = s;\n        string
    temp30 = s;\n        string temp31 = s;\n        string temp32 = s;\n        string
    temp33 = s;\n        string temp34 = s;\n        string temp35 = s;\n        string
    temp36 = s;\n        string temp37 = s;\n        string temp38 = s;\n        string
    temp39 = s;\n        string temp40 = s;\n        string temp41 = s;\n        string
    temp42 = s;\n        string temp43 = s;\n        string temp44 = s;\n        string
    temp45 = s;\n        string temp46 = s;\n        string temp47 = s;\n        string
    temp48 = s;\n        string temp49 = s;\n        string temp50 = s;\n        string
    temp51 = s;\n        string temp52 = s;\n        string temp53 = s;\n        string
    temp54 = s;\n        string temp55 = s;\n        string temp56 = s;\n        string
    temp57 = s;\n        string temp58 = s;\n        string temp59 = s;\n        string
    temp60 = s;\n        string temp61 = s;\n        string temp62 = s;\n        string
    temp63 = s;\n        string temp64 = s;\n        string temp65 = s;\n        string
    temp66 = s;\n        string temp67 = s;\n        string temp68 = s;\n        string
    temp69 = s;\n        string temp70 = s;\n        string temp71 = s;\n        string
    temp7\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfa2i09nm.cs(96,21): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLower(c)) {\n                consonants.Add(c);\n            }\n        }\n
    \       List<string> words = new List<string>();\n        foreach (char c in consonants)
    {\n            words.AddRange(SelectWords(s, n - 1));\n        }\n        words.AddRange(SelectWords(s,
    1));\n        foreach (string word in words) {\n            if (words.Count(w
    => w.Contains(c)) >= n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkr8u8rxe.cs(38,45): error CS0103: The name ''c'' does not exist in the
    current context

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = \"\";\n        bool
    isConsonant = false;\n        bool isConsonantLast = false;\n        bool isConsonantLast2
    = false;\n        bool isConsonantLast3 = false;\n        bool isConsonantLast4
    = false;\n        bool isConsonantLast5 = false;\n        bool isConsonantLast6
    = false;\n        bool isConsonantLast7 = false;\n        bool isConsonantLast8
    = false;\n        bool isConsonantLast9 = false;\n        bool isConsonantLast10
    = false;\n        bool isConsonantLast11 = false;\n        bool isConsonantLast12
    = false;\n        bool isConsonantLast13 = false;\n        bool isConsonantLast14
    = false;\n        bool isConsonantLast15 = false;\n        bool isConsonantLast16
    = false;\n        bool isConsonantLast17 = false;\n        bool isConsonantLast18
    = false;\n        bool isConsonantLast19 = false;\n        bool isConsonantLast20
    = false;\n        bool isConsonantLast21 = false;\n        bool isConsonantLast22
    = false;\n        bool isConsonantLast23 = false;\n        bool isConsonantLast24
    = false;\n        bool isConsonantLast25 = false;\n        bool isConsonantLast26
    = false;\n        bool isConsonantLast27 = false;\n        bool isConsonantLast28
    = false;\n        bool isConsonantLast29 = false;\n        bool isConsonantLast30
    = false;\n        bool isConsonantLast31 = false;\n        bool isConsonantLast32
    = false;\n        bool isConsonantLast33 = false;\n        bool isConsonantLast34
    = false;\n        bool isConsonantLast35 = false;\n        bool isConsonantLast36
    = false;\n        bool isConsonantLast37 = false;\n        bool isConsonantLast38
    = false;\n        bool isConsonantLast39 = false;\n        bool isConsonantLast40
    = false;\n        bool isConsonantLast41 = false;\n        bool isConsonantLast42
    = false;\n        bool isConsonantLast43 = false;\n        bool isConsonantLast44
    = false;\n        bool isConsonantLast45 = false;\n        bool isConsonantLast46
    = false;\n        bool isConsonantLast\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpacralq16.cs(74,29): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n        bool
    isLastConsonant = false;\n        bool isLastWord = false;\n        bool isFirstWord
    = false;\n        bool isFirstConsonant = false;\n        bool isFirstLastConsonant
    = false;\n        bool isFirstLastWord = false;\n        bool isFirstLastConsonant2
    = false;\n        bool isFirstLastWord2 = false;\n        bool isFirstLastConsonant3
    = false;\n        bool isFirstLastWord3 = false;\n        bool isFirstLastConsonant4
    = false;\n        bool isFirstLastWord4 = false;\n        bool isFirstLastConsonant5
    = false;\n        bool isFirstLastWord5 = false;\n        bool isFirstLastConsonant6
    = false;\n        bool isFirstLastWord6 = false;\n        bool isFirstLastConsonant7
    = false;\n        bool isFirstLastWord7 = false;\n        bool isFirstLastConsonant8
    = false;\n        bool isFirstLastWord8 = false;\n        bool isFirstLastConsonant9
    = false;\n        bool isFirstLastWord9 = false;\n        bool isFirstLastConsonant10
    = false;\n        bool isFirstLastWord10 = false;\n        bool isFirstLastConsonant11
    = false;\n        bool isFirstLastWord11 = false;\n        bool isFirstLastConsonant12
    = false;\n        bool isFirstLastWord12 = false;\n        bool isFirstLastConsonant13
    = false;\n        bool isFirstLastWord13 = false;\n        bool isFirstLastConsonant14
    = false;\n        bool isFirstLastWord14 = false;\n        bool isFirstLastConsonant15
    = false;\n        bool isFirstLastWord15 = false;\n        bool isFirstLastConsonant16
    = false;\n        bool isFirstLastWord16 = false;\n        bool isFirstLastConsonant17
    = false;\n        bool isFirstLastWord17 = false;\n        bool isFirstLastConsonant18
    = false;\n        bool isFirstLastWord18 = false;\n        bool isFirstLastConsonant19
    = false;\n        bool isFirstLastWord19 = false;\n        bool isFirstLastConsonant20
    = false;\n        bool isFirstLastWord20 = false;\n        bool isFirstLastConsonant21
    = false;\n        bool isFirstLastWord21 = false;\n        bool is\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpydfsw33t.cs(73,14): error CS1001: Identifier expected

    /tmp/tmpydfsw33t.cs(73,14): error CS1002: ; expected

    /tmp/tmpydfsw33t.cs(73,14): error CS1525: Invalid expression term ''is''

    /tmp/tmpydfsw33t.cs(73,16): error CS1031: Type expected

    /tmp/tmpydfsw33t.cs(73,16): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        long count = 0;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count == 0) {\n            return result;\n        }\n
    \       long maxCount = Math.Ceiling((double)n / count);\n        long start =
    0;\n        long end = 0;\n        long currentCount = 0;\n        long currentMaxCount
    = 0;\n        bool isFirst = true;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                currentCount++;\n                if (currentCount
    > maxCount) {\n                    currentMaxCount = currentCount;\n                    end
    = currentMaxCount * count;\n                    if (isFirst) {\n                        start
    = end - maxCount;\n                        isFirst = false;\n                    }\n
    \               }\n            }\n        }\n        long startIndex = Math.Max(start,
    0);\n        long endIndex = Math.Min(end, s.Length);\n        string currentWord
    = s.Substring(startIndex, endIndex - startIndex);\n        result.Add(currentWord);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebv910nc.cs(34,25): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpebv910nc.cs(55,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpebv910nc.cs(55,54): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars)\n        {\n            if (char.IsLetterOrDigit(c))\n
    \           {\n                consonants.Add(c);\n            }\n        }\n
    \       string word = \"\";\n        foreach (char c in consonants)\n        {\n
    \           word += c;\n        }\n        string word2 = \"\";\n        foreach
    (char c in consonants)\n        {\n            word2 += c;\n        }\n        string
    word3 = \"\";\n        foreach (char c in consonants)\n        {\n            word3
    += c;\n        }\n        string word4 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word4 += c;\n        }\n        string word5 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word5 += c;\n        }\n
    \       string word6 = \"\";\n        foreach (char c in consonants)\n        {\n
    \           word6 += c;\n        }\n        string word7 = \"\";\n        foreach
    (char c in consonants)\n        {\n            word7 += c;\n        }\n        string
    word8 = \"\";\n        foreach (char c in consonants)\n        {\n            word8
    += c;\n        }\n        string word9 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word9 += c;\n        }\n        string word10 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word10 += c;\n
    \       }\n        string word11 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word11 += c;\n        }\n        string word12 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word12 += c;\n
    \       }\n        string word13 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word13 += c;\n        }\n        string word14 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word14 += c;\n
    \       }\n        string word15 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word15 += c;\n        }\n        string word16 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word16 += c;\n
    \       }\n        string word17 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word17 += c;\n        }\n        string word18 = \"\";\n
    \       foreach (char c in consonants)\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwjxfc5zu.cs(119,39): error CS1525: Invalid expression term ''}''

    /tmp/tmpwjxfc5zu.cs(119,39): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = \"\";\n        bool isConsonant = false;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n                isConsonant = false;\n            } else if (char.IsWhiteSpace(c))
    {\n                if (isConsonant) {\n                    result.Add(word);\n
    \                   word = \"\";\n                    isConsonant = false;\n                }\n
    \           } else {\n                if (!isConsonant) {\n                    isConsonant
    = true;\n                }\n            }\n        }\n        if (word != \"\")
    {\n            result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a316945b1fe7465ba2848a5ad28aeadf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a316945b1fe7465ba2848a5ad28aeadf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - 33, \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgq6kfoba.cs(57,55): error CS1525: Invalid expression term ''}''

    /tmp/tmpgq6kfoba.cs(57,55): error CS1026: ) expected

    /tmp/tmpgq6kfoba.cs(57,55): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        int[] count
    = new int[26];\n        foreach (char c in chars) {\n            count[c - 'a']++;\n
    \       }\n        List<string> words = new List<string>();\n        foreach (int
    i in count) {\n            if (i == n) {\n                words.Add(new string(chars,
    0, i));\n            }\n        }\n        return words;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x0003c] in <da1b9a77823c47e6b4f0516619620ddf>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <da1b9a77823c47e6b4f0516619620ddf>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0003c] in
    <da1b9a77823c47e6b4f0516619620ddf>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <da1b9a77823c47e6b4f0516619620ddf>:0 \n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }
    else {\n                if (word.Length == n) {\n                    result.Add(word);\n
    \                   word = \"\";\n                }\n            }\n        }\n
    \       if (word.Length > 0) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccfe1d1164764c1eae642c97e2bdf775>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccfe1d1164764c1eae642c97e2bdf775>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        long count = 0;\n        foreach (string
    word in s.Split(' '))\n        {\n            foreach (char c in word)\n            {\n
    \               if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n
    \               {\n                    count++;\n                }\n            }\n
    \           if (count == n)\n            {\n                result.Add(word);\n
    \               count = 0;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913929020ea846a9a75f7f654190ca98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913929020ea846a9a75f7f654190ca98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqzi0yqr.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1026: ) expected

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \           if (word.Length == n) {\n                result.Add(word);\n                word
    = \"\";\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fc5177d9ee54ec4b6eb899414431154>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fc5177d9ee54ec4b6eb899414431154>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        long maxCount = s.Length;\n        long count = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        long start = 0;\n        long end = 0;\n        long currentCount
    = 0;\n        long currentStart = 0;\n        long currentEnd = 0;\n        bool
    isFirst = true;\n        bool isLast = true;\n        bool isMiddle = true;\n
    \       bool isLastMiddle = true;\n        bool isFirstMiddle = true;\n        bool
    isLastLast = true;\n        bool isMiddleMiddle = true;\n        bool isFirstLast
    = true;\n        bool isMiddleFirst = true;\n        bool isLastFirst = true;\n
    \       bool isFirstLastMiddle = true;\n        bool isLastMiddleFirst = true;\n
    \       bool isFirstMiddleLast = true;\n        bool isLastFirstMiddle = true;\n
    \       bool isMiddleLastFirst = true;\n        bool isFirstLastLast = true;\n
    \       bool isMiddleMiddleLast = true;\n        bool isFirstMiddleMiddle = true;\n
    \       bool isLastMiddleFirst = true;\n        bool isFirstLastMiddleLast = true;\n
    \       bool isLastFirstMiddleMiddle = true;\n        bool isMiddleLastFirstMiddle
    = true;\n        bool isFirstLastLastMiddle = true;\n        bool isMiddleMiddleLastFirst
    = true;\n        bool isFirstMiddleMiddleLast = true;\n        bool isLastMiddleFirstMiddle
    = true;\n        bool isFirstLastMiddleLastMiddle = true;\n        bool isLastFirstMiddleMiddleLast
    = true;\n        bool isMiddleLastFirstMiddleMiddle = true;\n        bool isFirstLastLastMiddleMiddle
    = true;\n        bool isLastFirstMiddleMiddleLast = true;\n        bool isMiddleMiddleLastFirstMiddle
    = true;\n        bool isFirstLastLastMiddleMiddleLast = true;\n        bool isLastFirstMiddleMiddleLastMiddle
    = true;\n        bool isMiddleMiddleLastFirstMiddleMiddleLast = true;\n        bool
    isFirstLastLastMiddleMiddleLastMiddle = true;\n        bool isLastFirstMiddleMiddleLastMiddleMiddle
    = true;\n        bool isMiddleMiddleLastFirstMiddleMiddleLastMiddle = true;\n
    \       bool isFirstLastLastMiddleMiddleLastMiddleMiddle = true;\n        bool
    isLastFirstMiddleMiddleLastMiddleMiddleLast = true;\n        bool isMiddleMiddleLastFirstMiddleMiddleLastMiddleLast
    = true;\n        bool isFirstLastLastMiddleMiddleLastMiddleMiddleLastMiddle =
    true;\n        bool isLastFirstMiddleMiddleLastMiddleMiddleLastMiddleLast = true;\n
    \       bool isMiddleMiddleLastFirstMiddleMiddleLastMiddleLastMiddle\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptruzv3f5.cs(83,69): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        string lastWord
    = string.Empty;\n        bool isFirst = true;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                if (isFirst) {\n                    word
    = c;\n                    isFirst = false;\n                } else {\n                    if
    (word.Length == n) {\n                        result.Add(word);\n                        word
    = string.Empty;\n                    }\n                }\n            } else
    {\n                if (word.Length == n) {\n                    result.Add(word);\n
    \                   word = string.Empty;\n                }\n            }\n        }\n
    \       if (word.Length != 0) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8n2vr5v3.cs(31,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659805411
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        long count
    = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n                count++;\n            }\n            if (count == n) {\n
    \               result.Add(word);\n                word = \"\";\n                count
    = 0;\n            }\n        }\n        if (word != \"\") {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8b3d397966047479f6c3fa13cf4a5f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8b3d397966047479f6c3fa13cf4a5f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        string word = string.Empty;\n        string lastWord = string.Empty;\n
    \       bool isConsonant = false;\n        bool isConsonantLast = false;\n        bool
    isConsonantLast2 = false;\n        bool isConsonantLast3 = false;\n        bool
    isConsonantLast4 = false;\n        bool isConsonantLast5 = false;\n        bool
    isConsonantLast6 = false;\n        bool isConsonantLast7 = false;\n        bool
    isConsonantLast8 = false;\n        bool isConsonantLast9 = false;\n        bool
    isConsonantLast10 = false;\n        bool isConsonantLast11 = false;\n        bool
    isConsonantLast12 = false;\n        bool isConsonantLast13 = false;\n        bool
    isConsonantLast14 = false;\n        bool isConsonantLast15 = false;\n        bool
    isConsonantLast16 = false;\n        bool isConsonantLast17 = false;\n        bool
    isConsonantLast18 = false;\n        bool isConsonantLast19 = false;\n        bool
    isConsonantLast20 = false;\n        bool isConsonantLast21 = false;\n        bool
    isConsonantLast22 = false;\n        bool isConsonantLast23 = false;\n        bool
    isConsonantLast24 = false;\n        bool isConsonantLast25 = false;\n        bool
    isConsonantLast26 = false;\n        bool isConsonantLast27 = false;\n        bool
    isConsonantLast28 = false;\n        bool isConsonantLast29 = false;\n        bool
    isConsonantLast30 = false;\n        bool isConsonantLast31 = false;\n        bool
    isConsonantLast32 = false;\n        bool isConsonantLast33 = false;\n        bool
    isConsonantLast34 = false;\n        bool isConsonantLast35 = false;\n        bool
    isConsonantLast36 = false;\n        bool isConsonantLast37 = false;\n        bool
    isConsonantLast38 = false;\n        bool isConsonantLast39 = false;\n        bool
    isConsonantLast40 = false;\n        bool isConsonantLast41 = false;\n        bool
    isConsonantLast42 = false;\n        bool isConsonantLast43 = false;\n        bool
    isConsonantLast44 = false;\n        bool isConsonantLast45 = false;\n        bool
    isConsonantLast46 = false;\n\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ik4adzq.cs(26,14): warning CS0219: The variable ''isConsonant'' is assigned
    but its value is never used

    /tmp/tmp9ik4adzq.cs(27,14): warning CS0219: The variable ''isConsonantLast'' is
    assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(28,14): warning CS0219: The variable ''isConsonantLast2''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(29,14): warning CS0219: The variable ''isConsonantLast3''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(30,14): warning CS0219: The variable ''isConsonantLast4''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(31,14): warning CS0219: The variable ''isConsonantLast5''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(32,14): warning CS0219: The variable ''isConsonantLast6''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(33,14): warning CS0219: The variable ''isConsonantLast7''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(34,14): warning CS0219: The variable ''isConsonantLast8''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(35,14): warning CS0219: The variable ''isConsonantLast9''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(36,14): warning CS0219: The variable ''isConsonantLast10''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(37,14): warning CS0219: The variable ''isConsonantLast11''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(38,14): warning CS0219: The variable ''isConsonantLast12''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(39,14): warning CS0219: The variable ''isConsonantLast13''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(40,14): warning CS0219: The variable ''isConsonantLast14''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(41,14): warning CS0219: The variable ''isConsonantLast15''
    is assigned but its value is never used

    /tmp/tmp9ik4adzq.cs(42,14): warning CS0219: The variable ''isConso'
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        HashSet<char>
    set = new HashSet<char>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                set.Add(c);\n            }\n        }\n
    \       List<string> words = new List<string>();\n        foreach (char c in chars)
    {\n            if (set.Contains(c)) {\n                words.Add(s.Substring(0,
    s.IndexOf(c)));\n            }\n        }\n        foreach (string word in words)
    {\n            result.AddRange(SelectWords(word, n));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <754713c3e5644c83a2b47da8184d1472>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <754713c3e5644c83a2b47da8184d1472>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s;\n        string lastWord = \"\";\n        bool isConsonant
    = false;\n        bool isConsonantLast = false;\n        bool isConsonantLast2
    = false;\n        bool isConsonantLast3 = false;\n        bool isConsonantLast4
    = false;\n        bool isConsonantLast5 = false;\n        bool isConsonantLast6
    = false;\n        bool isConsonantLast7 = false;\n        bool isConsonantLast8
    = false;\n        bool isConsonantLast9 = false;\n        bool isConsonantLast10
    = false;\n        bool isConsonantLast11 = false;\n        bool isConsonantLast12
    = false;\n        bool isConsonantLast13 = false;\n        bool isConsonantLast14
    = false;\n        bool isConsonantLast15 = false;\n        bool isConsonantLast16
    = false;\n        bool isConsonantLast17 = false;\n        bool isConsonantLast18
    = false;\n        bool isConsonantLast19 = false;\n        bool isConsonantLast20
    = false;\n        bool isConsonantLast21 = false;\n        bool isConsonantLast22
    = false;\n        bool isConsonantLast23 = false;\n        bool isConsonantLast24
    = false;\n        bool isConsonantLast25 = false;\n        bool isConsonantLast26
    = false;\n        bool isConsonantLast27 = false;\n        bool isConsonantLast28
    = false;\n        bool isConsonantLast29 = false;\n        bool isConsonantLast30
    = false;\n        bool isConsonantLast31 = false;\n        bool isConsonantLast32
    = false;\n        bool isConsonantLast33 = false;\n        bool isConsonantLast34
    = false;\n        bool isConsonantLast35 = false;\n        bool isConsonantLast36
    = false;\n        bool isConsonantLast37 = false;\n        bool isConsonantLast38
    = false;\n        bool isConsonantLast39 = false;\n        bool isConsonantLast40
    = false;\n        bool isConsonantLast41 = false;\n        bool isConsonantLast42
    = false;\n        bool isConsonantLast43 = false;\n        bool isConsonantLast44
    = false;\n        bool isConsonantLast45 = false;\n        bool isConsonantLast46
    = false;\n        bool isConsonantLast47\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqfkqvbp.cs(73,31): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqzi0yqr.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1026: ) expected

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    rest = s.Substring(s.Length - 1);\n        bool isWord = false;\n        foreach
    (char c in word) {\n            if (char.IsLetter(c)) {\n                isWord
    = true;\n            }\n        }\n        if (isWord) {\n            foreach
    (char c in rest) {\n                if (char.IsLetter(c)) {\n                    if
    (c.ToString() == c.ToString().ToUpper()) {\n                        result.Add(word);\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b64f289e1434545bbcac6d7e7f88e36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b64f289e1434545bbcac6d7e7f88e36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = \"\";\n        bool isConsonant = false;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n                if (char.IsLower(c)) {\n                    isConsonant
    = true;\n                }\n            }\n            if (isConsonant) {\n                if
    (word.Length == n) {\n                    result.Add(word);\n                    word
    = \"\";\n                    isConsonant = false;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a412140322144b790a64192b0ffe8ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a412140322144b790a64192b0ffe8ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        string word2 = \"\";\n        foreach (char c in word) {\n
    \           if (char.IsLetter(c)) {\n                word2 += c;\n            }\n
    \       }\n        long count = new Regex(@\"[^a-zA-Z]\").Matches(word).Count;\n
    \       if (n == count) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuy0gxsl2.cs(34,26): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n        foreach
    (char c in word)\n        {\n            if (char.IsLetter(c))\n            {\n
    \               isConsonant = true;\n            }\n            else\n            {\n
    \               isConsonant = false;\n            }\n            if (isConsonant
    == true)\n            {\n                result.Add(word);\n            }\n        }\n
    \       if (result.Count > n)\n        {\n            result.RemoveAt(result.Count
    - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60040ec3f203421eb5d1b6aa33c37d57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60040ec3f203421eb5d1b6aa33c37d57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        StringBuilder
    sb = new StringBuilder();\n        bool isFirst = true;\n        foreach (char
    c in chars) {\n            if (isFirst) isFirst = false;\n            else sb.Append(\"
    \");\n            sb.Append(c);\n        }\n        string word = sb.ToString();\n
    \       char[] charArray = word.ToCharArray();\n        Array.Sort(charArray);\n
    \       bool isFirst = true;\n        foreach (char c in charArray) {\n            if
    (isFirst) isFirst = false;\n            else sb.Append(\" \");\n            sb.Append(c);\n
    \       }\n        string word2 = sb.ToString();\n        char[] charArray2 =
    word2.ToCharArray();\n        Array.Sort(charArray2);\n        bool isFirst =
    true;\n        foreach (char c in charArray2) {\n            if (isFirst) isFirst
    = false;\n            else sb.Append(\" \");\n            sb.Append(c);\n        }\n
    \       string word3 = sb.ToString();\n        char[] charArray3 = word3.ToCharArray();\n
    \       Array.Sort(charArray3);\n        bool isFirst = true;\n        foreach
    (char c in charArray3) {\n            if (isFirst) isFirst = false;\n            else
    sb.Append(\" \");\n            sb.Append(c);\n        }\n        string word4
    = sb.ToString();\n        char[] charArray4 = word4.ToCharArray();\n        Array.Sort(charArray4);\n
    \       bool isFirst = true;\n        foreach (char c in charArray4) {\n            if
    (isFirst) isFirst = false;\n            else sb.Append(\" \");\n            sb.Append(c);\n
    \       }\n        string word5 = sb.ToString();\n        char[] charArray5 =
    word5.ToCharArray();\n        Array.Sort(charArray5);\n        bool isFirst =
    true;\n        foreach (char c in charArray5) {\n            if (isFirst) isFirst
    = false;\n            else sb.Append(\" \");\n            sb.Append(c);\n        }\n
    \       string word6 = sb.ToString();\n        char[] charArray6 = word6.ToCharArray();\n
    \       Array.Sort(charArray6);\n        bool isFirst = true;\n        foreach
    (char c in charArray6) {\n            if (isFirst) isFirst = false;\n            else
    sb.Append(\" \");\n            sb.Append(c);\n        }\n        string word7
    = sb.ToString();\n        char[] charArray7 = word7.ToCharArray();\n        Array.Sort(char\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn_bvnbze.cs(88,20): error CS1525: Invalid expression term ''char''

    /tmp/tmpn_bvnbze.cs(88,24): error CS1026: ) expected

    /tmp/tmpn_bvnbze.cs(88,24): error CS1002: ; expected

    '
  timestamp: 1659805411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        List<string>
    words = new List<string>();\n        foreach (char c in word) {\n            if
    (s.Contains(c.ToString())) {\n                words.Add(c.ToString());\n            }\n
    \       }\n        if (words.Count == n) {\n            result.Add(word);\n        }\n
    \       foreach (string word in words) {\n            List<string> newWords =
    SelectWords(s.Substring(word.Length + 1), n);\n            foreach (string newWord
    in newWords) {\n                result.Add(word + \" \" + newWord);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps6ahlbum.cs(35,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        long count = 0;\n        foreach (string
    word in s.Split(' '))\n        {\n            foreach (char c in word)\n            {\n
    \               if (char.IsLetter(c))\n                {\n                    count++;\n
    \               }\n            }\n            if (count == n)\n            {\n
    \               result.Add(word);\n                count = 0;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbad50026c3421abc3b45dd5cf734d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbad50026c3421abc3b45dd5cf734d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        List<string> words
    = new List<string>();\n        string word = \"\";\n        bool isWord = false;\n
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n                isWord = true;\n            }\n            if (isWord)
    {\n                if (char.IsLetter(c)) {\n                    word += c;\n                    isWord
    = false;\n                }\n                if (word.Length == n) {\n                    words.Add(word);\n
    \                   word = \"\";\n                }\n            }\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <045ea6065f5e4cd6ae68a6f594d0d751>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <045ea6065f5e4cd6ae68a6f594d0d751>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) return result;\n        string
    word = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length
    - 1, 1);\n        bool isConsonant = true;\n        bool isLastConsonant = true;\n
    \       bool isLastConsonantOrLastWord = true;\n        bool isLastConsonantOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWord = true;\n
    \       bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWord = true;\n
    \       bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord
    = true;\n        bool isLastConsonantOrLastWordOrLastWordOr\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0iloh7bu.cs(41,51): error CS1002: ; expected

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = string.Empty;\n        bool isConsonant
    = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n                if (char.IsUpper(c)) {\n                    isConsonant
    = true;\n                }\n            }\n            if (isConsonant) {\n                if
    (word.Length == n) {\n                    result.Add(word);\n                    word
    = string.Empty;\n                    isConsonant = false;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e87dc01d83b547a7a1af890b3d1ca09d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e87dc01d83b547a7a1af890b3d1ca09d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       string word = \"\";\n        string word2 = \"\";\n        bool flag =
    false;\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i]
    == 'a') {\n                flag = true;\n            }\n            if (flag ==
    true) {\n                word += chars[i];\n            }\n            if (chars[i]
    == 'z') {\n                flag = false;\n                result.Add(word);\n
    \               word = \"\";\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad281752e4d846a7876dbe4a88183040>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad281752e4d846a7876dbe4a88183040>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        int[] count
    = new int[26];\n        for (int i = 0; i < chars.Length; i++) {\n            char
    c = chars[i];\n            int index = c - 'a';\n            if (count[index]
    == 0) {\n                count[index]++;\n                result.Add(s.Substring(0,
    i) + s.Substring(i + 1, s.Length - i - 1));\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x0003c] in <96d3dbc2a81943bdbf8662df3b24c4bf>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <96d3dbc2a81943bdbf8662df3b24c4bf>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0003c] in
    <96d3dbc2a81943bdbf8662df3b24c4bf>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <96d3dbc2a81943bdbf8662df3b24c4bf>:0 \n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = \"\";\n        long
    lastCount = 0;\n        long count = 0;\n        bool isFirst = true;\n        bool
    isLast = true;\n        bool isMiddle = true;\n        bool isLastMiddle = true;\n
    \       bool isFirstMiddle = true;\n        bool isLastLast = true;\n        bool
    isFirstLast = true;\n        bool isMiddleMiddle = true;\n        bool isLastMiddleMiddle
    = true;\n        bool isFirstMiddleMiddle = true;\n        bool isLastLastMiddle
    = true;\n        bool isFirstLastLast = true;\n        bool isMiddleLast = true;\n
    \       bool isLastMiddleLast = true;\n        bool isFirstMiddleLast = true;\n
    \       bool isLastLastLast = true;\n        bool isFirstLastLast = true;\n        bool
    isMiddleMiddleLast = true;\n        bool isLastMiddleMiddleLast = true;\n        bool
    isFirstMiddleMiddleLast = true;\n        bool isLastLastMiddleLast = true;\n        bool
    isFirstLastLastLast = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool
    isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleMiddleLast
    = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleMiddleLast = true;\n        bool
    isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleMiddleLast = true;\n        bool
    isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleMiddleLast = true;\n        bool
    isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleMiddleLast = true;\n        bool
    isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleMiddleLast\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpomu95a3d.cs(79,46): error CS1002: ; expected

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = string.Empty;\n        string lastWord
    = string.Empty;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n            if (word.Length == n)
    {\n                result.Add(lastWord);\n                word = string.Empty;\n
    \           }\n            if (word.Length > n) {\n                lastWord =
    word;\n                word = string.Empty;\n            }\n        }\n        if
    (word.Length > 0) {\n            result.Add(lastWord);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c16cdac00ed048fa8d2b3f828d90f3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c16cdac00ed048fa8d2b3f828d90f3d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        string word = \"\";\n        string last = \"\";\n        bool
    first = true;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                if (first) {\n                    first = false;\n                    word
    = c;\n                } else {\n                    word += c;\n                }\n
    \           } else {\n                if (word != \"\") {\n                    if
    (word.Length == n) {\n                        result.Add(word);\n                        word
    = \"\";\n                    } else {\n                        word += c;\n                    }\n
    \               }\n            }\n        }\n        if (word != \"\") {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdv1av4tv.cs(32,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpdv1av4tv.cs(26,16): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    '
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = string.Empty;\n        string lastWord
    = string.Empty;\n        string nextWord = string.Empty;\n        string lastNextWord
    = string.Empty;\n        bool isFirst = true;\n        bool isLast = true;\n        bool
    isNext = true;\n        bool isLastNext = true;\n        bool isLastLast = true;\n
    \       bool isNextNext = true;\n        bool isNextLast = true;\n        bool
    isLastLastNext = true;\n        bool isLastLastLast = true;\n        bool isLastLastNextNext
    = true;\n        bool isLastLastLastNext = true;\n        bool isLastLastLastLast
    = true;\n        bool isLastLastLastNextNext = true;\n        bool isLastLastLastLastNext
    = true;\n        bool isLastLastLastLastLast = true;\n        bool isLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastNext = true;\n        bool isLastLastLastLastLastLast
    = true;\n        bool isLastLastLastLastLastNextNext = true;\n        bool isLastLastLastLastLastLastNext
    = true;\n        bool isLastLastLastLastLastLastNext = true;\n        bool isLastLastLastLastLastLastNext
    = true;\n        bool isLastLastLastLastLastLastLast = true;\n        bool isLastLastLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastLastNext = true;\n        bool isLastLastLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastLastNextNext = true;\n        bool
    isLastLastLastLastLastLastNextNext = true;\n        bool isLastLastLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastLastNextNext = true;\n        bool
    isLastLastLastLastLastLastNextNext = true;\n        bool isLastLastLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastLastNextNext = true;\n        bool
    isLastLastLastLastLastLastNextNext = true;\n        bool isLastLastLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastLastNextNext = true;\n        bool
    isLastLastLastLastLastLastNextNext = true;\n        bool isLastLastLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastLastNextNext = true;\n        bool
    isLastLastLastLastLastLastNextNext = true;\n        bool isLastLastLastLastLastLastNextNext
    = true;\n        bool isLastLastLastLastLastLastNextNext = true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_9qsg0x.cs(49,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(50,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(53,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(54,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(55,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(56,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(57,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(58,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(59,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(60,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(61,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(62,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(63,14): error CS0128: A local variable or function named ''isLastLastLastLastLastLastNextNext''
    is already defined in this scope

    /tmp/tmpe_9qsg0x.cs(64'
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        bool
    isConsonant = false;\n        foreach (char c in word) {\n            if (char.IsLetter(c))
    {\n                isConsonant = true;\n            }\n        }\n        if (isConsonant)
    {\n            long count = 0;\n            foreach (char c in word) {\n                if
    (char.IsLetter(c)) {\n                    count++;\n                }\n            }\n
    \           if (count == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <507adf172305499c830fe41be379fd96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <507adf172305499c830fe41be379fd96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        string word = string.Empty;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                if (word.Length == n)\n                    result.Add(word);\n
    \               word = word + c;\n            }\n        }\n        if (word.Length
    == n)\n            result.Add(word);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <241f5805693547699cb1892c4e3fdf65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <241f5805693547699cb1892c4e3fdf65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        long count = new Regex(@\"[^aeiou]\").Matches(s).Count;\n        if
    (count > n)\n            return result;\n        string word = s.Substring(0,
    s.Length - 1);\n        string lastWord = s.Substring(s.Length - 1, 1);\n        bool
    isLastWordConsonant = lastWord.All(c => c == 'a' || c == 'e' || c == 'i' || c
    == 'o' || c == 'u');\n        if (isLastWordConsonant)\n            result.Add(word);\n
    \       else\n            result.AddRange(SelectWords(word, n - 1));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpemj7us_g.cs(24,26): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        List<char> chars = new List<char>();\n        foreach
    (char c in s) {\n            if (chars.Contains(c)) {\n                result.Add(c.ToString());\n
    \           }\n            chars.Add(c);\n        }\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       chars.Sort();\n        chars.Reverse();\n        chars.RemoveAll(chars.Contains);\n
    \       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj76ubcem.cs(20,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == null || s.Length == 0)\n            return
    result;\n        \n        string word = \"\";\n        \n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n                if
    (word.Length == n) {\n                    result.Add(word);\n                    word
    = \"\";\n                }\n            }\n        }\n        \n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1342f63b2ab4dbb9e45fe1c29f38b70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1342f63b2ab4dbb9e45fe1c29f38b70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        bool isWord
    = false;\n        string lastWord = \"\";\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                if (isWord) {\n                    result.Add(word);\n
    \                   word = \"\";\n                    isWord = false;\n                }\n
    \               word += c;\n            } else {\n                if (!isWord)
    {\n                    isWord = true;\n                }\n            }\n        }\n
    \       if (word != \"\") {\n            result.Add(word);\n        }\n        if
    (result.Count == 0) {\n            return result;\n        }\n        List<string>
    words = new List<string>();\n        foreach (string word in result) {\n            List<string>
    wordList = SelectWords(word, n);\n            words.AddRange(wordList);\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnsahewbi.cs(46,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpnsahewbi.cs(24,16): warning CS0219: The variable ''lastWord'' is assigned
    but its value is never used

    '
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = \"\";\n        bool flag = false;\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (flag) {\n                word
    += s[i];\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] ==
    'i' || s[i] == 'o' || s[i] == 'u') {\n                flag = true;\n            }\n
    \           if (s[i] == 'y') {\n                flag = false;\n            }\n
    \       }\n        string word2 = \"\";\n        bool flag2 = false;\n        for
    (int i = 0; i < s.Length; i++) {\n            if (flag2) {\n                word2
    += s[i];\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] ==
    'i' || s[i] == 'o' || s[i] == 'u') {\n                flag2 = true;\n            }\n
    \           if (s[i] == 'y') {\n                flag2 = false;\n            }\n
    \       }\n        string word3 = \"\";\n        bool flag3 = false;\n        for
    (int i = 0; i < s.Length; i++) {\n            if (flag3) {\n                word3
    += s[i];\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] ==
    'i' || s[i] == 'o' || s[i] == 'u') {\n                flag3 = true;\n            }\n
    \           if (s[i] == 'y') {\n                flag3 = false;\n            }\n
    \       }\n        string word4 = \"\";\n        bool flag4 = false;\n        for
    (int i = 0; i < s.Length; i++) {\n            if (flag4) {\n                word4
    += s[i];\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] ==
    'i' || s[i] == 'o' || s[i] == 'u') {\n                flag4 = true;\n            }\n
    \           if (s[i] == 'y') {\n                flag4 = false;\n            }\n
    \       }\n        string word5 = \"\";\n        bool flag5 = false;\n        for
    (int i = 0; i < s.Length; i++) {\n            if (flag5) {\n                word5
    += s[i];\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] ==
    'i' || s[i] == 'o' || s[i] == 'u') {\n                flag5 = true;\n            }\n
    \           if (s[i] == 'y') {\n                flag5 = false;\n            }\n
    \       }\n        string word6 = \"\";\n        bool flag6 = false;\n        for
    (int i = 0; i < s.Length; i++) {\n            if (flag6) {\n                word6
    += s[i];\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] ==
    'i' || s[i] == 'o' || s[i] == 'u') {\n                flag6 = true;\n            }\n
    \           if (s[i] == 'y') {\n                flag6 = false;\n            }\n
    \       }\n        string word7 = \"\";\n        bool flag7 = false;\n        for
    (int i = 0; i < s.Length; i++) {\n            if (flag7) {\n                word7
    += s[i];\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] ==
    'i\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8uqy0a44.cs(109,55): error CS1010: Newline in constant

    /tmp/tmp8uqy0a44.cs(109,57): error CS1026: ) expected

    /tmp/tmp8uqy0a44.cs(109,57): error CS1525: Invalid expression term ''}''

    /tmp/tmp8uqy0a44.cs(109,57): error CS1002: ; expected

    /tmp/tmp8uqy0a44.cs(111,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8uqy0a44.cs(121,2): error CS1513: } expected

    '
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string word2
    = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvspi3hkq.cs(22,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(23,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(24,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(25,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(26,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(27,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(28,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(29,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(30,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(31,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(32,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(33,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(34,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(35,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(36,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(37,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(38,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(39,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpvspi3hkq.cs(40,'
  timestamp: 1659805409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s;\n        string lastWord = \"\";\n
    \       bool isFirst = true;\n        bool isLast = true;\n        bool isMiddle
    = true;\n        bool isFirstMiddle = true;\n        bool isLastMiddle = true;\n
    \       bool isMiddleMiddle = true;\n        bool isFirstLast = true;\n        bool
    isLastLast = true;\n        bool isMiddleLast = true;\n        bool isFirstMiddleLast
    = true;\n        bool isLastMiddleLast = true;\n        bool isMiddleMiddleLast
    = true;\n        bool isFirstLastLast = true;\n        bool isLastLastLast = true;\n
    \       bool isMiddleLastLast = true;\n        bool isFirstMiddleMiddle = true;\n
    \       bool isLastMiddleMiddle = true;\n        bool isMiddleMiddleMiddle = true;\n
    \       bool isFirstLastMiddle = true;\n        bool isLastLastMiddle = true;\n
    \       bool isMiddleLastMiddle = true;\n        bool isFirstLastLast = true;\n
    \       bool isLastLastLast = true;\n        bool isMiddleLastLast = true;\n        bool
    isFirstMiddleMiddleLast = true;\n        bool isLastMiddleMiddleLast = true;\n
    \       bool isMiddleMiddleMiddleLast = true;\n        bool isFirstLastMiddleLast
    = true;\n        bool isLastLastMiddleLast = true;\n        bool isMiddleLastMiddleLast
    = true;\n        bool isFirstLastLastLast = true;\n        bool isLastLastLastLast
    = true;\n        bool isMiddleLastLastLast = true;\n        bool isFirstMiddleMiddleMiddle
    = true;\n        bool isLastMiddleMiddleMiddle = true;\n        bool isMiddleMiddleMiddleMiddle
    = true;\n        bool isFirstLastMiddleMiddle = true;\n        bool isLastLastMiddleMiddle
    = true;\n        bool isMiddleLastMiddleMiddle = true;\n        bool isFirstLastLastMiddle
    = true;\n        bool isLastLastMiddleMiddle = true;\n        bool isMiddleLastMiddleMiddle
    = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddleMiddle
    = true;\n        bool isMiddleLastMiddleMiddle = true;\n        bool isFirstLastLastMiddle
    = true;\n        bool isLastLastMiddleMiddle = true;\n        bool isMiddleLastMiddleMiddle
    = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddleMiddle
    = true;\n        bool isMiddleLastMiddleMiddle = true;\n        bool isFirstLastLastMiddle
    = true;\n        bool isLastLastMiddleMiddle = true;\n        bool isMiddleLastMiddleMiddle
    = true;\n        bool isFirstLastLastMiddle = true;\n        bool isLastLastMiddleMiddle
    = true;\n        bool isMiddleLastMiddleMiddle = true;\n        bool isFirst\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm539n_1r.cs(84,21): error CS1002: ; expected

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<string>
    words = new List<string>();\n        string word = \"\";\n        foreach (char
    c in chars) {\n            if (char.IsLetterOrDigit(c)) {\n                word
    += c;\n            }\n            if (word.Length == n) {\n                words.Add(word);\n
    \               word = \"\";\n            }\n        }\n        if (word.Length
    > 0) {\n            words.Add(word);\n        }\n        return words;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93e212f507bf475ca1aa145657187c64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93e212f507bf475ca1aa145657187c64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string word2
    = \"\";\n        bool flag = false;\n        foreach (char c in s) {\n            if
    (flag == true) {\n                word += c;\n                if (word.Length
    == n) {\n                    result.Add(word);\n                    word = \"\";\n
    \                   flag = false;\n                }\n            }\n            if
    (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                flag
    = true;\n            }\n            if (c == 'y') {\n                word2 = \"\";\n
    \           }\n        }\n        if (word.Length > 0) {\n            result.Add(word);\n
    \       }\n        if (word2.Length > 0) {\n            result.Add(word2);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e4369c2ba7541d99263e72c2865edbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e4369c2ba7541d99263e72c2865edbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        List<string>
    words = new List<string>();\n        foreach (char c in chars) {\n            if
    (char.IsLetter(c)) {\n                words.Add(c.ToString());\n            }\n
    \       }\n        List<string> wordList = words.Distinct().ToList();\n        List<string>
    resultList = new List<string>();\n        foreach (string word in wordList) {\n
    \           string wordString = word;\n            int count = 0;\n            foreach
    (char c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                resultList.Add(wordString);\n
    \           }\n        }\n        return resultList;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db82970737ab499e934e4849871996ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db82970737ab499e934e4849871996ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       string word = string.Empty;\n        string temp = string.Empty;\n        string
    temp2 = string.Empty;\n        string temp3 = string.Empty;\n        string temp4
    = string.Empty;\n        string temp5 = string.Empty;\n        string temp6 =
    string.Empty;\n        string temp7 = string.Empty;\n        string temp8 = string.Empty;\n
    \       string temp9 = string.Empty;\n        string temp10 = string.Empty;\n
    \       string temp11 = string.Empty;\n        string temp12 = string.Empty;\n
    \       string temp13 = string.Empty;\n        string temp14 = string.Empty;\n
    \       string temp15 = string.Empty;\n        string temp16 = string.Empty;\n
    \       string temp17 = string.Empty;\n        string temp18 = string.Empty;\n
    \       string temp19 = string.Empty;\n        string temp20 = string.Empty;\n
    \       string temp21 = string.Empty;\n        string temp22 = string.Empty;\n
    \       string temp23 = string.Empty;\n        string temp24 = string.Empty;\n
    \       string temp25 = string.Empty;\n        string temp26 = string.Empty;\n
    \       string temp27 = string.Empty;\n        string temp28 = string.Empty;\n
    \       string temp29 = string.Empty;\n        string temp30 = string.Empty;\n
    \       string temp31 = string.Empty;\n        string temp32 = string.Empty;\n
    \       string temp33 = string.Empty;\n        string temp34 = string.Empty;\n
    \       string temp35 = string.Empty;\n        string temp36 = string.Empty;\n
    \       string temp37 = string.Empty;\n        string temp38 = string.Empty;\n
    \       string temp39 = string.Empty;\n        string temp40 = string.Empty;\n
    \       string temp41 = string.Empty;\n        string temp42 = string.Empty;\n
    \       string temp43 = string.Empty;\n        string temp44 = string.Empty;\n
    \       string temp45 = string.Empty;\n        string temp46 = string.Empty;\n
    \       string temp47 = string.Empty;\n        string temp48 = string.Empty;\n
    \       string temp49 = string.Empty;\n        string temp50 = string.Empty;\n
    \       string temp51 = string.Empty;\n        string temp52 = string.Empty;\n
    \       string temp53 = string.Empty;\n        string temp54 = string.Empty;\n
    \       string temp55 = string.Empty;\n        string temp\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpufnekq7d.cs(79,20): error CS1002: ; expected

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       string word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            } else {\n                if (word.Length
    == n) result.Add(word);\n                word = \"\";\n            }\n        }\n
    \       if (word.Length == n) result.Add(word);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c149004934ae4164a613a9ee4daee277>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c149004934ae4164a613a9ee4daee277>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        string word = \"\";\n        bool isConsonant = false;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            } else {\n                isConsonant = true;\n            }\n
    \       }\n        if (isConsonant) {\n            result.Add(word);\n        }\n
    \       long count = 0;\n        foreach (char c in word) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        long start = 0;\n
    \       long end = 0;\n        long index = 0;\n        long count = 0;\n        long
    startIndex = 0;\n        long endIndex = 0;\n        long index2 = 0;\n        long
    count2 = 0;\n        long startIndex2 = 0;\n        long endIndex2 = 0;\n        long
    index3 = 0;\n        long count3 = 0;\n        long startIndex3 = 0;\n        long
    endIndex3 = 0;\n        long index4 = 0;\n        long count4 = 0;\n        long
    startIndex4 = 0;\n        long endIndex4 = 0;\n        long index5 = 0;\n        long
    count5 = 0;\n        long startIndex5 = 0;\n        long endIndex5 = 0;\n        long
    index6 = 0;\n        long count6 = 0;\n        long startIndex6 = 0;\n        long
    endIndex6 = 0;\n        long index7 = 0;\n        long count7 = 0;\n        long
    startIndex7 = 0;\n        long endIndex7 = 0;\n        long index8 = 0;\n        long
    count8 = 0;\n        long startIndex8 = 0;\n        long endIndex8 = 0;\n        long
    index9 = 0;\n        long count9 = 0;\n        long startIndex9 = 0;\n        long
    endIndex9 = 0;\n        long index10 = 0;\n        long count10 = 0;\n        long
    startIndex10 = 0;\n        long endIndex10 = 0;\n        long index11 = 0;\n        long
    count11 = 0;\n        long startIndex11 = 0;\n        long endIndex11 = 0;\n        long
    index12 = 0;\n        long count12 = 0;\n        long startIndex12 = 0;\n        long
    endIndex12 = 0;\n        long index13 = 0;\n        long count13 = 0;\n        long
    startIndex13 = 0;\n        long endIndex13 = 0;\n        long index14 = 0;\n        long
    count14 = 0;\n        long startIndex14 = 0;\n        long endIndex14 = 0;\n        long
    index15 = 0;\n        long count15 = 0;\n        long startIndex15 = 0;\n        long
    endIndex15 = 0;\n        long index16 = 0;\n        long count16 = 0;\n        long
    startIndex16 = 0;\n        long end\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpypd8cdom.cs(108,17): error CS1002: ; expected

    '
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqzi0yqr.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1026: ) expected

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLower(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<char> vowels = new List<char>();\n        foreach
    (char c in chars) {\n            if (char.IsUpper(c)) {\n                vowels.Add(c);\n
    \           }\n        }\n        List<char> consonants_vowels = new List<char>();\n
    \       foreach (char c in consonants) {\n            consonants_vowels.Add(c);\n
    \       }\n        List<char> vowels_consonants = new List<char>();\n        foreach
    (char c in vowels) {\n            vowels_consonants.Add(c);\n        }\n        List<char>
    consonants_and_vowels = new List<char>();\n        foreach (char c in consonants_vowels)
    {\n            consonants_and_vowels.Add(c);\n        }\n        List<char> vowels_and_consonants
    = new List<char>();\n        foreach (char c in vowels_consonants) {\n            vowels_and_consonants.Add(c);\n
    \       }\n        List<char> consonants_and_vowels_and_consonants = new List<char>();\n
    \       foreach (char c in consonants_and_vowels) {\n            consonants_and_vowels_and_consonants.Add(c);\n
    \       }\n        List<char> vowels_and_consonants_and_vowels = new List<char>();\n
    \       foreach (char c in vowels_and_consonants) {\n            vowels_and_consonants_and_vowels.Add(c);\n
    \       }\n        List<char> consonants_and_vowels_and_consonants_and_vowels
    = new List<char>();\n        foreach (char c in consonants_and_vowels_and_vowels)
    {\n            consonants_and_vowels_and_consonants_and_vowels.Add(c);\n        }\n
    \       List<char> vowels_and_consonants_and_vowels_and_consonants_and_vowels
    = new List<char>();\n        foreach (char c in vowels_and_consonants_and_vowels_and_consonants_and_vowels)
    {\n            vowels_and_consonants_and_vowels_and_consonants_and_vowels.Add(c);\n
    \       }\n        List<char> consonants_and_vowels_and_consonants_and_vowels_and_consonants_and_vowels
    = new List<char>();\n        foreach (char c in consonants_and_vowels_and_consonants_and_vowels_and_consonants_and_vowels)
    {\n            consonants_and_vowels_and_consonants_and_\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps2cnn812.cs(73,54): error CS1002: ; expected

    /tmp/tmps2cnn812.cs(75,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmps2cnn812.cs(85,2): error CS1513: } expected

    '
  timestamp: 1659805412
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = s.Substring(0, s.Length - 1);\n        string
    lastWord = s.Substring(s.Length - 1, 1);\n        string lastWord2 = s.Substring(s.Length
    - 2, 1);\n        string lastWord3 = s.Substring(s.Length - 3, 1);\n        string
    lastWord4 = s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length
    - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n        string
    lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 = s.Substring(s.Length
    - 8, 1);\n        string lastWord9 = s.Substring(s.Length - 9, 1);\n        string
    lastWord10 = s.Substring(s.Length - 10, 1);\n        string lastWord11 = s.Substring(s.Length
    - 11, 1);\n        string lastWord12 = s.Substring(s.Length - 12, 1);\n        string
    lastWord13 = s.Substring(s.Length - 13, 1);\n        string lastWord14 = s.Substring(s.Length
    - 14, 1);\n        string lastWord15 = s.Substring(s.Length - 15, 1);\n        string
    lastWord16 = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length
    - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n        string
    lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20 = s.Substring(s.Length
    - 20, 1);\n        string lastWord21 = s.Substring(s.Length - 21, 1);\n        string
    lastWord22 = s.Substring(s.Length - 22, 1);\n        string lastWord23 = s.Substring(s.Length
    - 23, 1);\n        string lastWord24 = s.Substring(s.Length - 24, 1);\n        string
    lastWord25 = s.Substring(s.Length - 25, 1);\n        string lastWord26 = s.Substring(s.Length
    - 26, 1);\n        string lastWord27 = s.Substring(s.Length - 27, 1);\n        string
    lastWord28 = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length
    - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n        string
    lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32 = s.Substring(s.Length
    - 32, 1);\n        string lastWord33 = s.Substring(s.Length - \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqzi0yqr.cs(58,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1026: ) expected

    /tmp/tmpcqzi0yqr.cs(58,51): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = s.Substring(0, s.Length - 1);\n        string lastWord =
    s.Substring(s.Length - 1, 1);\n        bool isConsonant = false;\n        bool
    isLastConsonant = false;\n        bool isLastConsonantLastWord = false;\n        bool
    isLastConsonantLastWordLastWord = false;\n        bool isLastConsonantLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord =
    false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord
    = false;\n        bool isLastConsonant\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ialugm1.cs(49,29): error CS1002: ; expected

    '
  timestamp: 1659805408
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <523ee8fa7a9c4e9a9a5dcd9df133a30a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = string.Empty;\n        bool
    isWord = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                isWord = true;\n                word += c;\n            }\n
    \           if (isWord) {\n                if (n == word.Length) {\n                    result.Add(word);\n
    \                   isWord = false;\n                    word = string.Empty;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1a094e1fee844019722d5b7928e4c84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1a094e1fee844019722d5b7928e4c84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        string word2
    = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n        string
    word5 = \"\";\n        string word6 = \"\";\n        string word7 = \"\";\n        string
    word8 = \"\";\n        string word9 = \"\";\n        string word10 = \"\";\n        string
    word11 = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n
    \       string word14 = \"\";\n        string word15 = \"\";\n        string word16
    = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n        string
    word19 = \"\";\n        string word20 = \"\";\n        string word21 = \"\";\n
    \       string word22 = \"\";\n        string word23 = \"\";\n        string word24
    = \"\";\n        string word25 = \"\";\n        string word26 = \"\";\n        string
    word27 = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n
    \       string word30 = \"\";\n        string word31 = \"\";\n        string word32
    = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n        string
    word35 = \"\";\n        string word36 = \"\";\n        string word37 = \"\";\n
    \       string word38 = \"\";\n        string word39 = \"\";\n        string word40
    = \"\";\n        string word41 = \"\";\n        string word42 = \"\";\n        string
    word43 = \"\";\n        string word44 = \"\";\n        string word45 = \"\";\n
    \       string word46 = \"\";\n        string word47 = \"\";\n        string word48
    = \"\";\n        string word49 = \"\";\n        string word50 = \"\";\n        string
    word51 = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n
    \       string word54 = \"\";\n        string word55 = \"\";\n        string word56
    = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n        string
    word59 = \"\";\n        string word60 = \"\";\n        string word61 = \"\";\n
    \       string word62 = \"\";\n        string word63 = \"\";\n        string word64
    = \"\";\n        string word65 = \"\";\n        string word66 = \"\";\n        string
    word67 = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n
    \       string word70 = \"\";\n        string word71 = \"\";\n        string word72
    = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n        string
    word75 = \"\";\n        string word76 = \"\";\n        string word77 = \"\";\n
    \       string word78 = \"\";\n        string word79 = \"\";\n        string word80
    = \"\";\n        string word81 = \"\";\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwai0wl7x.cs(22,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(23,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(24,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(25,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(26,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(27,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(28,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(29,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(30,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(31,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(32,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(33,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(34,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(35,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(36,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(37,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(38,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(39,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpwai0wl7x.cs(40,'
  timestamp: 1659805410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n            return
    result;\n        char[] chars = s.ToCharArray();\n        HashSet<string> set
    = new HashSet<string>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                string word = s.Substring(0, s.IndexOf(c));\n
    \               if (set.Contains(word))\n                    continue;\n                set.Add(word);\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c49e3150d46d49149203f86eaf9e03a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c49e3150d46d49149203f86eaf9e03a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string
    word = \"\";\n        long count = 0;\n        foreach (char c in chars) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n                count++;\n            }\n
    \           if (count == n) {\n                result.Add(word);\n                word
    = \"\";\n                count = 0;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbd98cca5d8748aa9f52ead69311e729>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbd98cca5d8748aa9f52ead69311e729>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        bool isWord
    = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n                isWord = true;\n            }\n            if
    (isWord) {\n                if (word.Length == n) {\n                    result.Add(word);\n
    \                   word = \"\";\n                    isWord = false;\n                }\n
    \           }\n        }\n        if (word.Length > 0) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8aef677a23b14e14a1b1aab728aefa83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8aef677a23b14e14a1b1aab728aefa83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n
    \       string word = string.Empty;\n        string lastWord = string.Empty;\n
    \       string lastWord2 = string.Empty;\n        bool isFirst = true;\n        foreach
    (char c in s) {\n            if (isFirst) {\n                isFirst = false;\n
    \               word = c.ToString();\n                lastWord = word;\n                lastWord2
    = word;\n                continue;\n            }\n            if (c.ToString()
    == lastWord) {\n                lastWord2 = lastWord;\n                lastWord
    = c.ToString();\n                continue;\n            }\n            if (c.ToString()
    == lastWord2) {\n                lastWord = c.ToString();\n                continue;\n
    \           }\n            if (lastWord.Length == n && lastWord2.Length == n)
    {\n                result.Add(word);\n                word = string.Empty;\n                lastWord
    = string.Empty;\n                lastWord2 = string.Empty;\n                isFirst
    = true;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14fd80c69be74e56a371d282b7fee1cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14fd80c69be74e56a371d282b7fee1cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = string.Empty;\n        bool isConsonant
    = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               isConsonant = true;\n                word += c;\n            }\n
    \           if (isConsonant) {\n                if (word.Length == n) {\n                    result.Add(word);\n
    \                   word = string.Empty;\n                    isConsonant = false;\n
    \               }\n            }\n        }\n        if (word.Length > 0) {\n
    \           result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7702c831ec994b3a9936ddf992b8ea26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7702c831ec994b3a9936ddf992b8ea26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s == \"\") return result;\n        char[]
    chars = s.ToCharArray();\n        int[] count = new int[26];\n        foreach
    (char c in chars) {\n            count[c - 'a']++;\n        }\n        List<string>
    words = new List<string>();\n        for (int i = 0; i < 26; i++) {\n            if
    (count[i] >= n) words.Add(new string(new char[] { 'a', (char)(97 + i) }));\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x00040] in <23b6cd3e2172481dad64297164566328>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <23b6cd3e2172481dad64297164566328>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00040] in
    <23b6cd3e2172481dad64297164566328>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <23b6cd3e2172481dad64297164566328>:0 \n"
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return
    result;\n        }\n        char[] chars = s.ToCharArray();\n        HashSet<string>
    set = new HashSet<string>();\n        foreach (char c in chars) {\n            if
    (char.IsLetterOrDigit(c)) {\n                string word = s.Substring(0, s.IndexOf(c));\n
    \               set.Add(word);\n            }\n        }\n        foreach (string
    word in set) {\n            if (word.Length == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <366b88ea42924c2e9c342b3a6e7da862>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <366b88ea42924c2e9c342b3a6e7da862>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0)\n            return result;\n
    \       string word = \"\";\n        string last = \"\";\n        bool isFirst
    = true;\n        foreach (char c in s) {\n            if (isFirst) {\n                isFirst
    = false;\n                word += c;\n            }\n            else {\n                if
    (c == ' ') {\n                    result.Add(word);\n                    word
    = \"\";\n                }\n                else {\n                    if (word.Length
    == n) {\n                        result.Add(word);\n                        word
    = \"\";\n                    }\n                    else {\n                        word
    += c;\n                    }\n                }\n            }\n        }\n        if
    (word.Length > 0)\n            result.Add(word);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbebb884dd43479da86aba71b3f2e155>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbebb884dd43479da86aba71b3f2e155>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805413
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        if (s.Length == 0) {\n            return
    result;\n        }\n        string word = \"\";\n        string last = \"\";\n
    \       bool isLast = false;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n            } else {\n                if
    (word.Length > 0) {\n                    result.Add(word);\n                    word
    = \"\";\n                }\n                isLast = true;\n            }\n        }\n
    \       if (word.Length > 0) {\n            result.Add(word);\n        }\n        long
    count = 0;\n        foreach (string word in result) {\n            count += word.Count(c
    => char.IsLetter(c));\n        }\n        if (count != n) {\n            return
    result;\n        }\n        long max = 0;\n        foreach (string word in result)
    {\n            max = Math.Max(max, word.Length);\n        }\n        long min
    = 0;\n        foreach (string word in result) {\n            min = Math.Min(min,
    word.Length);\n        }\n        long mid = max / 2;\n        long mid2 = min
    / 2;\n        long mid3 = mid / 3;\n        long mid4 = mid2 / 3;\n        long
    mid5 = mid3 / 3;\n        long mid6 = mid4 / 3;\n        long mid7 = mid5 / 3;\n
    \       long mid8 = mid6 / 3;\n        long mid9 = mid7 / 3;\n        long mid10
    = mid8 / 3;\n        long mid11 = mid9 / 3;\n        long mid12 = mid10 / 3;\n
    \       long mid13 = mid11 / 3;\n        long mid14 = mid12 / 3;\n        long
    mid15 = mid13 / 3;\n        long mid16 = mid14 / 3;\n        long mid17 = mid15
    / 3;\n        long mid18 = mid16 / 3;\n        long mid19 = mid17 / 3;\n        long
    mid20 = mid18 / 3;\n        long mid21 = mid19 / 3;\n        long mid22 = mid20
    / 3;\n        long mid23 = mid21 / 3;\n        long mid24 = mid22 / 3;\n        long
    mid25 = mid23 / 3;\n        long mid26 = mid24 / 3;\n        long mid27 = mid25
    / 3;\n        long mid28 = mid26 / 3;\n        long mid29 = mid27 / 3;\n        long
    mid30 = mid28 / 3;\n        long mid31 = mid29 / 3;\n        long mid32 = mid30
    / 3;\n        long mid33 = mid31 / 3;\n        long mid34 = mid32 / 3;\n        long
    mid35 = mid33 / \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt51scnp3.cs(91,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpt51scnp3.cs(91,29): error CS1002: ; expected

    '
  timestamp: 1659805412
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\",
    4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\",
    \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello
    world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \           if (word.Length == n) {\n                result.Add(word);\n                word
    = \"\";\n            }\n        }\n        if (word.Length > 0) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d722ed285cee425d9af180d3975b98fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d722ed285cee425d9af180d3975b98fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805409
