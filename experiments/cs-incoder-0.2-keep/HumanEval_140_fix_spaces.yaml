name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n\
  \    // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example\
  \ 2\") == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n\
  \    public static string FixSpaces(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        return\
    \ result;", '        return Regex.Replace(text, @"\s+", "_");', "        if (text\
    \ == null)\n            return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int lastSpace2 = result.LastIndexOf(' ');\n            while\
    \ (lastSpace != -1 && lastSpace2 != -1) {\n                if (lastSpace == lastSpace2)\
    \ {\n                    result = result.Replace(result.Substring(lastSpace, 2),\
    \ \"-\");\n                } else {\n                    result = result.Replace(result.Substring(lastSpace,\
    \ 1), \"_\");\n                }\n                lastSpace = result.LastIndexOf('\
    \ ');\n                lastSpace2 = result.LastIndexOf(' ');\n            }\n\
    \        }\n        return result;", "        if (text == null || text.Length\
    \ == 0) return text;\n        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                if (result.Length > 0)\
    \ {\n                    result += \".\";\n                }\n               \
    \ result += c;\n            } else {\n                result += c;\n         \
    \   }\n        }\n        if (result.Length > 2) {\n            string temp =\
    \ result;\n            result = \"\";\n            int i = 0;\n            while\
    \ (i < temp.Length - 1) {\n                if (temp[i] == ' ' && temp[i + 1] ==\
    \ ' ') {\n                    result += temp[i];\n                    i++;\n \
    \               } else {\n                    result += temp[i];\n           \
    \         i++;\n                }\n            }\n        }\n        return result;",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool isFirst =\
    \ true;\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             if (isFirst) {\n                    isFirst = false;\n         \
    \       } else {\n                    sb.Append('_');\n                }\n   \
    \         } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n  \
    \          return text;\n        if (text.Length > 2)\n            return text.Replace(\"\
    \ \", \"_\");\n        if (text.Length > 1)\n            return text.Replace(\"\
    \ \", \"-\");\n        return text;", "        if (text == null || text.Length\
    \ <= 2)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        string result = \"\";\n   \
    \     foreach (char c in text) {\n            if (c == ' ') {\n              \
    \  result += \"_\";\n            } else {\n                result += c;\n    \
    \        }\n        }\n        if (result.Length > 2) {\n            string temp\
    \ = result;\n            result = \"\";\n            int i = 0;\n            while\
    \ (i < temp.Length) {\n                if (temp[i] == ' ') {\n               \
    \     result += temp[i];\n                    i++;\n                } else {\n\
    \                    result += temp[i];\n                    i = i + 1;\n    \
    \            }\n            }\n        }\n        return result;", "        if\
    \ (text == null || text.Length == 0) return text;\n        string result = \"\"\
    ;\n        bool isSpace = false;\n        foreach (char c in text) {\n       \
    \     if (c == ' ') {\n                isSpace = true;\n            } else if\
    \ (isSpace) {\n                result += \"_\";\n                isSpace = false;\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2 && result.Substring(result.Length - 2, 2) == \"\
    ___\") {\n            result = result.Substring(0, result.Length - 2);\n     \
    \   }\n        return result;", "        string fixedText = text.Replace(\" \"\
    , \"_\");\n        if (fixedText.Contains(\" \"))\n        {\n            fixedText\
    \ = fixedText.Replace(\" \", \"-\");\n        }\n        return fixedText;", " \
    \       if (text == null)\n            return null;\n        StringBuilder sb\
    \ = new StringBuilder(text.Length);\n        bool wasSpace = false;\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n   \
    \             if (!wasSpace) {\n                    sb.Append('_');\n        \
    \            wasSpace = true;\n                }\n            } else {\n     \
    \           wasSpace = false;\n            }\n            sb.Append(text[i]);\n\
    \        }\n        return sb.ToString();", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            string\
    \ temp = result;\n            result = \"\";\n            int i = 0;\n       \
    \     while (i < temp.Length) {\n                if (temp[i] == ' ') {\n     \
    \               result += temp[i];\n                    i++;\n               \
    \ } else {\n                    result += temp[i];\n                    i = i\
    \ + 1;\n                }\n            }\n        }\n        return result;",
  "        if (text == null || text.Length <= 0) {\n            return text;\n   \
    \     }\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ space = false;\n        for (int i = 0; i < text.Length; i++) {\n          \
    \  if (text[i] == ' ') {\n                if (space) {\n                    sb.Append('-');\n\
    \                    space = false;\n                } else {\n              \
    \      space = true;\n                }\n            } else {\n              \
    \  space = false;\n            }\n            sb.Append(text[i]);\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == '_' && result[i + 1] == '_') {\n                    result += result.Substring(i\
    \ + 1, 2);\n                    i += 2;\n                } else {\n          \
    \          result += result.Substring(i + 1, 1);\n                    i += 1;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += \"_\";\n            } else {\n     \
    \           result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2]\
    \ == ' ') {\n                    result += \"-\";\n                    i += 2;\n\
    \                } else {\n                    i++;\n                }\n     \
    \       }\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1);\n            if (lastSpace\
    \ == \" \") {\n                result = result.Substring(0, result.Length - 1);\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        return result;", "        if (text == null)\n\
    \            return null;\n        StringBuilder sb = new StringBuilder();\n \
    \       bool space = false;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (!space) {\n                    space = true;\n\
    \                    sb.Append('_');\n                } else {\n             \
    \       space = false;\n                    sb.Append('-');\n                }\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += result.Substring(i + 1, 2);\n\
    \                    i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ temp = result;\n            result = \"\";\n            int i = 0;\n       \
    \     while (i < temp.Length - 1) {\n                if (temp[i] == ' ' && temp[i\
    \ + 1] == ' ') {\n                    result += temp[i];\n                   \
    \ i++;\n                } else if (temp[i] == ' ') {\n                    result\
    \ += temp[i];\n                    i++;\n                } else {\n          \
    \          result += temp[i];\n                    i++;\n                }\n \
    \           }\n        }\n        return result;", "        if (text == null)\n\
    \            return null;\n        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ')\n                result += \"_\";\n\
    \            else\n                result += c;\n        }\n        if (result.Length\
    \ > 2)\n            return result.Replace(\" \", \"-\");\n        else\n     \
    \       return result;", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            }\n            else if (c != ' ' && c != '\\t' && c != '\\n' && c\
    \ != '\\r' && c != '\\f') {\n                result += c;\n            }\n   \
    \     }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                    result += \"-\"\
    ;\n                    i += 2;\n                } else {\n                   \
    \ i++;\n                }\n            }\n        }\n        return result;",
  "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces\n      \
    \  if (text.Contains(\" \") && (text.IndexOf(\" \") + 1).Equals(text.Length))\
    \ {\n            // Replace all consecutive spaces with -\n            text =\
    \ text.Replace(\" \", \"-\");\n        }\n        return text;", "        if (text\
    \ == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool isSpace = false;\n      \
    \  foreach (char c in text) {\n            if (c == ' ') {\n                isSpace\
    \ = true;\n                sb.Append('_');\n            } else {\n           \
    \     isSpace = false;\n                sb.Append(c);\n            }\n       \
    \ }\n        if (sb.ToString().Length > 2)\n            return sb.ToString().Replace(\"\
    \ \", \"-\");\n        return sb.ToString();", "        if (text == null)\n  \
    \          return null;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool space = false;\n        bool consecutive = false;\n        for (int\
    \ i = 0; i < sb.Length; i++) {\n            char c = sb[i];\n            if (c\
    \ == ' ') {\n                if (!space) {\n                    space = true;\n\
    \                } else {\n                    space = false;\n              \
    \      consecutive = true;\n                }\n            } else {\n        \
    \        if (space) {\n                    consecutive = false;\n            \
    \    }\n            }\n            if (consecutive) {\n                sb.Replace(\"\
    \ \", \"-\");\n            }\n        }\n        return sb.ToString();", "   \
    \     if (text == null || text.Length == 0)\n            return text;\n      \
    \  StringBuilder sb = new StringBuilder(text);\n        bool space = false;\n\
    \        for (int i = 0; i < sb.Length; i++) {\n            if (space) {\n   \
    \             sb.Replace(\" \", \"-\");\n                space = false;\n    \
    \        }\n            if (sb[i] == '_') {\n                space = true;\n \
    \           }\n        }\n        return sb.ToString();", "        if (text ==\
    \ null) return null;\n        var sb = new StringBuilder(text.Length);\n     \
    \   foreach (char c in text) {\n            if (c == ' ') {\n                sb.Append('_');\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null || text.Length < 2)\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool wasSpace = false;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            char c = text[i];\n            if (c == ' ') {\n            \
    \    wasSpace = true;\n                sb.Append('_');\n            } else {\n\
    \                wasSpace = false;\n                sb.Append(c);\n          \
    \  }\n        }\n        if (wasSpace)\n            sb.Remove(sb.Length - 1, 1);\n\
    \        return sb.ToString();", "        if (text == null) return null;\n   \
    \     StringBuilder sb = new StringBuilder(text.Length);\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                sb.Append('_');\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool wasSpace = false;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            char c = text[i];\n            if (c == ' ') {\n            \
    \    wasSpace = true;\n                sb.Append('_');\n            } else if\
    \ (wasSpace) {\n                sb.Append(c);\n                wasSpace = false;\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null)\n            return\
    \ null;\n        StringBuilder sb = new StringBuilder(text.Length);\n        foreach\
    \ (char c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += result.Substring(i + 1, 2);\n                    i += 2;\n\
    \                } else {\n                    result += result.Substring(i +\
    \ 1, 1);\n                    i++;\n                }\n            }\n       \
    \ }\n        return result;", "        if (string.IsNullOrEmpty(text))\n     \
    \       return text;\n        StringBuilder sb = new StringBuilder(text);\n  \
    \      bool space = false;\n        for (int i = 0; i < sb.Length; i++) {\n  \
    \          if (space) {\n                sb.Replace(\" \", \"-\");\n         \
    \       space = false;\n            }\n            if (sb[i] == ' ')\n       \
    \         space = true;\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int lastSpace = result.LastIndexOf(' ');\n            int firstSpace = result.IndexOf('\
    \ ');\n            string firstSpaceString = result.Substring(0, firstSpace);\n\
    \            string lastSpaceString = result.Substring(lastSpace + 1);\n     \
    \       result = firstSpaceString + \"_\" + lastSpaceString;\n        }\n    \
    \    return result;", '        return Regex.Replace(text, @"\s+", "_");', "  \
    \      // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && (text.IndexOf(\" \") == text.LastIndexOf(\" \") + 1)) {\n            text\
    \ = text.Replace(\" \", \"-\");\n        }\n\n        return text;", "       \
    \ if (text == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool inSpace = false;\n      \
    \  for (int i = 0; i < text.Length; i++) {\n            char c = text[i];\n  \
    \          if (c == ' ') {\n                if (inSpace) {\n                 \
    \   inSpace = false;\n                    sb.Append('_');\n                } else\
    \ {\n                    inSpace = true;\n                    sb.Append(c);\n\
    \                }\n            } else {\n                inSpace = false;\n \
    \               sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string temp = result;\n            result = \"\";\n    \
    \        int i = 0;\n            while (i < temp.Length - 1) {\n             \
    \   if (temp[i] == ' ' && temp[i + 1] == ' ') {\n                    result +=\
    \ temp[i];\n                    i++;\n                } else {\n             \
    \       result += temp[i];\n                }\n                i++;\n        \
    \    }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        if (text == null) return null;\n        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               if (result.Length > 0) {\n                    result += \"_\"\
    ;\n                }\n            } else {\n                result += c;\n   \
    \         }\n        }\n        if (result.Length > 2) {\n            int lastSpace\
    \ = result.LastIndexOf(' ');\n            int lastSpace2 = result.LastIndexOf('\
    \ ');\n            if (lastSpace == lastSpace2) {\n                result = result.Replace(\"\
    \ \", \"-\");\n            }\n        }\n        return result;", "        if\
    \ (text == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool spaceFound = false;\n        bool\
    \ consecutiveSpaceFound = false;\n        for (int i = 0; i < sb.Length; i++)\
    \ {\n            if (sb[i] == ' ') {\n                if (!spaceFound) {\n   \
    \                 spaceFound = true;\n                } else {\n             \
    \       consecutiveSpaceFound = true;\n                }\n            } else {\n\
    \                if (spaceFound) {\n                    spaceFound = false;\n\
    \                    if (consecutiveSpaceFound) {\n                        sb.Replace('\
    \ ', '-');\n                        consecutiveSpaceFound = false;\n         \
    \           }\n                }\n            }\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool space = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                if (space) {\n                    sb.Append('-');\n  \
    \                  space = false;\n                } else {\n                \
    \    sb.Append('_');\n                    space = true;\n                }\n \
    \           } else {\n                sb.Append(text[i]);\n            }\n   \
    \     }\n        return sb.ToString();", "        if (text == null) return null;\n\
    \        string result = \"\";\n        foreach (char c in text) {\n         \
    \   if (c == ' ') {\n                result += \"_\";\n            } else {\n\
    \                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += result.Substring(i + 1, 3);\n                    i += 2;\n\
    \                } else {\n                    result += result.Substring(i +\
    \ 1, result.Length - i);\n                    i += 1;\n                }\n   \
    \         }\n        }\n        return result;", "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ temp = result;\n            result = \"\";\n            for (int i = 0; i <\
    \ temp.Length - 2; i++) {\n                if (temp[i] == ' ' && temp[i + 1] ==\
    \ ' ' && temp[i + 2] == ' ') {\n                    result += \"-\";\n       \
    \         } else {\n                    result += temp[i];\n                }\n\
    \            }\n        }\n        return result;", "        if (text == null\
    \ || text.Length <= 2)\n            return text;\n        StringBuilder sb = new\
    \ StringBuilder(text.Length);\n        bool space = false;\n        for (int i\
    \ = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n          \
    \      if (!space) {\n                    space = true;\n                    sb.Append('_');\n\
    \                } else {\n                    space = false;\n              \
    \      sb.Append('-');\n                }\n            } else {\n            \
    \    sb.Append(text[i]);\n            }\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length < 2)\n            return text;\n      \
    \  StringBuilder sb = new StringBuilder(text.Length);\n        bool wasSpace =\
    \ false;\n        for (int i = 0; i < text.Length; i++) {\n            char c\
    \ = text[i];\n            if (c == ' ') {\n                wasSpace = true;\n\
    \                sb.Append('_');\n            } else {\n                if (wasSpace)\
    \ {\n                    sb.Append(c);\n                    wasSpace = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            }\n        }\n        return sb.ToString();", "        if (text\
    \ == null)\n            return null;\n        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ')\n                result += \"\
    _\";\n            else\n                result += c;\n        }\n        if (result.Length\
    \ > 2)\n            return result.Replace(\" \", \"-\");\n        else\n     \
    \       return result;", "        if (text == null || text.Length < 2)\n     \
    \       return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                space = true;\n          \
    \      sb.Append('_');\n            } else {\n                space = false;\n\
    \                sb.Append(text[i]);\n            }\n        }\n        if (space)\n\
    \            sb.Append('_');\n        return sb.ToString();", "        if (text\
    \ == null || text.Length <= 0) return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool wasSpace = false;\n        foreach (char c in text) {\n        \
    \    if (c == ' ') {\n                if (!wasSpace) {\n                    sb.Append('_');\n\
    \                    wasSpace = true;\n                } else {\n            \
    \        sb.Append('-');\n                    wasSpace = false;\n            \
    \    }\n            } else {\n                sb.Append(c);\n                wasSpace\
    \ = false;\n            }\n        }\n        return sb.ToString();", "      \
    \  string result = \"\";\n        foreach (char c in text) {\n            if (c\
    \ == ' ') {\n                result += \"_\";\n            } else {\n        \
    \        result += c;\n            }\n        }\n        if (result.Length > 2)\
    \ {\n            result = result.Replace(\" \", \"-\");\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1);\n\
    \            string nextSpace = result.Substring(0, result.Length - 1);\n    \
    \        if (lastSpace == nextSpace) {\n                result += \"-\";\n   \
    \         }\n        }\n        return result;", "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == '_' && result[i + 1] == '_') {\n                    result += result.Substring(i\
    \ + 1, 2);\n                    i += 2;\n                } else {\n          \
    \          result += result.Substring(i + 1, 1);\n                    i++;\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  string result = \"\";\n        foreach (char c in text) {\n            if (c\
    \ == ' ') {\n                result += '_';\n            } else {\n          \
    \      result += c;\n            }\n        }\n        if (result.Length > 2)\
    \ {\n            string temp = result;\n            result = \"\";\n         \
    \   int i = 0;\n            while (i < temp.Length) {\n                if (temp[i]\
    \ == ' ') {\n                    result += temp[i];\n                    i++;\n\
    \                } else {\n                    result += temp[i];\n          \
    \          i = i + 1;\n                }\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1, 1);\n\
    \            if (lastSpace == \" \") {\n                result = result.Substring(0,\
    \ result.Length - 1);\n            }\n        }\n        return result;", "  \
    \      if (text == null)\n            return null;\n        StringBuilder sb =\
    \ new StringBuilder(text.Length);\n        bool space = false;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n        \
    \        space = true;\n                sb.Append('_');\n            } else {\n\
    \                if (space)\n                    sb.Append('-');\n           \
    \     space = false;\n                sb.Append(text[i]);\n            }\n   \
    \     }\n        return sb.ToString();", "        string result = \"\";\n    \
    \    foreach (char c in text) {\n            if (c == ' ') {\n               \
    \ result += \"_\";\n            } else {\n                result += c;\n     \
    \       }\n        }\n        if (result.Length > 2) {\n            string temp\
    \ = result;\n            result = \"\";\n            int count = 0;\n        \
    \    while (temp.Length > 0) {\n                if (temp[0] == ' ') {\n      \
    \              count++;\n                } else {\n                    if (count\
    \ == 2) {\n                        result += temp[0];\n                      \
    \  count = 0;\n                    } else {\n                        result +=\
    \ temp[0];\n                        count = 0;\n                    }\n      \
    \          }\n                temp = temp.Substring(1);\n            }\n     \
    \   }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string temp = result;\n\
    \            result = \"\";\n            int i = 0;\n            while (i < temp.Length\
    \ - 1) {\n                if (temp[i] == ' ' && temp[i + 1] == ' ') {\n      \
    \              result += temp[i];\n                    i += 2;\n             \
    \   } else {\n                    result += temp[i];\n                    i++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += \"_\";\n            } else {\n     \
    \           result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string temp = result;\n            result = \"\";\n    \
    \        int i = 0;\n            while (i < temp.Length - 2) {\n             \
    \   if (temp[i] == ' ' && temp[i + 1] == ' ' && temp[i + 2] == ' ') {\n      \
    \              result += temp[i];\n                    i += 2;\n             \
    \   } else {\n                    result += temp[i];\n                    i++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (text == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool space = false;\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n   \
    \             space = true;\n                sb.Append('_');\n            } else\
    \ {\n                space = false;\n                sb.Append(text[i]);\n   \
    \         }\n        }\n        if (space)\n            sb.Append('_');\n    \
    \    return sb.ToString();", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == '_' && result[i + 1]\
    \ == '_') {\n                    result += result.Substring(i + 1, 2);\n     \
    \               i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        if (text == null\
    \ || text.Length <= 1) {\n            return text;\n        }\n        string\
    \ result = \"\";\n        bool first = true;\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                if (!first) {\n            \
    \        result += \"_\";\n                } else {\n                    result\
    \ += c;\n                }\n                first = false;\n            } else\
    \ {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string last2 = result.Substring(result.Length - 2);\n  \
    \          string last3 = result.Substring(result.Length - 3);\n            if\
    \ (last2.Equals(last3)) {\n                result += \"-\";\n            }\n \
    \       }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += result.Substring(i + 1, 2);\n\
    \                    i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == '_' && result[i + 1] == '_') {\n                    result += result.Substring(i\
    \ + 1, 2);\n                    i += 2;\n                } else {\n          \
    \          result += result.Substring(i + 1, 1);\n                    i += 1;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (text == null || text.Length == 0)\n            return text;\n        var\
    \ sb = new StringBuilder();\n        bool space = false;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                space = true;\n \
    \           }\n            else {\n                if (space) {\n            \
    \        sb.Append('_');\n                    space = false;\n               \
    \ }\n                else {\n                    sb.Append(c);\n             \
    \   }\n            }\n        }\n        return sb.ToString();", "        string\
    \ fixedText = text.Replace(\" \", \"_\");\n        if (fixedText.Contains(\" \"\
    ))\n        {\n            fixedText = fixedText.Replace(\" \", \"-\");\n    \
    \    }\n        return fixedText;", "        if (text == null)\n            return\
    \ null;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ inSpace = false;\n        bool inDoubleSpace = false;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (inSpace) {\n\
    \                    inDoubleSpace = true;\n                } else {\n       \
    \             inSpace = true;\n                }\n            } else {\n     \
    \           if (inDoubleSpace) {\n                    inDoubleSpace = false;\n\
    \                    sb.Append('-');\n                } else {\n             \
    \       sb.Append(c);\n                }\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += '_';\n     \
    \       } else {\n                result += c;\n            }\n        }\n   \
    \     if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int lastSpace2 = result.LastIndexOf(' ');\n            if (lastSpace\
    \ == lastSpace2) {\n                result = result.Substring(0, lastSpace) +\
    \ \"-\" + result.Substring(lastSpace + 1);\n            } else {\n           \
    \     result = result.Replace(\" \", \"-\");\n            }\n        }\n     \
    \   return result;", "        if (text == null || text.Length == 0)\n        \
    \    return text;\n        StringBuilder sb = new StringBuilder(text);\n     \
    \   bool consecutiveSpace = false;\n        for (int i = 0; i < sb.Length; i++)\
    \ {\n            if (sb[i] == ' ') {\n                if (consecutiveSpace) {\n\
    \                    sb.Replace(sb[i], \"_\");\n                    consecutiveSpace\
    \ = false;\n                } else {\n                    consecutiveSpace = true;\n\
    \                }\n            } else {\n                consecutiveSpace = false;\n\
    \            }\n        }\n        return sb.ToString();", "        if (text ==\
    \ null || text.Length <= 2)\n            return text;\n        StringBuilder sb\
    \ = new StringBuilder(text.Length);\n        bool first = true;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                if (!first)\n\
    \                    sb.Append('_');\n                first = false;\n       \
    \     } else {\n                sb.Append(c);\n            }\n        }\n    \
    \    return sb.ToString();", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (!first)\n                    sb.Append('_');\n\
    \                first = false;\n            }\n            else {\n         \
    \       sb.Append(c);\n            }\n        }\n        if (sb.Length > 2)\n\
    \            sb.Replace(' ', '_');\n        return sb.ToString();", "        //\
    \ Replace all spaces with underscores\n        text = text.Replace(\" \", \"_\"\
    );\n        // If there are more than 2 consecutive spaces, \n        // then\
    \ replace all consecutive spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\"\
    \ \") + 1).Equals(text.Length)) {\n            text = text.Replace(\" \", \"-\"\
    );\n        }\n        return text;", '        return Regex.Replace(text, @"\s+",
    "_");', "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool inSpace = false;\n      \
    \  foreach (char c in text) {\n            if (c == ' ') {\n                if\
    \ (!inSpace) {\n                    inSpace = true;\n                    sb.Append('_');\n\
    \                }\n            } else {\n                inSpace = false;\n \
    \               sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += \" \";\n                } else {\n                    result\
    \ += \"-\";\n                }\n                i += 2;\n            }\n     \
    \   }\n        return result;", "        if (string.IsNullOrEmpty(text))\n   \
    \         return text;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool space = false;\n        bool consecutive = false;\n        for (int\
    \ i = 0; i < sb.Length; i++) {\n            char c = sb[i];\n            if (c\
    \ == ' ') {\n                space = true;\n            } else if (c == ' ' &&\
    \ space) {\n                space = false;\n                consecutive = true;\n\
    \            } else if (c == ' ' && !space) {\n                consecutive = false;\n\
    \            }\n            if (space && consecutive) {\n                sb.Replace(\"\
    \ \", \"-\");\n                space = false;\n                consecutive = false;\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string temp = result;\n            result = \"\";\n            int i = 0;\n\
    \            while (i < temp.Length - 1) {\n                if (temp[i] == ' '\
    \ && temp[i + 1] == ' ') {\n                    result += temp[i];\n         \
    \           i += 2;\n                } else {\n                    result += temp[i];\n\
    \                    i++;\n                }\n            }\n        }\n     \
    \   return result;", "        // Replace all spaces with underscores\n       \
    \ text = text.Replace(\" \", \"_\");\n        // If text has more than 2 consecutive\
    \ spaces, replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \") + 1) < text.Length) {\n            text = text.Replace(\"\
    \ \", \"-\");\n        }\n        return text;", "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int count\
    \ = 0;\n            int start = 0;\n            int end = 0;\n            while\
    \ (end < result.Length) {\n                if (result[end] == ' ') {\n       \
    \             count++;\n                } else {\n                    count =\
    \ 0;\n                }\n                if (count > 2) {\n                  \
    \  while (end < result.Length && result[end] == ' ') {\n                     \
    \   end++;\n                    }\n                    while (start < end && result[start]\
    \ == ' ') {\n                        start++;\n                    }\n       \
    \             while (end < result.Length && result[end] == ' ') {\n          \
    \              end++;\n                    }\n                    while (start\
    \ < end && result[start] == ' ') {\n                        start++;\n       \
    \             }\n                    while (end < result.Length && result[end]\
    \ == ' ') {\n                        end++;\n                    }\n         \
    \           while (start < end && result[start] == ' ') {\n                  \
    \      start++;\n                    }\n                    while (end < result.Length\
    \ && result[end] == ' ') {\n                        end++;\n                 \
    \   }\n                    while (start < end && result[start] == ' ') {\n   \
    \                     start++;\n                    }\n                    while\
    \ (end < result.Length && result[end] == ' ') {\n                        end++;\n\
    \                    }\n                    while (start < end && result[start]\
    \ == ' ') {\n                        start++;\n                    }\n       \
    \             while (end < result.Length && result[end] == ' ') {\n          \
    \              end++;\n                    }\n                    while (start\
    \ < end && result[start] == ' ') {\n                        start++;\n       \
    \             }\n                    while (end < result.Length && result[end]\
    \ == ' ') {\n                        end++;\n                    }\n         \
    \           while (start < end && result[start] == ' ') {\n                  \
    \      start++;\n                    }\n                    while (end < result.Length\
    \ && result[end] == ' ') {\n                        end++;\n                 \
    \   }\n                    while (start < end && result[start] == ' ') {\n   \
    \                     start++;\n                    }\n                    while\
    \ (end < result.Length && result[end] == ' ') {\n                        end++;\n\
    \                    }\n                    while (start < end && result[start]\
    \ == ' ') {\n                        start++;\n                    }\n       \
    \             while (end < result.Length && result[end] == ' ') {\n          \
    \              end++;\n                    }\n                    while (start\
    \ < end && result[start] == ' ') {\n                        start++;\n       \
    \             }\n                    while (end < result.Length && result[end]\
    \ == ' ') {\n                        end++;\n                    }\n         \
    \           while (start < end && result[start] == ' ') {\n                  \
    \      start++;\n                    }\n                    while (end < result.Length\
    \ && result[end] == ' ') {\n                        end++;\n                 \
    \   }\n                    while (", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string temp = result;\n\
    \            result = \"\";\n            for (int i = 0; i < temp.Length - 2;\
    \ i++) {\n                if (temp[i] == ' ' && temp[i + 1] == ' ' && temp[i +\
    \ 2] == ' ') {\n                    result += \"-\";\n                } else {\n\
    \                    result += temp[i];\n                }\n            }\n  \
    \      }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1);\n            if (lastSpace == \" \") {\n                result = result.Substring(0,\
    \ result.Length - 1);\n            }\n        }\n        return result;", '        return
    text.Replace(" ", "_").Replace("  ", "_");', "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1);\n            string nextSpace\
    \ = result.Substring(0, result.Length - 1);\n            while (lastSpace == nextSpace)\
    \ {\n                result += \"-\";\n                nextSpace = result.Substring(0,\
    \ result.Length - 1);\n            }\n        }\n        return result;", "  \
    \      if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool space = false;\n        bool consecutive\
    \ = false;\n        foreach (char c in text) {\n            if (c == ' ') {\n\
    \                space = true;\n            } else if (space) {\n            \
    \    space = false;\n                sb.Append('_');\n            } else if (c\
    \ == ' ' && consecutive) {\n                sb.Append('-');\n                consecutive\
    \ = false;\n            } else {\n                sb.Append(c);\n            \
    \    consecutive = true;\n            }\n        }\n        return sb.ToString();",
  "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces\n      \
    \  if (text.Contains(\" \") && (text.IndexOf(\" \") + 1).Equals(text.Length))\
    \ {\n            // Replace all consecutive spaces with -\n            text =\
    \ text.Replace(\" \", \"-\");\n        }\n        return text;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ += \"-\";\n                    i += 2;\n                } else {\n         \
    \           i++;\n                }\n            }\n        }\n        return\
    \ result;", '        return Regex.Replace(text, @"\s+", "_");', "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastSpace = result.Substring(result.Length - 1, 1);\n            if\
    \ (lastSpace == \" \") {\n                result = result.Substring(0, result.Length\
    \ - 1);\n            }\n        }\n        return result;", "        if (text\
    \ == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool isSpace = false;\n      \
    \  foreach (char c in text) {\n            if (c == ' ') {\n                isSpace\
    \ = true;\n                sb.Append('_');\n            } else {\n           \
    \     isSpace = false;\n                sb.Append(c);\n            }\n       \
    \ }\n        if (sb.ToString().Contains(\"_\"))\n            sb.Replace(\"_\"\
    , \"-\");\n        return sb.ToString();", "        // Replace all spaces with\
    \ underscores\n        text = text.Replace(\" \", \"_\");\n        // If text\
    \ has more than 2 consecutive spaces, \n        // then replace all consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \") + 1\
    \ == text.Length)) {\n            text = text.Replace(\" \", \"-\");\n       \
    \ }\n        return text;", "        if (text == null || text.Length <= 2)\n \
    \           return text;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                space = true;\n          \
    \      continue;\n            }\n            if (space) {\n                sb.Append('_');\n\
    \                space = false;\n            }\n            sb.Append(text[i]);\n\
    \        }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0) return text;\n        string result = text;\n        string spaces = \"\
    _\";\n        int spaces_count = text.Count(c => c == ' ');\n        if (spaces_count\
    \ > 2) {\n            spaces = \"-\";\n            spaces_count = text.Count(c\
    \ => c == ' ');\n        }\n        for (int i = 0; i < spaces_count; i++) {\n\
    \            result = result.Replace(\" \", spaces);\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0)\n            return\
    \ text;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ inSpace = false;\n        for (int i = 0; i < text.Length; i++) {\n        \
    \    if (text[i] == ' ') {\n                if (inSpace) {\n                 \
    \   inSpace = false;\n                    sb.Append('_');\n                } else\
    \ {\n                    inSpace = true;\n                    sb.Append('_');\n\
    \                }\n            } else {\n                inSpace = false;\n \
    \               sb.Append(text[i]);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            string nextSpace = result.Substring(0, result.Length -\
    \ 1);\n            if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", "        if (text\
    \ == null)\n            return null;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool space = false;\n        bool consecutive = false;\n        foreach\
    \ (char c in sb) {\n            if (c == ' ') {\n                if (!space) {\n\
    \                    space = true;\n                } else {\n               \
    \     space = false;\n                    consecutive = true;\n              \
    \  }\n            } else {\n                if (space) {\n                   \
    \ space = false;\n                    consecutive = false;\n                }\n\
    \                sb.Replace(c.ToString(), \"_\");\n            }\n        }\n\
    \        if (consecutive) {\n            sb.Replace(\" \", \"_\");\n        }\n\
    \        return sb.ToString();", "        if (text == null) return null;\n   \
    \     StringBuilder sb = new StringBuilder(text.Length);\n        bool inSpace\
    \ = false;\n        foreach (char c in text) {\n            if (c == ' ') {\n\
    \                if (inSpace) {\n                    inSpace = false;\n      \
    \              sb.Append('_');\n                } else {\n                   \
    \ inSpace = true;\n                    sb.Append(c);\n                }\n    \
    \        } else {\n                inSpace = false;\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        if (text\
    \ == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool spaceFound = false;\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n   \
    \             spaceFound = true;\n                sb.Replace(\" \", \"_\");\n\
    \            }\n            else if (spaceFound) {\n                sb.Replace(\"\
    \ \", \"-\");\n                spaceFound = false;\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null)\n            return\
    \ null;\n        string result = \"\";\n        foreach (char c in text) {\n \
    \           if (c == ' ') {\n                result += c;\n            }\n   \
    \         else {\n                result += c.ToString().Replace(' ', '_');\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == '_' && result[i + 1] == '_') {\n                    result = result.Remove(i,\
    \ 2);\n                }\n                else {\n                    i++;\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  if (text == null) return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     sb.Append('_');\n            } else {\n                sb.Append(c);\n \
    \           }\n        }\n        return sb.ToString();", "        string fixedText\
    \ = text.Replace(\" \", \"_\");\n        if (fixedText.Contains(\" \"))\n    \
    \    {\n            fixedText = fixedText.Replace(\" \", \"-\");\n        }\n\
    \        return fixedText;", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        var sb = new StringBuilder();\n        foreach\
    \ (var c in text) {\n            if (c == ' ') {\n                if (sb.Length\
    \ > 0) {\n                    sb.Append('_');\n                }\n           \
    \ } else {\n                sb.Append(c);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += '_';\n     \
    \       } else {\n                result += c;\n            }\n        }\n   \
    \     if (result.Length > 2) {\n            string temp = result;\n          \
    \  result = \"\";\n            for (int i = 0; i < temp.Length - 2; i++) {\n \
    \               result += temp[i] + '-';\n            }\n        }\n        return\
    \ result;", "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        foreach (char c in text) {\n \
    \           if (c == ' ')\n                sb.Append('_');\n            else\n\
    \                sb.Append(c);\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                result += c.ToString();\n            } else\
    \ {\n                result += c.ToString() + \"_\";\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == '_' && result[i + 1]\
    \ == '_') {\n                    result += result.Substring(i + 1, 2);\n     \
    \               i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, result.Length - i - 1);\n                    i +=\
    \ 1;\n                }\n            }\n        }\n        return result;", " \
    \       if (text == null)\n            return null;\n        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ')\n         \
    \       result += \"_\";\n            else\n                result += c;\n   \
    \     }\n        if (result.Length > 2)\n            return result.Replace(\"\
    \ \", \"-\");\n        else\n            return result;", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ += \"-\";\n                    i += 2;\n                } else {\n         \
    \           i++;\n                }\n            }\n        }\n        return\
    \ result;", "        if (text == null) return null;\n        StringBuilder sb\
    \ = new StringBuilder(text.Length);\n        foreach (char c in text) {\n    \
    \        if (c == ' ') {\n                sb.Append('_');\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2]\
    \ == ' ') {\n                    result += \"-\";\n                    i += 2;\n\
    \                } else {\n                    i++;\n                }\n     \
    \       }\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1, 1);\n            string nextSpace\
    \ = result.Substring(result.Length - 2, 1);\n            if (lastSpace == nextSpace)\
    \ {\n                result = result.Substring(0, result.Length - 1);\n      \
    \      }\n        }\n        return result;", "        // Replace all spaces with\
    \ underscores\n        text = text.Replace(\" \", \"_\");\n        // If there\
    \ are more than 2 consecutive spaces\n        if (text.Contains(\" \") && (text.IndexOf(\"\
    \ \") + 1).Equals(text.LastIndexOf(\" \")))\n        {\n            // Replace\
    \ all consecutive spaces with -\n            text = text.Replace(\" \", \"-\"\
    );\n        }\n        return text;", "        if (text == null || text.Length\
    \ < 2)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool space = false;\n        bool consecutive = false;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                if (!space)\
    \ {\n                    space = true;\n                    sb.Append('_');\n\
    \                } else {\n                    space = false;\n              \
    \      sb.Append('-');\n                }\n            } else {\n            \
    \    space = false;\n                sb.Append(c);\n            }\n        }\n\
    \        if (consecutive) {\n            int i = 0;\n            while (i < sb.Length)\
    \ {\n                if (sb[i] == '-') {\n                    sb.Remove(i, 1);\n\
    \                    sb.Insert(i, ' ');\n                    i++;\n          \
    \      } else {\n                    i++;\n                }\n            }\n\
    \        }\n        return sb.ToString();", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            int i =\
    \ 0;\n            int j = 0;\n            while (i < result.Length - 2) {\n  \
    \              if (result[i] == '_' && result[i + 1] == '_') {\n             \
    \       result += \" \";\n                    i += 2;\n                } else\
    \ {\n                    result += result[i];\n                    i++;\n    \
    \            }\n            }\n        }\n        return result;", '        return
    text.Replace(" ", "_").Replace(" ", "-");', "        string fixedText = text.Replace(\"\
    \ \", \"_\");\n        if (fixedText.Contains(\" \"))\n        {\n           \
    \ fixedText = fixedText.Replace(\" \", \"-\");\n        }\n        return fixedText;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2]\
    \ == ' ') {\n                    result += \"-\";\n                    i += 2;\n\
    \                } else {\n                    result += result[i];\n        \
    \            i++;\n                }\n            }\n        }\n        return\
    \ result;", '        return Regex.Replace(text, @"\s+", "_");', "        if (text\
    \ == null) return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                space = true;\n          \
    \      sb.Append('_');\n            } else {\n                space = false;\n\
    \                sb.Append(text[i]);\n            }\n        }\n        if (sb.Length\
    \ > 2 && space) {\n            int lastSpace = sb.Length - 1;\n            for\
    \ (int i = lastSpace; i > 0; i--) {\n                if (sb[i] == ' ') {\n   \
    \                 sb[i] = '_';\n                    for (int j = i; j < lastSpace;\
    \ j++) {\n                        sb[j] = sb[j + 1];\n                    }\n\
    \                    lastSpace = i;\n                }\n            }\n      \
    \  }\n        return sb.ToString();", "        string result = \"\";\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                result\
    \ += \"_\";\n            } else {\n                result += c;\n            }\n\
    \        }\n        if (result.Length > 2) {\n            int i = 0;\n       \
    \     while (i < result.Length - 2) {\n                if (result[i] == ' ' &&\
    \ result[i + 1] == ' ') {\n                    result += \"-\";\n            \
    \        i += 2;\n                } else {\n                    i++;\n       \
    \         }\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += '_';\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ = result.Remove(i, 2);\n                } else {\n                    i++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (text == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool isFirst = true;\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                if\
    \ (isFirst) {\n                    isFirst = false;\n                } else {\n\
    \                    sb.Append('_');\n                }\n            } else {\n\
    \                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += '_';\n            } else {\n    \
    \            result += c;\n            }\n        }\n        return result;",
  "        if (text == null || text.Length <= 0) {\n            return text;\n   \
    \     }\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ wasSpace = false;\n        for (int i = 0; i < text.Length; i++) {\n       \
    \     char c = text[i];\n            if (c == ' ') {\n                wasSpace\
    \ = true;\n                sb.Append('_');\n            } else if (wasSpace) {\n\
    \                sb.Append(c);\n                wasSpace = false;\n          \
    \  } else {\n                sb.Append(c);\n            }\n        }\n       \
    \ return sb.ToString();", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += '_';\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            string secondLastSpace = result.Substring(result.Length\
    \ - 2, 1);\n            if (lastSpace == secondLastSpace) {\n                result\
    \ = result.Substring(0, result.Length - 1);\n            }\n        }\n      \
    \  return result;", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == ' ' && result[i + 1]\
    \ == ' ') {\n                    result += \"-\";\n                    i += 2;\n\
    \                } else {\n                    result += result[i];\n        \
    \            i++;\n                }\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string last = \"\";\n            int i = 0;\n          \
    \  while (i < result.Length) {\n                if (result[i] == ' ') {\n    \
    \                result += last + \"-\";\n                    i += 2;\n      \
    \          } else {\n                    i++;\n                }\n           \
    \     last = result[i];\n            }\n        }\n        return result;", " \
    \       if (text == null || text.Length == 0)\n            return text;\n    \
    \    StringBuilder sb = new StringBuilder(text.Length);\n        bool first =\
    \ true;\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             if (first) {\n                    first = false;\n             \
    \   } else {\n                    sb.Append('_');\n                }\n       \
    \     } else {\n                sb.Append(c);\n            }\n        }\n    \
    \    return sb.ToString();", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1);\n            string nextSpace = result.Substring(0, result.Length - 1);\n\
    \            if (lastSpace == \" \" && nextSpace == \" \") {\n               \
    \ result = result.Replace(\" \", \"-\");\n            }\n        }\n        return\
    \ result;", "        if (text == null || text.Length <= 0)\n            return\
    \ text;\n        string result = \"\";\n        foreach (char c in text) {\n \
    \           if (c == ' ')\n                result += \"_\";\n            else\n\
    \                result += c;\n        }\n        if (result.Length > 2)\n   \
    \         return result.Replace(\" \", \"-\");\n        return result;", "   \
    \     string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += c.ToString().Replace(\" \", \"_\");\n\
    \            } else {\n                result += c.ToString();\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        return result;", "        if (text == null)\n            return\
    \ null;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ isFirst = true;\n        foreach (char c in text) {\n            if (c == '\
    \ ') {\n                if (isFirst) {\n                    isFirst = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        string result = \"\";\n   \
    \     foreach (char c in text) {\n            if (c == ' ') {\n              \
    \  result += \"_\";\n            } else {\n                result += c;\n    \
    \        }\n        }\n        if (result.Length > 2) {\n            int i = 0;\n\
    \            while (i < result.Length - 2) {\n                if (result[i] ==\
    \ '_' && result[i + 1] == '_') {\n                    result += \"-\";\n     \
    \               i += 2;\n                } else {\n                    i++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (string.IsNullOrEmpty(text))\n            return text;\n        var sb\
    \ = new StringBuilder(text);\n        foreach (char c in text) {\n           \
    \ if (c == ' ')\n                sb.Replace(\" \", \"_\");\n            if (sb.Length\
    \ > 2 && c == ' ')\n                sb.Replace(\" \", \"-\");\n        }\n   \
    \     return sb.ToString();", "        if (text == null || text.Length <= 2) return\
    \ text;\n        string result = \"\";\n        bool first = true;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                if (first)\
    \ {\n                    result += c;\n                    first = false;\n  \
    \              } else {\n                    result += \"_\";\n              \
    \  }\n            } else {\n                result += c;\n            }\n    \
    \    }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                    result += \"-\"\
    ;\n                    i += 2;\n                } else {\n                   \
    \ result += result[i];\n                    i++;\n                }\n        \
    \    }\n        }\n        return result;", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            int i =\
    \ 0;\n            int j = result.Length - 1;\n            while (i < j) {\n  \
    \              if (result[i] == ' ' && result[j] == ' ') {\n                 \
    \   result += \"-\";\n                    i++;\n                    j--;\n   \
    \             } else if (result[i] == ' ') {\n                    result += \"\
    -\";\n                    i++;\n                } else if (result[j] == ' ') {\n\
    \                    result += \"-\";\n                    j--;\n            \
    \    } else {\n                    i++;\n                    j--;\n          \
    \      }\n            }\n        }\n        return result;", "        if (text\
    \ == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool isSpace = false;\n      \
    \  for (int i = 0; i < text.Length; i++) {\n            char c = text[i];\n  \
    \          if (c == '_') {\n                isSpace = true;\n                sb.Append(c);\n\
    \            } else if (isSpace) {\n                isSpace = false;\n       \
    \         sb.Append('_');\n            } else {\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ += \"-\";\n                    i += 2;\n                } else {\n         \
    \           i++;\n                }\n            }\n        }\n        return\
    \ result;", "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If text has more than 2 consecutive spaces, \n     \
    \   // then replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \") + 1).Equals(text.Length)) {\n            text =\
    \ text.Replace(\" \", \"-\");\n        }\n        return text;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastSpace = result.Substring(result.Length - 1, 1);\n            string\
    \ nextSpace = result.Substring(0, result.Length - 1);\n            if (lastSpace\
    \ == nextSpace) {\n                result = result.Replace(lastSpace, \"-\");\n\
    \            }\n        }\n        return result;", "        // Replace all spaces\
    \ with underscores\n        text = text.Replace(\" \", \"_\");\n        // If\
    \ there are more than 2 consecutive spaces, \n        // then replace all consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \") + 1).Equals(text.Length))\
    \ {\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool space = false;\n        for (int\
    \ i = 0; i < sb.Length; i++) {\n            if (sb[i] == ' ') {\n            \
    \    space = true;\n            } else {\n                if (space) {\n     \
    \               sb.Replace(\" \", \"_\", i, 1);\n                    space = false;\n\
    \                }\n            }\n        }\n        return sb.ToString();",
  "        if (text == null)\n            return null;\n        StringBuilder sb =\
    \ new StringBuilder(text.Length);\n        bool isFirst = true;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                if (isFirst)\
    \ {\n                    isFirst = false;\n                } else {\n        \
    \            sb.Append('_');\n                }\n            } else {\n      \
    \          sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  '        return Regex.Replace(text, @"\s+", "_");', "        // Replace all spaces\
    \ with underscores\n        text = text.Replace(\" \", \"_\");\n        // If\
    \ there are more than 2 consecutive spaces, replace all \n        // consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \") + 1).Equals(text.Length))\
    \ {\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0) return text;\n    \
    \    StringBuilder sb = new StringBuilder(text.Length);\n        bool isSpace\
    \ = false;\n        for (int i = 0; i < text.Length; i++) {\n            char\
    \ c = text[i];\n            if (c == '\\t' || c == '\\n' || c == '\\r') {\n  \
    \              isSpace = true;\n                continue;\n            }\n   \
    \         if (isSpace) {\n                sb.Append('_');\n                isSpace\
    \ = false;\n            }\n            sb.Append(c);\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            string temp = result;\n        \
    \    result = \"\";\n            int i = 0;\n            while (i < temp.Length)\
    \ {\n                if (temp[i] == ' ') {\n                    result += temp[i];\n\
    \                    i++;\n                } else {\n                    result\
    \ += temp[i];\n                    i++;\n                    while (i < temp.Length\
    \ && temp[i] == ' ') {\n                        result += temp[i];\n         \
    \               i++;\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        return result;", "        if (text == null)\n            return\
    \ null;\n        StringBuilder sb = new StringBuilder(text);\n        bool space\
    \ = false;\n        for (int i = 0; i < sb.Length; i++) {\n            if (sb[i]\
    \ == ' ') {\n                space = true;\n            }\n            if (space)\
    \ {\n                sb.Replace(sb[i], \"_\");\n                space = false;\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n  \
    \                  result += \"-\";\n                    i += 2;\n           \
    \     } else {\n                    result += result[i];\n                   \
    \ i++;\n                }\n            }\n        }\n        return result;",
  "        if (text == null || text.Length < 2)\n            return text;\n      \
    \  StringBuilder sb = new StringBuilder(text);\n        bool space = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                space = true;\n            } else {\n                if\
    \ (space) {\n                    sb.Append('_');\n                    space =\
    \ false;\n                }\n                sb.Append(text[i]);\n           \
    \ }\n        }\n        return sb.ToString();", "        if (text == null) return\
    \ null;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ space = false;\n        for (int i = 0; i < text.Length; i++) {\n          \
    \  if (text[i] == ' ') {\n                space = true;\n                sb.Append('_');\n\
    \            } else {\n                space = false;\n                sb.Append(text[i]);\n\
    \            }\n        }\n        if (sb.Length > 2 && space) {\n           \
    \ int lastSpace = sb.Length - 1;\n            for (int i = 0; i < lastSpace; i++)\
    \ {\n                if (sb[i] == ' ') {\n                    sb.Remove(i, 1);\n\
    \                    sb.Insert(i, '_');\n                    lastSpace = i;\n\
    \                }\n            }\n        }\n        return sb.ToString();",
  "        if (text == null)\n            return null;\n        StringBuilder sb =\
    \ new StringBuilder(text.Length);\n        bool wasSpace = false;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                wasSpace =\
    \ true;\n                sb.Append('_');\n            }\n            else if (wasSpace)\
    \ {\n                sb.Append(c);\n                wasSpace = false;\n      \
    \      }\n            else {\n                sb.Append(c);\n            }\n \
    \       }\n        return sb.ToString();", "        // Replace all spaces with\
    \ underscores\n        text = text.Replace(\" \", \"_\");\n        // If there\
    \ are more than 2 consecutive spaces, \n        // then replace all consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && text.Contains(\" \")) {\n\
    \            text = text.Replace(\" \", \"-\");\n        }\n        return text;",
  "        string fixedText = text.Replace(\" \", \"_\");\n        if (fixedText.Contains(\"\
    \ \"))\n        {\n            fixedText = fixedText.Replace(\" \", \"-\");\n\
    \        }\n        return fixedText;", "        if (text == null || text.Length\
    \ == 0) return text;\n        StringBuilder sb = new StringBuilder();\n      \
    \  bool first = true;\n        foreach (char c in text) {\n            if (c ==\
    \ ' ') {\n                if (first) {\n                    first = false;\n \
    \               } else {\n                    sb.Append('_');\n              \
    \  }\n            } else {\n                sb.Append(c);\n            }\n   \
    \     }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool wasSpace = false;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            char c = text[i];\n            if (c == ' ') {\n            \
    \    wasSpace = true;\n                sb.Append('_');\n            } else {\n\
    \                wasSpace = false;\n                sb.Append(c);\n          \
    \  }\n        }\n        if (wasSpace)\n            sb.Append('_');\n        return\
    \ sb.ToString();", "        if (text == null || text.Length == 0)\n          \
    \  return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += \"-\";\n                    i\
    \ += 2;\n                } else {\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        if (text == null)\
    \ return null;\n        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += \"_\";\n         \
    \   } else {\n                result += c;\n            }\n        }\n       \
    \ if (result.Length > 2) {\n            int i = 0;\n            int j = result.Length\
    \ - 1;\n            while (i < j) {\n                if (result[i] == ' ' && result[i\
    \ + 1] == ' ') {\n                    result += \"-\";\n                    i\
    \ += 2;\n                } else {\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                \
    \    result += \"-\";\n                    i += 2;\n                } else {\n\
    \                    result += result[i];\n                    i++;\n        \
    \        }\n            }\n        }\n        return result;", '        return
    Regex.Replace(text, @"\s+", "_");', "        if (text == null) return null;\n\
    \        StringBuilder sb = new StringBuilder(text.Length);\n        bool first\
    \ = true;\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               if (first) {\n                    first = false;\n           \
    \     } else {\n                    sb.Append('_');\n                }\n     \
    \       } else {\n                sb.Append(c);\n            }\n        }\n  \
    \      return sb.ToString();", "        // Your code here\n        return text;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += \" \";\n                    i += 2;\n                } else\
    \ {\n                    result += \"-\";\n                    i++;\n        \
    \        }\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastSpace = result.Substring(result.Length - 1);\n            if (lastSpace\
    \ == \" \") {\n                result = result.Substring(0, result.Length - 1);\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n                \
    \    result += \"-\";\n                    i += 2;\n                } else {\n\
    \                    result += result[i];\n                    i++;\n        \
    \        }\n            }\n        }\n        return result;", "        if (text\
    \ == null) return null;\n        string result = \"\";\n        bool isFirst =\
    \ true;\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             if (isFirst) {\n                    result += c;\n             \
    \       isFirst = false;\n                } else {\n                    result\
    \ += \"_\";\n                }\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        return result;", "        if (text ==\
    \ null) return null;\n        text = text.Replace(\" \", \"_\");\n        if (text.Contains(\"\
    \ \") && text.Contains(\" \"))\n            text = text.Replace(\" \", \"-\");\n\
    \        return text;", "        if (text == null || text.Length <= 0)\n     \
    \       return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        if (text == null) return null;\n\
    \        StringBuilder sb = new StringBuilder(text.Length);\n        bool first\
    \ = true;\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               if (first) {\n                    first = false;\n           \
    \     } else {\n                    sb.Append('_');\n                }\n     \
    \       } else {\n                sb.Append(c);\n            }\n        }\n  \
    \      return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string temp = result.Substring(0,\
    \ result.Length - 2);\n            result += \"-\" + temp;\n        }\n      \
    \  return result;", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       return result;", "        if (text == null)\n            return null;\n\
    \        StringBuilder sb = new StringBuilder(text.Length);\n        bool space\
    \ = false;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == ' ') {\n                space = true;\n            }\n            else if\
    \ (space) {\n                sb.Append('_');\n                space = false;\n\
    \            }\n            else {\n                sb.Append(text[i]);\n    \
    \        }\n        }\n        return sb.ToString();", "        if (text == null)\n\
    \            return null;\n        StringBuilder sb = new StringBuilder();\n \
    \       bool isSpace = false;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                isSpace = true;\n                sb.Append('_');\n\
    \            }\n            else if (isSpace) {\n                isSpace = false;\n\
    \                sb.Append('-');\n            }\n            else {\n        \
    \        sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool isSpace = false;\n      \
    \  for (int i = 0; i < text.Length; i++) {\n            char c = text[i];\n  \
    \          if (c == ' ') {\n                if (isSpace) {\n                 \
    \   isSpace = false;\n                    sb.Append('_');\n                } else\
    \ {\n                    isSpace = true;\n                    sb.Append(c);\n\
    \                }\n            } else {\n                isSpace = false;\n \
    \               sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool space = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                space = true;\n            } else {\n                if\
    \ (space) {\n                    sb.Append('_');\n                    space =\
    \ false;\n                } else {\n                    sb.Append(text[i]);\n\
    \                }\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += '_';\n            } else {\n    \
    \            result += c;\n            }\n        }\n        return result;",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool space = false;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                space = true;\n                sb.Append('_');\n     \
    \       } else {\n                space = false;\n                sb.Append(text[i]);\n\
    \            }\n        }\n        if (sb.Length > 2 && space) {\n           \
    \ int i = 0;\n            while (i < sb.Length - 1 && sb[i] == ' ') {\n      \
    \          i++;\n            }\n            while (i < sb.Length - 1 && sb[i]\
    \ == ' ') {\n                sb.Replace(sb[i], \"_\");\n                i++;\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    result = result.Replace(\" \", \"-\");\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += '_';\n            } else if (c !=\
    \ ' ' && c != '\\t' && c != '\\n' && c != '\\r') {\n                result +=\
    \ c;\n            }\n        }\n        if (result.Length > 2) {\n           \
    \ int i = 0;\n            while (i < result.Length - 2) {\n                if\
    \ (result[i] == '_' && result[i + 1] == '_') {\n                    result +=\
    \ result.Substring(i + 1, 2);\n                    i += 2;\n                }\
    \ else {\n                    result += result.Substring(i + 1, 1);\n        \
    \            i++;\n                }\n            }\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0) return text;\n    \
    \    StringBuilder sb = new StringBuilder(text.Length);\n        bool isSpace\
    \ = false;\n        for (int i = 0; i < text.Length; i++) {\n            char\
    \ c = text[i];\n            if (c == '_') {\n                isSpace = true;\n\
    \                sb.Append(c);\n            } else if (isSpace) {\n          \
    \      sb.Append('_');\n                isSpace = false;\n            } else {\n\
    \                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += c.ToString().Replace(\" \", \"_\"\
    );\n            } else {\n                result += c.ToString();\n          \
    \  }\n        }\n        if (result.Length > 2) {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", "        if (text == null ||\
    \ text.Length == 0) return text;\n        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                if (result.Length\
    \ > 0) {\n                    result += c;\n                }\n              \
    \  else {\n                    result += c;\n                }\n            }\n\
    \            else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 0) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            if (lastSpace == -1) {\n                return result;\n  \
    \          }\n            string lastWord = result.Substring(lastSpace + 1);\n\
    \            if (lastWord.Length > 2) {\n                string newWord = lastWord.Replace('\
    \ ', '_');\n                if (newWord == lastWord) {\n                    return\
    \ result;\n                }\n                else {\n                    result\
    \ = newWord + result.Substring(0, lastSpace);\n                }\n           \
    \ }\n            else {\n                result = result.Replace(' ', '_');\n\
    \            }\n        }\n        return result;", "        if (string.IsNullOrEmpty(text))\n\
    \            return string.Empty;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool space = false;\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                space = true;\n                continue;\n\
    \            }\n            if (space) {\n                sb.Append('_');\n  \
    \              space = false;\n            }\n            sb.Append(c);\n    \
    \    }\n        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ')\n                result += \"_\";\n\
    \            else\n                result += c;\n        }\n        if (result.Length\
    \ > 2)\n            return result.Replace(\"  \", \"_\");\n        else\n    \
    \        return result;", "        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == '_' && result[i + 1]\
    \ == '_') {\n                    result += result.Substring(i + 1, 2);\n     \
    \               i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += '_';\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ temp = result;\n            result = \"\";\n            int i = 0;\n       \
    \     while (i < temp.Length - 1) {\n                if (temp[i] == ' ' && temp[i\
    \ + 1] == ' ') {\n                    result += temp[i];\n                   \
    \ i++;\n                } else {\n                    result += temp[i];\n   \
    \             }\n                i++;\n            }\n        }\n        return\
    \ result;", "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool space = false;\n        bool consecutive\
    \ = false;\n        for (int i = 0; i < sb.Length; i++) {\n            char c\
    \ = sb[i];\n            if (c == ' ') {\n                if (!space) {\n     \
    \               space = true;\n                } else {\n                    space\
    \ = false;\n                    consecutive = true;\n                }\n     \
    \       } else {\n                if (space) {\n                    space = false;\n\
    \                    consecutive = false;\n                }\n            }\n\
    \            if (consecutive) {\n                sb.Replace(\" \", \"-\");\n \
    \           }\n        }\n        return sb.ToString();", "        if (text ==\
    \ null) return null;\n        StringBuilder sb = new StringBuilder();\n      \
    \  bool isFirst = true;\n        foreach (char c in text) {\n            if (c\
    \ == ' ') {\n                if (isFirst) {\n                    isFirst = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        if (text == null)\n       \
    \     return null;\n        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ')\n                result += \"_\";\n     \
    \       else\n                result += c;\n        }\n        if (result.Length\
    \ > 2)\n            return result.Replace(\" \", \"-\");\n        else\n     \
    \       return result;", "        // Replace all spaces with underscores\n   \
    \     text = text.Replace(\" \", \"_\");\n        // If there are more than 2\
    \ consecutive spaces, \n        // then replace all consecutive spaces with -\n\
    \        if (text.Contains(\" \") && (text.IndexOf(\" \") + 1).Equals(text.Length))\
    \ {\n            text = text.Replace(\" \", \"-\");\n        }\n        return\
    \ text;", "        if (text == null)\n            return null;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool inSpace = false;\n      \
    \  bool inDoubleSpace = false;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            char c = text[i];\n            if (c == ' ') {\n            \
    \    if (!inSpace) {\n                    inSpace = true;\n                  \
    \  sb.Append('_');\n                }\n            }\n            else if (c ==\
    \ '\\r') {\n                continue;\n            }\n            else if (c ==\
    \ '\\n') {\n                continue;\n            }\n            else if (c ==\
    \ '\\t') {\n                continue;\n            }\n            else if (inSpace)\
    \ {\n                inSpace = false;\n                sb.Append('_');\n     \
    \       }\n            else if (inDoubleSpace) {\n                inDoubleSpace\
    \ = false;\n                sb.Append('-');\n            }\n            else {\n\
    \                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += result.Substring(i + 1, 2);\n                    i += 2;\n\
    \                } else {\n                    result += result.Substring(i +\
    \ 1, 1);\n                    i++;\n                }\n            }\n       \
    \ }\n        return result;"]
stop_tokens:
- "\n    }\n"
