name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n\
  \    // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example\
  \ 2\") == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n\
  \    public static string FixSpaces(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        return\
    \ result;", '        return Regex.Replace(text, @"\s+", "_");', "        if (text\
    \ == null)\n            return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int lastSpace2 = result.LastIndexOf(' ');\n            while\
    \ (lastSpace != -1 && lastSpace2 != -1) {\n                if (lastSpace == lastSpace2)\
    \ {\n                    result = result.Replace(result.Substring(lastSpace, 2),\
    \ \"-\");\n                } else {\n                    result = result.Replace(result.Substring(lastSpace,\
    \ 1), \"_\");\n                }\n                lastSpace = result.LastIndexOf('\
    \ ');\n                lastSpace2 = result.LastIndexOf(' ');\n            }\n\
    \        }\n        return result;", "        if (text == null || text.Length\
    \ == 0) return text;\n        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                if (result.Length > 0)\
    \ {\n                    result += \".\";\n                }\n               \
    \ result += c;\n            } else {\n                result += c;\n         \
    \   }\n        }\n        if (result.Length > 2) {\n            string temp =\
    \ result;\n            result = \"\";\n            int i = 0;\n            while\
    \ (i < temp.Length - 1) {\n                if (temp[i] == ' ' && temp[i + 1] ==\
    \ ' ') {\n                    result += temp[i];\n                    i++;\n \
    \               } else {\n                    result += temp[i];\n           \
    \         i++;\n                }\n            }\n        }\n        return result;",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool isFirst =\
    \ true;\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             if (isFirst) {\n                    isFirst = false;\n         \
    \       } else {\n                    sb.Append('_');\n                }\n   \
    \         } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n  \
    \          return text;\n        if (text.Length > 2)\n            return text.Replace(\"\
    \ \", \"_\");\n        if (text.Length > 1)\n            return text.Replace(\"\
    \ \", \"-\");\n        return text;", "        if (text == null || text.Length\
    \ <= 2)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        string result = \"\";\n   \
    \     foreach (char c in text) {\n            if (c == ' ') {\n              \
    \  result += \"_\";\n            } else {\n                result += c;\n    \
    \        }\n        }\n        if (result.Length > 2) {\n            string temp\
    \ = result;\n            result = \"\";\n            int i = 0;\n            while\
    \ (i < temp.Length) {\n                if (temp[i] == ' ') {\n               \
    \     result += temp[i];\n                    i++;\n                } else {\n\
    \                    result += temp[i];\n                    i = i + 1;\n    \
    \            }\n            }\n        }\n        return result;", "        if\
    \ (text == null || text.Length == 0) return text;\n        string result = \"\"\
    ;\n        bool isSpace = false;\n        foreach (char c in text) {\n       \
    \     if (c == ' ') {\n                isSpace = true;\n            } else if\
    \ (isSpace) {\n                result += \"_\";\n                isSpace = false;\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2 && result.Substring(result.Length - 2, 2) == \"\
    ___\") {\n            result = result.Substring(0, result.Length - 2);\n     \
    \   }\n        return result;", "        string fixedText = text.Replace(\" \"\
    , \"_\");\n        if (fixedText.Contains(\" \"))\n        {\n            fixedText\
    \ = fixedText.Replace(\" \", \"-\");\n        }\n        return fixedText;", " \
    \       if (text == null)\n            return null;\n        StringBuilder sb\
    \ = new StringBuilder(text.Length);\n        bool wasSpace = false;\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n   \
    \             if (!wasSpace) {\n                    sb.Append('_');\n        \
    \            wasSpace = true;\n                }\n            } else {\n     \
    \           wasSpace = false;\n            }\n            sb.Append(text[i]);\n\
    \        }\n        return sb.ToString();", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            string\
    \ temp = result;\n            result = \"\";\n            int i = 0;\n       \
    \     while (i < temp.Length) {\n                if (temp[i] == ' ') {\n     \
    \               result += temp[i];\n                    i++;\n               \
    \ } else {\n                    result += temp[i];\n                    i = i\
    \ + 1;\n                }\n            }\n        }\n        return result;",
  "        if (text == null || text.Length <= 0) {\n            return text;\n   \
    \     }\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ space = false;\n        for (int i = 0; i < text.Length; i++) {\n          \
    \  if (text[i] == ' ') {\n                if (space) {\n                    sb.Append('-');\n\
    \                    space = false;\n                } else {\n              \
    \      space = true;\n                }\n            } else {\n              \
    \  space = false;\n            }\n            sb.Append(text[i]);\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int i\
    \ = 0;\n            while (i < result.Length - 2) {\n                if (result[i]\
    \ == '_' && result[i + 1] == '_') {\n                    result += result.Substring(i\
    \ + 1, 2);\n                    i += 2;\n                } else {\n          \
    \          result += result.Substring(i + 1, 1);\n                    i += 1;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += \"_\";\n            } else {\n     \
    \           result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2]\
    \ == ' ') {\n                    result += \"-\";\n                    i += 2;\n\
    \                } else {\n                    i++;\n                }\n     \
    \       }\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1);\n            if (lastSpace\
    \ == \" \") {\n                result = result.Substring(0, result.Length - 1);\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        return result;", "        if (text == null)\n\
    \            return null;\n        StringBuilder sb = new StringBuilder();\n \
    \       bool space = false;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (!space) {\n                    space = true;\n\
    \                    sb.Append('_');\n                } else {\n             \
    \       space = false;\n                    sb.Append('-');\n                }\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();"]
stop_tokens:
- "\n    }\n"
