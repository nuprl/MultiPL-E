name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5,\
  \ 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public static\
  \ List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        foreach (long i in l1) {\n            max = Math.Max(max, i);\n\
    \        }\n        foreach (long i in l2) {\n            max = Math.Max(max,\
    \ i);\n        }\n        long min = 0;\n        foreach (long i in l1) {\n  \
    \          min = Math.Min(min, i);\n        }\n        foreach (long i in l2)\
    \ {\n            min = Math.Min(min, i);\n        }\n        long mid = (max +\
    \ min) / 2;\n        foreach (long i in l1) {\n            if (i <= mid) {\n \
    \               result.Add(i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (i <= mid) {\n                result.Add(i);\n  \
    \          }\n        }\n        return result.OrderBy(i => i).ToList();", " \
    \       List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = (max1 + min1) / 2;\n        long mid2 = (max2\
    \ + min2) / 2;\n        long mid = (max1 + min2) / 2;\n        long mid2 = mid;\n\
    \        long mid1 = mid;\n        long mid3 = mid;\n        long mid4 = mid;\n\
    \        long mid5 = mid;\n        long mid6 = mid;\n        long mid7 = mid;\n\
    \        long mid8 = mid;\n        long mid9 = mid;\n        long mid10 = mid;\n\
    \        long mid11 = mid;\n        long mid12 = mid;\n        long mid13 = mid;\n\
    \        long mid14 = mid;\n        long mid15 = mid;\n        long mid16 = mid;\n\
    \        long mid17 = mid;\n        long mid18 = mid;\n        long mid19 = mid;\n\
    \        long mid20 = mid;\n        long mid21 = mid;\n        long mid22 = mid;\n\
    \        long mid23 = mid;\n        long mid24 = mid;\n        long mid25 = mid;\n\
    \        long mid26 = mid;\n        long mid27 = mid;\n        long mid28 = mid;\n\
    \        long mid29 = mid;\n        long mid30 = mid;\n        long mid31 = mid;\n\
    \        long mid32 = mid;\n        long mid33 = mid;\n        long mid34 = mid;\n\
    \        long mid35 = mid;\n        long mid36 = mid;\n        long mid37 = mid;\n\
    \        long mid38 = mid;\n        long mid39 = mid;\n        long mid40 = mid;\n\
    \        long mid41 = mid;\n        long mid42 = mid;\n        long mid43 = mid;\n\
    \        long mid44 = mid;\n        long mid45 = mid;\n        long mid46 = mid;\n\
    \        long mid47 = mid;\n        long mid48 = mid;\n        long mid49 = mid;\n\
    \        long mid50 = mid;\n        long mid51 = mid;\n        long mid52 = mid;\n\
    \        long mid53 = mid;\n        long mid54 = mid;\n        long mid55 = mid;\n\
    \        long mid5", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ {\n                    result.Remove(i);\n                    result.Remove(j);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   var result = new List<long>();\n        foreach (var item in l1) {\n     \
    \       foreach (var item2 in l2) {\n                if (item == item2) {\n  \
    \                  result.Add(item);\n                    break;\n           \
    \     }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y)\n     \
    \               result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().ToList();", "    \
    \    List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \           l2.Remove(item);\n            }\n        }\n        return result.Union(l2).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().ToList();", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set1 = new HashSet<long>(l1);\n        HashSet<long> set2\
    \ = new HashSet<long>(l2);\n        foreach (long x in set1) {\n            if\
    \ (set2.Contains(x)) {\n                result.Add(x);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result.Distinct().ToList();",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                    break;\n\
    \                }\n            }\n            if (common > 0) {\n           \
    \     result.Add(x);\n                common = 0;\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y)\n                    result.Add(x);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result.Distinct().OrderBy(x => x).ToList();", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        var result = new List<long>();\n        var hash\
    \ = new Dictionary<long, int>();\n        foreach (var item in l1) {\n       \
    \     if (hash.ContainsKey(item)) {\n                hash[item]++;\n         \
    \   } else {\n                hash.Add(item, 1);\n            }\n        }\n \
    \       foreach (var item in l2) {\n            if (hash.ContainsKey(item)) {\n\
    \                hash[item]--;\n            } else {\n                hash.Add(item,\
    \ -1);\n            }\n        }\n        foreach (var item in hash) {\n     \
    \       if (hash[item] == 0) {\n                result.Add(item);\n          \
    \  }\n        }\n        return result.OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) result.Add(i);\n            }\n\
    \        }\n        return result.Distinct().OrderBy(i => i).ToList();", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) continue;\n                if (i == common) break;\n     \
    \           if (j == common) break;\n                if (i == j) common++;\n \
    \           }\n            result.Add(i);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            max = Math.Max(max, i);\n        }\n        foreach\
    \ (long i in l2) {\n            max = Math.Max(max, i);\n        }\n        long\
    \ min = max;\n        foreach (long i in l1) {\n            min = Math.Min(min,\
    \ i);\n        }\n        foreach (long i in l2) {\n            min = Math.Min(min,\
    \ i);\n        }\n        long mid = min + (max - min) / 2;\n        foreach (long\
    \ i in l1) {\n            if (i < mid) {\n                result.Add(i);\n   \
    \         }\n        }\n        foreach (long i in l2) {\n            if (i <\
    \ mid) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n                l2.Remove(item);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long x in l1) {\n  \
    \          foreach (long y in l2) {\n                if (x == y) {\n         \
    \           result.Add(x);\n                    break;\n                }\n  \
    \          }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ h1 = new HashSet<long>(l1);\n        HashSet<long> h2 = new HashSet<long>(l2);\n\
    \        foreach (long x in h1) {\n            if (h2.Contains(x)) {\n       \
    \         result.Add(x);\n                h1.Remove(x);\n                h2.Remove(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            if (l2.Contains(x)) {\n                result.Add(x);\n         \
    \   }\n            if (x > max) {\n                max = x;\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>(l1);\n        foreach (long x in\
    \ l2) {\n            if (set.Contains(x)) {\n                result.Add(x);\n\
    \                set.Remove(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        var l3 = new List<long>();\n        foreach (var\
    \ x in l1) {\n            foreach (var y in l2) {\n                if (x == y)\
    \ {\n                    l3.Add(x);\n                }\n            }\n      \
    \  }\n        return l3;", "        List<long> result = new List<long>();\n  \
    \      foreach (long x in l1) {\n            foreach (long y in l2) {\n      \
    \          if (x == y) {\n                    result.Add(x);\n               \
    \     break;\n                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (var item in l1) {\n\
    \            foreach (var item2 in l2) {\n                if (item == item2) {\n\
    \                    result.Add(item);\n                }\n            }\n   \
    \     }\n        return result.Distinct().OrderBy(x => x).ToList();", "      \
    \  List<long> result = new List<long>();\n        long common = 0;\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    common++;\n                }\n            }\n \
    \       }\n        result.Add(common);\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        var result = new List<long>();\n        var hash = new HashSet<long>();\n\
    \        foreach (var item in l1) {\n            if (hash.Add(item)) {\n     \
    \           result.Add(item);\n            }\n        }\n        foreach (var\
    \ item in l2) {\n            if (hash.Add(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result.Distinct().ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long max1 = 0, max2 = 0;\n\
    \        foreach (long i in l1) {\n            if (max1 < i) max1 = i;\n     \
    \   }\n        foreach (long i in l2) {\n            if (max2 < i) max2 = i;\n\
    \        }\n        if (max1 < max2) return result;\n        long min1 = max1,\
    \ min2 = max2;\n        foreach (long i in l1) {\n            if (min1 > i) min1\
    \ = i;\n        }\n        foreach (long i in l2) {\n            if (min2 > i)\
    \ min2 = i;\n        }\n        if (min1 < min2) return result;\n        long\
    \ mid1 = min1 + min2, mid2 = max1 - max2;\n        foreach (long i in l1) {\n\
    \            if (mid1 < i) mid1 = i;\n        }\n        foreach (long i in l2)\
    \ {\n            if (mid2 < i) mid2 = i;\n        }\n        if (mid1 < mid2)\
    \ return result;\n        long minDiff = min1 - min2, midDiff = mid1 - mid2;\n\
    \        foreach (long i in l1) {\n            if (minDiff > i) minDiff = i;\n\
    \        }\n        foreach (long i in l2) {\n            if (midDiff > i) midDiff\
    \ = i;\n        }\n        if (minDiff < midDiff) return result;\n        long\
    \ maxDiff = max1 - max2, midDiff = mid1 - mid2;\n        foreach (long i in l1)\
    \ {\n            if (maxDiff > i) maxDiff = i;\n        }\n        foreach (long\
    \ i in l2) {\n            if (midDiff > i) midDiff = i;\n        }\n        if\
    \ (maxDiff < midDiff) return result;\n        long mid = mid1 + mid2;\n      \
    \  foreach (long i in l1) {\n            if (mid < i) mid = i;\n        }\n  \
    \      foreach (long i in l2) {\n            if (mid < i) mid = i;\n        }\n\
    \        result.Add(mid);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long mid1\
    \ = (max1 + min1) / 2;\n        long mid2 = (max2 + min2) / 2;\n        long mid\
    \ = (max1 + max2) / 2;\n        bool found = false;\n        long minDiff = max1\
    \ - min1;\n        long maxDiff = max2 - min2;\n        long diff;\n        do\
    \ {\n            found = false;\n            for (int i = 0; i < l1.Count; i++)\
    \ {\n                diff = l1[i] - mid1;\n                if (diff == minDiff)\
    \ {\n                    result.Add(l1[i]);\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                for (int i = 0; i < l2.Count; i++) {\n         \
    \           diff = l2[i] - mid2;\n                    if (diff == maxDiff) {\n\
    \                        result.Add(l2[i]);\n                        found = true;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        } while (!found);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        var l3 = new List<long>();\n        foreach (var\
    \ x in l1) {\n            foreach (var y in l2) {\n                if (x == y)\
    \ {\n                    l3.Add(x);\n                    break;\n            \
    \    }\n            }\n        }\n        return l3;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long min1 = l1.Min();\n        long max1\
    \ = l1.Max();\n        long min2 = l2.Min();\n        long max2 = l2.Max();\n\
    \        long mid = (max1 + min2) / 2;\n        bool found = false;\n        long\
    \ midVal = mid;\n        long midVal2 = mid;\n        long midVal3 = mid;\n  \
    \      long midVal4 = mid;\n        long midVal5 = mid;\n        long midVal6\
    \ = mid;\n        long midVal7 = mid;\n        long midVal8 = mid;\n        long\
    \ midVal9 = mid;\n        long midVal10 = mid;\n        long midVal11 = mid;\n\
    \        long midVal12 = mid;\n        long midVal13 = mid;\n        long midVal14\
    \ = mid;\n        long midVal15 = mid;\n        long midVal16 = mid;\n       \
    \ long midVal17 = mid;\n        long midVal18 = mid;\n        long midVal19 =\
    \ mid;\n        long midVal20 = mid;\n        long midVal21 = mid;\n        long\
    \ midVal22 = mid;\n        long midVal23 = mid;\n        long midVal24 = mid;\n\
    \        long midVal25 = mid;\n        long midVal26 = mid;\n        long midVal27\
    \ = mid;\n        long midVal28 = mid;\n        long midVal29 = mid;\n       \
    \ long midVal30 = mid;\n        long midVal31 = mid;\n        long midVal32 =\
    \ mid;\n        long midVal33 = mid;\n        long midVal34 = mid;\n        long\
    \ midVal35 = mid;\n        long midVal36 = mid;\n        long midVal37 = mid;\n\
    \        long midVal38 = mid;\n        long midVal39 = mid;\n        long midVal40\
    \ = mid;\n        long midVal41 = mid;\n        long midVal42 = mid;\n       \
    \ long midVal43 = mid;\n        long midVal44 = mid;\n        long midVal45 =\
    \ mid;\n        long midVal46 = mid;\n        long midVal47 = mid;\n        long\
    \ midVal48 = mid;\n        long midVal49 = mid;\n        long midVal50 = mid;\n\
    \        long midVal51 = mid;\n        long mid", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       var result = new List<long>();\n        foreach (var x in l1) {\n    \
    \        foreach (var y in l2) {\n                if (x == y) {\n            \
    \        result.Add(x);\n                    break;\n                }\n     \
    \       }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long minValue = l1.Min();\n\
    \        long maxValue = l1.Max();\n        long minValue2 = l2.Min();\n     \
    \   long maxValue2 = l2.Max();\n        long minValue3 = l1.Min();\n        long\
    \ maxValue3 = l1.Max();\n        long minValue4 = l2.Min();\n        long maxValue4\
    \ = l2.Max();\n        long minValue5 = l1.Min();\n        long maxValue5 = l1.Max();\n\
    \        long minValue6 = l2.Min();\n        long maxValue6 = l2.Max();\n    \
    \    long minValue7 = l1.Min();\n        long maxValue7 = l1.Max();\n        long\
    \ minValue8 = l2.Min();\n        long maxValue8 = l2.Max();\n        long minValue9\
    \ = l1.Min();\n        long maxValue9 = l1.Max();\n        long minValue10 = l2.Min();\n\
    \        long maxValue10 = l2.Max();\n        long minValue11 = l1.Min();\n  \
    \      long maxValue11 = l1.Max();\n        long minValue12 = l2.Min();\n    \
    \    long maxValue12 = l2.Max();\n        long minValue13 = l1.Min();\n      \
    \  long maxValue13 = l1.Max();\n        long minValue14 = l2.Min();\n        long\
    \ maxValue14 = l2.Max();\n        long minValue15 = l1.Min();\n        long maxValue15\
    \ = l1.Max();\n        long minValue16 = l2.Min();\n        long maxValue16 =\
    \ l2.Max();\n        long minValue17 = l1.Min();\n        long maxValue17 = l1.Max();\n\
    \        long minValue18 = l2.Min();\n        long maxValue18 = l2.Max();\n  \
    \      long minValue19 = l1.Min();\n        long maxValue19 = l1.Max();\n    \
    \    long minValue20 = l2.Min();\n        long maxValue20 = l2.Max();\n      \
    \  long minValue21 = l1.Min();\n        long maxValue21 = l1.Max();\n        long\
    \ minValue22 = l2.Min();\n        long maxValue22 = l2.Max();\n        long minValue23\
    \ = l1.Min();\n        long maxValue23 = l1.Max();\n        long minValue24 =\
    \ l2.Min();\n        long maxValue24 = l2.Max();\n", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            foreach (var\
    \ item2 in l2) {\n                if (item == item2) {\n                    result.Add(item);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().OrderBy(i => i).ToList();", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ i in l1) {\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    common++;\n                }\n            }\n       \
    \ }\n        result.Add(common);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) continue;\n                if\
    \ (result.Contains(i) && result.Contains(j)) {\n                    result.Remove(i);\n\
    \                    result.Remove(j);\n                }\n            }\n   \
    \     }\n        return result;", "        var result = new List<long>();\n  \
    \      foreach (var item in l1) {\n            if (l2.Contains(item)) {\n    \
    \            result.Add(item);\n                l2.Remove(item);\n           \
    \ }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var x in l1) {\n            foreach (var y in l2) {\n      \
    \          if (x == y) {\n                    result.Add(x);\n               \
    \     break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        var result = new List<long>();\n        foreach (var\
    \ item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \                l2.Remove(item);\n            }\n        }\n        return result.Union(l2).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) continue;\n   \
    \             if (result.Contains(j) && result.Contains(i)) continue;\n      \
    \          if (result.Contains(i) && result.Contains(j)) continue;\n         \
    \       result.Add(i);\n            }\n        }\n        return result.Distinct().OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y)\n                    result.Add(x);\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        foreach (long i in l1) {\n            max = Math.Max(max,\
    \ i);\n        }\n        foreach (long i in l2) {\n            max = Math.Max(max,\
    \ i);\n        }\n        long min = long.MaxValue;\n        foreach (long i in\
    \ l1) {\n            min = Math.Min(min, i);\n        }\n        foreach (long\
    \ i in l2) {\n            min = Math.Min(min, i);\n        }\n        long mid\
    \ = (max + min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid /\
    \ 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long\
    \ mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n\
    \        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n        long mid11\
    \ = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n\
    \        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long\
    \ mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid\
    \ / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid / 20;\n    \
    \    long mid21 = mid / 21;\n        long mid22 = mid / 22;\n        long mid23\
    \ = mid / 23;\n        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n\
    \        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long\
    \ mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid\
    \ / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid / 32;\n    \
    \    long mid33 = mid / 33;\n        long mid34 = mid / 34;\n        long mid35\
    \ = mid / 35;\n        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n\
    \        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long\
    \ mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid\
    \ / 42;\n        long mid43 = mid / 43;\n        long mid44", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n\
    \        HashSet<long> h2 = new HashSet<long>(l2);\n        foreach (long x in\
    \ h1) {\n            if (h2.Contains(x)) {\n                result.Add(x);\n \
    \               h1.Remove(x);\n                h2.Remove(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (var i in l1) {\n            foreach (var j in l2) {\n                if (i\
    \ == j) {\n                    result.Add(i);\n                    break;\n  \
    \              }\n            }\n        }\n        return result.Distinct().OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y)\n                    result.Add(x);\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ maxValue = l1.Max();\n        long minValue = l2.Min();\n        long maxValue2\
    \ = l2.Max();\n        long minValue2 = l1.Min();\n        long maxValue3 = l2.Max();\n\
    \        long minValue3 = l1.Min();\n        long maxValue4 = l2.Max();\n    \
    \    long minValue4 = l1.Min();\n        long maxValue5 = l2.Max();\n        long\
    \ minValue5 = l1.Min();\n        long maxValue6 = l2.Max();\n        long minValue6\
    \ = l1.Min();\n        long maxValue7 = l2.Max();\n        long minValue7 = l1.Min();\n\
    \        long maxValue8 = l2.Max();\n        long minValue8 = l1.Min();\n    \
    \    long maxValue9 = l2.Max();\n        long minValue9 = l1.Min();\n        long\
    \ maxValue10 = l2.Max();\n        long minValue10 = l1.Min();\n        long maxValue11\
    \ = l2.Max();\n        long minValue11 = l1.Min();\n        long maxValue12 =\
    \ l2.Max();\n        long minValue12 = l1.Min();\n        long maxValue13 = l2.Max();\n\
    \        long minValue13 = l1.Min();\n        long maxValue14 = l2.Max();\n  \
    \      long minValue14 = l1.Min();\n        long maxValue15 = l2.Max();\n    \
    \    long minValue15 = l1.Min();\n        long maxValue16 = l2.Max();\n      \
    \  long minValue16 = l1.Min();\n        long maxValue17 = l2.Max();\n        long\
    \ minValue17 = l1.Min();\n        long maxValue18 = l2.Max();\n        long minValue18\
    \ = l1.Min();\n        long maxValue19 = l2.Max();\n        long minValue19 =\
    \ l1.Min();\n        long maxValue20 = l2.Max();\n        long minValue20 = l1.Min();\n\
    \        long maxValue21 = l2.Max();\n        long minValue21 = l1.Min();\n  \
    \      long maxValue22 = l2.Max();\n        long minValue22 = l1.Min();\n    \
    \    long maxValue23 = l2.Max();\n        long minValue23 = l1.Min();\n      \
    \  long maxValue24 = l2.Max();\n        long minValue24 = l1.Min();\n", "    \
    \    List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) {\n       \
    \             result.Add(i);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result.Distinct().ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        return result.OrderBy(i => i).ToList();", "      \
    \  List<long> result = new List<long>();\n        foreach (long x in l1) {\n \
    \           foreach (long y in l2) {\n                if (x == y) {\n        \
    \            result.Add(x);\n                    break;\n                }\n \
    \           }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \           l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result.OrderBy(x => x).ToList();", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n   \
    \         foreach (long j in l2) {\n                if (i == j) continue;\n  \
    \              if (i > j) break;\n                if (i > max) max = i;\n    \
    \        }\n        }\n        foreach (long i in l2) {\n            foreach (long\
    \ j in l1) {\n                if (i == j) continue;\n                if (i > j)\
    \ break;\n                if (i > max) max = i;\n            }\n        }\n  \
    \      foreach (long i in l1) {\n            foreach (long j in l2) {\n      \
    \          if (i == j) continue;\n                if (i > j) break;\n        \
    \        if (i > max) max = i;\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            foreach (long j in l1) {\n                if (i == j)\
    \ continue;\n                if (i > j) break;\n                if (i > max) max\
    \ = i;\n            }\n        }\n        foreach (long i in l1) {\n         \
    \   foreach (long j in l2) {\n                if (i == j) continue;\n        \
    \        if (i > j) break;\n                if (i > max) max = i;\n          \
    \  }\n        }\n        foreach (long i in l2) {\n            foreach (long j\
    \ in l1) {\n                if (i == j) continue;\n                if (i > j)\
    \ break;\n                if (i > max) max = i;\n            }\n        }\n  \
    \      foreach (long i in l1) {\n            foreach (long j in l2) {\n      \
    \          if (i == j) continue;\n                if (i > j) break;\n        \
    \        if (i > max) max = i;\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            foreach (long j in l1) {\n                if (i == j)\
    \ continue;\n                if (i > j) break;\n                if (i > max) max\
    \ = i;\n            }\n        }\n        foreach (long i in l1) {\n         \
    \   foreach (long j in l2) {\n                if (i == j) continue;\n        \
    \        if (i > j) break;\n                if (i > max) max = i;\n          \
    \  }\n        }\n        foreach (long i in l2) {\n            foreach (long j\
    \ in l1) {\n                if (i == j) continue;\n                if (i > j)\
    \ break;\n                if (i > max) max = i;\n            }\n        }\n  \
    \      foreach (long i in l1) {\n            foreach (long j in l2) {\n      \
    \          if (i == j) continue;\n                if (i > j) break;\n        \
    \        if (i > max) max = i;\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            foreach (long j in l1) {\n                if (i == j)\
    \ continue;\n                if (i > j) break;\n                if (i > max) max\
    \ = i;\n            }\n        }\n        foreach (long i in l1) {\n         \
    \   foreach (long j in l2) {\n                if (i == j) continue;\n        \
    \        if (i > j) break;\n                if (i > max) max = i;\n          \
    \  }\n        }\n        foreach (long i in l2) {\n            foreach (long j\
    \ in l1) {\n                if (i == ", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            foreach (long j in l2) {\n    \
    \            if (i == j) continue;\n                if (result.Contains(i) &&\
    \ result.Contains(j)) {\n                    result.Remove(i);\n             \
    \       result.Remove(j);\n                }\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long i in l1) {\n            foreach (long j in\
    \ l2) {\n                if (i == j) continue;\n                if (i == common)\
    \ {\n                    result.Add(i);\n                    result.Add(j);\n\
    \                    break;\n                }\n                if (j == common)\
    \ {\n                    result.Add(i);\n                    result.Add(j);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  HashSet<long> set1 = new HashSet<long>(l1);\n        HashSet<long> set2 = new\
    \ HashSet<long>(l2);\n        foreach (long x in set1) {\n            if (set2.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ h1 = new HashSet<long>(l1);\n        HashSet<long> h2 = new HashSet<long>(l2);\n\
    \        foreach (long x in h1)\n            if (h2.Contains(x))\n           \
    \     result.Add(x);\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result.Distinct().OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                result.Add(i);\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \           l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ continue;\n                if (result.Contains(j) && result.Contains(i)) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) continue;\n   \
    \             result.Add(i);\n                result.Add(j);\n            }\n\
    \        }\n        return result.Distinct().OrderBy(i => i).ToList();", "   \
    \     List<long> result = new List<long>();\n        long common = 0;\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    common++;\n                }\n     \
    \       }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) {\n           \
    \         result.Remove(i);\n                    result.Remove(j);\n         \
    \       }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = long.MinValue;\n       \
    \ foreach (long value in l1) {\n            if (value > maxValue) {\n        \
    \        maxValue = value;\n            }\n        }\n        foreach (long value\
    \ in l2) {\n            if (value > maxValue) {\n                maxValue = value;\n\
    \            }\n        }\n        long maxIndex = 0;\n        long minValue =\
    \ long.MaxValue;\n        foreach (long value in l1) {\n            if (value\
    \ < minValue) {\n                minValue = value;\n            }\n          \
    \  if (value == maxValue) {\n                result.Add(value);\n            }\n\
    \        }\n        foreach (long value in l2) {\n            if (value < minValue)\
    \ {\n                minValue = value;\n            }\n            if (value ==\
    \ maxValue) {\n                result.Add(value);\n            }\n        }\n\
    \        return result;", "        var l3 = new List<long>();\n        foreach\
    \ (var i in l1) {\n            foreach (var j in l2) {\n                if (i\
    \ == j) continue;\n                if (l3.Contains(i) && l3.Contains(j)) {\n \
    \                   l3.Remove(i);\n                    l3.Remove(j);\n       \
    \         }\n            }\n            l3.Add(i);\n        }\n        return\
    \ l3;", "        List<long> result = new List<long>();\n        long max = 0;\n\
    \        foreach (long x in l1) {\n            if (l2.Contains(x)) {\n       \
    \         max = Math.Max(max, x);\n            }\n        }\n        foreach (long\
    \ x in l2) {\n            if (l1.Contains(x)) {\n                max = Math.Max(max,\
    \ x);\n            }\n        }\n        if (max == 0) {\n            return result;\n\
    \        }\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (l1.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        long common = 0;\n    \
    \    foreach (long i in l1) {\n            foreach (long j in l2) {\n        \
    \        if (i == j) {\n                    common++;\n                }\n   \
    \         }\n        }\n        result.Add(common);\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (var item in l1)\
    \ {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result.OrderBy(i => i).ToList();", " \
    \       List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long minDiff = max1 - min1;\n        long maxDiff = max2\
    \ - min2;\n        long diff = 0;\n        long mid;\n        long mid2;\n   \
    \     bool found = false;\n        do {\n            mid = (min1 + max1) / 2;\n\
    \            mid2 = (min2 + max2) / 2;\n            diff = mid2 - mid;\n     \
    \       if (diff > 0) {\n                min1 = mid;\n            } else {\n \
    \               max1 = mid;\n            }\n            if (diff < 0) {\n    \
    \            min2 = mid2;\n            } else {\n                max2 = mid2;\n\
    \            }\n        } while (diff > 0 && diff < 0);\n        if (min1 == max1)\
    \ {\n            minDiff = maxDiff - minDiff;\n            mid = min1;\n     \
    \       found = true;\n        } else {\n            minDiff = maxDiff - minDiff;\n\
    \            mid = min2;\n            found = true;\n        }\n        if (min2\
    \ == max2) {\n            maxDiff = minDiff - maxDiff;\n            mid = min2;\n\
    \            found = true;\n        } else {\n            maxDiff = minDiff -\
    \ maxDiff;\n            mid = min1;\n            found = true;\n        }\n  \
    \      if (found) {\n            while (minDiff > 0 && maxDiff > 0) {\n      \
    \          if (l1[mid] < l2[mid]) {\n                    minDiff--;\n        \
    \            mid++;\n                } else {\n                    maxDiff--;\n\
    \                    mid++;\n                }\n            }\n            while\
    \ (minDiff < 0 && maxDiff < 0) {\n                if (l1[mid] > l2[mid]) {\n \
    \                   minDiff++;\n                    mid++;\n                }\
    \ else {\n                    maxDiff++;\n                    mid++;\n       \
    \         }\n            }\n            while (minDiff > 0 && maxDiff < 0) {\n\
    \                if (l1[mid] < l2[mid]) {\n                    minDiff--;\n  \
    \                  mid++;\n                } else {\n                    maxDiff--;\n\
    \                    mid++;\n                }\n            }\n            while\
    \ (minDiff < 0 && maxDiff > 0) {\n                if (l1[mid] > l2[mid]) {\n \
    \                   minDiff++;\n                    mid++;\n                }\
    \ else {\n                    maxDiff++;\n                    mid++;\n       \
    \         }\n            }\n            while (minDiff > 0 && maxDiff < 0) {\n\
    \                if (l1[mid] < l2[mid]) {\n                    minDiff--;\n  \
    \                  mid++;\n                } else {\n                    maxDiff--;\n\
    \                    mid++;\n                }\n            }\n            while\
    \ (minDiff < 0 && ", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result.Distinct().ToList();",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long x in l1) {\n            if (l2.Contains(x)) {\n                result.Add(x);\n\
    \                max = Math.Max(max, x);\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (l1.Contains(x)) {\n                result.Add(x);\n\
    \                max = Math.Max(max, x);\n            }\n        }\n        return\
    \ result.OrderByDescending(x => x).ToList();", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            foreach (long y\
    \ in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long mid1 = (max1 + min1)\
    \ / 2;\n        long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2)\
    \ / 2;\n        long mid2 = mid;\n        long mid1 = mid;\n        long mid =\
    \ mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid;\n        long mid\
    \ = mid1;\n        long mid1 = mid;\n        long mid = mid1;\n        long mid1\
    \ = mid;\n        long mid = mid1;\n        long mid1 = mid", "        List<long>\
    \ result = new List<long>();\n        foreach (var item in l1) {\n           \
    \ if (l2.Contains(item)) {\n                result.Add(item);\n              \
    \  l2.Remove(item);\n            }\n        }\n        return result.Union(l2).ToList();",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) {\n       \
    \             result.Add(i);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) continue;\n                if (i > j) break;\n                if (i ==\
    \ max) {\n                    result.Add(i);\n                    break;\n   \
    \             }\n                if (j > max) {\n                    result.Add(j);\n\
    \                    break;\n                }\n                if (i == j) continue;\n\
    \                if (i > j) break;\n                if (i == max) {\n        \
    \            result.Add(i);\n                    break;\n                }\n \
    \               if (j > max) {\n                    result.Add(j);\n         \
    \           break;\n                }\n                if (i == j) continue;\n\
    \                if (i > j) break;\n                if (i == max) {\n        \
    \            result.Add(i);\n                    break;\n                }\n \
    \               if (j > max) {\n                    result.Add(j);\n         \
    \           break;\n                }\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long common\
    \ = 0;\n        foreach (long i in l1) {\n            foreach (long j in l2) {\n\
    \                if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y)\n                    result.Add(x);\n            }\n   \
    \     }\n        return result.Distinct().OrderBy(x => x).ToList();", "      \
    \  var result = new List<long>();\n        foreach (var item in l1) {\n      \
    \      if (l2.Contains(item)) {\n                result.Add(item);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long x in l1) {\n            max = Math.Max(max,\
    \ x);\n        }\n        foreach (long x in l2) {\n            max = Math.Max(max,\
    \ x);\n        }\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.OrderBy(x => x).ToList();", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            bool found = false;\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             found = true;\n                    break;\n                }\n \
    \           }\n            if (!found) {\n                result.Add(x);\n   \
    \         }\n        }\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long common = 0;\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    common++;\n                }\n            }\n \
    \       }\n        result.Add(common);\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        var result = new List<long>();\n        var hash = new Dictionary<long,\
    \ int>();\n        foreach (var item in l1) {\n            if (hash.ContainsKey(item))\
    \ {\n                hash[item]++;\n            } else {\n                hash.Add(item,\
    \ 1);\n            }\n        }\n        foreach (var item in l2) {\n        \
    \    if (hash.ContainsKey(item)) {\n                hash[item]--;\n          \
    \      if (hash[item] == 0) {\n                    result.Add(item);\n       \
    \         }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long common = 0;\n        foreach (long i in l1) {\n            foreach (long\
    \ j in l2) {\n                if (i == j) continue;\n                if (i ==\
    \ common) result.Add(i);\n                else if (j == common) result.Add(j);\n\
    \                else if (i == j) common++;\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long i in l1) {\n            foreach (long j in\
    \ l2) {\n                if (i == j) {\n                    common++;\n      \
    \          }\n            }\n            if (common > 0) {\n                result.Add(i);\n\
    \                common = 0;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (var item in l1)\
    \ {\n            bool found = false;\n            foreach (var item2 in l2) {\n\
    \                if (item == item2) {\n                    found = true;\n   \
    \                 break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long common\
    \ = 0;\n        foreach (long x in l1) {\n            foreach (long y in l2) {\n\
    \                if (x == y) {\n                    common++;\n              \
    \  }\n            }\n        }\n        if (common > 0) {\n            result.Add(common);\n\
    \        }\n        return result.OrderBy(x => x).Distinct().ToList();", "   \
    \     List<long> result = new List<long>();\n        long common = 0;\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    common++;\n                }\n     \
    \       }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) {\n           \
    \         result.Remove(i);\n                    result.Remove(j);\n         \
    \       }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ i in l1) {\n            foreach (long j in l2) {\n                if (i == j)\
    \ continue;\n                if (i == common) result.Add(i);\n               \
    \ if (j == common) result.Add(j);\n                if (i == j) common++;\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long i in l1) {\n            foreach (long\
    \ j in l2) {\n                if (i == j) continue;\n                if (result.Contains(j))\
    \ continue;\n                if (result.Contains(i)) continue;\n             \
    \   result.Add(i);\n            }\n        }\n        return result;", "     \
    \   var l3 = new List<long>();\n        foreach (var i in l1) {\n            foreach\
    \ (var j in l2) {\n                if (i == j) continue;\n                if (l3.Contains(j))\
    \ continue;\n                l3.Add(j);\n            }\n        }\n        return\
    \ l3;", "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long minDiff = max1 - min1;\n        long maxDiff = max2\
    \ - min2;\n        long diff;\n        long mid;\n        if (minDiff == maxDiff)\
    \ {\n            diff = maxDiff - minDiff;\n            mid = min1 + diff / 2;\n\
    \            while (min1 < mid && min2 < max1) {\n                if (l1[min1]\
    \ == l2[min2]) {\n                    result.Add(l1[min1]);\n                \
    \    min1++;\n                    min2++;\n                } else if (l1[min1]\
    \ < l2[min2]) {\n                    min1++;\n                } else {\n     \
    \               min2++;\n                }\n            }\n            while (min1\
    \ < max1 && min2 < max2) {\n                if (l1[min1] == l2[min2]) {\n    \
    \                result.Add(l1[min1]);\n                    min1++;\n        \
    \            min2++;\n                } else if (l1[min1] > l2[min2]) {\n    \
    \                min1++;\n                } else {\n                    min2++;\n\
    \                }\n            }\n        } else {\n            diff = maxDiff\
    \ - minDiff;\n            mid = min1 + diff / 2;\n            while (min1 < mid\
    \ && min2 < max1) {\n                if (l1[min1] == l2[min2]) {\n           \
    \         result.Add(l1[min1]);\n                    min1++;\n               \
    \     min2++;\n                } else if (l1[min1] < l2[min2]) {\n           \
    \         min1++;\n                } else {\n                    min2++;\n   \
    \             }\n            }\n            while (min1 < max1 && min2 < max2)\
    \ {\n                if (l1[min1] == l2[min2]) {\n                    result.Add(l1[min1]);\n\
    \                    min1++;\n                    min2++;\n                } else\
    \ if (l1[min1] > l2[min2]) {\n                    min1++;\n                } else\
    \ {\n                    min2++;\n                }\n            }\n         \
    \   while (min1 < max1 && min2 < max2) {\n                if (l1[min1] == l2[min2])\
    \ {\n                    result.Add(l1[min1]);\n                    min1++;\n\
    \                    min2++;\n                } else if (l1[min1] < l2[min2])\
    \ {\n                    min1++;\n                } else {\n                 \
    \   min2++;\n                }\n            }\n            while (min1 < max1\
    \ && min2 < max2) {\n                if (l1[min1] == l2[min2]) {\n           \
    \         result.Add(l1[min1]", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) continue;\n                if\
    \ (i == common) continue;\n                if (j == common) continue;\n      \
    \          if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == ", "        List<long> result = new List<long>();\n       \
    \ foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                result.Add(i);\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (!l1.Contains(i))\
    \ {\n                result.Add(i);\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        if (result.Count > 0) {\n            result.Sort();\n\
    \        }\n        return result.Distinct().ToList();", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x).Distinct().ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            bool found = false;\n         \
    \   foreach (long j in l2) {\n                if (i == j) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(i);\n            }\n\
    \        }\n        return result.OrderBy(i => i).ToList();", "        var result\
    \ = new List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n                l2.Remove(item);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    common++;\n                }\n            }\n       \
    \ }\n        result.Add(common);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    common++;\n                }\n            }\n       \
    \ }\n        result.Add(common);\n        return result.OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>(l1);\n        foreach (long x in l2) {\n            if (set.Contains(x))\
    \ {\n                result.Add(x);\n                set.Remove(x);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result.Distinct().OrderBy(x => x).ToList();", "   \
    \     List<long> result = new List<long>();\n        long common = 0;\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    common++;\n                }\n     \
    \       }\n        }\n        result.Add(common);\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ {\n                    result.Remove(i);\n                    result.Remove(j);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) continue;\n                if (i > j) max = i;\n                else if\
    \ (i < j) max = j;\n                else {\n                    if (max != 0)\
    \ {\n                        if (max > i) result.Add(max);\n                 \
    \       if (max < j) result.Add(max);\n                    }\n               \
    \     max = i;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().ToList();", "    \
    \    List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       var result = new List<long>();\n        foreach (var item in l1) {\n \
    \           if (l2.Contains(item)) {\n                result.Add(item);\n    \
    \            l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            bool found = false;\n            foreach (long\
    \ j in l2) {\n                if (i == j) found = true;\n            }\n     \
    \       if (!found) result.Add(i);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(j)) continue;\n                if (result.Contains(i))\
    \ continue;\n                result.Add(i);\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long minDiff = max1 - min1;\n        long\
    \ maxDiff = max2 - min2;\n        long diff;\n        long mid;\n        long\
    \ mid1;\n        long mid2;\n        bool found;\n        do {\n            found\
    \ = false;\n            mid = (min1 + max1) / 2;\n            mid1 = l1.IndexOf(mid);\n\
    \            mid2 = l2.IndexOf(mid);\n            if (mid1 == -1 || mid2 == -1)\
    \ {\n                result.Add(mid);\n            } else {\n                diff\
    \ = mid1 - mid2;\n                if (diff > 0) {\n                    min1 =\
    \ mid1;\n                } else {\n                    max1 = mid1;\n        \
    \        }\n                if (diff < 0) {\n                    min2 = mid2;\n\
    \                } else {\n                    max2 = mid2;\n                }\n\
    \                if (minDiff > diff) {\n                    minDiff = diff;\n\
    \                }\n                if (maxDiff < diff) {\n                  \
    \  maxDiff = diff;\n                }\n            }\n        } while (found ==\
    \ false);\n        if (minDiff > maxDiff) {\n            result.AddRange(l1.Skip(1).Take(maxDiff\
    \ - minDiff));\n        } else {\n            result.AddRange(l2.Skip(1).Take(minDiff\
    \ - maxDiff));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        foreach (long x in l1) {\n            if (x < min) min = x;\n\
    \            if (x > max) max = x;\n        }\n        foreach (long x in l2)\
    \ {\n            if (x < min) min = x;\n            if (x > max) max = x;\n  \
    \      }\n        long mid = (min + max) / 2;\n        foreach (long x in l1)\
    \ {\n            if (x == mid) result.Add(x);\n        }\n        foreach (long\
    \ x in l2) {\n            if (x == mid) result.Add(x);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long common\
    \ = 0;\n        foreach (long x in l1) {\n            foreach (long y in l2) {\n\
    \                if (x == y) {\n                    common++;\n              \
    \  }\n            }\n        }\n        result.Add(common);\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long mid1 = (max1 + min1) / 2;\n     \
    \   long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2) / 2;\n  \
    \      long mid2 = mid - mid1;\n        long mid1 = mid + mid2;\n        long\
    \ mid3 = mid1 + mid2;\n        long mid4 = mid3 - mid1;\n        long mid5 = mid4\
    \ + mid2;\n        long mid6 = mid5 + mid2;\n        long mid7 = mid6 + mid2;\n\
    \        long mid8 = mid7 + mid2;\n        long mid9 = mid8 + mid2;\n        long\
    \ mid10 = mid9 + mid2;\n        long mid11 = mid10 + mid2;\n        long mid12\
    \ = mid11 + mid2;\n        long mid13 = mid12 + mid2;\n        long mid14 = mid13\
    \ + mid2;\n        long mid15 = mid14 + mid2;\n        long mid16 = mid15 + mid2;\n\
    \        long mid17 = mid16 + mid2;\n        long mid18 = mid17 + mid2;\n    \
    \    long mid19 = mid18 + mid2;\n        long mid20 = mid19 + mid2;\n        long\
    \ mid21 = mid20 + mid2;\n        long mid22 = mid21 + mid2;\n        long mid23\
    \ = mid22 + mid2;\n        long mid24 = mid23 + mid2;\n        long mid25 = mid24\
    \ + mid2;\n        long mid26 = mid25 + mid2;\n        long mid27 = mid26 + mid2;\n\
    \        long mid28 = mid27 + mid2;\n        long mid29 = mid28 + mid2;\n    \
    \    long mid30 = mid29 + mid2;\n        long mid31 = mid30 + mid2;\n        long\
    \ mid32 = mid31 + mid2;\n        long mid33 = mid32 + mid2;\n        long mid34\
    \ = mid33 + mid2;\n        long mid35 = mid34 + mid2;\n        long mid36 = mid35\
    \ + mid2;\n        long mid37 = mid36 + mid2;\n        long mid38 = mid37 + mid2;\n\
    \        long mid39 = mid38 + mid2;\n        long mid40 = mid39 + mid2;\n    \
    \    long mid41 = mid40 + ", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            foreach (long j in l2) {\n    \
    \            if (i == j) {\n                    result.Add(i);\n             \
    \       break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ {\n                    result.Remove(i);\n                    result.Remove(j);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        List<long> result = new List<long>();\n        HashSet<long> set1 = new\
    \ HashSet<long>(l1);\n        HashSet<long> set2 = new HashSet<long>(l2);\n  \
    \      foreach (long x in set1) {\n            if (set2.Contains(x)) {\n     \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ found = true;\n            }\n            if (!found) result.Add(i);\n     \
    \   }\n        return result.OrderBy(i => i).ToList();", "        List<long> result\
    \ = new List<long>();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long minDiff\
    \ = max1 - min1;\n        long maxDiff = max2 - min2;\n        long diff;\n  \
    \      if (minDiff > maxDiff) {\n            diff = minDiff;\n        } else {\n\
    \            diff = maxDiff;\n        }\n        long mid1 = (max1 + min1) / 2;\n\
    \        long mid2 = (max2 + min2) / 2;\n        while (diff > 0) {\n        \
    \    if (l1.Contains(mid1)) {\n                if (l2.Contains(mid2)) {\n    \
    \                result.Add(mid1);\n                    result.Add(mid2);\n  \
    \                  diff--;\n                }\n                mid1 = (max1 +\
    \ min1) / 2;\n                mid2 = (max2 + min2) / 2;\n            } else {\n\
    \                if (l2.Contains(mid2)) {\n                    result.Add(mid2);\n\
    \                    result.Add(mid1);\n                    diff--;\n        \
    \        }\n                mid1 = (max1 + min1) / 2;\n                mid2 =\
    \ (max2 + min2) / 2;\n            }\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (var i in l1) {\n\
    \            foreach (var j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) {\n           \
    \         result.Remove(i);\n                    result.Remove(j);\n         \
    \       }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ i in l1) {\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    common++;\n                }\n            }\n       \
    \     if (common > 0) {\n                result.Add(i);\n                common\
    \ = 0;\n            }\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        foreach (var item in l1) {\n            foreach\
    \ (var item2 in l2) {\n                if (item == item2) {\n                \
    \    result.Add(item);\n                    break;\n                }\n      \
    \      }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (var item in l1)\
    \ {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \                l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ maxValue = l1.Max();\n        long minValue = l2.Min();\n        long maxCount\
    \ = l1.Count(x => x == maxValue);\n        long minCount = l2.Count(x => x ==\
    \ minValue);\n        long commonCount = 0;\n        long commonValue = 0;\n \
    \       long commonValueCount = 0;\n        foreach (long value in l1) {\n   \
    \         if (l2.Contains(value)) {\n                commonCount++;\n        \
    \        commonValue = value;\n                commonValueCount = 1;\n       \
    \     }\n        }\n        foreach (long value in l2) {\n            if (l1.Contains(value))\
    \ {\n                commonCount++;\n                commonValue = value;\n  \
    \              commonValueCount = 1;\n            }\n        }\n        if (commonCount\
    \ > maxCount && commonCount > minCount) {\n            commonCount = maxCount;\n\
    \            commonValue = maxValue;\n            commonValueCount = maxCount;\n\
    \        }\n        else if (commonCount < maxCount && commonCount < minCount)\
    \ {\n            commonCount = minCount;\n            commonValue = minValue;\n\
    \            commonValueCount = minCount;\n        }\n        if (commonCount\
    \ > 0) {\n            while (commonCount > 0) {\n                result.Add(commonValue);\n\
    \                commonCount--;\n                commonValueCount--;\n       \
    \     }\n        }\n        if (commonValueCount > 0) {\n            while (commonValueCount\
    \ > 0) {\n                result.Add(commonValue);\n                commonValueCount--;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    common++;\n                    break;\n             \
    \   }\n            }\n        }\n        result.Add(common);\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        foreach (long x in l1) {\n            foreach (long y in l2)\
    \ {\n                if (x == y) {\n                    result.Add(x);\n     \
    \               max = Math.Max(max, x);\n                }\n            }\n  \
    \      }\n        foreach (long x in l2) {\n            foreach (long y in l1)\
    \ {\n                if (x == y) {\n                    result.Add(x);\n     \
    \               max = Math.Max(max, x);\n                }\n            }\n  \
    \      }\n        return result.OrderByDescending(x => x).Take(max).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();"]
stop_tokens:
- "\n    }\n"
