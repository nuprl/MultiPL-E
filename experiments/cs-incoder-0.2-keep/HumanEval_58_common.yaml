name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5,\
  \ 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public static\
  \ List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        foreach (long i in l1) {\n            max = Math.Max(max, i);\n\
    \        }\n        foreach (long i in l2) {\n            max = Math.Max(max,\
    \ i);\n        }\n        long min = 0;\n        foreach (long i in l1) {\n  \
    \          min = Math.Min(min, i);\n        }\n        foreach (long i in l2)\
    \ {\n            min = Math.Min(min, i);\n        }\n        long mid = (max +\
    \ min) / 2;\n        foreach (long i in l1) {\n            if (i <= mid) {\n \
    \               result.Add(i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (i <= mid) {\n                result.Add(i);\n  \
    \          }\n        }\n        return result.OrderBy(i => i).ToList();", " \
    \       List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = (max1 + min1) / 2;\n        long mid2 = (max2\
    \ + min2) / 2;\n        long mid = (max1 + min2) / 2;\n        long mid2 = mid;\n\
    \        long mid1 = mid;\n        long mid3 = mid;\n        long mid4 = mid;\n\
    \        long mid5 = mid;\n        long mid6 = mid;\n        long mid7 = mid;\n\
    \        long mid8 = mid;\n        long mid9 = mid;\n        long mid10 = mid;\n\
    \        long mid11 = mid;\n        long mid12 = mid;\n        long mid13 = mid;\n\
    \        long mid14 = mid;\n        long mid15 = mid;\n        long mid16 = mid;\n\
    \        long mid17 = mid;\n        long mid18 = mid;\n        long mid19 = mid;\n\
    \        long mid20 = mid;\n        long mid21 = mid;\n        long mid22 = mid;\n\
    \        long mid23 = mid;\n        long mid24 = mid;\n        long mid25 = mid;\n\
    \        long mid26 = mid;\n        long mid27 = mid;\n        long mid28 = mid;\n\
    \        long mid29 = mid;\n        long mid30 = mid;\n        long mid31 = mid;\n\
    \        long mid32 = mid;\n        long mid33 = mid;\n        long mid34 = mid;\n\
    \        long mid35 = mid;\n        long mid36 = mid;\n        long mid37 = mid;\n\
    \        long mid38 = mid;\n        long mid39 = mid;\n        long mid40 = mid;\n\
    \        long mid41 = mid;\n        long mid42 = mid;\n        long mid43 = mid;\n\
    \        long mid44 = mid;\n        long mid45 = mid;\n        long mid46 = mid;\n\
    \        long mid47 = mid;\n        long mid48 = mid;\n        long mid49 = mid;\n\
    \        long mid50 = mid;\n        long mid51 = mid;\n        long mid52 = mid;\n\
    \        long mid53 = mid;\n        long mid54 = mid;\n        long mid55 = mid;\n\
    \        long mid5", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ {\n                    result.Remove(i);\n                    result.Remove(j);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   var result = new List<long>();\n        foreach (var item in l1) {\n     \
    \       foreach (var item2 in l2) {\n                if (item == item2) {\n  \
    \                  result.Add(item);\n                    break;\n           \
    \     }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y)\n     \
    \               result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().ToList();", "    \
    \    List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \           l2.Remove(item);\n            }\n        }\n        return result.Union(l2).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().ToList();", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set1 = new HashSet<long>(l1);\n        HashSet<long> set2\
    \ = new HashSet<long>(l2);\n        foreach (long x in set1) {\n            if\
    \ (set2.Contains(x)) {\n                result.Add(x);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result.Distinct().ToList();",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                    break;\n\
    \                }\n            }\n            if (common > 0) {\n           \
    \     result.Add(x);\n                common = 0;\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y)\n                    result.Add(x);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result.Distinct().OrderBy(x => x).ToList();", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();"]
stop_tokens:
- "\n    }\n"
