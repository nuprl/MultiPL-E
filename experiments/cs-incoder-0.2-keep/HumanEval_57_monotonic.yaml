name: HumanEval_57_monotonic
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return True is list elements are monotonically increasing or\
  \ decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1,\
  \ 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n\
  \    public static bool Monotonic(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
  \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
  \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
  \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
  \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L,\
  \ (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
completions: ["        long prev = l[0];\n        long current = l[0];\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        foreach (long x\
    \ in l.Skip(1))\n        {\n            if (current < x)\n            {\n    \
    \            decreasing = false;\n            }\n            else if (current\
    \ > x)\n            {\n                increasing = false;\n            }\n  \
    \          else\n            {\n                current = x;\n            }\n\
    \            if (increasing && decreasing)\n            {\n                return\
    \ true;\n            }\n        }\n        return false;", "        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return false;\n        long first\
    \ = l[0];\n        long last = l[0];\n        bool firstIsLess = false;\n    \
    \    bool lastIsLess = false;\n        bool firstIsGreater = false;\n        bool\
    \ lastIsGreater = false;\n        for (int i = 1; i < l.Count; i++) {\n      \
    \      long current = l[i];\n            if (current < first) {\n            \
    \    firstIsLess = true;\n                first = current;\n            } else\
    \ if (current > last) {\n                lastIsLess = true;\n                last\
    \ = current;\n            } else if (current < first && current > last) {\n  \
    \              firstIsGreater = true;\n                last = current;\n     \
    \       } else if (current > first && current < last) {\n                lastIsGreater\
    \ = true;\n                first = current;\n            }\n        }\n      \
    \  return firstIsLess && lastIsLess && firstIsGreater && lastIsGreater;", "  \
    \      long max = l.Max();\n        long min = l.Min();\n        if (min > max)\
    \ return false;\n        long mid = min + (max - min) / 2;\n        long mid2\
    \ = mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min) / 2;\n    \
    \    long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4 + (max - min)\
    \ / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long mid7 = mid6\
    \ + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n        long\
    \ mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max - min) / 2;\n\
    \        long mid11 = mid10 + (max - min) / 2;\n        long mid12 = mid11 + (max\
    \ - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n        long mid14\
    \ = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max - min) / 2;\n\
    \        long mid16 = mid15 + (max - min) / 2;\n        long mid17 = mid16 + (max\
    \ - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n        long mid19\
    \ = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max - min) / 2;\n\
    \        long mid21 = mid20 + (max - min) / 2;\n        long mid22 = mid21 + (max\
    \ - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n        long mid24\
    \ = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max - min) / 2;\n\
    \        long mid26 = mid25 + (max - min) / 2;\n        long mid27 = mid26 + (max\
    \ - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n        long mid29\
    \ = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max - min) / 2;\n\
    \        long mid31 = mid30 + (max - min) / 2;\n        long mid32 = mid31 + (max\
    \ - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n        long mid34\
    \ = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max - min) / 2;\n\
    \        long mid36 = mid35 + (max - min) / 2;\n        long mid37 = mid36 + (max\
    \ - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n        long mid39\
    \ = mid38 + (max - min) / 2;", "        if (l.Count < 2) return false;\n     \
    \   long first = l[0];\n        long last = l[l.Count - 1];\n        long middle\
    \ = first + ((last - first) / 2);\n        bool isIncreasing = true;\n       \
    \ bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n   \
    \         long current = l[i];\n            if (current < middle) {\n        \
    \        isIncreasing = false;\n            } else if (current > middle) {\n \
    \               isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count < 2) {\n            return true;\n \
    \       }\n        long first = l[0];\n        long last = l[l.Count - 1];\n \
    \       long mid = first + ((last - first) / 2);\n        bool isIncreasing =\
    \ true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid)\
    \ {\n                isIncreasing = false;\n                break;\n         \
    \   }\n        }\n        if (isIncreasing) {\n            return true;\n    \
    \    }\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > mid) {\n                isDecreasing = false;\n\
    \                break;\n            }\n        }\n        return isDecreasing;",
  "        long first = l.First();\n        long last = l.Last();\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        long current = first;\n  \
    \      long previous = first;\n        foreach (long x in l) {\n            if\
    \ (current < x) {\n                decreasing = false;\n            }\n      \
    \      if (current > x) {\n                increasing = false;\n            }\n\
    \            if (current == x) {\n                current = x;\n            }\n\
    \            if (current < previous) {\n                decreasing = false;\n\
    \            }\n            if (current > previous) {\n                increasing\
    \ = false;\n            }\n            previous = current;\n        }\n      \
    \  return increasing || decreasing;", "        long first = l.First();\n     \
    \   long last = l.Last();\n        long mid = l.Count / 2;\n        long mid2\
    \ = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n \
    \       long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n     \
    \   long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n        long mid47\
    \ = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49 = mid48 /\
    \ 2;\n        long mid50 = mid49 / 2;\n        long mid51 = mid50 / 2;\n", " \
    \       long first = l.First();\n        long last = l.Last();\n        if (first\
    \ > last)\n            return false;\n        if (first == last)\n           \
    \ return true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = l.Skip(1).All(x => x <= mid);\n        bool isDecreasing = l.Skip(1).All(x\
    \ => x >= mid);\n        return isIncreasing || isDecreasing;", "        long\
    \ first = l[0];\n        long last = l[l-1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < mid) {\n                decreasing = false;\n     \
    \       } else if (current > mid) {\n                increasing = false;\n   \
    \         } else {\n                mid = current;\n            }\n        }\n\
    \        return increasing || decreasing;", "        long first = l[0];\n    \
    \    long last = l[0];\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        foreach (long x in l) {\n            if (x > last) {\n    \
    \            increasing = false;\n            }\n            if (x < first) {\n\
    \                decreasing = false;\n            }\n            last = x;\n \
    \       }\n        return increasing || decreasing;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        long diff\
    \ = max - min;\n        long diff2 = mid - min;\n        long diff3 = max - mid;\n\
    \        long diff4 = mid - max;\n        long diff5 = min - mid;\n        long\
    \ diff6 = max - min;\n        long diff7 = mid - min;\n        long diff8 = max\
    \ - mid;\n        long diff9 = mid - max;\n        long diff10 = mid - min;\n\
    \        long diff11 = mid - mid;\n        long diff12 = mid - max;\n        long\
    \ diff13 = mid - min;\n        long diff14 = mid - mid;\n        long diff15 =\
    \ mid - max;\n        long diff16 = mid - min;\n        long diff17 = mid - mid;\n\
    \        long diff18 = mid - max;\n        long diff19 = mid - min;\n        long\
    \ diff20 = mid - mid;\n        long diff21 = mid - max;\n        long diff22 =\
    \ mid - min;\n        long diff23 = mid - mid;\n        long diff24 = mid - max;\n\
    \        long diff25 = mid - min;\n        long diff26 = mid - mid;\n        long\
    \ diff27 = mid - max;\n        long diff28 = mid - min;\n        long diff29 =\
    \ mid - mid;\n        long diff30 = mid - max;\n        long diff31 = mid - min;\n\
    \        long diff32 = mid - mid;\n        long diff33 = mid - max;\n        long\
    \ diff34 = mid - min;\n        long diff35 = mid - mid;\n        long diff36 =\
    \ mid - max;\n        long diff37 = mid - min;\n        long diff38 = mid - mid;\n\
    \        long diff39 = mid - max;\n        long diff40 = mid - min;\n        long\
    \ diff41 = mid - mid;\n        long diff42 = mid - max;\n        long diff43 =\
    \ mid - min;\n        long diff44 = mid - mid;\n        long diff45 = mid - max;\n\
    \        long diff46 = mid - min;\n        long diff47 = mid - mid;\n        long\
    \ diff48 = mid - max;\n        long diff49 = mid - min;\n        long diff50",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool increasing = true;\n        bool decreasing = true;\n        long midValue\
    \ = l[l.Count - 1];\n        foreach (long value in l) {\n            if (value\
    \ > midValue) {\n                decreasing = false;\n            }\n        \
    \    if (value < midValue) {\n                increasing = false;\n          \
    \  }\n            if (value == midValue) {\n                midValue = value;\n\
    \            }\n        }\n        if (increasing && decreasing) return true;\n\
    \        if (increasing && !decreasing) return true;\n        if (decreasing &&\
    \ !increasing) return true;\n        return false;", "        if (l.Count < 2)\
    \ {\n            return true;\n        }\n        long first = l[0];\n       \
    \ long last = l[l.Count - 1];\n        long middle = first + ((last - first) /\
    \ 2);\n        bool isIncreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < middle) {\n                isIncreasing = false;\n\
    \                break;\n            }\n        }\n        return isIncreasing;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n \
    \       bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < mid) {\n                decreasing = false;\n            }\
    \ else if (current > mid) {\n                increasing = false;\n           \
    \ } else {\n                mid = current;\n            }\n        }\n       \
    \ return increasing || decreasing;", "        if (l.Count < 2) return true;\n\
    \        long first = l[0];\n        long last = l[l-1];\n        long mid = (first\
    \ + last) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid)\
    \ {\n                isIncreasing = false;\n            } else if (l[i] > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        long mid = l.Average();\n        long diff = max - min;\n\
    \        long diff2 = mid - min;\n        long diff3 = max - mid;\n        long\
    \ diff4 = mid - max;\n        long diff5 = max - mid;\n        long diff6 = mid\
    \ - min;\n        long diff7 = max - min;\n        long diff8 = mid - max;\n \
    \       long diff9 = mid - min;\n        long diff10 = mid - max;\n        long\
    \ diff11 = mid - min;\n        long diff12 = mid - max;\n        long diff13 =\
    \ mid - min;\n        long diff14 = mid - max;\n        long diff15 = mid - min;\n\
    \        long diff16 = mid - max;\n        long diff17 = mid - min;\n        long\
    \ diff18 = mid - max;\n        long diff19 = mid - min;\n        long diff20 =\
    \ mid - max;\n        long diff21 = mid - min;\n        long diff22 = mid - max;\n\
    \        long diff23 = mid - min;\n        long diff24 = mid - max;\n        long\
    \ diff25 = mid - min;\n        long diff26 = mid - max;\n        long diff27 =\
    \ mid - min;\n        long diff28 = mid - max;\n        long diff29 = mid - min;\n\
    \        long diff30 = mid - max;\n        long diff31 = mid - min;\n        long\
    \ diff32 = mid - max;\n        long diff33 = mid - min;\n        long diff34 =\
    \ mid - max;\n        long diff35 = mid - min;\n        long diff36 = mid - max;\n\
    \        long diff37 = mid - min;\n        long diff38 = mid - max;\n        long\
    \ diff39 = mid - min;\n        long diff40 = mid - max;\n        long diff41 =\
    \ mid - min;\n        long diff42 = mid - max;\n        long diff43 = mid - min;\n\
    \        long diff44 = mid - max;\n        long diff45 = mid - min;\n        long\
    \ diff46 = mid - max;\n        long diff47 = mid - min;\n        long diff48 =\
    \ mid - max;\n        long diff49 = mid - min;\n        long diff", "        if\
    \ (l.Count < 2) return true;\n        long first = l[0], last = l[0];\n      \
    \  bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n    \
    \        long current = l[i];\n            if (current < first) increasing = false;\n\
    \            if (current > last) increasing = true;\n            last = current;\n\
    \        }\n        return increasing;", "        if (l.Count == 0) return true;\n\
    \        if (l.Count == 1) return l[0] >= l[1];\n        if (l.Count == 2) return\
    \ l[0] >= l[1] && l[0] >= l[2];\n        if (l.Count == 3) return l[0] >= l[1]\
    \ && l[0] >= l[2] && l[0] >= l[3];\n        if (l.Count == 4) return l[0] >= l[1]\
    \ && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4];\n        if (l.Count == 5)\
    \ return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] && l[0]\
    \ >= l[5];\n        if (l.Count == 6) return l[0] >= l[1] && l[0] >= l[2] && l[0]\
    \ >= l[3] && l[0] >= l[4] && l[0] >= l[5] && l[0] >= l[6];\n        if (l.Count\
    \ == 7) return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] &&\
    \ l[0] >= l[5] && l[0] >= l[6] && l[0] >= l[7];\n        if (l.Count == 8) return\
    \ l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] && l[0] >= l[5]\
    \ && l[0] >= l[6] && l[0] >= l[7] && l[0] >= l[8];\n        if (l.Count == 9)\
    \ return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] && l[0]\
    \ >= l[5] && l[0] >= l[6] && l[0] >= l[7] && l[0] >= l[8] && l[0] >= l[9];\n \
    \       if (l.Count == 10) return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3]\
    \ && l[0] >= l[4] && l[0] >= l[5] && l[0] >= l[6] && l[0] >= l[7] && l[0] >= l[8]\
    \ && l[0] >= l[9] && l[0] >= l[10];\n        if (l.Count == 11) return l[0] >=\
    \ l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] && l[0] >= l[5] && l[0]\
    \ >= l[6] && l[0] >= l[7] && l[0] >= l[8] && l[0] >= l[9] && l[0] >= l[10] &&\
    \ l[0] >= l[11];\n        if (l.Count == 12) return l[0] >= l[1] && l[0] >= l[2]\
    \ && l[0] >= l[3] && l[0] >= l[4] && l[0] >= ", "        long min = l.Min();\n\
    \        long max = l.Max();\n        long mid = l.Count / 2;\n        long midVal\
    \ = l[mid];\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasing", "        long first = l.First();\n\
    \        long last = l.Last();\n        long middle = l.Skip(1).Take(2).Last();\n\
    \        long middle2 = l.Skip(1).Take(2).Skip(1).Last();\n        long middle3\
    \ = l.Skip(1).Take(2).Skip(2).Last();\n        long middle4 = l.Skip(1).Take(2).Skip(3).Last();\n\
    \        long middle5 = l.Skip(1).Take(2).Skip(4).Last();\n        long middle6\
    \ = l.Skip(1).Take(2).Skip(5).Last();\n        long middle7 = l.Skip(1).Take(2).Skip(6).Last();\n\
    \        long middle8 = l.Skip(1).Take(2).Skip(7).Last();\n        long middle9\
    \ = l.Skip(1).Take(2).Skip(8).Last();\n        long middle10 = l.Skip(1).Take(2).Skip(9).Last();\n\
    \        long middle11 = l.Skip(1).Take(2).Skip(10).Last();\n        long middle12\
    \ = l.Skip(1).Take(2).Skip(11).Last();\n        long middle13 = l.Skip(1).Take(2).Skip(12).Last();\n\
    \        long middle14 = l.Skip(1).Take(2).Skip(13).Last();\n        long middle15\
    \ = l.Skip(1).Take(2).Skip(14).Last();\n        long middle16 = l.Skip(1).Take(2).Skip(15).Last();\n\
    \        long middle17 = l.Skip(1).Take(2).Skip(16).Last();\n        long middle18\
    \ = l.Skip(1).Take(2).Skip(17).Last();\n        long middle19 = l.Skip(1).Take(2).Skip(18).Last();\n\
    \        long middle20 = l.Skip(1).Take(2).Skip(19).Last();\n        long middle21\
    \ = l.Skip(1).Take(2).Skip(20).Last();\n        long middle22 = l.Skip(1).Take(2).Skip(21).Last();\n\
    \        long middle23 = l.Skip(1).Take(2).Skip(22).Last();\n        long middle24\
    \ = l.Skip(1).Take(2).Skip(23).Last();\n        long middle25 = l.Skip(1).Take(2).Skip(24).Last();\n\
    \        long middle26 = l.Skip(1).Take(2).Skip(25).Last();\n        long middle27\
    \ = l.Skip(1).Take(2).Skip(26).Last();\n        long middle28 = ", "        if\
    \ (l.Count == 0) return true;\n        long max = l.Max();\n        long min =\
    \ l.Min();\n        if (min < 0 || max < 0) {\n            throw new ArgumentException(\"\
    List elements must be non-negative\");\n        }\n        long mid = min + (max\
    \ - min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        foreach (long i in l) {\n            if (i > mid) {\n       \
    \         isIncreasing = false;\n            }\n            if (i < mid) {\n \
    \               isDecreasing = false;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        if (l.Count == 0) return true;\n  \
    \      var first = l[0];\n        var last = l[0];\n        foreach (var x in\
    \ l.Skip(1))\n            if (x <= first) first = x;\n            else if (x >=\
    \ last) last = x;\n        return first < last;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        if (max < min) return false;\n        long\
    \ mid = l.Count / 2;\n        long midVal = l[mid];\n        long midVal2 = l[mid+1];\n\
    \        long midVal3 = l[mid+2];\n        long midVal4 = l[mid+3];\n        long\
    \ midVal5 = l[mid+4];\n        long midVal6 = l[mid+5];\n        long midVal7\
    \ = l[mid+6];\n        long midVal8 = l[mid+7];\n        long midVal9 = l[mid+8];\n\
    \        long midVal10 = l[mid+9];\n        long midVal11 = l[mid+10];\n     \
    \   long midVal12 = l[mid+11];\n        long midVal13 = l[mid+12];\n        long\
    \ midVal14 = l[mid+13];\n        long midVal15 = l[mid+14];\n        long midVal16\
    \ = l[mid+15];\n        long midVal17 = l[mid+16];\n        long midVal18 = l[mid+17];\n\
    \        long midVal19 = l[mid+18];\n        long midVal20 = l[mid+19];\n    \
    \    long midVal21 = l[mid+20];\n        long midVal22 = l[mid+21];\n        long\
    \ midVal23 = l[mid+22];\n        long midVal24 = l[mid+23];\n        long midVal25\
    \ = l[mid+24];\n        long midVal26 = l[mid+25];\n        long midVal27 = l[mid+26];\n\
    \        long midVal28 = l[mid+27];\n        long midVal29 = l[mid+28];\n    \
    \    long midVal30 = l[mid+29];\n        long midVal31 = l[mid+30];\n        long\
    \ midVal32 = l[mid+31];\n        long midVal33 = l[mid+32];\n        long midVal34\
    \ = l[mid+33];\n        long midVal35 = l[mid+34];\n        long midVal36 = l[mid+35];\n\
    \        long midVal37 = l[mid+36];\n        long midVal38 = l[mid+37];\n    \
    \    long midVal", "        if (l.Count == 0) return true;\n        if (l.Count\
    \ == 1) return l[0] > l[1];\n        long prev = l[0];\n        long curr = l[1];\n\
    \        bool isIncreasing = true;\n        for (int i = 2; i < l.Count; i++)\
    \ {\n            long next = l[i];\n            if (curr > next) {\n         \
    \       isIncreasing = false;\n            }\n            else if (curr < next)\
    \ {\n                isIncreasing = true;\n            }\n            else if\
    \ (curr == next) {\n                isIncreasing = false;\n            }\n   \
    \         else {\n                isIncreasing = true;\n            }\n      \
    \      curr = next;\n        }\n        return isIncreasing;", "        if (l.Count\
    \ == 0) return false;\n        long first = l[0];\n        long last = l[0];\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < first) {\n                decreasing = false;\n           \
    \ }\n            if (current > last) {\n                increasing = false;\n\
    \            }\n            if (current < last) {\n                last = current;\n\
    \            }\n            if (current > first) {\n                first = current;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.Count < 2) return false;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n        long\
    \ mid2 = mid - 1;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i]\
    \ > mid) {\n                isIncreasing = false;\n            }\n           \
    \ if (l[i] < mid) {\n                isDecreasing = false;\n            }\n  \
    \          if (isIncreasing && isDecreasing) return true;\n            if (isIncreasing\
    \ && !isDecreasing) return true;\n            if (!isIncreasing && isDecreasing)\
    \ return true;\n        }\n        return false;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        long diff\
    \ = max - min;\n        long diff2 = mid - min;\n        long diff3 = diff - diff2;\n\
    \        long diff4 = mid - mid;\n        long diff5 = diff - diff4;\n       \
    \ long diff6 = mid - mid;\n        long diff7 = diff - diff6;\n        long diff8\
    \ = mid - mid;\n        long diff9 = diff - diff8;\n        long diff10 = mid\
    \ - mid;\n        long diff11 = diff - diff10;\n        long diff12 = mid - mid;\n\
    \        long diff13 = diff - diff12;\n        long diff14 = mid - mid;\n    \
    \    long diff15 = diff - diff14;\n        long diff16 = mid - mid;\n        long\
    \ diff17 = diff - diff16;\n        long diff18 = mid - mid;\n        long diff19\
    \ = diff - diff17;\n        long diff20 = mid - mid;\n        long diff21 = diff\
    \ - diff20;\n        long diff22 = mid - mid;\n        long diff23 = diff - diff22;\n\
    \        long diff24 = mid - mid;\n        long diff25 = diff - diff23;\n    \
    \    long diff26 = mid - mid;\n        long diff27 = diff - diff26;\n        long\
    \ diff28 = mid - mid;\n        long diff29 = diff - diff27;\n        long diff30\
    \ = mid - mid;\n        long diff31 = diff - diff28;\n        long diff32 = mid\
    \ - mid;\n        long diff33 = diff - diff32;\n        long diff34 = mid - mid;\n\
    \        long diff35 = diff - diff33;\n        long diff36 = mid - mid;\n    \
    \    long diff37 = diff - diff35;\n        long diff38 = mid - mid;\n        long\
    \ diff39 = diff - diff36;\n        long diff40 = mid - mid;\n        long diff41\
    \ = diff - diff37;\n        long diff42 = mid - mid;\n        long diff43 = diff\
    \ - diff42;\n        long diff44 = mid - mid;\n        long diff45 = diff - diff43;\n\
    \        long diff46 = mid - mid;\n        long diff47 = diff - diff45;\n    \
    \    long diff48 = mid - mid;\n        long diff", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        long diff\
    \ = max - min;\n        long midDiff = max - mid;\n        long midDiffAbs = midDiff\
    \ < 0 ? -midDiff : midDiff;\n        long diffAbs = diff < 0 ? -diff : diff;\n\
    \        long diffAbsAbs = diffAbs < 0 ? -diffAbs : diffAbs;\n        long midDiffAbsAbs\
    \ = midDiffAbs < 0 ? -midDiffAbs : midDiffAbs;\n        long diffAbsAbsAbs = diffAbsAbs\
    \ < 0 ? -diffAbsAbs : diffAbsAbs;\n        long midDiffAbsAbsAbs = midDiffAbsAbs\
    \ < 0 ? -midDiffAbsAbs : midDiffAbsAbs;\n        long diffAbsAbsAbsAbs = diffAbsAbsAbs\
    \ < 0 ? -diffAbsAbsAbs : diffAbsAbsAbs;\n        long midDiffAbsAbsAbsAbs = midDiffAbsAbsAbs\
    \ < 0 ? -midDiffAbsAbsAbs : midDiffAbsAbsAbs;\n        long diffAbsAbsAbsAbsAbs\
    \ = diffAbsAbsAbsAbs < 0 ? -diffAbsAbsAbsAbs : diffAbsAbsAbsAbs;\n        long\
    \ midDiffAbsAbsAbsAbsAbs = midDiffAbsAbsAbsAbs < 0 ? -midDiffAbsAbsAbsAbs : midDiffAbsAbsAbsAbs;\n\
    \        long diffAbsAbsAbsAbsAbsAbs = diffAbsAbsAbsAbsAbs < 0 ? -diffAbsAbsAbsAbsAbs\
    \ : diffAbsAbsAbsAbsAbs;\n        long midDiffAbsAbsAbsAbsAbsAbs = midDiffAbsAbsAbsAbsAbs\
    \ < 0 ? -midDiffAbsAbsAbsAbsAbs : midDiffAbsAbsAbsAbsAbs;\n        long diffAbsAbsAbsAbsAbsAbsAbs\
    \ = diffAbsAbsAbsAbsAbsAbsAbs < 0 ? -diffAbsAbsAbsAbsAbsAbs : diffAbsAbsAbsAbsAbsAbsAbs;\n\
    \        long midDiffAbsAb", "        long max = l.Max();\n        long min =\
    \ l.Min();\n        long mid = l.Average();\n        long diff = max - min;\n\
    \        long diff2 = mid - min;\n        long diff3 = diff - diff2;\n       \
    \ long diff4 = diff - diff3;\n        long diff5 = diff - diff4;\n        long\
    \ diff6 = diff - diff5;\n        long diff7 = diff - diff6;\n        long diff8\
    \ = diff - diff7;\n        long diff9 = diff - diff8;\n        long diff10 = diff\
    \ - diff9;\n        long diff11 = diff - diff10;\n        long diff12 = diff -\
    \ diff11;\n        long diff13 = diff - diff12;\n        long diff14 = diff -\
    \ diff13;\n        long diff15 = diff - diff14;\n        long diff16 = diff -\
    \ diff15;\n        long diff17 = diff - diff16;\n        long diff18 = diff -\
    \ diff17;\n        long diff19 = diff - diff18;\n        long diff20 = diff -\
    \ diff19;\n        long diff21 = diff - diff20;\n        long diff22 = diff -\
    \ diff21;\n        long diff23 = diff - diff22;\n        long diff24 = diff -\
    \ diff23;\n        long diff25 = diff - diff24;\n        long diff26 = diff -\
    \ diff25;\n        long diff27 = diff - diff26;\n        long diff28 = diff -\
    \ diff27;\n        long diff29 = diff - diff28;\n        long diff30 = diff -\
    \ diff29;\n        long diff31 = diff - diff30;\n        long diff32 = diff -\
    \ diff31;\n        long diff33 = diff - diff32;\n        long diff34 = diff -\
    \ diff33;\n        long diff35 = diff - diff34;\n        long diff36 = diff -\
    \ diff35;\n        long diff37 = diff - diff36;\n        long diff38 = diff -\
    \ diff37;\n        long diff39 = diff - diff38;\n        long diff40 = diff -\
    \ diff39;\n        long diff41 = diff - diff40;\n        long diff42 = diff -\
    \ diff41;\n        long diff43 = diff - diff42;\n        long diff44 = diff -\
    \ diff43;\n        long diff45 = diff - diff44;\n        long diff46 = diff -\
    \ diff45;\n        long diff47 = diff - diff46;\n        long diff48 = diff ",
  "        long first = l[0];\n        long last = l[0];\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        foreach (long x in l) {\n\
    \            if (first > x) {\n                increasing = false;\n         \
    \   }\n            if (last < x) {\n                decreasing = false;\n    \
    \        }\n            last = x;\n        }\n        return increasing || decreasing;",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = max - mid;\n        long diff4 = mid - max;\n        long diff5 = min\
    \ - mid;\n        long diff6 = max - min;\n        long diff7 = mid - max;\n \
    \       long diff8 = mid - min;\n        long diff9 = min - mid;\n        long\
    \ diff10 = max - mid;\n        long diff11 = mid - max;\n        long diff12 =\
    \ mid - min;\n        long diff13 = max - mid;\n        long diff14 = mid - max;\n\
    \        long diff15 = mid - min;\n        long diff16 = max - mid;\n        long\
    \ diff17 = mid - max;\n        long diff18 = mid - min;\n        long diff19 =\
    \ max - mid;\n        long diff20 = mid - max;\n        long diff21 = mid - min;\n\
    \        long diff22 = max - mid;\n        long diff23 = mid - max;\n        long\
    \ diff24 = mid - min;\n        long diff25 = max - mid;\n        long diff26 =\
    \ mid - max;\n        long diff27 = mid - min;\n        long diff28 = max - mid;\n\
    \        long diff29 = mid - max;\n        long diff30 = mid - min;\n        long\
    \ diff31 = max - mid;\n        long diff32 = mid - max;\n        long diff33 =\
    \ mid - min;\n        long diff34 = max - mid;\n        long diff35 = mid - max;\n\
    \        long diff36 = mid - min;\n        long diff37 = max - mid;\n        long\
    \ diff38 = mid - max;\n        long diff39 = mid - min;\n        long diff40 =\
    \ max - mid;\n        long diff41 = mid - max;\n        long diff42 = mid - min;\n\
    \        long diff43 = max - mid;\n        long diff44 = mid - max;\n        long\
    \ diff45 = mid - min;\n        long diff46 = max - mid;\n        long diff47 =\
    \ mid - max;\n        long diff48 = mid - min;\n        long diff49 = max - mid;\n\
    \        long diff50 = mid - max;\n        long diff51 = mid - min;\n", "    \
    \    long prev = l[0];\n        bool increasing = true;\n        foreach (long\
    \ e in l.Skip(1))\n            if (e < prev)\n                increasing = false;\n\
    \            else\n                prev = e;\n        return increasing;", " \
    \       if (l.Count == 0) return true;\n        long first = l[0];\n        long\
    \ last = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < first) increasing = false;\n            if (current\
    \ > last) decreasing = false;\n            last = current;\n        }\n      \
    \  return increasing || decreasing;", "        long first = l[0];\n        long\
    \ last = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        foreach (long i in l) {\n            if (i < first) {\n             \
    \   increasing = false;\n            }\n            if (i > last) {\n        \
    \        decreasing = false;\n            }\n            if (i == first) {\n \
    \               last = i;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        long first = l.First();\n        long last = l.Last();\n\
    \        if (first > last) return true;\n        if (first < last) return false;\n\
    \        long mid = l.Skip(1).Take(2).Last();\n        if (mid < first) return\
    \ true;\n        if (mid > last) return false;\n        long mid2 = l.Skip(2).Take(2).Last();\n\
    \        if (mid2 < first) return true;\n        if (mid2 > last) return false;\n\
    \        long mid3 = l.Skip(3).Take(2).Last();\n        if (mid3 < first) return\
    \ true;\n        if (mid3 > last) return false;\n        long mid4 = l.Skip(4).Take(2).Last();\n\
    \        if (mid4 < first) return true;\n        if (mid4 > last) return false;\n\
    \        long mid5 = l.Skip(5).Take(2).Last();\n        if (mid5 < first) return\
    \ true;\n        if (mid5 > last) return false;\n        long mid6 = l.Skip(6).Take(2).Last();\n\
    \        if (mid6 < first) return true;\n        if (mid6 > last) return false;\n\
    \        long mid7 = l.Skip(7).Take(2).Last();\n        if (mid7 < first) return\
    \ true;\n        if (mid7 > last) return false;\n        long mid8 = l.Skip(8).Take(2).Last();\n\
    \        if (mid8 < first) return true;\n        if (mid8 > last) return false;\n\
    \        long mid9 = l.Skip(9).Take(2).Last();\n        if (mid9 < first) return\
    \ true;\n        if (mid9 > last) return false;\n        long mid10 = l.Skip(10).Take(2).Last();\n\
    \        if (mid10 < first) return true;\n        if (mid10 > last) return false;\n\
    \        long mid11 = l.Skip(11).Take(2).Last();\n        if (mid11 < first) return\
    \ true;\n        if (mid11 > last) return false;\n        long mid12 = l.Skip(12).Take(2).Last();\n\
    \        if (mid12 < first) return true;\n        if (mid12 > last) return false;\n\
    \        long mid13 = l.Skip(13).Take(2).Last();\n        if (mid13 < first) return\
    \ true;\n        if (mid13 > last) return false;\n        long mid14 = l.Skip(14).Take(2).Last();\n\
    \        if (mid14 < first) return true;\n        if (mid14 > last) return false;\n\
    \        long mid15 = l.Skip(15).Take(2).Last();\n        if (mid15 < first) return\
    \ true;\n        if (mid15 > last) return false;\n        long mid16 = l.Skip(16).Take(2).Last();\n\
    \        if (mid16 < first) return true;\n        if (mid16 > last) return false;\n\
    \        long mid17 = l.Skip", "        if (l.Count < 2) return true;\n      \
    \  long first = l[0];\n        long last = l[l.Count - 1];\n        long mid =\
    \ first + (last - first) / 2;\n        bool increasing = first < mid;\n      \
    \  bool decreasing = last > mid;\n        if (increasing && decreasing) return\
    \ true;\n        if (increasing && !decreasing) return false;\n        if (!increasing\
    \ && decreasing) return false;\n        if (increasing && last < mid) return true;\n\
    \        if (!increasing && first > mid) return false;\n        if (decreasing\
    \ && first > mid) return true;\n        if (!decreasing && last < mid) return\
    \ false;\n        return false;", "        if (l.Count == 0) return true;\n  \
    \      var first = l[0];\n        var last = l[0];\n        foreach (var x in\
    \ l.Skip(1)) {\n            if (x <= first) return false;\n            if (x >=\
    \ last) return false;\n            first = x;\n            last = x;\n       \
    \ }\n        return true;", "        if (l.Count < 2) return true;\n        long\
    \ first = l[0];\n        long last = l[0];\n        foreach (long x in l.Skip(1))\n\
    \            if (x < first) first = x;\n            if (x > last) last = x;\n\
    \        return first < last;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        long currentMax = max;\n        long currentMin = min;\n        foreach\
    \ (long element in l) {\n            if (element > currentMax) {\n           \
    \     isIncreasing = false;\n            }\n            if (element < currentMin)\
    \ {\n                isDecreasing = false;\n            }\n            if (element\
    \ > currentMax) {\n                currentMax = element;\n            }\n    \
    \        if (element < currentMin) {\n                currentMin = element;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing;", "  \
    \      if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = (first + last) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        bool isMonotonic\
    \ = true;\n        foreach (long x in l) {\n            if (x < mid) {\n     \
    \           isIncreasing = false;\n            }\n            if (x > mid) {\n\
    \                isDecreasing = false;\n            }\n            if (x == mid)\
    \ {\n                isMonotonic = false;\n            }\n        }\n        if\
    \ (isIncreasing && isDecreasing && isMonotonic) {\n            return true;\n\
    \        }\n        if (isIncreasing && !isDecreasing && !isMonotonic) {\n   \
    \         return true;\n        }\n        if (isDecreasing && isMonotonic) {\n\
    \            return true;\n        }\n        if (isMonotonic) {\n           \
    \ return true;\n        }\n        return false;", "        if (l.Count == 0)\
    \ return true;\n        if (l.Count == 1) return l[0] > l[1];\n        long max\
    \ = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n \
    \       long midVal = l[mid];\n        long midVal2 = l[mid+1];\n        long\
    \ midVal3 = l[mid+2];\n        long midVal4 = l[mid+3];\n        long midVal5\
    \ = l[mid+4];\n        long midVal6 = l[mid+5];\n        long midVal7 = l[mid+6];\n\
    \        long midVal8 = l[mid+7];\n        long midVal9 = l[mid+8];\n        long\
    \ midVal10 = l[mid+9];\n        long midVal11 = l[mid+10];\n        long midVal12\
    \ = l[mid+11];\n        long midVal13 = l[mid+12];\n        long midVal14 = l[mid+13];\n\
    \        long midVal15 = l[mid+14];\n        long midVal16 = l[mid+15];\n    \
    \    long midVal17 = l[mid+16];\n        long midVal18 = l[mid+17];\n        long\
    \ midVal19 = l[mid+18];\n        long midVal20 = l[mid+19];\n        long midVal21\
    \ = l[mid+20];\n        long midVal22 = l[mid+21];\n        long midVal23 = l[mid+22];\n\
    \        long midVal24 = l[mid+23];\n        long midVal25 = l[mid+24];\n    \
    \    long midVal26 = l[mid+25];\n        long midVal27 = l[mid+26];\n        long\
    \ midVal28 = l[mid+27];\n        long midVal29 = l[mid+28];\n        long midVal30\
    \ = l[mid+29];\n        long midVal31 = l[mid+30];\n        long midVal32 = l[mid+31];\n\
    \        long midVal33 = l[mid+32];\n        long midVal34 = l[mid+33];\n    \
    \    long midVal35 = l[mid+34];\n        long midVal36 = l[mid+35];\n        long\
    \ midVal37 = l[mid+36];\n        long mid", "        long prev = l[0];\n     \
    \   long curr = l[0];\n        bool increasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            prev = curr;\n            curr = l[i];\n  \
    \          if (curr < prev) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing;", "        if (l.Count < 2) return\
    \ false;\n        long first = l[0];\n        long last = l[l.Count - 1];\n  \
    \      long mid = first + ((last - first) / 2);\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < mid) {\n        \
    \        decreasing = false;\n            } else if (current > mid) {\n      \
    \          increasing = false;\n            } else {\n                mid = current;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.Count < 2) return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i\
    \ = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n                isIncreasing\
    \ = false;\n            } else if (l[i] > mid) {\n                isDecreasing\
    \ = false;\n            } else {\n                isIncreasing = isDecreasing\
    \ = true;\n            }\n            if (isIncreasing && isDecreasing) return\
    \ true;\n            if (isIncreasing && !isDecreasing) return false;\n      \
    \      if (!isIncreasing && isDecreasing) return false;\n        }\n        return\
    \ false;", "        long min = l.Min();\n        long max = l.Max();\n       \
    \ long mid = l.Count / 2;\n        long midVal = l[mid];\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        if (min > midVal) {\n  \
    \          isIncreasing = false;\n        }\n        if (max < midVal) {\n   \
    \         isDecreasing = false;\n        }\n        if (isIncreasing && isDecreasing)\
    \ {\n            return true;\n        }\n        if (isIncreasing && !isDecreasing)\
    \ {\n            return false;\n        }\n        if (!isIncreasing && isDecreasing)\
    \ {\n            return true;\n        }\n        return false;", "        if\
    \ (l.Count < 2) return true;\n        long first = l[0];\n        long last =\
    \ l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n        long\
    \ mid2 = mid + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first) /\
    \ 2;\n        long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4\
    \ + (mid4 - first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n    \
    \    long mid7 = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7\
    \ - first) / 2;\n        long mid9 = mid8 + (mid8 - first) / 2;\n        long\
    \ mid10 = mid9 + (mid9 - first) / 2;\n        long mid11 = mid10 + (mid10 - first)\
    \ / 2;\n        long mid12 = mid11 + (mid11 - first) / 2;\n        long mid13\
    \ = mid12 + (mid12 - first) / 2;\n        long mid14 = mid13 + (mid13 - first)\
    \ / 2;\n        long mid15 = mid14 + (mid14 - first) / 2;\n        long mid16\
    \ = mid15 + (mid15 - first) / 2;\n        long mid17 = mid16 + (mid16 - first)\
    \ / 2;\n        long mid18 = mid17 + (mid17 - first) / 2;\n        long mid19\
    \ = mid18 + (mid18 - first) / 2;\n        long mid20 = mid19 + (mid19 - first)\
    \ / 2;\n        long mid21 = mid20 + (mid20 - first) / 2;\n        long mid22\
    \ = mid21 + (mid21 - first) / 2;\n        long mid23 = mid22 + (mid22 - first)\
    \ / 2;\n        long mid24 = mid23 + (mid23 - first) / 2;\n        long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        long mid26 = mid25 + (mid25 - first)\
    \ / 2;\n        long mid27 = mid26 + (mid26 - first) / 2;\n        long mid28\
    \ = mid27 + (mid27 - first) / 2;\n        long mid29 = mid28 + (mid28 - first)\
    \ / 2;\n        long mid30 = mid29 + (mid29 - first) / 2;\n        long mid31\
    \ = mid30 + (mid30 - first) / 2;\n        long mid32 = mid31 + (mid31 - first)\
    \ / 2;\n        long mid33 = mid32 + (mid32 - first) / 2;\n        long mid34\
    \ = mid33 + (mid33 - ", "        if (l.Count < 2) return false;\n        long\
    \ first = l[0];\n        long last = l[l.Count - 1];\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ mid) {\n                isIncreasing = false;\n            }\n            if\
    \ (l[i] > mid) {\n                isDecreasing = false;\n            }\n     \
    \   }\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;", "        if (l.Count < 2) return false;\n   \
    \     long first = l[0];\n        long last = l[l.Count - 1];\n        long mid\
    \ = first + ((last - first) / 2);\n        bool increasing = true;\n        bool\
    \ decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  long current = l[i];\n            if (current < mid) {\n                decreasing\
    \ = false;\n            } else if (current > mid) {\n                increasing\
    \ = false;\n            } else {\n                mid = current;\n           \
    \ }\n        }\n        return increasing || decreasing;", "        if (l.Count\
    \ < 2) return true;\n        long a = l[0], b = l[1];\n        for (int i = 2;\
    \ i < l.Count; i++) {\n            long c = l[i];\n            if (c < a) a =\
    \ c;\n            if (c > b) b = c;\n        }\n        return a <= b;", "   \
    \     if (l.Count < 2) return false;\n        long first = l[0], last = l[0];\n\
    \        bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < first) {\n      \
    \          increasing = false;\n            }\n            if (current > last)\
    \ {\n                increasing = true;\n            }\n            last = current;\n\
    \        }\n        return increasing;", "        long first = l.First();\n  \
    \      long last = l.Last();\n        if (first > last) return true;\n       \
    \ if (first == last) return true;\n        if (first < last) return false;\n \
    \       long mid = l.Skip(1).Take(2).Last();\n        if (mid < first) return\
    \ true;\n        if (mid > last) return true;\n        if (mid == first) return\
    \ true;\n        if (mid == last) return true;\n        return false;", "    \
    \    if (l.Count < 2) return true;\n        if (l.Count > 3) return false;\n \
    \       long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ middle = l[l.Count / 2];\n        long midVal = middle - first;\n        long\
    \ midSign = midVal / last;\n        long midSign2 = midSign * midSign;\n     \
    \   long midSign3 = midSign2 * midSign;\n        long midSign4 = midSign3 * midSign;\n\
    \        long midSign5 = midSign4 * midSign;\n        long midSign6 = midSign5\
    \ * midSign;\n        long midSign7 = midSign6 * midSign;\n        long midSign8\
    \ = midSign7 * midSign;\n        long midSign9 = midSign8 * midSign;\n       \
    \ long midSign10 = midSign9 * midSign;\n        long midSign11 = midSign10 * midSign;\n\
    \        long midSign12 = midSign11 * midSign;\n        long midSign13 = midSign12\
    \ * midSign;\n        long midSign14 = midSign13 * midSign;\n        long midSign15\
    \ = midSign14 * midSign;\n        long midSign16 = midSign15 * midSign;\n    \
    \    long midSign17 = midSign16 * midSign;\n        long midSign18 = midSign17\
    \ * midSign;\n        long midSign19 = midSign18 * midSign;\n        long midSign20\
    \ = midSign19 * midSign;\n        long midSign21 = midSign20 * midSign;\n    \
    \    long midSign22 = midSign21 * midSign;\n        long midSign23 = midSign22\
    \ * midSign;\n        long midSign24 = midSign23 * midSign;\n        long midSign25\
    \ = midSign24 * midSign;\n        long midSign26 = midSign25 * midSign;\n    \
    \    long midSign27 = midSign26 * midSign;\n        long midSign28 = midSign27\
    \ * midSign;\n        long midSign29 = midSign28 * midSign;\n        long midSign30\
    \ = midSign29 * midSign;\n        long midSign31 = midSign30 * midSign;\n    \
    \    long midSign32 = midSign31 * midSign;\n        long midSign33 = midSign32\
    \ * midSign;\n        long midSign34 = midSign33 * midSign;\n        long midSign35",
  "        long max = l.Max();\n        long min = l.Min();\n        if (min < 0)\n\
    \            min = 0;\n        if (max > 0)\n            max = max - 1;\n    \
    \    if (min > max)\n            return false;\n        long mid = min + (max\
    \ - min) / 2;\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        foreach (long x in l)\n        {\n            if (x < mid)\n        \
    \    {\n                decreasing = false;\n            }\n            else if\
    \ (x > mid)\n            {\n                increasing = false;\n            }\n\
    \            else\n            {\n                if (x < min)\n             \
    \       min = x;\n                if (x > max)\n                    max = x;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  long first = l.First();\n        long last = l.Last();\n        if (first >\
    \ last)\n            return false;\n        if (first == last)\n            return\
    \ true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l)\n\
    \        {\n            if (x > mid)\n            {\n                isIncreasing\
    \ = false;\n                break;\n            }\n            if (x < mid)\n\
    \            {\n                isDecreasing = false;\n                break;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing;", "  \
    \      long first = l.First();\n        long last = l.Last();\n        if (first\
    \ > last)\n            return false;\n        if (first == last)\n           \
    \ return true;\n        long mid = first + (last - first) / 2;\n        long mid2\
    \ = mid + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n\
    \        long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4\
    \ - first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long\
    \ mid7 = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first)\
    \ / 2;\n        long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9\
    \ + (mid9 - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n \
    \       long mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12\
    \ + (mid12 - first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n\
    \        long mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15\
    \ + (mid15 - first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n\
    \        long mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18\
    \ + (mid18 - first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n\
    \        long mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21\
    \ + (mid21 - first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n\
    \        long mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24\
    \ + (mid24 - first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n\
    \        long mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27\
    \ + (mid27 - first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n\
    \        long mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30\
    \ + (mid30 - first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n\
    \        long mid33 = mid32 + (mid32 - first) / 2;\n        long mid", "     \
    \   long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool increasing = (max < mid);\n        bool decreasing = (min > mid);\n\
    \        return increasing || decreasing;", "        if (l.Count == 0) return\
    \ true;\n        if (l.Count == 1) return l[0] >= l[1];\n        if (l.Count ==\
    \ 2) return l[0] >= l[1] && l[0] >= l[2];\n        if (l.Count == 3) return l[0]\
    \ >= l[1] && l[0] >= l[2] && l[0] >= l[3];\n        if (l.Count == 4) return l[0]\
    \ >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4];\n        if (l.Count\
    \ == 5) return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] &&\
    \ l[0] >= l[5];\n        if (l.Count == 6) return l[0] >= l[1] && l[0] >= l[2]\
    \ && l[0] >= l[3] && l[0] >= l[4] && l[0] >= l[5] && l[0] >= l[6];\n        if\
    \ (l.Count == 7) return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >=\
    \ l[4] && l[0] >= l[5] && l[0] >= l[6] && l[0] >= l[7];\n        if (l.Count ==\
    \ 8) return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] && l[0]\
    \ >= l[5] && l[0] >= l[6] && l[0] >= l[7] && l[0] >= l[8];\n        if (l.Count\
    \ == 9) return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] &&\
    \ l[0] >= l[5] && l[0] >= l[6] && l[0] >= l[7] && l[0] >= l[8] && l[0] >= l[9];\n\
    \        if (l.Count == 10) return l[0] >= l[1] && l[0] >= l[2] && l[0] >= l[3]\
    \ && l[0] >= l[4] && l[0] >= l[5] && l[0] >= l[6] && l[0] >= l[7] && l[0] >= l[8]\
    \ && l[0] >= l[9] && l[0] >= l[10];\n        if (l.Count == 11) return l[0] >=\
    \ l[1] && l[0] >= l[2] && l[0] >= l[3] && l[0] >= l[4] && l[0] >= l[5] && l[0]\
    \ >= l[6] && l[0] >= l[7] && l[0] >= l[8] && l[0] >= l[9] && l[0] >= l[10] &&\
    \ l[0] >= l[11];\n        if (l.Count == 12) return l[0] >= l[1] && l[0] >= l[2]\
    \ && l[0] >= l[3] && l[0] >= l[4] && l[0] >= ", "        long min = l.Min();\n\
    \        long max = l.Max();\n        long mid = l.Count / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        long midVal = l[mid];\n        long midVal2 = l[mid];\n        long midVal3\
    \ = l[mid];\n        long midVal4 = l[mid];\n        long midVal5 = l[mid];\n\
    \        long midVal6 = l[mid];\n        long midVal7 = l[mid];\n        long\
    \ midVal8 = l[mid];\n        long midVal9 = l[mid];\n        long midVal10 = l[mid];\n\
    \        long midVal11 = l[mid];\n        long midVal12 = l[mid];\n        long\
    \ midVal13 = l[mid];\n        long midVal14 = l[mid];\n        long midVal15 =\
    \ l[mid];\n        long midVal16 = l[mid];\n        long midVal17 = l[mid];\n\
    \        long midVal18 = l[mid];\n        long midVal19 = l[mid];\n        long\
    \ midVal20 = l[mid];\n        long midVal21 = l[mid];\n        long midVal22 =\
    \ l[mid];\n        long midVal23 = l[mid];\n        long midVal24 = l[mid];\n\
    \        long midVal25 = l[mid];\n        long midVal26 = l[mid];\n        long\
    \ midVal27 = l[mid];\n        long midVal28 = l[mid];\n        long midVal29 =\
    \ l[mid];\n        long midVal30 = l[mid];\n        long midVal31 = l[mid];\n\
    \        long midVal32 = l[mid];\n        long midVal33 = l[mid];\n        long\
    \ midVal34 = l[mid];\n        long midVal35 = l[mid];\n        long midVal36 =\
    \ l[mid];\n        long midVal37 = l[mid];\n        long midVal38 = l[mid];\n\
    \        long midVal39 = l[mid];\n        long midVal40 = l[mid];\n        long\
    \ midVal41 = l[mid];\n        long midVal42 = l[mid];\n        long midVal43 =\
    \ l[mid];\n        long mid", "        long first = l[0];\n        long last =\
    \ l[l-1];\n        long middle = first + (last - first) / 2;\n        bool increasing\
    \ = (middle < first);\n        bool decreasing = (middle > last);\n        return\
    \ increasing || decreasing;", "        if (l.Count < 2) return true;\n       \
    \ long first = l[0];\n        long last = l[l.Count - 1];\n        long mid =\
    \ first + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n        \
    \    long current = l[i];\n            if (current < mid) {\n                isIncreasing\
    \ = false;\n            } else if (current > mid) {\n                isDecreasing\
    \ = false;\n            } else {\n                isIncreasing = isDecreasing\
    \ = true;\n            }\n            mid = current + ((last - current) / 2);\n\
    \        }\n        return isIncreasing || isDecreasing;", "        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long middle = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < middle) {\n                isIncreasing = false;\n\
    \            }\n            if (l[i] > middle) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n\
    \            return l[0] > l[1];\n        long max = l[0];\n        long min =\
    \ l[0];\n        foreach (long x in l)\n            if (x > max)\n           \
    \     max = x;\n            else if (x < min)\n                min = x;\n    \
    \    if (min > max)\n            return false;\n        long mid = min + (max\
    \ - min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        foreach (long x in l)\n            if (x > mid)\n           \
    \     isIncreasing = false;\n            else if (x < mid)\n                isDecreasing\
    \ = false;\n        if (isIncreasing && isDecreasing)\n            return true;\n\
    \        if (isIncreasing && !isDecreasing)\n            return false;\n     \
    \   if (!isIncreasing && isDecreasing)\n            return true;\n        return\
    \ false;", "        if (l.Count == 0) return true;\n        long max = l.Max();\n\
    \        long min = l.Min();\n        if (min > max) return false;\n        long\
    \ mid = min + (max - min) / 2;\n        long mid2 = mid + (max - mid) / 2;\n \
    \       bool leftIsIncreasing = true;\n        bool rightIsIncreasing = true;\n\
    \        bool leftIsDecreasing = true;\n        bool rightIsDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ rightIsIncreasing = false;\n                if (x < mid2) return false;\n  \
    \          } else if (x < mid) {\n                leftIsIncreasing = false;\n\
    \                if (x > mid2) return false;\n            } else {\n         \
    \       if (x == mid) {\n                    leftIsDecreasing = false;\n     \
    \               rightIsDecreasing = false;\n                } else {\n       \
    \             leftIsDecreasing = true;\n                    rightIsDecreasing\
    \ = true;\n                }\n            }\n        }\n        return leftIsIncreasing\
    \ || rightIsIncreasing || leftIsDecreasing || rightIsDecreasing;", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = max - mid;\n        long diff4 = mid - max;\n        long diff5 = min\
    \ - mid;\n        long diff6 = max - min;\n        long diff7 = mid - max;\n \
    \       long diff8 = min - mid;\n        long diff9 = max - min;\n        long\
    \ diff10 = mid - max;\n        long diff11 = min - mid;\n        long diff12 =\
    \ max - min;\n        long diff13 = mid - max;\n        long diff14 = min - mid;\n\
    \        long diff15 = max - min;\n        long diff16 = mid - max;\n        long\
    \ diff17 = min - mid;\n        long diff18 = max - min;\n        long diff19 =\
    \ mid - max;\n        long diff20 = min - mid;\n        long diff21 = max - min;\n\
    \        long diff22 = mid - max;\n        long diff23 = min - mid;\n        long\
    \ diff24 = max - min;\n        long diff25 = mid - max;\n        long diff26 =\
    \ min - mid;\n        long diff27 = max - min;\n        long diff28 = mid - max;\n\
    \        long diff29 = min - mid;\n        long diff30 = max - min;\n        long\
    \ diff31 = mid - max;\n        long diff32 = min - mid;\n        long diff33 =\
    \ max - min;\n        long diff34 = mid - max;\n        long diff35 = min - mid;\n\
    \        long diff36 = max - min;\n        long diff37 = mid - max;\n        long\
    \ diff38 = min - mid;\n        long diff39 = max - min;\n        long diff40 =\
    \ mid - max;\n        long diff41 = min - mid;\n        long diff42 = max - min;\n\
    \        long diff43 = mid - max;\n        long diff44 = min - mid;\n        long\
    \ diff45 = max - min;\n        long diff46 = mid - max;\n        long diff47 =\
    \ min - mid;\n        long diff48 = max - min;\n        long diff49 = mid - max;\n\
    \        long diff50 = min - mid;\n        long diff51 = max - min;\n        long\
    \ diff5", "        long first = l.First();\n        long last = l.Last();\n  \
    \      long mid = l.Skip(1).Take(2).Sum();\n        long mid2 = l.Skip(2).Take(2).Sum();\n\
    \        long mid3 = l.Skip(3).Take(2).Sum();\n        long mid4 = l.Skip(4).Take(2).Sum();\n\
    \        long mid5 = l.Skip(5).Take(2).Sum();\n        long mid6 = l.Skip(6).Take(2).Sum();\n\
    \        long mid7 = l.Skip(7).Take(2).Sum();\n        long mid8 = l.Skip(8).Take(2).Sum();\n\
    \        long mid9 = l.Skip(9).Take(2).Sum();\n        long mid10 = l.Skip(10).Take(2).Sum();\n\
    \        long mid11 = l.Skip(11).Take(2).Sum();\n        long mid12 = l.Skip(12).Take(2).Sum();\n\
    \        long mid13 = l.Skip(13).Take(2).Sum();\n        long mid14 = l.Skip(14).Take(2).Sum();\n\
    \        long mid15 = l.Skip(15).Take(2).Sum();\n        long mid16 = l.Skip(16).Take(2).Sum();\n\
    \        long mid17 = l.Skip(17).Take(2).Sum();\n        long mid18 = l.Skip(18).Take(2).Sum();\n\
    \        long mid19 = l.Skip(19).Take(2).Sum();\n        long mid20 = l.Skip(20).Take(2).Sum();\n\
    \        long mid21 = l.Skip(21).Take(2).Sum();\n        long mid22 = l.Skip(22).Take(2).Sum();\n\
    \        long mid23 = l.Skip(23).Take(2).Sum();\n        long mid24 = l.Skip(24).Take(2).Sum();\n\
    \        long mid25 = l.Skip(25).Take(2).Sum();\n        long mid26 = l.Skip(26).Take(2).Sum();\n\
    \        long mid27 = l.Skip(27).Take(2).Sum();\n        long mid28 = l.Skip(28).Take(2).Sum();\n\
    \        long mid29 = l.Skip(29).Take(2).Sum();\n        long mid30 = l.Skip(30).Take(2).Sum();\n\
    \        long mid31 = l.Skip(31).Take(2).Sum();\n        long mid32 = l.Skip(32).Take(2).Sum();\n\
    \        long ", "        long max = l.Max();\n        long min = l.Min();\n \
    \       long mid = l.Average();\n        long diff = max - min;\n        long\
    \ diff2 = mid - min;\n        long diff3 = max - mid;\n        long diff4 = mid\
    \ - max;\n        long diff5 = min - mid;\n        long diff6 = max - min;\n \
    \       long diff7 = mid - max;\n        long diff8 = min - mid;\n        long\
    \ diff9 = max - mid;\n        long diff10 = mid - min;\n        long diff11 =\
    \ min - max;\n        long diff12 = max - min;\n        long diff13 = mid - max;\n\
    \        long diff14 = min - mid;\n        long diff15 = max - mid;\n        long\
    \ diff16 = mid - min;\n        long diff17 = min - max;\n        long diff18 =\
    \ max - min;\n        long diff19 = mid - max;\n        long diff20 = min - mid;\n\
    \        long diff21 = max - mid;\n        long diff22 = mid - min;\n        long\
    \ diff23 = max - mid;\n        long diff24 = mid - min;\n        long diff25 =\
    \ max - mid;\n        long diff26 = mid - min;\n        long diff27 = max - mid;\n\
    \        long diff28 = mid - min;\n        long diff29 = max - mid;\n        long\
    \ diff30 = mid - min;\n        long diff31 = max - mid;\n        long diff32 =\
    \ mid - min;\n        long diff33 = max - mid;\n        long diff34 = mid - min;\n\
    \        long diff35 = max - mid;\n        long diff36 = mid - min;\n        long\
    \ diff37 = max - mid;\n        long diff38 = mid - min;\n        long diff39 =\
    \ max - mid;\n        long diff40 = mid - min;\n        long diff41 = max - mid;\n\
    \        long diff42 = mid - min;\n        long diff43 = max - mid;\n        long\
    \ diff44 = mid - min;\n        long diff45 = max - mid;\n        long diff46 =\
    \ mid - min;\n        long diff47 = max - mid;\n        long diff48 = mid - min;\n\
    \        long diff49 = max - mid;\n        long diff50 = mid - min;\n        long\
    \ diff51 = max - mid;\n        long diff52 = mid - min;", "        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[0];\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < first) {\n                increasing = false;\n           \
    \ }\n            if (current > last) {\n                decreasing = false;\n\
    \            }\n            if (increasing && decreasing) {\n                return\
    \ false;\n            }\n            first = current;\n            last = current;\n\
    \        }\n        return true;", "        long first = l.First();\n        long\
    \ last = l.Last();\n        long mid = (first + last) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isIncreasingOrDecreasing = true;\n        bool isMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicOrDecreasing = true;\n        bool isMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing = true;\n\
    \        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool is", "        if (l.Count < 2) {\n            return true;\n\
    \        }\n        long first = l[0];\n        long last = l[l.Count - 1];\n\
    \        long middle = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < middle)\
    \ {\n                isIncreasing = false;\n            }\n            if (current\
    \ > middle) {\n                isDecreasing = false;\n            }\n        }\n\
    \        return isIncreasing || isDecreasing;", "        if (l.Count < 2) return\
    \ true;\n        long first = l[0];\n        long last = l[l.Count - 1];\n   \
    \     long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return false;\n            if (!isIncreasing && isDecreasing) return false;\n\
    \        }\n        return false;", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        if (max < min) {\n            return false;\n      \
    \  }\n        long mid = l.Count / 2;\n        long midVal = l[mid];\n       \
    \ long midVal2 = l[mid+1];\n        long midVal3 = l[mid+2];\n        long midVal4\
    \ = l[mid+3];\n        long midVal5 = l[mid+4];\n        long midVal6 = l[mid+5];\n\
    \        long midVal7 = l[mid+6];\n        long midVal8 = l[mid+7];\n        long\
    \ midVal9 = l[mid+8];\n        long midVal10 = l[mid+9];\n        long midVal11\
    \ = l[mid+10];\n        long midVal12 = l[mid+11];\n        long midVal13 = l[mid+12];\n\
    \        long midVal14 = l[mid+13];\n        long midVal15 = l[mid+14];\n    \
    \    long midVal16 = l[mid+15];\n        long midVal17 = l[mid+16];\n        long\
    \ midVal18 = l[mid+17];\n        long midVal19 = l[mid+18];\n        long midVal20\
    \ = l[mid+19];\n        long midVal21 = l[mid+20];\n        long midVal22 = l[mid+21];\n\
    \        long midVal23 = l[mid+22];\n        long midVal24 = l[mid+23];\n    \
    \    long midVal25 = l[mid+24];\n        long midVal26 = l[mid+25];\n        long\
    \ midVal27 = l[mid+26];\n        long midVal28 = l[mid+27];\n        long midVal29\
    \ = l[mid+28];\n        long midVal30 = l[mid+29];\n        long midVal31 = l[mid+30];\n\
    \        long midVal32 = l[mid+31];\n        long midVal33 = l[mid+32];\n    \
    \    long midVal34 = l[mid+33];\n        long midVal35 = l[mid+34];\n        long\
    \ midVal36 = l[mid+35];\n        long midVal37 = l[mid+36];\n        long midVal38\
    \ = l[mid+37];", "        long max = l.Max();\n        long min = l.Min();\n \
    \       bool increasing = max > min;\n        bool decreasing = max < min;\n \
    \       if (increasing || decreasing)\n            return true;\n        long\
    \ mid = l.Count / 2;\n        long midValue = l[mid];\n        bool increasing2\
    \ = midValue > l[mid-1];\n        bool decreasing2 = midValue < l[mid+1];\n  \
    \      if (increasing || decreasing2 || increasing2 || decreasing2)\n        \
    \    return true;\n        return false;", "        long max = l.Max();\n    \
    \    long min = l.Min();\n        long mid = l.Average();\n        long diff =\
    \ max - min;\n        long diff2 = mid - min;\n        if (diff < diff2) {\n \
    \           return true;\n        }\n        return false;", "        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        long midValue = l[l.IndexOf(mid)];\n\
    \        foreach (long value in l) {\n            if (value < midValue) {\n  \
    \              decreasing = false;\n            } else if (value > midValue) {\n\
    \                increasing = false;\n            } else {\n                midValue\
    \ = value;\n            }\n        }\n        return increasing || decreasing;",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (max < min);\n        bool isDecreasing = (max >\
    \ min);\n        if (isIncreasing && isDecreasing)\n            return true;\n\
    \        if (isIncreasing && !isDecreasing)\n            return true;\n      \
    \  if (!isIncreasing && isDecreasing)\n            return true;\n        return\
    \ false;", "        long max = l.Max();\n        long min = l.Min();\n       \
    \ long mid = l.Average();\n        bool isIncreasing = (min <= max);\n       \
    \ bool isDecreasing = (min >= max);\n        if (isIncreasing && isDecreasing)\n\
    \            return true;\n        if (isIncreasing && !isDecreasing)\n      \
    \      return true;\n        if (!isIncreasing && isDecreasing)\n            return\
    \ true;\n        return false;", "        long first = l.First();\n        long\
    \ last = l.Last();\n        if (first > last)\n            return false;\n   \
    \     long mid = l.Skip(1).Take(2).Last();\n        if (mid > last)\n        \
    \    return false;\n        long mid2 = l.Skip(2).Take(2).Last();\n        if\
    \ (mid2 > last)\n            return false;\n        long mid3 = l.Skip(3).Take(2).Last();\n\
    \        if (mid3 > last)\n            return false;\n        long mid4 = l.Skip(4).Take(2).Last();\n\
    \        if (mid4 > last)\n            return false;\n        long mid5 = l.Skip(5).Take(2).Last();\n\
    \        if (mid5 > last)\n            return false;\n        long mid6 = l.Skip(6).Take(2).Last();\n\
    \        if (mid6 > last)\n            return false;\n        long mid7 = l.Skip(7).Take(2).Last();\n\
    \        if (mid7 > last)\n            return false;\n        long mid8 = l.Skip(8).Take(2).Last();\n\
    \        if (mid8 > last)\n            return false;\n        long mid9 = l.Skip(9).Take(2).Last();\n\
    \        if (mid9 > last)\n            return false;\n        long mid10 = l.Skip(10).Take(2).Last();\n\
    \        if (mid10 > last)\n            return false;\n        long mid11 = l.Skip(11).Take(2).Last();\n\
    \        if (mid11 > last)\n            return false;\n        long mid12 = l.Skip(12).Take(2).Last();\n\
    \        if (mid12 > last)\n            return false;\n        long mid13 = l.Skip(13).Take(2).Last();\n\
    \        if (mid13 > last)\n            return false;\n        long mid14 = l.Skip(14).Take(2).Last();\n\
    \        if (mid14 > last)\n            return false;\n        long mid15 = l.Skip(15).Take(2).Last();\n\
    \        if (mid15 > last)\n            return false;\n        long mid16 = l.Skip(16).Take(2).Last();\n\
    \        if (mid16 > last)\n            return false;\n        long mid17 = l.Skip(17).Take(2).Last();\n\
    \        if (mid17 > last)\n            return false;\n        long mid18 = l.Skip(18).Take(2).Last();\n\
    \        if (mid18 > last)\n            return false;\n        long mid19 = l.Skip(19).Take(2).Last();\n\
    \        if (mid19 > last)\n            return false;\n        long mid20 = l.Skip(20).Take",
  "        if (l.Count == 0) return true;\n        long first = l[0];\n        long\
    \ last = l[0];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) {\n\
    \                increasing = false;\n            }\n            if (current >\
    \ last) {\n                increasing = true;\n            }\n            last\
    \ = current;\n        }\n        return increasing;", "        if (l.Count < 2)\
    \ return false;\n        long a = l[0], b = l[1];\n        for (int i = 2; i <\
    \ l.Count; i++) {\n            long c = l[i];\n            if (c < a) a = c;\n\
    \            if (c > b) b = c;\n        }\n        return a < b;", "        if\
    \ (l.Count < 2) return false;\n        long first = l[0];\n        long last =\
    \ l[l.Count - 1];\n        long middle = first + ((last - first) / 2);\n     \
    \   bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            long current = l[i];\n            if\
    \ (current < middle) {\n                increasing = false;\n            } else\
    \ if (current > middle) {\n                decreasing = false;\n            }\
    \ else {\n                increasing = true;\n                decreasing = true;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.Count < 2) return false;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n      \
    \  bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n                isIncreasing\
    \ = false;\n            } else if (l[i] > mid) {\n                isDecreasing\
    \ = false;\n            } else {\n                isIncreasing = isDecreasing\
    \ = true;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        if (l.Count < 2) return true;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n \
    \       bool isIncreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < mid) {\n                isIncreasing = false;\n      \
    \          break;\n            }\n        }\n        return isIncreasing;", " \
    \       if (l.Count == 0) return false;\n        if (l.Count == 1) return true;\n\
    \        long first = l[0];\n        long last = l[0];\n        bool increasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < first) {\n                increasing = false;\n\
    \            }\n            if (current > last) {\n                increasing\
    \ = true;\n            }\n            last = current;\n        }\n        return\
    \ increasing;", "        long min = l.Min();\n        long max = l.Max();\n  \
    \      long mid = l.Count / 2;\n        long midVal = l[mid];\n        long midValDiff\
    \ = max - midVal;\n        long midValDiffAbs = Math.Abs(midValDiff);\n      \
    \  long midValDiffAbsDiff = midValDiffAbs - midValDiff;\n        long midValDiffAbsDiffAbs\
    \ = midValDiffAbsDiff / midValDiff;\n        long midValDiffAbsDiffAbsDiff = midValDiffAbsDiffAbs\
    \ / midValDiffAbs;\n        long midValDiffAbsDiffAbsDiffAbs = midValDiffAbsDiffAbsDiff\
    \ / midValDiffAbsDiff;\n        long midValDiffAbsDiffAbsDiffAbsDiff = midValDiffAbsDiffAbsDiffAbs\
    \ / midValDiffAbsDiffAbs;\n        long midValDiffAbsDiffAbsDiffAbsDiffAbs = midValDiffAbsDiffAbsDiffAbsDiff\
    \ / midValDiffAbsDiffAbsDiff;\n        long midValDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = midValDiffAbsDiffAbsDiffAbsDiffAbs / midValDiffAbsDiffAbsDiffAbsDiff;\n  \
    \      long midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = midValDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ / midValDiffAbsDiffAbsDiffAbsDiffAbs;\n        long midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs / midValDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n\
    \        long midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ / midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs;\n        long midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs / midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n\
    \        ", "        if (l.Count < 2) return true;\n        long first = l[0];\n\
    \        long last = l[l.Count - 1];\n        long mid = first + (last - first)\
    \ / 2;\n        bool increasing = true;\n        bool decreasing = true;\n   \
    \     foreach (long x in l)\n        {\n            if (x < mid)\n           \
    \ {\n                increasing = false;\n            }\n            else if (x\
    \ > mid)\n            {\n                decreasing = false;\n            }\n\
    \            else\n            {\n                if (x < first)\n           \
    \     {\n                    increasing = false;\n                }\n        \
    \        else if (x > last)\n                {\n                    decreasing\
    \ = false;\n                }\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.Count == 0) return true;\n        long first\
    \ = l[0];\n        long last = l[0];\n        bool increasing = true;\n      \
    \  bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n    \
    \        long current = l[i];\n            if (current < first) {\n          \
    \      increasing = false;\n            } else if (current > last) {\n       \
    \         decreasing = false;\n            } else {\n                if (current\
    \ < last) {\n                    increasing = false;\n                } else {\n\
    \                    decreasing = false;\n                }\n            }\n \
    \           last = current;\n        }\n        return increasing || decreasing;",
  "        long max = l.Max();\n        long min = l.Min();\n        if (min > max)\
    \ {\n            return false;\n        }\n        long mid = l.Count / 2;\n \
    \       long midVal = l[mid];\n        long midVal2 = l[mid+1];\n        if (midVal\
    \ < midVal2) {\n            return true;\n        }\n        long midVal3 = l[mid-1];\n\
    \        if (midVal > midVal3) {\n            return true;\n        }\n      \
    \  long midVal4 = l[mid-2];\n        if (midVal > midVal4) {\n            return\
    \ true;\n        }\n        long midVal5 = l[mid-3];\n        if (midVal > midVal5)\
    \ {\n            return true;\n        }\n        return false;", "        long\
    \ first = l[0];\n        long last = l[0];\n        bool increasing = true;\n\
    \        foreach (long e in l.Skip(1))\n            if (e < first)\n         \
    \       increasing = false;\n            else if (e > last)\n                increasing\
    \ = true;\n            else\n                last = e;\n        return increasing;",
  "        if (l.Count < 2) return true;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool isIncreasing = true;\n        bool isDecreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n           \
    \     isIncreasing = false;\n            } else if (l[i] > mid) {\n          \
    \      isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count == 0) return false;\n        long max\
    \ = l.Max();\n        long min = l.Min();\n        if (max < min) return false;\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid + (max - min)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        for (int i = 0; i < l.Count; i++) {\n\
    \            if (l[i] < mid) {\n                isIncreasing = false;\n      \
    \      }\n            if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            }\n            if (l[i] < mid2) {\n                isMonotonic =\
    \ false;\n            }\n        }\n        if (isIncreasing && isDecreasing &&\
    \ isMonotonic) {\n            return true;\n        }\n        return false;",
  "        long max = l.Max();\n        long min = l.Min();\n        if (min > max)\
    \ return false;\n        long mid = min + (max - min) / 2;\n        long mid2\
    \ = mid + (max - min) / 2;\n        long mid3 = mid2 + (max - min) / 2;\n    \
    \    long mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4 + (max - min)\
    \ / 2;\n        long mid6 = mid5 + (max - min) / 2;\n        long mid7 = mid6\
    \ + (max - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n        long\
    \ mid9 = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max - min) / 2;\n\
    \        long mid11 = mid10 + (max - min) / 2;\n        long mid12 = mid11 + (max\
    \ - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n        long mid14\
    \ = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max - min) / 2;\n\
    \        long mid16 = mid15 + (max - min) / 2;\n        long mid17 = mid16 + (max\
    \ - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n        long mid19\
    \ = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max - min) / 2;\n\
    \        long mid21 = mid20 + (max - min) / 2;\n        long mid22 = mid21 + (max\
    \ - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n        long mid24\
    \ = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max - min) / 2;\n\
    \        long mid26 = mid25 + (max - min) / 2;\n        long mid27 = mid26 + (max\
    \ - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n        long mid29\
    \ = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max - min) / 2;\n\
    \        long mid31 = mid30 + (max - min) / 2;\n        long mid32 = mid31 + (max\
    \ - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n        long mid34\
    \ = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max - min) / 2;\n\
    \        long mid36 = mid35 + (max - min) / 2;\n        long mid37 = mid36 + (max\
    \ - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n        long mid39\
    \ = mid38 + (max - min) / 2;", "        long prev = l[0];\n        long current\
    \ = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        foreach (long x in l.Skip(1))\n        {\n            if (current < x)\n\
    \            {\n                increasing = false;\n            }\n         \
    \   else if (current > x)\n            {\n                decreasing = false;\n\
    \            }\n            else\n            {\n                current = x;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.Count < 2) return false;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        foreach (long x\
    \ in l) {\n            if (x < mid) {\n                decreasing = false;\n \
    \           }\n            else if (x > mid) {\n                increasing = false;\n\
    \            }\n            else {\n                increasing = decreasing =\
    \ true;\n            }\n            mid = x + (mid - x) / 2;\n        }\n    \
    \    return increasing || decreasing;", "        long max = l.Max();\n       \
    \ long min = l.Min();\n        long mid = l.Average();\n        bool isIncreasing\
    \ = (min < mid);\n        bool isDecreasing = (max > mid);\n        return isIncreasing\
    \ || isDecreasing;", "        long first = l[0];\n        long last = l[0];\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < first) {\n                decreasing = false;\n           \
    \ }\n            if (current > last) {\n                increasing = false;\n\
    \            }\n            if (current < last) {\n                last = current;\n\
    \            }\n            if (current > first) {\n                first = current;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool increasing = (min < mid);\n        bool decreasing = (max > mid);\n\
    \        if (increasing && decreasing)\n            return false;\n        if\
    \ (increasing)\n            return true;\n        if (decreasing)\n          \
    \  return false;\n        return true;", "        long max = l.Max();\n      \
    \  long min = l.Min();\n        if (min > max) return false;\n        long mid\
    \ = l.Count / 2;\n        long midVal = l[mid];\n        long midPrevVal = l[mid-1];\n\
    \        long midNextVal = l[mid+1];\n        long midPrevPrevVal = l[mid-2];\n\
    \        long midNextNextVal = l[mid+2];\n        long midPrevNextPrevVal = l[mid-3];\n\
    \        long midNextNextNextVal = l[mid+3];\n        long midPrevNextNextPrevVal\
    \ = l[mid-4];\n        long midNextNextNextNextVal = l[mid-5];\n        long midPrevNextNextNextNextVal\
    \ = l[mid-6];\n        long midNextNextNextNextNextVal = l[mid-7];\n        long\
    \ midPrevNextNextNextNextNextVal = l[mid-8];\n        long midNextNextNextNextNextVal\
    \ = l[mid-9];\n        long midPrevNextNextNextNextNextVal = l[mid-10];\n    \
    \    long midNextNextNextNextNextVal = l[mid-11];\n        long midPrevNextNextNextNextNextVal\
    \ = l[mid-12];\n        long midNextNextNextNextNextVal = l[mid-13];\n       \
    \ long midPrevNextNextNextNextNextVal = l[mid-14];\n        long midNextNextNextNextNextVal\
    \ = l[mid-15];\n        long midPrevNextNextNextNextNextVal = l[mid-16];\n   \
    \     long midNextNextNextNextNextVal = l[mid-17];\n        long midPrevNextNextNextNextNextVal\
    \ = l[mid-18];\n        long midNextNextNextNextNextVal = l[mid-19];\n       \
    \ long midPrevNextNextNextNextNextVal = l[mid-20];\n        long midNextNextNextNextNextVal\
    \ = l[mid-21];\n        long midPrevNextNextNextNextNextVal = l[mid-22];\n   \
    \     long midNextNextNextNextNextVal = l[mid-23];\n        long midPrevNextNextNextNextNextVal\
    \ = l[mid-24];\n        long midNextNextNextNextNextVal = l[mid-25];\n       \
    \ long midPrevNextNextNextNextNextVal = l[mid-26];\n        long midNextNextNextNextNextVal\
    \ = l[mid", "        if (l.Count < 2) return true;\n        long first = l[0],\
    \ last = l[0];\n        bool increasing = true;\n        foreach (long e in l.Skip(1))\n\
    \            if (e < first) increasing = false;\n            else if (e > last)\
    \ increasing = true;\n            else if (e == first) increasing = false;\n \
    \           else if (e == last) increasing = true;\n            else return false;\n\
    \        return increasing;", "        long first = l.First();\n        long last\
    \ = l.Last();\n        long middle = l.Skip(1).Take(2).Last();\n        long middle2\
    \ = l.Skip(1).Take(2).Skip(1).Take(2).Last();\n        long middle3 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle4 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle5 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle6 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle7 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle8 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle9 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle10 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle11 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle12 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).",
  "        if (l.Count == 0) return true;\n        long first = l[0];\n        long\
    \ last = l[0];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) increasing\
    \ = false;\n            if (current > last) increasing = true;\n            last\
    \ = current;\n        }\n        return increasing;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        bool isIncreasing\
    \ = (min <= mid);\n        bool isDecreasing = (max >= mid);\n        return isIncreasing\
    \ || isDecreasing;", "        long first = l.First();\n        long last = l.Last();\n\
    \        if (first > last)\n            return false;\n        if (first == last)\n\
    \            return true;\n        long mid = l.Skip(1).Take(2).Last();\n    \
    \    if (mid < first || mid > last)\n            return false;\n        long mid2\
    \ = l.Skip(2).Take(2).Last();\n        if (mid2 < first || mid2 > last)\n    \
    \        return false;\n        long mid3 = l.Skip(3).Take(2).Last();\n      \
    \  if (mid3 < first || mid3 > last)\n            return false;\n        long mid4\
    \ = l.Skip(4).Take(2).Last();\n        if (mid4 < first || mid4 > last)\n    \
    \        return false;\n        long mid5 = l.Skip(5).Take(2).Last();\n      \
    \  if (mid5 < first || mid5 > last)\n            return false;\n        long mid6\
    \ = l.Skip(6).Take(2).Last();\n        if (mid6 < first || mid6 > last)\n    \
    \        return false;\n        long mid7 = l.Skip(7).Take(2).Last();\n      \
    \  if (mid7 < first || mid7 > last)\n            return false;\n        long mid8\
    \ = l.Skip(8).Take(2).Last();\n        if (mid8 < first || mid8 > last)\n    \
    \        return false;\n        long mid9 = l.Skip(9).Take(2).Last();\n      \
    \  if (mid9 < first || mid9 > last)\n            return false;\n        long mid10\
    \ = l.Skip(10).Take(2).Last();\n        if (mid10 < first || mid10 > last)\n \
    \           return false;\n        long mid11 = l.Skip(11).Take(2).Last();\n \
    \       if (mid11 < first || mid11 > last)\n            return false;\n      \
    \  long mid12 = l.Skip(12).Take(2).Last();\n        if (mid12 < first || mid12\
    \ > last)\n            return false;\n        long mid13 = l.Skip(13).Take(2).Last();\n\
    \        if (mid13 < first || mid13 > last)\n            return false;\n     \
    \   long mid14 = l.Skip(14).Take(2).Last();\n        if (mid14 < first || mid14\
    \ > last)\n            return false;\n        long mid15 = l.Skip(15).Take(2).Last();\n\
    \        if (mid15 < first || mid15 > last)\n            return false;\n     \
    \   long mid16 = l.Skip(16).Take(2).Last();\n        if (mid16 < first || mid16\
    \ > last)\n            return false;\n        long ", "        long first = l.First();\n\
    \        long last = l.Last();\n        long mid = first + ((last - first) / 2);\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l) {\n            if (x > mid) {\n                isDecreasing\
    \ = false;\n            } else if (x < mid) {\n                isIncreasing =\
    \ false;\n            }\n            if (isIncreasing && isDecreasing) {\n   \
    \             return true;\n            }\n        }\n        return false;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long middle = first + (last - first) / 2;\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < middle) {\n                increasing = false;\n          \
    \  } else if (current > middle) {\n                decreasing = false;\n     \
    \       } else {\n                increasing = true;\n                decreasing\
    \ = true;\n            }\n        }\n        return increasing || decreasing;",
  "        long first = l.First();\n        long last = l.Last();\n        long middle\
    \ = l.Skip(1).Take(2).Last();\n        long middle2 = l.Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle3 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle4 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle5 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle6 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle7 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle8 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle9 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle10 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle11 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle12 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).",
  "        if (l.Count < 2) {\n            return true;\n        }\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long middle = first +\
    \ (last - first) / 2;\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < middle) {\n                increasing = false;\n\
    \            } else if (current > middle) {\n                decreasing = false;\n\
    \            } else {\n                increasing = decreasing = true;\n     \
    \       }\n        }\n        return increasing || decreasing;", "        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[0];\n \
    \       foreach (long x in l.Skip(1))\n            if (x < first) first = x;\n\
    \            if (x > last) last = x;\n        return first <= last;", "      \
    \  long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = max - mid;\n        long diff4 = mid - max;\n        long diff5 = min\
    \ - mid;\n        long diff6 = max - min;\n        long diff7 = mid - min;\n \
    \       long diff8 = max - mid;\n        long diff9 = mid - max;\n        long\
    \ diff10 = mid - min;\n        long diff11 = min - mid;\n        long diff12 =\
    \ max - mid;\n        long diff13 = mid - min;\n        long diff14 = max - mid;\n\
    \        long diff15 = mid - max;\n        long diff16 = mid - min;\n        long\
    \ diff17 = min - mid;\n        long diff18 = max - mid;\n        long diff19 =\
    \ mid - max;\n        long diff20 = mid - min;\n        long diff21 = min - mid;\n\
    \        long diff22 = max - mid;\n        long diff23 = mid - max;\n        long\
    \ diff24 = mid - min;\n        long diff25 = min - mid;\n        long diff26 =\
    \ max - mid;\n        long diff27 = mid - max;\n        long diff28 = mid - min;\n\
    \        long diff29 = min - mid;\n        long diff30 = max - mid;\n        long\
    \ diff31 = mid - max;\n        long diff32 = mid - min;\n        long diff33 =\
    \ min - mid;\n        long diff34 = max - mid;\n        long diff35 = mid - max;\n\
    \        long diff36 = mid - min;\n        long diff37 = min - mid;\n        long\
    \ diff38 = max - mid;\n        long diff39 = mid - max;\n        long diff40 =\
    \ mid - min;\n        long diff41 = min - mid;\n        long diff42 = max - mid;\n\
    \        long diff43 = mid - max;\n        long diff44 = mid - min;\n        long\
    \ diff45 = min - mid;\n        long diff46 = max - mid;\n        long diff47 =\
    \ mid - max;\n        long diff48 = mid - min;\n        long diff49 = min - mid;\n\
    \        long diff50 = max - mid;\n        long diff51 = mid - max;\n", "    \
    \    long min = l.Min();\n        long max = l.Max();\n        long mid = (min\
    \ + max) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        bool isMonotonic = true;\n        bool isIncreasing2 = true;\n\
    \        bool isDecreasing2 = true;\n        bool isMonotonic2 = true;\n     \
    \   foreach (long x in l) {\n            if (x < mid) {\n                isIncreasing\
    \ = false;\n                isDecreasing = false;\n                isMonotonic\
    \ = false;\n                break;\n            }\n            if (x > mid) {\n\
    \                isIncreasing = false;\n                isDecreasing = false;\n\
    \                isMonotonic = false;\n                break;\n            }\n\
    \            if (x == mid) {\n                isIncreasing = true;\n         \
    \       isDecreasing = true;\n                isMonotonic = true;\n          \
    \      break;\n            }\n            if (x > max) {\n                isIncreasing\
    \ = false;\n                isDecreasing = false;\n                isMonotonic\
    \ = false;\n                break;\n            }\n            if (x < min) {\n\
    \                isIncreasing = false;\n                isDecreasing = false;\n\
    \                isMonotonic = false;\n                break;\n            }\n\
    \            if (x == min) {\n                isIncreasing = true;\n         \
    \       isDecreasing = true;\n                isMonotonic = true;\n          \
    \      break;\n            }\n            if (x < mid) {\n                isIncreasing\
    \ = false;\n                isDecreasing = false;\n                isMonotonic\
    \ = false;\n                break;\n            }\n            if (x > mid) {\n\
    \                isIncreasing = false;\n                isDecreasing = false;\n\
    \                isMonotonic = false;\n                break;\n            }\n\
    \            if (x == mid) {\n                isIncreasing = true;\n         \
    \       isDecreasing = true;\n                isMonotonic = true;\n          \
    \      break;\n            }\n            if (x > max) {\n                isIncreasing\
    \ = false;\n                isDecreasing = false;\n                isMonotonic\
    \ = false;\n                break;\n            }\n            if (x < min) {\n\
    \                isIncreasing = false;\n                isDecreasing = false;\n\
    \                isMonotonic = false;\n                break;\n            }\n\
    \            if (x == min) {\n                isIncreasing = true;\n         \
    \       isDecreasing = true;\n                isMonotonic = true;\n          \
    \      break;\n            }\n            if (x < mid) {\n                isIncreasing\
    \ = false;\n                isDecreasing = false;\n                isMonotonic\
    \ = false;\n                break;\n            }\n            if (x > mid) {\n\
    \                isIncreasing = false;\n                isDecreasing = false;\n\
    \                isMonotonic = false;", "        if (l.Count < 2) return false;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ middle = first + ((last - first) / 2);\n        bool increasing = true;\n  \
    \      bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < middle) {\n     \
    \           increasing = false;\n            } else if (current > middle) {\n\
    \                decreasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n        }\n        return increasing ||\
    \ decreasing;", "        long max = l.Max();\n        long min = l.Min();\n  \
    \      if (min > max) {\n            return false;\n        }\n        long mid\
    \ = l.Count / 2;\n        long midVal = l[mid];\n        long midVal2 = l[mid+1];\n\
    \        long midVal3 = l[mid+2];\n        long midVal4 = l[mid+3];\n        long\
    \ midVal5 = l[mid+4];\n        long midVal6 = l[mid+5];\n        long midVal7\
    \ = l[mid+6];\n        long midVal8 = l[mid+7];\n        long midVal9 = l[mid+8];\n\
    \        long midVal10 = l[mid+9];\n        long midVal11 = l[mid+10];\n     \
    \   long midVal12 = l[mid+11];\n        long midVal13 = l[mid+12];\n        long\
    \ midVal14 = l[mid+13];\n        long midVal15 = l[mid+14];\n        long midVal16\
    \ = l[mid+15];\n        long midVal17 = l[mid+16];\n        long midVal18 = l[mid+17];\n\
    \        long midVal19 = l[mid+18];\n        long midVal20 = l[mid+19];\n    \
    \    long midVal21 = l[mid+20];\n        long midVal22 = l[mid+21];\n        long\
    \ midVal23 = l[mid+22];\n        long midVal24 = l[mid+23];\n        long midVal25\
    \ = l[mid+24];\n        long midVal26 = l[mid+25];\n        long midVal27 = l[mid+26];\n\
    \        long midVal28 = l[mid+27];\n        long midVal29 = l[mid+28];\n    \
    \    long midVal30 = l[mid+29];\n        long midVal31 = l[mid+30];\n        long\
    \ midVal32 = l[mid+31];\n        long midVal33 = l[mid+32];\n        long midVal34\
    \ = l[mid+33];\n        long midVal35 = l[mid+34];\n        long midVal36 = l[mid+35];\n\
    \        long midVal37 = l[mid+36];\n        long midVal38 = l[mid+37];", "  \
    \      if (l.Count == 0) return true;\n        if (l.Count == 1) return l[0] >\
    \ l[1];\n        long prev = l[0];\n        long curr = l[1];\n        bool isIncreasing\
    \ = true;\n        for (int i = 2; i < l.Count; i++) {\n            if (l[i] <\
    \ prev) {\n                isIncreasing = false;\n                break;\n   \
    \         }\n            prev = curr;\n            curr = l[i];\n        }\n \
    \       return isIncreasing;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        long mid = l.Average();\n        long diff = max - min;\n\
    \        long midDiff = max - mid;\n        long midDiffAbs = midDiff < 0 ? -midDiff\
    \ : midDiff;\n        long diffAbs = diff < 0 ? -diff : diff;\n        long diffAbsAbs\
    \ = diffAbs < 0 ? -diffAbs : diffAbs;\n        long midDiffAbsAbs = midDiffAbs\
    \ < 0 ? -midDiffAbs : midDiffAbs;\n        long diffAbsAbsAbs = diffAbsAbs < 0\
    \ ? -diffAbsAbs : diffAbsAbs;\n        long diffAbsAbsAbsAbs = diffAbsAbsAbs <\
    \ 0 ? -diffAbsAbsAbs : diffAbsAbsAbs;\n        long diffAbsAbsAbsAbsAbs = diffAbsAbsAbsAbs\
    \ < 0 ? -diffAbsAbsAbsAbs : diffAbsAbsAbsAbs;\n        long diffAbsAbsAbsAbsAbsAbs\
    \ = diffAbsAbsAbsAbsAbsAbs < 0 ? -diffAbsAbsAbsAbsAbs : diffAbsAbsAbsAbsAbs;\n\
    \        long diffAbsAbsAbsAbsAbsAbsAbs = diffAbsAbsAbsAbsAbsAbsAbs < 0 ? -diffAbsAbsAbsAbsAbsAbs\
    \ : diffAbsAbsAbsAbsAbsAbsAbs;\n        long diffAbsAbsAbsAbsAbsAbsAbsAbs = diffAbsAbsAbsAbsAbsAbsAbsAbsAbs\
    \ < 0 ? -diffAbsAbsAbsAbsAbsAbsAbs : diffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n      \
    \  long diffAbsAbsAbsAbsAbsAbsAbsAbsAbs = diffAbsAbsAbsAbsAbsAbsAbsAbsAbs < 0\
    \ ? -diffAbsAbsAbsAbsAbsAbsAbsAbs : diffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    \
    \    long diffAbsAbsAbsAbsAbsAbsAbsAbsAbs", "        if (l.Count < 2) {\n    \
    \        return true;\n        }\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            long current = l[i];\n            if (current\
    \ < mid) {\n                increasing = false;\n            } else if (current\
    \ > mid) {\n                decreasing = false;\n            } else {\n      \
    \          mid = current;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.Count < 2) return true;\n        long a = l[0],\
    \ b = l[1];\n        long c = l[2], d = l[3];\n        long e = l[4];\n      \
    \  long f = l[5];\n        long g = l[6];\n        long h = l[7];\n        long\
    \ i = l[8];\n        long j = l[9];\n        long k = l[10];\n        long l =\
    \ l[11];\n        long m = l[12];\n        long n = l[13];\n        long o = l[14];\n\
    \        long p = l[15];\n        long q = l[16];\n        long r = l[17];\n \
    \       long s = l[18];\n        long t = l[19];\n        long u = l[20];\n  \
    \      long v = l[21];\n        long w = l[22];\n        long x = l[23];\n   \
    \     long y = l[24];\n        long z = l[25];\n        long a = Math.Max(a, a);\n\
    \        long b = Math.Max(b, b);\n        long c = Math.Max(c, c);\n        long\
    \ d = Math.Max(d, d);\n        long e = Math.Max(e, e);\n        long f = Math.Max(f,\
    \ f);\n        long g = Math.Max(g, g);\n        long h = Math.Max(h, h);\n  \
    \      long i = Math.Max(i, i);\n        long j = Math.Max(j, j);\n        long\
    \ k = Math.Max(k, k);\n        long l = Math.Max(l, l);\n        long m = Math.Max(m,\
    \ m);\n        long n = Math.Max(n, n);\n        long o = Math.Max(o, o);\n  \
    \      long p = Math.Max(p, p);\n        long q = Math.Max(q, q);\n        long\
    \ r = Math.Max(r, r);\n        long s = Math.Max(s, s);\n        long t = Math.Max(t,\
    \ t);\n        long u = Math.Max(u, u);\n        long v = Math.Max(v, v);\n  \
    \      long w = Math.Max(w, w);\n        long x = Math.Max(x, x);\n        long\
    \ y = Math.Max(y, y);\n        long z = Math.Max(z, z);\n        long a = Math.Min(a,\
    \ a);\n        long b = Math.Min(b, b);\n        long c = Math.Min(c, c);\n  \
    \      long d = Math.Min(d, d);\n        long e = Math.Min(e, e);\n        long\
    \ f = Math.Min(f, f);\n        long g = Math.Min(g, g);\n        long h = Math.Min(h,\
    \ h);\n        long i = Math.Min(i, i);\n        long j = Math.", "        if\
    \ (l.Count < 2) return false;\n        long first = l[0];\n        long last =\
    \ l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            long current = l[i];\n            if (current\
    \ < mid) {\n                decreasing = false;\n            } else if (current\
    \ > mid) {\n                increasing = false;\n            } else {\n      \
    \          mid = current;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        long mid2 = first + (last - first) / 2;\n        long\
    \ mid3 = first + (last - first) / 2;\n        long mid4 = first + (last - first)\
    \ / 2;\n        long mid5 = first + (last - first) / 2;\n        long mid6 = first\
    \ + (last - first) / 2;\n        long mid7 = first + (last - first) / 2;\n   \
    \     long mid8 = first + (last - first) / 2;\n        long mid9 = first + (last\
    \ - first) / 2;\n        long mid10 = first + (last - first) / 2;\n        long\
    \ mid11 = first + (last - first) / 2;\n        long mid12 = first + (last - first)\
    \ / 2;\n        long mid13 = first + (last - first) / 2;\n        long mid14 =\
    \ first + (last - first) / 2;\n        long mid15 = first + (last - first) / 2;\n\
    \        long mid16 = first + (last - first) / 2;\n        long mid17 = first\
    \ + (last - first) / 2;\n        long mid18 = first + (last - first) / 2;\n  \
    \      long mid19 = first + (last - first) / 2;\n        long mid20 = first +\
    \ (last - first) / 2;\n        long mid21 = first + (last - first) / 2;\n    \
    \    long mid22 = first + (last - first) / 2;\n        long mid23 = first + (last\
    \ - first) / 2;\n        long mid24 = first + (last - first) / 2;\n        long\
    \ mid25 = first + (last - first) / 2;\n        long mid26 = first + (last - first)\
    \ / 2;\n        long mid27 = first + (last - first) / 2;\n        long mid28 =\
    \ first + (last - first) / 2;\n        long mid29 = first + (last - first) / 2;\n\
    \        long mid30 = first + (last - first) / 2;\n        long mid31 = first\
    \ + (last - first) / 2;\n        long mid32 = first + (last - first) / 2;\n  \
    \      long mid33 = first + (last - first) / 2;\n        long mid34 = first +\
    \ (last - first) / 2;\n        long mid35 = first + (last - first) / 2;\n    \
    \    long mid36 = first + (last - first) / 2;\n        long mid37 = first + (last\
    \ - first) / 2;\n        long mid38 = first + (last - first) / 2;\n        long\
    \ mid39 = first ", "        if (l.Count < 2) return true;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long middle = first +\
    \ ((last - first) / 2);\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < middle) {\n                increasing = false;\n\
    \            } else if (current > middle) {\n                decreasing = false;\n\
    \            } else {\n                increasing = decreasing = true;\n     \
    \       }\n        }\n        return increasing || decreasing;", "        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] > l[1];\n        long\
    \ min = l[0];\n        long max = l[0];\n        foreach (long x in l)\n     \
    \       if (x < min) min = x;\n            if (x > max) max = x;\n        if (min\
    \ > max) return false;\n        long mid = min + (max - min) / 2;\n        bool\
    \ leftIncreasing = Monotonic(l.Take(l.Count - 1).ToList());\n        bool rightIncreasing\
    \ = Monotonic(l.Take(l.Count).ToList());\n        return leftIncreasing && rightIncreasing\
    \ && mid >= min && mid <= max;", "        if (l.Count < 2) return false;\n   \
    \     long first = l[0];\n        long last = l[l.Count - 1];\n        long mid\
    \ = first + (last - first) / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        for (int i = 0; i < l.Count - 1; i++) {\n    \
    \        if (l[i] > mid) {\n                isIncreasing = false;\n          \
    \  } else if (l[i] < mid) {\n                isDecreasing = false;\n         \
    \   } else {\n                isIncreasing = isDecreasing = true;\n          \
    \  }\n        }\n        return isIncreasing || isDecreasing;", "        if (l.Count\
    \ < 2)\n            return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n      \
    \  bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            long current = l[i];\n            if\
    \ (current < mid)\n                isIncreasing = false;\n            else if\
    \ (current > mid)\n                isDecreasing = false;\n            else\n \
    \               break;\n        }\n        if (isIncreasing && isDecreasing)\n\
    \            return true;\n        if (isIncreasing && !isDecreasing)\n      \
    \      return false;\n        if (!isIncreasing && isDecreasing)\n           \
    \ return false;", "        if (l.Count < 2) return true;\n        long first =\
    \ l[0];\n        long last = l[0];\n        bool increasing = true;\n        bool\
    \ decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  long current = l[i];\n            if (current < first) increasing = false;\n\
    \            if (current > last) decreasing = false;\n            last = current;\n\
    \        }\n        return increasing || decreasing;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        long diff\
    \ = max - min;\n        long diff2 = mid - min;\n        long diff3 = mid - max;\n\
    \        long diff4 = max - mid;\n        long diff5 = mid - mid;\n        long\
    \ diff6 = max - max;\n        long diff7 = mid - max;\n        long diff8 = mid\
    \ - min;\n        long diff9 = mid - mid;\n        long diff10 = mid - max;\n\
    \        long diff11 = mid - min;\n        long diff12 = mid - mid;\n        long\
    \ diff13 = mid - max;\n        long diff14 = mid - min;\n        long diff15 =\
    \ mid - mid;\n        long diff16 = mid - max;\n        long diff17 = mid - min;\n\
    \        long diff18 = mid - mid;\n        long diff19 = mid - max;\n        long\
    \ diff20 = mid - min;\n        long diff21 = mid - mid;\n        long diff22 =\
    \ mid - max;\n        long diff23 = mid - min;\n        long diff24 = mid - mid;\n\
    \        long diff25 = mid - max;\n        long diff26 = mid - min;\n        long\
    \ diff27 = mid - mid;\n        long diff28 = mid - max;\n        long diff29 =\
    \ mid - min;\n        long diff30 = mid - mid;\n        long diff31 = mid - max;\n\
    \        long diff32 = mid - min;\n        long diff33 = mid - mid;\n        long\
    \ diff34 = mid - max;\n        long diff35 = mid - min;\n        long diff36 =\
    \ mid - mid;\n        long diff37 = mid - max;\n        long diff38 = mid - min;\n\
    \        long diff39 = mid - mid;\n        long diff40 = mid - max;\n        long\
    \ diff41 = mid - min;\n        long diff42 = mid - mid;\n        long diff43 =\
    \ mid - max;\n        long diff44 = mid - min;\n        long diff45 = mid - mid;\n\
    \        long diff46 = mid - max;\n        long diff47 = mid - min;\n        long\
    \ diff48 = mid - mid;\n        long diff49 = mid - max;\n        ", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) return false;\n\
    \        long mid = l.Count / 2;\n        long midVal = l[mid];\n        long\
    \ midVal2 = l[mid+1];\n        long midVal3 = l[mid+2];\n        long midVal4\
    \ = l[mid+3];\n        long midVal5 = l[mid+4];\n        long midVal6 = l[mid+5];\n\
    \        long midVal7 = l[mid+6];\n        long midVal8 = l[mid+7];\n        long\
    \ midVal9 = l[mid+8];\n        long midVal10 = l[mid+9];\n        long midVal11\
    \ = l[mid+10];\n        long midVal12 = l[mid+11];\n        long midVal13 = l[mid+12];\n\
    \        long midVal14 = l[mid+13];\n        long midVal15 = l[mid+14];\n    \
    \    long midVal16 = l[mid+15];\n        long midVal17 = l[mid+16];\n        long\
    \ midVal18 = l[mid+17];\n        long midVal19 = l[mid+18];\n        long midVal20\
    \ = l[mid+19];\n        long midVal21 = l[mid+20];\n        long midVal22 = l[mid+21];\n\
    \        long midVal23 = l[mid+22];\n        long midVal24 = l[mid+23];\n    \
    \    long midVal25 = l[mid+24];\n        long midVal26 = l[mid+25];\n        long\
    \ midVal27 = l[mid+26];\n        long midVal28 = l[mid+27];\n        long midVal29\
    \ = l[mid+28];\n        long midVal30 = l[mid+29];\n        long midVal31 = l[mid+30];\n\
    \        long midVal32 = l[mid+31];\n        long midVal33 = l[mid+32];\n    \
    \    long midVal34 = l[mid+33];\n        long midVal35 = l[mid+34];\n        long\
    \ midVal36 = l[mid+35];\n        long midVal37 = l[mid+36];\n        long midVal38\
    \ = l[mid+37];\n        long midVal", "        if (l.Count == 0) return false;\n\
    \        if (l.Count == 1) return true;\n        long first = l[0];\n        long\
    \ last = l[0];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) {\n\
    \                increasing = false;\n            }\n            if (current >\
    \ last) {\n                increasing = true;\n            }\n            last\
    \ = current;\n        }\n        return increasing;", "        if (l.Count < 2)\
    \ return true;\n        long first = l[0];\n        long last = l[l.Count - 1];\n\
    \        long mid = first + (last - first) / 2;\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        foreach (long x in l) {\n          \
    \  if (x > mid) increasing = false;\n            if (x < mid) decreasing = false;\n\
    \        }\n        return increasing || decreasing;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        long diff\
    \ = max - min;\n        long diff2 = mid - min;\n        long diff3 = max - mid;\n\
    \        long diff4 = mid - max;\n        long diff5 = min - mid;\n        long\
    \ diff6 = max - min;\n        long diff7 = mid - max;\n        long diff8 = min\
    \ - mid;\n        long diff9 = max - mid;\n        long diff10 = mid - min;\n\
    \        long diff11 = mid - max;\n        long diff12 = mid - mid;\n        long\
    \ diff13 = max - min;\n        long diff14 = mid - mid;\n        long diff15 =\
    \ min - max;\n        long diff16 = mid - min;\n        long diff17 = mid - mid;\n\
    \        long diff18 = max - mid;\n        long diff19 = mid - max;\n        long\
    \ diff20 = mid - mid;\n        long diff21 = min - mid;\n        long diff22 =\
    \ mid - min;\n        long diff23 = mid - max;\n        long diff24 = mid - mid;\n\
    \        long diff25 = max - min;\n        long diff26 = mid - min;\n        long\
    \ diff27 = mid - max;\n        long diff28 = mid - mid;\n        long diff29 =\
    \ max - min;\n        long diff30 = mid - min;\n        long diff31 = mid - max;\n\
    \        long diff32 = mid - mid;\n        long diff33 = max - min;\n        long\
    \ diff34 = mid - min;\n        long diff35 = mid - max;\n        long diff36 =\
    \ mid - mid;\n        long diff37 = max - min;\n        long diff38 = mid - min;\n\
    \        long diff39 = mid - max;\n        long diff40 = mid - mid;\n        long\
    \ diff41 = min - max;\n        long diff42 = mid - min;\n        long diff43 =\
    \ mid - max;\n        long diff44 = mid - mid;\n        long diff45 = max - min;\n\
    \        long diff46 = mid - min;\n        long diff47 = mid - max;\n        long\
    \ diff48 = mid - mid;\n        long diff49 = max - min;\n        long diff50 =\
    \ mid - min;\n        long diff51 = ", "        long max = l.Max();\n        long\
    \ min = l.Min();\n        if (max < min) return false;\n        long mid = l.Count\
    \ / 2;\n        long midVal = l[mid];\n        bool isIncreasing = true;\n   \
    \     bool isDecreasing = true;\n        bool isMonotonic = true;\n        bool\
    \ isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing = true;\n\
    \        bool isMonotonicIncreasingOrDecreasing = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasing", "        if (l.Count\
    \ < 2) return false;\n        var first = l[0];\n        var last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        var mid = l.Count / 2;\n        var midVal = l[mid];\n      \
    \  var midVal2 = l[mid];\n        var midVal3 = l[mid];\n        var midVal4 =\
    \ l[mid];\n        var midVal5 = l[mid];\n        var midVal6 = l[mid];\n    \
    \    var midVal7 = l[mid];\n        var midVal8 = l[mid];\n        var midVal9\
    \ = l[mid];\n        var midVal10 = l[mid];\n        var midVal11 = l[mid];\n\
    \        var midVal12 = l[mid];\n        var midVal13 = l[mid];\n        var midVal14\
    \ = l[mid];\n        var midVal15 = l[mid];\n        var midVal16 = l[mid];\n\
    \        var midVal17 = l[mid];\n        var midVal18 = l[mid];\n        var midVal19\
    \ = l[mid];\n        var midVal20 = l[mid];\n        var midVal21 = l[mid];\n\
    \        var midVal22 = l[mid];\n        var midVal23 = l[mid];\n        var midVal24\
    \ = l[mid];\n        var midVal25 = l[mid];\n        var midVal26 = l[mid];\n\
    \        var midVal27 = l[mid];\n        var midVal28 = l[mid];\n        var midVal29\
    \ = l[mid];\n        var midVal30 = l[mid];\n        var midVal31 = l[mid];\n\
    \        var midVal32 = l[mid];\n        var midVal33 = l[mid];\n        var midVal34\
    \ = l[mid];\n        var midVal35 = l[mid];\n        var midVal36 = l[mid];\n\
    \        var midVal37 = l[mid];\n        var midVal38 = l[mid];\n        var midVal39\
    \ = l[mid];\n        var midVal40 = l[mid];\n        var midVal41 = l[mid];\n\
    \        var midVal42 = l[mid];\n        var midVal43 = l[mid];\n        var midVal44\
    \ = l[mid];\n        var midVal45 = l[mid];\n        var midVal46 = l[mid];\n\
    \        var midVal47 = l[mid];\n        var midVal48 = l[mid];\n", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = diff - diff2;\n        long diff4 = diff - diff3;\n        long diff5\
    \ = diff - diff4;\n        long diff6 = diff - diff5;\n        long diff7 = diff\
    \ - diff6;\n        long diff8 = diff - diff7;\n        long diff9 = diff - diff8;\n\
    \        long diff10 = diff - diff9;\n        long diff11 = diff - diff10;\n \
    \       long diff12 = diff - diff11;\n        long diff13 = diff - diff12;\n \
    \       long diff14 = diff - diff13;\n        long diff15 = diff - diff14;\n \
    \       long diff16 = diff - diff15;\n        long diff17 = diff - diff16;\n \
    \       long diff18 = diff - diff17;\n        long diff19 = diff - diff18;\n \
    \       long diff20 = diff - diff19;\n        long diff21 = diff - diff20;\n \
    \       long diff22 = diff - diff21;\n        long diff23 = diff - diff22;\n \
    \       long diff24 = diff - diff23;\n        long diff25 = diff - diff24;\n \
    \       long diff26 = diff - diff25;\n        long diff27 = diff - diff26;\n \
    \       long diff28 = diff - diff27;\n        long diff29 = diff - diff28;\n \
    \       long diff30 = diff - diff29;\n        long diff31 = diff - diff30;\n \
    \       long diff32 = diff - diff31;\n        long diff33 = diff - diff32;\n \
    \       long diff34 = diff - diff33;\n        long diff35 = diff - diff34;\n \
    \       long diff36 = diff - diff35;\n        long diff37 = diff - diff36;\n \
    \       long diff38 = diff - diff37;\n        long diff39 = diff - diff38;\n \
    \       long diff40 = diff - diff39;\n        long diff41 = diff - diff40;\n \
    \       long diff42 = diff - diff41;\n        long diff43 = diff - diff42;\n \
    \       long diff44 = diff - diff43;\n        long diff45 = diff - diff44;\n \
    \       long diff46 = diff - diff45;\n        long diff47 = diff - diff46;\n \
    \       long diff48 = diff ", "        long max = l.Max();\n        long min =\
    \ l.Min();\n        long mid = (max + min) / 2;\n        bool increasing = (mid\
    \ > max);\n        bool decreasing = (mid < min);\n        if (increasing && decreasing)\
    \ return true;\n        if (increasing && !decreasing) return true;\n        if\
    \ (!increasing && decreasing) return true;\n        return false;", "        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = l.Skip(1).Take(2).Last();\n\
    \        long middle = l.Skip(1).Take(2).Skip(1).Take(2).Last();\n        long\
    \ middle2 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n      \
    \  long middle3 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle4 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle5 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle6 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle7 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n\
    \        long middle8 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Last();\n\
    \        long middle9 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Take(2).Last();\n\
    \        long middle10 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Take(2).Last();\n\
    \        long middle11 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (min < mid);\n        bool isDecreasing = (max >\
    \ mid);\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;", "        long first = l.First();\n        long\
    \ last = l.Last();\n        long mid = (first + last) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        bool increasingOrDecreasing\
    \ = false;\n        bool increasingOrIncreasing = false;\n        bool decreasingOrIncreasing\
    \ = false;\n        bool decreasingOrDecreasing = false;\n        bool increasingOrDecreasingOrIncreasing\
    \ = false;\n        bool decreasingOrIncreasingOrDecreasing = false;\n       \
    \ bool increasingOrDecreasingOrIncreasingOrDecreasing = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasing\
    \ = false;\n        bool decreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasing\
    \ = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasing\
    \ = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasing\
    \ = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasing\
    \ = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasing\
    \ = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasing\
    \ = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasing\
    \ = false;\n        bool increasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasingOrIncreasingOrDecreasing\
    \ = false;\n", "        if (l.Count < 2) return false;\n        long a = l[0],\
    \ b = l[1], c = l[2];\n        long d = c - a;\n        long e = b - a;\n    \
    \    long f = d - e;\n        long g = f + e;\n        long h = g + d;\n     \
    \   long i = h + b;\n        long j = i + a;\n        long k = j + c;\n      \
    \  long l = k + b;\n        long m = l + a;\n        long n = m + c;\n       \
    \ long o = n + b;\n        long p = o + a;\n        long q = p + c;\n        long\
    \ r = q + b;\n        long s = r + a;\n        long t = s + c;\n        long u\
    \ = t + b;\n        long v = u + a;\n        long w = v + c;\n        long x =\
    \ w + b;\n        long y = x + a;\n        long z = y + c;\n        long aa =\
    \ z + b;\n        long ab = aa + a;\n        long ac = ab + c;\n        long ad\
    \ = ac + b;\n        long ae = ad + a;\n        long af = ae + c;\n        long\
    \ ag = af  + b;\n        long ah = ag + a;\n        long ai = ah + c;\n      \
    \  long aj = ai + b;\n        long ak = aj + a;\n        long al = ak + c;\n \
    \       long am = al + b;\n        long an = am + a;\n        long ao = an + c;\n\
    \        long ap = ao + b;\n        long aq = ap + a;\n        long ar = aq +\
    \ c;\n        long as = ar + b;\n        long at = as + a;\n        long au =\
    \ at + c;\n        long av = au + b;\n        long aw = av + a;\n        long\
    \ ax = aw + c;\n        long ay = ax  + b;\n        long az = ay  + a;\n     \
    \   long ba = az  + c;\n        long bb = ba  + b;\n        long bc = bb  + a;\n\
    \        long bd = bc  + c;\n        long be = bd  + b;\n        long bf = be\
    \  + a;\n        long bg = bf  + c;\n        long bh = bg  + b;\n        long\
    \ bi = bh  + a;\n        long bj = bi  + c;\n        long bk = bj  + b;\n    \
    \    long bl = bk  + a;\n        long bm = bl  + c;\n        long bn = bm  + b;\n\
    \        long bo = bn  + a;", "        long first = l.First();\n        long last\
    \ = l.Last();\n        long mid = l.Skip(1).Take(2).Last();\n        long mid2\
    \ = l.Skip(2).Take(2).Last();\n        long mid3 = l.Skip(3).Take(2).Last();\n\
    \        long mid4 = l.Skip(4).Take(2).Last();\n        long mid5 = l.Skip(5).Take(2).Last();\n\
    \        long mid6 = l.Skip(6).Take(2).Last();\n        long mid7 = l.Skip(7).Take(2).Last();\n\
    \        long mid8 = l.Skip(8).Take(2).Last();\n        long mid9 = l.Skip(9).Take(2).Last();\n\
    \        long mid10 = l.Skip(10).Take(2).Last();\n        long mid11 = l.Skip(11).Take(2).Last();\n\
    \        long mid12 = l.Skip(12).Take(2).Last();\n        long mid13 = l.Skip(13).Take(2).Last();\n\
    \        long mid14 = l.Skip(14).Take(2).Last();\n        long mid15 = l.Skip(15).Take(2).Last();\n\
    \        long mid16 = l.Skip(16).Take(2).Last();\n        long mid17 = l.Skip(17).Take(2).Last();\n\
    \        long mid18 = l.Skip(18).Take(2).Last();\n        long mid19 = l.Skip(19).Take(2).Last();\n\
    \        long mid20 = l.Skip(20).Take(2).Last();\n        long mid21 = l.Skip(21).Take(2).Last();\n\
    \        long mid22 = l.Skip(22).Take(2).Last();\n        long mid23 = l.Skip(23).Take(2).Last();\n\
    \        long mid24 = l.Skip(24).Take(2).Last();\n        long mid25 = l.Skip(25).Take(2).Last();\n\
    \        long mid26 = l.Skip(26).Take(2).Last();\n        long mid27 = l.Skip(27).Take(2).Last();\n\
    \        long mid28 = l.Skip(28).Take(2).Last();\n        long mid29 = l.Skip(29).Take(2).Last();\n\
    \        long mid30 = l.Skip(30).Take(2).Last();\n        long mid31 = l.Skip(31).Take(2).Last();\n\
    \        long mid32 = l.Skip(32).Take(2).Last();\n        long ", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (max < min);\n        bool isDecreasing = (max >\
    \ min);\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;", "        if (l.Count == 0)\n            return\
    \ false;\n        long first = l[0];\n        long last = l[0];\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < first) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > last) {\n                decreasing\
    \ = false;\n            }\n            if (l[i] < last) {\n                last\
    \ = l[i];\n            }\n            if (l[i] > first) {\n                first\
    \ = l[i];\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.Count < 2) return true;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n \
    \       bool isIncreasing = true;\n        bool isDecreasing = true;\n       \
    \ for (int i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n       \
    \         isIncreasing = false;\n            }\n            if (l[i] > mid) {\n\
    \                isDecreasing = false;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        long max = l.Max();\n        long min\
    \ = l.Min();\n        if (min > max) return false;\n        long mid = l.Count\
    \ / 2;\n        long midVal = l[mid];\n        long midVal2 = l[mid+1];\n    \
    \    long midVal3 = l[mid+2];\n        long midVal4 = l[mid+3];\n        long\
    \ midVal5 = l[mid+4];\n        long midVal6 = l[mid+5];\n        long midVal7\
    \ = l[mid+6];\n        long midVal8 = l[mid+7];\n        long midVal9 = l[mid+8];\n\
    \        long midVal10 = l[mid+9];\n        long midVal11 = l[mid+10];\n     \
    \   long midVal12 = l[mid+11];\n        long midVal13 = l[mid+12];\n        long\
    \ midVal14 = l[mid+13];\n        long midVal15 = l[mid+14];\n        long midVal16\
    \ = l[mid+15];\n        long midVal17 = l[mid+16];\n        long midVal18 = l[mid+17];\n\
    \        long midVal19 = l[mid+18];\n        long midVal20 = l[mid+19];\n    \
    \    long midVal21 = l[mid+20];\n        long midVal22 = l[mid+21];\n        long\
    \ midVal23 = l[mid+22];\n        long midVal24 = l[mid+23];\n        long midVal25\
    \ = l[mid+24];\n        long midVal26 = l[mid+25];\n        long midVal27 = l[mid+26];\n\
    \        long midVal28 = l[mid+27];\n        long midVal29 = l[mid+28];\n    \
    \    long midVal30 = l[mid+29];\n        long midVal31 = l[mid+30];\n        long\
    \ midVal32 = l[mid+31];\n        long midVal33 = l[mid+32];\n        long midVal34\
    \ = l[mid+33];\n        long midVal35 = l[mid+34];\n        long midVal36 = l[mid+35];\n\
    \        long midVal37 = l[mid+36];\n        long midVal38 = l[mid+37];\n    \
    \    long midVal", "        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Average();\n        long diff = max - min;\n        long\
    \ midDiff = max - mid;\n        long diffDiff = max - diff;\n        long midDiffDiff\
    \ = max - midDiff;\n        long diffDiffDiff2 = max - diffDiff;\n        long\
    \ midDiffDiff2 = max - midDiffDiff;\n        long diffDiffDiff3 = max - diffDiff2;\n\
    \        long midDiffDiff3 = max - midDiffDiff2;\n        long diffDiffDiff4 =\
    \ max - diffDiff3;\n        long midDiffDiff4 = max - midDiffDiff3;\n        long\
    \ diffDiffDiff5 = max - diffDiff4;\n        long midDiffDiff5 = max - midDiffDiff4;\n\
    \        long diffDiffDiff6 = max - diffDiff5;\n        long midDiffDiff6 = max\
    \ - midDiffDiff5;\n        long diffDiffDiff7 = max - diffDiff6;\n        long\
    \ midDiffDiff7 = max - midDiffDiff6;\n        long diffDiffDiff8 = max - diffDiff7;\n\
    \        long midDiffDiff8 = max - midDiffDiff7;\n        long diffDiffDiff9 =\
    \ max - diffDiff8;\n        long midDiffDiff9 = max - midDiffDiff8;\n        long\
    \ diffDiffDiff10 = max - diffDiff9;\n        long midDiffDiff10 = max - midDiffDiff9;\n\
    \        long diffDiffDiff11 = max - diffDiff10;\n        long midDiffDiff11 =\
    \ max - midDiffDiff10;\n        long diffDiffDiff12 = max - diffDiff11;\n    \
    \    long midDiffDiff12 = max - midDiffDiff11;\n        long diffDiffDiff13 =\
    \ max - diffDiff12;\n        long midDiffDiff13 = max - midDiffDiff12;\n     \
    \   long diffDiffDiff14 = max - diffDiff13;\n        long midDiffDiff14 = max\
    \ - midDiffDiff13;\n        long diffDiffDiff15 = max - diffDiff14;\n        long\
    \ midDiffDiff15 = max - midDiffDiff14;\n        long diffDiffDiff16 = max - diffDiff15;\n\
    \        long midDiffDiff16 = max - midDiffDiff15;\n        long diffDiffDiff17\
    \ = max - diffDiff16;\n        long midDiffDiff17 = max - midDiffDiff16;\n   \
    \     long diffDiffDiff18 = max - diffDiff17;\n        long midDiffDiff18 = max\
    \ - midDiffDiff17;\n        long diffDiffDiff19 = max - diffDiff18;\n        long\
    \ midDiffDiff19 = max - midDiffDiff18;\n        long diffDiffDiff20 = max - diffDiff19;\n\
    \        long midDiffDiff20 = max - midDiffDiff", "        if (l.Count == 0) return\
    \ true;\n        if (l.Count == 1) return l[0] > l[1];\n        long a = l[0],\
    \ b = l[1];\n        long c = l[2], d = l[3];\n        long e = l[4];\n      \
    \  long f = l[5];\n        long g = l[6];\n        long h = l[7];\n        long\
    \ i = l[8];\n        long j = l[9];\n        long k = l[10];\n        long l =\
    \ l[11];\n        long m = l[12];\n        long n = l[13];\n        long o = l[14];\n\
    \        long p = l[15];\n        long q = l[16];\n        long r = l[17];\n \
    \       long s = l[18];\n        long t = l[19];\n        long u = l[20];\n  \
    \      long v = l[21];\n        long w = l[22];\n        long x = l[23];\n   \
    \     long y = l[24];\n        long z = l[25];\n        long A = l[26];\n    \
    \    long B = l[27];\n        long C = l[28];\n        long D = l[29];\n     \
    \   long E = l[30];\n        long F = l[31];\n        long G = l[32];\n      \
    \  long H = l[33];\n        long I = l[34];\n        long J = l[35];\n       \
    \ long K = l[36];\n        long L = l[37];\n        long M = l[38];\n        long\
    \ N = l[39];\n        long O = l[40];\n        long P = l[41];\n        long Q\
    \ = l[42];\n        long R = l[43];\n        long S = l[44];\n        long T =\
    \ l[45];\n        long U = l[46];\n        long V = l[47];\n        long W = l[48];\n\
    \        long X = l[49];\n        long Y = l[50];\n        long Z = l[51];\n \
    \       long A = l[52];\n        long B = l[53];\n        long C = l[54];\n  \
    \      long D = l[55];\n        long E = l[56];\n        long F = l[57];\n   \
    \     long G = l[58];\n        long H = l[59];\n        long I = l[60];\n    \
    \    long J = l[61];\n        long K = l[62];\n        ", "        long max =\
    \ l.Max();\n        long min = l.Min();\n        if (max < min) return false;\n\
    \        long mid = l.Count / 2;\n        long midVal = l[mid];\n        long\
    \ midVal2 = l[mid+1];\n        if (midVal < midVal2) return false;\n        if\
    \ (midVal > midVal2) return true;\n        if (midVal > max) return false;\n \
    \       if (midVal < min) return true;\n        return Monotonic(l);", "     \
    \   long max = l.Max();\n        long min = l.Min();\n        if (max < min) return\
    \ false;\n        long mid = l.Count / 2;\n        long midVal = l[mid];\n   \
    \     long midValDiff = max - midVal;\n        long midValDiffAbs = midValDiff\
    \ < 0 ? -midValDiff : midValDiff;\n        long midValDiffAbsDiff = midValDiffAbs\
    \ > 0 ? midValDiffAbs : -midValDiffAbs;\n        long midValDiffAbsDiffAbs = midValDiffAbsDiff\
    \ > 0 ? midValDiffAbsDiff : -midValDiffAbsDiff;\n        long midValDiffAbsDiffAbsDiff\
    \ = midValDiffAbsDiffAbs > 0 ? midValDiffAbsDiffAbs : -midValDiffAbsDiffAbs;\n\
    \        long midValDiffAbsDiffAbsDiffAbs = midValDiffAbsDiffAbsDiff > 0 ? midValDiffAbsDiffAbsDiff\
    \ : -midValDiffAbsDiffAbsDiff;\n        long midValDiffAbsDiffAbsDiffAbsDiff =\
    \ midValDiffAbsDiffAbsDiffAbs > 0 ? midValDiffAbsDiffAbsDiffAbs : -midValDiffAbsDiffAbsDiffAbs;\n\
    \        long midValDiffAbsDiffAbsDiffAbsDiffAbs = midValDiffAbsDiffAbsDiffAbsDiff\
    \ > 0 ? midValDiffAbsDiffAbsDiffAbsDiff : -midValDiffAbsDiffAbsDiffAbsDiff;\n\
    \        long midValDiffAbsDiffAbsDiffAbsDiffAbsDiff = midValDiffAbsDiffAbsDiffAbsDiffAbs\
    \ > 0 ? midValDiffAbsDiffAbsDiffAbsDiffAbs : -midValDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n\
    \        long midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ > 0 ? midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs : -midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff;\n\
    \        long midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = midValDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ > 0 ? mid", "        if (l.Count == 0) return true;\n        long prev = l[0];\n\
    \        long current = l[0];\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long next\
    \ = l[i];\n            if (next < prev) {\n                decreasing = false;\n\
    \            } else if (next > prev) {\n                increasing = false;\n\
    \            } else {\n                increasing = current < next;\n        \
    \        decreasing = current > next;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return increasing || decreasing;",
  "        if (l.Count == 0)\n            return false;\n        long first = l[0];\n\
    \        long last = l[0];\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ first) {\n                increasing = false;\n            }\n            if\
    \ (l[i] > last) {\n                decreasing = false;\n            }\n      \
    \      if (increasing && decreasing) {\n                return false;\n      \
    \      }\n            last = l[i];\n        }\n        return increasing || decreasing;",
  "        if (l.Count < 2) return false;\n        long a = l[0], b = l[1], c = l[2];\n\
    \        long d = b - a;\n        long e = c - a;\n        if (d < 0 || e < 0)\
    \ return false;\n        if (d == 0 && e == 0) return true;\n        if (d > e)\
    \ return true;\n        if (d == e) return true;\n        long f = d - e;\n  \
    \      if (f == 0) return true;\n        if (f > 0) return false;\n        if\
    \ (f < -1) return false;\n        return true;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        long diff\
    \ = max - min;\n        long midDiff = max - mid;\n        long diff2 = mid -\
    \ min;\n        long diff3 = mid - max;\n        long diff4 = max - mid;\n   \
    \     long diff5 = mid - min;\n        long diff6 = max - mid;\n        long diff7\
    \ = mid - max;\n        long diff8 = max - min;\n        long diff9 = mid - min;\n\
    \        long diff10 = mid - max;\n        long diff11 = mid - min;\n        long\
    \ diff12 = mid - max;\n        long diff13 = mid - min;\n        long diff14 =\
    \ mid - max;\n        long diff15 = mid - min;\n        long diff16 = mid - max;\n\
    \        long diff17 = mid - min;\n        long diff18 = mid - max;\n        long\
    \ diff19 = mid - min;\n        long diff20 = mid - max;\n        long diff21 =\
    \ mid - min;\n        long diff22 = mid - max;\n        long diff23 = mid - min;\n\
    \        long diff24 = mid - max;\n        long diff25 = mid - min;\n        long\
    \ diff26 = mid - max;\n        long diff27 = mid - min;\n        long diff28 =\
    \ mid - max;\n        long diff29 = mid - min;\n        long diff30 = mid - max;\n\
    \        long diff31 = mid - min;\n        long diff32 = mid - max;\n        long\
    \ diff33 = mid - min;\n        long diff34 = mid - max;\n        long diff35 =\
    \ mid - min;\n        long diff36 = mid - max;\n        long diff37 = mid - min;\n\
    \        long diff38 = mid - max;\n        long diff39 = mid - min;\n        long\
    \ diff40 = mid - max;\n        long diff41 = mid - min;\n        long diff42 =\
    \ mid - max;\n        long diff43 = mid - min;\n        long diff44 = mid - max;\n\
    \        long diff45 = mid - min;\n        long diff46 = mid - max;\n        long\
    \ diff47 = mid - min;\n        long diff48 = mid - max;\n        long diff49",
  "        if (l.Count < 2) return true;\n        long first = l[0], last = l[0];\n\
    \        bool increasing = true;\n        foreach (long x in l.Skip(1))\n    \
    \        if (x < first) increasing = false;\n            else if (x > last) increasing\
    \ = true;\n            else last = x;\n        return increasing;", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreas",
  "        if (l.Count < 2) return false;\n        long first = l[0], last = l[0];\n\
    \        bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < first) {\n                increasing = false;\n      \
    \      }\n            if (l[i] > last) {\n                increasing = true;\n\
    \            }\n            last = l[i];\n        }\n        return increasing;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n \
    \       bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long e in l) {\n            if (e < mid) {\n                decreasing = false;\n\
    \            }\n            if (e > mid) {\n                increasing = false;\n\
    \            }\n            if (e == mid) {\n                increasing = decreasing\
    \ = true;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.Count < 2) return false;\n        var first = l[0];\n        var\
    \ last = l[l.Count - 1];\n        var mid = first + ((last - first) / 2);\n  \
    \      var isIncreasing = true;\n        var isDecreasing = true;\n        for\
    \ (var i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n           \
    \     isIncreasing = false;\n            } else if (l[i] > mid) {\n          \
    \      isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ mid) {\n                isIncreasing = false;\n            }\n            if\
    \ (l[i] > mid) {\n                isDecreasing = false;\n            }\n     \
    \   }\n        return isIncreasing || isDecreasing;", "        if (l.Count ==\
    \ 0) return true;\n        if (l.Count == 1) return l[0] > l[1];\n        if (l.Count\
    \ == 2) return l[0] > l[1] && l[0] < l[1];\n        if (l.Count == 3) return l[0]\
    \ > l[1] && l[0] < l[2] && l[1] < l[2];\n        if (l.Count == 4) return l[0]\
    \ > l[1] && l[0] < l[2] && l[1] < l[3] && l[2] < l[3];\n        if (l.Count ==\
    \ 5) return l[0] > l[1] && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] <\
    \ l[4];\n        if (l.Count == 6) return l[0] > l[1] && l[0] < l[2] && l[1] <\
    \ l[3] && l[2] < l[4] && l[3] < l[5] && l[4] < l[5];\n        if (l.Count == 7)\
    \ return l[0] > l[1] && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5]\
    \ && l[4] < l[6] && l[5] < l[6];\n        if (l.Count == 8) return l[0] > l[1]\
    \ && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5] && l[4] < l[6] &&\
    \ l[5] < l[7] && l[6] < l[7];\n        if (l.Count == 9) return l[0] > l[1] &&\
    \ l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5] && l[4] < l[6] && l[5]\
    \ < l[7] && l[6] < l[8] && l[7] < l[8];\n        if (l.Count == 10) return l[0]\
    \ > l[1] && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5] && l[4] <\
    \ l[6] && l[5] < l[7] && l[6] < l[8] && l[7] < l[9] && l[8] < l[9];\n        if\
    \ (l.Count == 11) return l[0] > l[1] && l[0] < l[2] && l[1] < l[3] && l[2] < l[4]\
    \ && l[3] < l[5] && l[4] < l[6] && l[5] < l[7] && l[6] < l[8] && l[7] < l[9] &&\
    \ l[8] < l[10] && l[9] < l[10];\n        if (l.Count == 12) return l[0] > l[1]\
    \ && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5", "        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] >= l[1];\n       \
    \ if (l.Count == 2) return l[0] >= l[1] && l[1] >= l[2];\n        if (l.Count\
    \ == 3) return l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3];\n        if (l.Count\
    \ == 4) return l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4];\n\
    \        if (l.Count == 5) return l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3]\
    \ && l[3] >= l[4] && l[4] >= l[5];\n        if (l.Count == 6) return l[0] >= l[1]\
    \ && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6];\n\
    \        if (l.Count == 7) return l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3]\
    \ && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6] >= l[7];\n        if\
    \ (l.Count == 8) return l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >=\
    \ l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6] >= l[7] && l[7] >= l[8];\n    \
    \    if (l.Count == 9) return l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] &&\
    \ l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6] >= l[7] && l[7] >= l[8]\
    \ && l[8] >= l[9];\n        if (l.Count == 10) return l[0] >= l[1] && l[1] >=\
    \ l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6]\
    \ >= l[7] && l[7] >= l[8] && l[8] >= l[9] && l[9] >= l[10];\n        if (l.Count\
    \ == 11) return l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] &&\
    \ l[4] >= l[5] && l[5] >= l[6] && l[6] >= l[7] && l[7] >= l[8] && l[8] >= l[9]\
    \ && l[9] >= l[10] && l[10] >= l[11];\n        if (l.Count == 12", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        if (diff\
    \ == 0)\n            return true;\n        if (diff == diff2)\n            return\
    \ false;\n        if (diff > diff2)\n            return true;\n        return\
    \ false;", "        if (l.Count < 2) return true;\n        var first = l[0];\n\
    \        var last = l[l-1];\n        var mid = (first + last) / 2;\n        var\
    \ midVal = l[mid];\n        var midValDiff = midVal - first;\n        var midValDiffAbs\
    \ = Math.Abs(midValDiff);\n        var midValDiffAbsDiff = midValDiffAbs - last;\n\
    \        if (midValDiffAbsDiff > 0) return false;\n        var midValDiffAbsDiffAbs\
    \ = Math.Abs(midValDiffAbsDiff);\n        var midValDiffAbsDiffAbsDiff = midValDiffAbsDiffAbs\
    \ - mid;\n        if (midValDiffAbsDiffAbsDiff > 0) return false;\n        return\
    \ true;", "        long prev = l[0];\n        long current = l[0];\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            current = l[i];\n            if (current <\
    \ prev) {\n                decreasing = false;\n            } else if (current\
    \ > prev) {\n                increasing = false;\n            } else {\n     \
    \           increasing = decreasing = true;\n            }\n            prev =\
    \ current;\n        }\n        return increasing || decreasing;", "        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) return false;\n\
    \        long mid = l.Count / 2;\n        long midVal = l[mid];\n        long\
    \ midPrevVal = l[mid-1];\n        long midNextVal = l[mid+1];\n        long midPrevPrevVal\
    \ = l[mid-2];\n        long midNextNextVal = l[mid+2];\n        long midPrevNextPrevVal\
    \ = l[mid-3];\n        long midNextNextNextVal = l[mid+3];\n        long midPrevNextNextPrevVal\
    \ = l[mid-4];\n        long midNextNextNextNextVal = l[mid-5];\n        long midPrevNextNextNextNextVal\
    \ = l[mid-6];\n        long midNextNextNextNextNextVal = l[mid-7];\n        long\
    \ midPrevNextNextNextNextNextVal = l[mid-8];\n        long midNextNextNextNextNextVal\
    \ = l[mid-9];\n        long midPrevNextNextNextNextNextVal = l[mid-10];\n    \
    \    long midNextNextNextNextNextVal = l[mid-11];\n        long midPrevNextNextNextNextNextVal\
    \ = l[mid-12];\n        long midNextNextNextNextNextVal = l[mid-13];\n       \
    \ long midPrevNextNextNextNextNextVal = l[mid-14];\n        long midNextNextNextNextNextVal\
    \ = l[mid-15];\n        long midPrevNextNextNextNextNextVal = l[mid-16];\n   \
    \     long midNextNextNextNextNextVal = l[mid-17];\n        long midPrevNextNextNextNextNextVal\
    \ = l[mid-18];\n        long midNextNextNextNextNextVal = l[mid-19];\n       \
    \ long midPrevNextNextNextNextNextVal = l[mid-20];\n        long midNextNextNextNextNextVal\
    \ = l[mid-21];\n        long midPrevNextNextNextNextNextVal = l[mid-22];\n   \
    \     long midNextNextNextNextNextVal = l[mid-23];\n        long midPrevNextNextNextNextNextVal\
    \ = l[mid-24];\n        long midNextNextNextNextNextVal = l[mid-25];\n       \
    \ long midPrevNextNextNextNextNextVal = l[mid-26];\n        long midNextNextNextNextNextVal\
    \ = l[mid", "        long first = l.First();\n        long last = l.Last();\n\
    \        long mid = l.Skip(1).Take(2).Last();\n        bool isIncreasing = (first\
    \ < last);\n        bool isDecreasing = (first > last);\n        if (isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        if (isIncreasing\
    \ && !isDecreasing) {\n            return false;\n        }\n        if (!isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        return false;",
  "        if (l.Count < 2) return true;\n        long first = l[0], last = l[0];\n\
    \        bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < first) {\n      \
    \          increasing = false;\n            }\n            if (current > last)\
    \ {\n                increasing = true;\n            }\n            last = current;\n\
    \        }\n        return increasing;", "        if (l.Count < 2) return true;\n\
    \        long first = l[0];\n        long last = l[l.Count - 1];\n        long\
    \ middle = first + ((last - first) / 2);\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long x in l.Skip(1))\n  \
    \      {\n            if (x > middle)\n            {\n                isIncreasing\
    \ = false;\n                break;\n            }\n            if (x < middle)\n\
    \            {\n                isDecreasing = false;\n                break;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing;", "  \
    \      long first = l[0];\n        long last = l[0];\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        foreach (long x in l) {\n\
    \            if (x > last) {\n                increasing = false;\n          \
    \  }\n            if (x < first) {\n                decreasing = false;\n    \
    \        }\n            last = x;\n        }\n        return increasing || decreasing;",
  "        long first = l.First();\n        long last = l.Last();\n        if (first\
    \ > last)\n            return false;\n        long mid = first + (last - first)\
    \ / 2;\n        long mid2 = l.ElementAt(mid);\n        long mid3 = l.ElementAt(mid\
    \ + 1);\n        if (mid2 > mid3)\n            return false;\n        long mid4\
    \ = l.ElementAt(mid + 2);\n        long mid5 = l.ElementAt(mid + 3);\n       \
    \ if (mid4 > mid5)\n            return false;\n        long mid6 = l.ElementAt(mid\
    \ + 4);\n        long mid7 = l.ElementAt(mid + 5);\n        if (mid6 > mid7)\n\
    \            return false;\n        return true;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        long mid = l.Average();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonot", "        long first = l.First();\n\
    \        long last = l.Last();\n        if (first > last)\n            return\
    \ false;\n        if (first == last)\n            return true;\n        long mid\
    \ = l.Skip(1).Take(2).Last();\n        if (mid < first || mid > last)\n      \
    \      return false;\n        long mid2 = l.Skip(2).Take(2).Last();\n        if\
    \ (mid2 < first || mid2 > last)\n            return false;\n        long mid3\
    \ = l.Skip(3).Take(2).Last();\n        if (mid3 < first || mid3 > last)\n    \
    \        return false;\n        long mid4 = l.Skip(4).Take(2).Last();\n      \
    \  if (mid4 < first || mid4 > last)\n            return false;\n        long mid5\
    \ = l.Skip(5).Take(2).Last();\n        if (mid5 < first || mid5 > last)\n    \
    \        return false;\n        long mid6 = l.Skip(6).Take(2).Last();\n      \
    \  if (mid6 < first || mid6 > last)\n            return false;\n        long mid7\
    \ = l.Skip(7).Take(2).Last();\n        if (mid7 < first || mid7 > last)\n    \
    \        return false;\n        long mid8 = l.Skip(8).Take(2).Last();\n      \
    \  if (mid8 < first || mid8 > last)\n            return false;\n        long mid9\
    \ = l.Skip(9).Take(2).Last();\n        if (mid9 < first || mid9 > last)\n    \
    \        return false;\n        long mid10 = l.Skip(10).Take(2).Last();\n    \
    \    if (mid10 < first || mid10 > last)\n            return false;\n        return\
    \ true;", "        if (l.Count == 0) return true;\n        long first = l[0];\n\
    \        long last = l[0];\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < first) {\n                increasing = false;\n\
    \            } else if (current > last) {\n                decreasing = false;\n\
    \            } else {\n                last = current;\n            }\n      \
    \  }\n        return increasing || decreasing;", "        long max = l.Max();\n\
    \        long min = l.Min();\n        bool increasing = (max >= min);\n      \
    \  bool decreasing = (min >= max);\n        return increasing || decreasing;",
  "        long max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = max - mid;\n        long diff4 = mid - max;\n        long diff5 = min\
    \ - mid;\n        long diff6 = max - min;\n        long diff7 = mid - min;\n \
    \       long diff8 = max - mid;\n        long diff9 = mid - max;\n        long\
    \ diff10 = mid - min;\n        long diff11 = mid - mid;\n        long diff12 =\
    \ mid - max;\n        long diff13 = mid - min;\n        long diff14 = mid - mid;\n\
    \        long diff15 = mid - max;\n        long diff16 = mid - min;\n        long\
    \ diff17 = mid - mid;\n        long diff18 = mid - max;\n        long diff19 =\
    \ mid - min;\n        long diff20 = mid - mid;\n        long diff21 = mid - max;\n\
    \        long diff22 = mid - min;\n        long diff23 = mid - mid;\n        long\
    \ diff24 = mid - max;\n        long diff25 = mid - min;\n        long diff26 =\
    \ mid - mid;\n        long diff27 = mid - max;\n        long diff28 = mid - min;\n\
    \        long diff29 = mid - mid;\n        long diff30 = mid - max;\n        long\
    \ diff31 = mid - min;\n        long diff32 = mid - mid;\n        long diff33 =\
    \ mid - max;\n        long diff34 = mid - min;\n        long diff35 = mid - mid;\n\
    \        long diff36 = mid - max;\n        long diff37 = mid - min;\n        long\
    \ diff38 = mid - mid;\n        long diff39 = mid - max;\n        long diff40 =\
    \ mid - min;\n        long diff41 = mid - mid;\n        long diff42 = mid - max;\n\
    \        long diff43 = mid - min;\n        long diff44 = mid - mid;\n        long\
    \ diff45 = mid - max;\n        long diff46 = mid - min;\n        long diff47 =\
    \ mid - mid;\n        long diff48 = mid - max;\n        long diff49 = mid - min;\n\
    \        long diff50", "        if (l.Count < 2) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + ((last\
    \ - first) / 2);\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < mid) {\n                increasing = false;\n     \
    \       } else if (current > mid) {\n                decreasing = false;\n   \
    \         } else {\n                mid = current;\n            }\n        }\n\
    \        return increasing || decreasing;", "        if (l.Count < 2) return true;\n\
    \        long first = l[0];\n        long last = l[l-1];\n        long mid = first\
    \ + (last-first)/2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ mid) {\n                isIncreasing = false;\n            } else if (l[i] >\
    \ mid) {\n                isDecreasing = false;\n            } else {\n      \
    \          return false;\n            }\n        }\n        if (isIncreasing &&\
    \ isDecreasing) return true;\n        if (isIncreasing && !isDecreasing) return\
    \ false;\n        if (!isIncreasing && isDecreasing) return false;\n        return\
    \ true;", "        long prev = l[0];\n        bool increasing = true;\n      \
    \  foreach (long x in l.Skip(1))\n            if (x < prev)\n                increasing\
    \ = false;\n            else\n                prev = x;\n        return increasing;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n                increasing\
    \ = false;\n            } else if (l[i] > mid) {\n                decreasing =\
    \ false;\n            } else {\n                mid = l[i];\n            }\n \
    \       }\n        return increasing || decreasing;", "        long first = l.First();\n\
    \        long last = l.Last();\n        long mid = l.Skip(1).Take(2).Last();\n\
    \        long mid2 = l.Skip(2).Take(2).Last();\n        long mid3 = l.Skip(3).Take(2).Last();\n\
    \        long mid4 = l.Skip(4).Take(2).Last();\n        long mid5 = l.Skip(5).Take(2).Last();\n\
    \        long mid6 = l.Skip(6).Take(2).Last();\n        long mid7 = l.Skip(7).Take(2).Last();\n\
    \        long mid8 = l.Skip(8).Take(2).Last();\n        long mid9 = l.Skip(9).Take(2).Last();\n\
    \        long mid10 = l.Skip(10).Take(2).Last();\n        long mid11 = l.Skip(11).Take(2).Last();\n\
    \        long mid12 = l.Skip(12).Take(2).Last();\n        long mid13 = l.Skip(13).Take(2).Last();\n\
    \        long mid14 = l.Skip(14).Take(2).Last();\n        long mid15 = l.Skip(15).Take(2).Last();\n\
    \        long mid16 = l.Skip(16).Take(2).Last();\n        long mid17 = l.Skip(17).Take(2).Last();\n\
    \        long mid18 = l.Skip(18).Take(2).Last();\n        long mid19 = l.Skip(19).Take(2).Last();\n\
    \        long mid20 = l.Skip(20).Take(2).Last();\n        long mid21 = l.Skip(21).Take(2).Last();\n\
    \        long mid22 = l.Skip(22).Take(2).Last();\n        long mid23 = l.Skip(23).Take(2).Last();\n\
    \        long mid24 = l.Skip(24).Take(2).Last();\n        long mid25 = l.Skip(25).Take(2).Last();\n\
    \        long mid26 = l.Skip(26).Take(2).Last();\n        long mid27 = l.Skip(27).Take(2).Last();\n\
    \        long mid28 = l.Skip(28).Take(2).Last();\n        long mid29 = l.Skip(29).Take(2).Last();\n\
    \        long mid30 = l.Skip(30).Take(2).Last();\n        long mid31 = l.Skip(31).Take(2).Last();\n\
    \        long mid32 = l.Skip(32).Take(2).Last();\n        long ", "        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        foreach (long num in l) {\n            if (num < mid) {\n \
    \               isDecreasing = false;\n            } else if (num > mid) {\n \
    \               isIncreasing = false;\n            } else {\n                isIncreasing\
    \ &= num > mid;\n                isDecreasing &= num < mid;\n            }\n \
    \       }\n        return isIncreasing || isDecreasing;", "        if (l.Count\
    \ < 2)\n            return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n      \
    \  bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < mid)\n                isIncreasing\
    \ = false;\n            else if (l[i] > mid)\n                isDecreasing = false;\n\
    \            else\n                return false;\n        }\n        if (isIncreasing\
    \ && isDecreasing)\n            return true;\n        if (isIncreasing && !isDecreasing)\n\
    \            return true;\n        if (!isIncreasing && isDecreasing)\n      \
    \      return true;\n        return false;", "        long min = l.Min();\n  \
    \      long max = l.Max();\n        if (min > max) {\n            return false;\n\
    \        }\n        long mid = min + (max - min) / 2;\n        long mid2 = mid\
    \ + (max - min) / 2;\n        long mid3 = mid2 + (max - min) / 2;\n        long\
    \ mid4 = mid3 + (max - min) / 2;\n        long mid5 = mid4 + (max - min) / 2;\n\
    \        long mid6 = mid5 + (max - min) / 2;\n        long mid7 = mid6 + (max\
    \ - min) / 2;\n        long mid8 = mid7 + (max - min) / 2;\n        long mid9\
    \ = mid8 + (max - min) / 2;\n        long mid10 = mid9 + (max - min) / 2;\n  \
    \      long mid11 = mid10 + (max - min) / 2;\n        long mid12 = mid11 + (max\
    \ - min) / 2;\n        long mid13 = mid12 + (max - min) / 2;\n        long mid14\
    \ = mid13 + (max - min) / 2;\n        long mid15 = mid14 + (max - min) / 2;\n\
    \        long mid16 = mid15 + (max - min) / 2;\n        long mid17 = mid16 + (max\
    \ - min) / 2;\n        long mid18 = mid17 + (max - min) / 2;\n        long mid19\
    \ = mid18 + (max - min) / 2;\n        long mid20 = mid19 + (max - min) / 2;\n\
    \        long mid21 = mid20 + (max - min) / 2;\n        long mid22 = mid21 + (max\
    \ - min) / 2;\n        long mid23 = mid22 + (max - min) / 2;\n        long mid24\
    \ = mid23 + (max - min) / 2;\n        long mid25 = mid24 + (max - min) / 2;\n\
    \        long mid26 = mid25 + (max - min) / 2;\n        long mid27 = mid26 + (max\
    \ - min) / 2;\n        long mid28 = mid27 + (max - min) / 2;\n        long mid29\
    \ = mid28 + (max - min) / 2;\n        long mid30 = mid29 + (max - min) / 2;\n\
    \        long mid31 = mid30 + (max - min) / 2;\n        long mid32 = mid31 + (max\
    \ - min) / 2;\n        long mid33 = mid32 + (max - min) / 2;\n        long mid34\
    \ = mid33 + (max - min) / 2;\n        long mid35 = mid34 + (max - min) / 2;\n\
    \        long mid36 = mid35 + (max - min) / 2;\n        long mid37 = mid36 + (max\
    \ - min) / 2;\n        long mid38 = mid37 + (max - min) / 2;\n        long mid39\
    \ = mid38", "        if (l.Count < 2) return true;\n        long first = l[0];\n\
    \        long last = l[l-1];\n        long mid = (first + last) / 2;\n       \
    \ bool isIncreasing = true;\n        bool isDecreasing = true;\n        bool isMonotonic\
    \ = true;\n        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingMonotonicDecreasingMonotonic = true;\n    \
    \    bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicDecreasingMon",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n \
    \       bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < mid) {\n                increasing = false;\n            }\
    \ else if (current > mid) {\n                decreasing = false;\n           \
    \ } else {\n                mid = current;\n            }\n        }\n       \
    \ return increasing || decreasing;", "        long min = l.Min();\n        long\
    \ max = l.Max();\n        if (min > max) return false;\n        if (min == max)\
    \ return true;\n        long mid = (min + max) / 2;\n        bool leftIsIncreasing\
    \ = l.Take(1).All(x => x >= mid);\n        bool rightIsIncreasing = l.Take(l.Count\
    \ - 1).All(x => x <= mid);\n        return leftIsIncreasing || rightIsIncreasing;",
  "        long prev = l[0];\n        long current = l[0];\n        bool isIncreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long next\
    \ = l[i];\n            if (next < prev) {\n                isIncreasing = false;\n\
    \            }\n            if (next > prev) {\n                isIncreasing =\
    \ true;\n            }\n            prev = current;\n            current = next;\n\
    \        }\n        return isIncreasing;", "        if (l.Count < 2) return true;\n\
    \        if (l.Count < 3) return false;\n        long a = l[0], b = l[1], c =\
    \ l[2];\n        long d = b - a;\n        long e = c - b;\n        long f = d\
    \ - e;\n        return f < 0;", "        if (l.Count < 2) return true;\n     \
    \   long first = l[0];\n        long last = l[l-1];\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ mid) {\n                isIncreasing = false;\n            } else if (l[i] >\
    \ mid) {\n                isDecreasing = false;\n            } else {\n      \
    \          isIncreasing = isDecreasing = true;\n            }\n            if\
    \ (isIncreasing && isDecreasing) return true;\n        }\n        return false;",
  "        long first = l.First();\n        long last = l.Last();\n        if (first\
    \ > last)\n            return false;\n        long mid = first + ((last - first)\
    \ >> 1);\n        bool increasing = true;\n        bool decreasing = true;\n \
    \       foreach (long x in l)\n        {\n            if (x < mid)\n         \
    \   {\n                decreasing = false;\n            }\n            else if\
    \ (x > mid)\n            {\n                increasing = false;\n            }\n\
    \            else\n            {\n                increasing = decreasing = true;\n\
    \            }\n            mid = x;\n        }\n        return increasing ||\
    \ decreasing;", "        if (l.Count < 2) return false;\n        long first =\
    \ l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < mid) {\n                increasing = false;\n     \
    \       } else if (current > mid) {\n                decreasing = false;\n   \
    \         } else {\n                mid = current;\n            }\n        }\n\
    \        return increasing || decreasing;", "        long max = l.Max();\n   \
    \     long min = l.Min();\n        long mid = l.Average();\n        long diff\
    \ = max - min;\n        long diff2 = mid - min;\n        long diff3 = diff - diff2;\n\
    \        long diff4 = mid - mid;\n        long diff5 = diff - diff4;\n       \
    \ long diff6 = mid - mid;\n        long diff7 = diff - diff6;\n        long diff8\
    \ = mid - mid;\n        long diff9 = diff - diff8;\n        long diff10 = mid\
    \ - mid;\n        long diff11 = diff - diff10;\n        long diff12 = mid - mid;\n\
    \        long diff13 = diff - diff12;\n        long diff14 = mid - mid;\n    \
    \    long diff15 = diff - diff13;\n        long diff16 = mid - mid;\n        long\
    \ diff17 = diff - diff16;\n        long diff18 = mid - mid;\n        long diff19\
    \ = diff - diff17;\n        long diff20 = mid - mid;\n        long diff21 = diff\
    \ - diff20;\n        long diff22 = mid - mid;\n        long diff23 = diff - diff22;\n\
    \        long diff24 = mid - mid;\n        long diff25 = diff - diff23;\n    \
    \    long diff26 = mid - mid;\n        long diff27 = diff - diff26;\n        long\
    \ diff28 = mid - mid;\n        long diff29 = diff - diff27;\n        long diff30\
    \ = mid - mid;\n        long diff31 = diff - diff28;\n        long diff32 = mid\
    \ - mid;\n        long diff33 = diff - diff32;\n        long diff34 = mid - mid;\n\
    \        long diff35 = diff - diff33;\n        long diff36 = mid - mid;\n    \
    \    long diff37 = diff - diff36;\n        long diff38 = mid - mid;\n        long\
    \ diff39 = diff - diff37;\n        long diff40 = mid - mid;\n        long diff41\
    \ = diff - diff38;\n        long diff42 = mid - mid;\n        long diff43 = diff\
    \ - diff42;\n        long diff44 = mid - mid;\n        long diff45 = diff - diff43;\n\
    \        long diff46 = mid - mid;\n        long diff47 = diff - diff44;\n    \
    \    long diff48 = mid - mid;\n        long diff", "        long max = l.Max();\n\
    \        long min = l.Min();\n        if (min < 0 && max > 0) {\n            return\
    \ true;\n        }\n        if (min > 0 && max < 0) {\n            return true;\n\
    \        }\n        return false;", "        long first = l.First();\n       \
    \ long last = l.Last();\n        if (first < last)\n            return false;\n\
    \        long mid = l.Skip(1).Take(2).Last();\n        if (mid < first)\n    \
    \        return false;\n        long diff = last - mid;\n        if (diff < 0)\n\
    \            return true;\n        if (diff > 0)\n            return false;\n\
    \        long mid2 = l.Skip(2).Take(2).Last();\n        if (mid2 < first)\n  \
    \          return false;\n        long diff2 = last - mid2;\n        if (diff2\
    \ < 0)\n            return true;\n        if (diff2 > 0)\n            return false;\n\
    \        return true;", "        long prev = l[0];\n        long curr = l[0];\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            prev = curr;\n            curr\
    \ = l[i];\n            if (curr < prev) {\n                decreasing = false;\n\
    \            }\n            if (curr > prev) {\n                increasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.Count < 2) return true;\n        long first = l[0];\n        long last\
    \ = l[0];\n        long mid = l[0];\n        bool increasing = true;\n       \
    \ bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n     \
    \       long current = l[i];\n            if (current < first) {\n           \
    \     decreasing = false;\n                first = current;\n            } else\
    \ if (current > last) {\n                increasing = false;\n               \
    \ last = current;\n            } else if (current < mid) {\n                decreasing\
    \ = false;\n                mid = current;\n            } else {\n           \
    \     increasing = false;\n                mid = current;\n            }\n   \
    \     }\n        if (increasing && decreasing) return true;\n        if (increasing\
    \ && !decreasing) return true;\n        if (!increasing && decreasing) return\
    \ true;\n        return false;", "        if (l.Count < 2) return false;\n   \
    \     var first = l[0];\n        var last = l[l.Count - 1];\n        var mid =\
    \ first + ((last - first) / 2);\n        var isIncreasing = true;\n        var\
    \ isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n        \
    \    if (l[i] < mid) {\n                isIncreasing = false;\n            }\n\
    \            if (l[i] > mid) {\n                isDecreasing = false;\n      \
    \      }\n        }\n        return isIncreasing || isDecreasing;", "        if\
    \ (l.Count < 2) return true;\n        var first = l[0];\n        var last = l[l.Count\
    \ - 1];\n        var mid = first + (last - first) / 2;\n        var mid2 = mid\
    \ + (mid - first) / 2;\n        var mid3 = mid2 + (mid2 - first) / 2;\n      \
    \  var mid4 = mid3 + (mid3 - first) / 2;\n        var mid5 = mid4 + (mid4 - first)\
    \ / 2;\n        var mid6 = mid5 + (mid5 - first) / 2;\n        var mid7 = mid6\
    \ + (mid6 - first) / 2;\n        var mid8 = mid7 + (mid7 - first) / 2;\n     \
    \   var mid9 = mid8 + (mid8 - first) / 2;\n        var mid10 = mid9 + (mid9 -\
    \ first) / 2;\n        var mid11 = mid10 + (mid10 - first) / 2;\n        var mid12\
    \ = mid11 + (mid11 - first) / 2;\n        var mid13 = mid12 + (mid12 - first)\
    \ / 2;\n        var mid14 = mid13 + (mid13 - first) / 2;\n        var mid15 =\
    \ mid14 + (mid14 - first) / 2;\n        var mid16 = mid15 + (mid15 - first) /\
    \ 2;\n        var mid17 = mid16 + (mid16 - first) / 2;\n        var mid18 = mid17\
    \ + (mid17 - first) / 2;\n        var mid19 = mid18 + (mid18 - first) / 2;\n \
    \       var mid20 = mid19 + (mid19 - first) / 2;\n        var mid21 = mid20 +\
    \ (mid20 - first) / 2;\n        var mid22 = mid21 + (mid21 - first) / 2;\n   \
    \     var mid23 = mid22 + (mid22 - first) / 2;\n        var mid24 = mid23 + (mid23\
    \ - first) / 2;\n        var mid25 = mid24 + (mid24 - first) / 2;\n        var\
    \ mid26 = mid25 + (mid25 - first) / 2;\n        var mid27 = mid26 + (mid26 - first)\
    \ / 2;\n        var mid28 = mid27 + (mid27 - first) / 2;\n        var mid29 =\
    \ mid28 + (mid28 - first) / 2;\n        var mid30 = mid29 + (mid29 - first) /\
    \ 2;\n        var mid31 = mid30 + (mid30 - first) / 2;\n        var mid32 = mid31\
    \ + (mid31 - first) / 2;\n        var mid33 = mid32 + (mid32 - first) / 2;\n \
    \       var mid34 = mid33 + (mid33 - first) / 2;\n        var mid35 = mid34 +\
    \ (mid34 - first) / 2;\n        var mid36 = mid35 + (mid35 - first) / 2;\n   \
    \     var mid37 = ", "        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Average();\n        long diff = max - min;\n        long\
    \ diff2 = mid - min;\n        long diff3 = max - mid;\n        long diff4 = mid\
    \ - max;\n        long diff5 = min - mid;\n        long diff6 = max - min;\n \
    \       long diff7 = mid - min;\n        long diff8 = max - mid;\n        long\
    \ diff9 = mid - max;\n        long diff10 = mid - min;\n        long diff11 =\
    \ mid - mid;\n        long diff12 = mid - max;\n        long diff13 = mid - min;\n\
    \        long diff14 = mid - mid;\n        long diff15 = mid - max;\n        long\
    \ diff16 = mid - min;\n        long diff17 = mid - mid;\n        long diff18 =\
    \ mid - max;\n        long diff19 = mid - min;\n        long diff20 = mid - mid;\n\
    \        long diff21 = mid - max;\n        long diff22 = mid - min;\n        long\
    \ diff23 = mid - mid;\n        long diff24 = mid - max;\n        long diff25 =\
    \ mid - min;\n        long diff26 = mid - mid;\n        long diff27 = mid - max;\n\
    \        long diff28 = mid - min;\n        long diff29 = mid - mid;\n        long\
    \ diff30 = mid - max;\n        long diff31 = mid - min;\n        long diff32 =\
    \ mid - mid;\n        long diff33 = mid - max;\n        long diff34 = mid - min;\n\
    \        long diff35 = mid - mid;\n        long diff36 = mid - max;\n        long\
    \ diff37 = mid - min;\n        long diff38 = mid - mid;\n        long diff39 =\
    \ mid - max;\n        long diff40 = mid - min;\n        long diff41 = mid - mid;\n\
    \        long diff42 = mid - max;\n        long diff43 = mid - min;\n        long\
    \ diff44 = mid - mid;\n        long diff45 = mid - max;\n        long diff46 =\
    \ mid - min;\n        long diff47 = mid - mid;\n        long diff48 = mid - max;\n\
    \        long diff49 = mid - min;\n        long diff50", "        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] >= l[1];\n       \
    \ long prev = l[0];\n        long curr = l[1];\n        bool isIncreasing = true;\n\
    \        for (int i = 2; i < l.Count; i++) {\n            if (l[i] < prev) {\n\
    \                isIncreasing = false;\n            }\n            prev = curr;\n\
    \            curr = l[i];\n        }\n        return isIncreasing;", "       \
    \ if (l.Count < 2) return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n        bool\
    \ isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i\
    \ = 1; i < l.Count; i++) {\n            if (l[i] < mid) {\n                isIncreasing\
    \ = false;\n            }\n            if (l[i] > mid) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;",
  "        long prev = l[0];\n        bool increasing = true;\n        foreach (long\
    \ x in l.Skip(1))\n            if (x < prev)\n                increasing = false;\n\
    \            else\n                prev = x; // update prev\n        return increasing;",
  "        if (l.Count == 0) return true;\n        long prev = l[0];\n        bool\
    \ increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  if (l[i] < prev) {\n                increasing = false;\n            }\n  \
    \          prev = l[i];\n        }\n        return increasing;", "        if (l.Count\
    \ < 2) return false;\n        var first = l[0];\n        var last = l[l.Count\
    \ - 1];\n        var middle = first + ((last - first) / 2);\n        var middleValue\
    \ = l[middle];\n        var middleValueDiff = middleValue - first;\n        var\
    \ middleValueDiffAbs = Math.Abs(middleValueDiff);\n        var middleValueDiffAbsDiff\
    \ = middleValueDiffAbs - last;\n        return middleValueDiffAbsDiff < middleValueDiff;",
  "        if (l.Count < 2) return false;\n        long first = l[0];\n        long\
    \ last = l[l.Count - 1];\n        long mid = first + (last - first) / 2;\n   \
    \     long middle = l[mid];\n        long left = 0;\n        long right = 0;\n\
    \        bool leftIsSmaller = false;\n        bool rightIsSmaller = false;\n \
    \       for (int i = 0; i < l.Count; i++) {\n            if (l[i] < middle) {\n\
    \                left++;\n                if (left > right) {\n              \
    \      rightIsSmaller = true;\n                }\n                if (l[i] < middle)\
    \ {\n                    leftIsSmaller = true;\n                }\n          \
    \  } else {\n                right++;\n                if (right > left) {\n \
    \                   leftIsSmaller = true;\n                }\n               \
    \ if (l[i] > middle) {\n                    rightIsSmaller = true;\n         \
    \       }\n            }\n        }\n        return leftIsSmaller && rightIsSmaller;"]
stop_tokens:
- "\n    }\n"
