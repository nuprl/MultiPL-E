name: HumanEval_9_rolling_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>\
  \ RollingMax(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
  \    }\n\n}\n"
completions: ["        var result = new List<long>();\n        var rollingMax = numbers.Max();\n\
    \        var rollingMaxIndex = -1;\n        var rollingMaxValue = rollingMax;\n\
    \        var rollingMaxIndexes = new List<int>();\n        var rollingMaxIndexesCount\
    \ = numbers.Count;\n        var rollingMaxIndexesIndex = 0;\n        var rollingMaxIndexesIndexCount\
    \ = 0;\n        var rollingMaxIndexesIndexCountMax = numbers.Count - 1;\n    \
    \    while (rollingMaxIndexesIndexCount < rollingMaxIndexesIndexCountMax) {\n\
    \            rollingMaxIndexesIndexCount++;\n            rollingMaxIndexesIndex++;\n\
    \            if (rollingMaxIndexesIndex == rollingMaxIndexesCount) {\n       \
    \         rollingMaxIndexesIndex = 0;\n                rollingMaxIndexesIndexCount++;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex = 0;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesIndexCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   foreach (long number in numbers) {\n            currentSum += number;\n  \
    \          if (currentSum > max) {\n                max = currentSum;\n      \
    \          currentMax = number;\n            }\n            sum += number;\n \
    \           if (sum > currentMax) {\n                currentMax = sum;\n     \
    \           currentSum = number;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n            }\n            if (number ==\
    \ currentMaxValue) {\n                currentMaxIndex++;\n            }\n    \
    \        result.Add(number);\n        }\n        result.Add(max);\n        result.Add(currentMax);\n\
    \        result.Add(currentMaxIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n  \
    \      long currentSumOfSquareOfSum = 0;\n        long currentSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSum = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSum = 0;\n\
    \        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares = 0;\n\
    \        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum =\
    \ 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n     \
    \   long currentCount = 0;\n        foreach (long number in numbers) {\n     \
    \       currentSum += number;\n            if (currentSum > max) {\n         \
    \       max = currentSum;\n                currentMax = currentCount;\n      \
    \      }\n            currentCount++;\n        }\n        result.Add(max);\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long maxValue = numbers.Max();\n        long currentMax = maxValue;\n   \
    \     long currentSum = 0;\n        long currentCount = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            currentCount += 1;\n            currentSumOfSquares +=\
    \ number * number;\n            if (currentCount > 1) {\n                currentMax\
    \ = Math.Max(currentMax, currentSum);\n                currentSum = 0;\n     \
    \           currentCount = 0;\n                currentSumOfSquares = 0;\n    \
    \        }\n            if (currentCount == 1) {\n                result.Add(currentMax);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInResult\
    \ = -1;\n        long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = 0;\n        long last = 0;\n        foreach (long number in numbers)\
    \ {\n            current = number;\n            if (number > max) {\n        \
    \        max = number;\n            }\n            if (number == max) {\n    \
    \            result.Add(last);\n            }\n            last = current;\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n            }\n            if (number == currentMax)\
    \ {\n                result.Add(number);\n            }\n            else {\n\
    \                max = Math.Max(max, currentMax);\n                result.Add(max);\n\
    \                currentMax = number;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentSum = 0;\n        long\
    \ sum = 0;\n        foreach (long number in numbers) {\n            currentSum\
    \ += number;\n            if (currentSum > max) {\n                max = currentSum;\n\
    \            }\n            if (currentSum == max) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            cur = n;\n            while (cur > 0) {\n\
    \                result.Add(cur);\n                cur = cur - 1;\n          \
    \  }\n            max = Math.Max(max, n);\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = number;\n   \
    \             currentMaxIndex = result.Count;\n            }\n            else\
    \ if (number == max) {\n                currentMax = number;\n               \
    \ currentMaxIndex = result.Count;\n            }\n            else if (number\
    \ < max) {\n                result.Add(number);\n            }\n        }\n  \
    \      result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.Count;\n\
    \        long currentMaxIndexInResult = 0;\n        long currentMaxIndexInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResult = 0;\n        long\
    \ currentMaxIndexInResultInResultInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   foreach (long number in numbers) {\n            sum += number;\n         \
    \   if (sum > currentSum) {\n                currentSum = sum;\n             \
    \   currentMax = number;\n            }\n            if (sum == currentSum) {\n\
    \                result.Add(currentMax);\n                currentMax = 0;\n  \
    \              currentSum = 0;\n            }\n        }\n        if (currentMax\
    \ != 0) {\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.First();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexInResult = -1;\n        bool isMax = true;\n       \
    \ foreach (long number in numbers) {\n            if (number > currentMax) {\n\
    \                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                isMax\
    \ = true;\n            }\n            else if (number == currentMax) {\n     \
    \           currentMaxIndexInResult++;\n            }\n            else {\n  \
    \              isMax = false;\n            }\n            if (isMax) {\n     \
    \           result.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long currentMax = max;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxValue = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueValue = numbers[currentMaxValueIndex];\n        long\
    \ currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n       \
    \ long currentMaxValueValueValue = numbers[currentMaxValueValueIndex];\n     \
    \   long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n\
    \        long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n\
    \        long currentMaxValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValue);\n\
    \        long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(current",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                result.Add(currentMax);\n    \
    \            max = number;\n                currentMax = number;\n           \
    \     currentMaxIndex = numbers.IndexOf(number);\n            }\n        }\n \
    \       result.Add(currentMax);\n        return result;", "        var rollingMax\
    \ = new List<long>();\n        var rollingMaxIndex = 0;\n        var rollingMaxValue\
    \ = numbers.First();\n        rollingMax.Add(rollingMaxValue);\n        foreach\
    \ (var number in numbers) {\n            if (number > rollingMaxValue) {\n   \
    \             rollingMaxValue = number;\n                rollingMax.Add(rollingMaxValue);\n\
    \                rollingMaxIndex++;\n            }\n            else {\n     \
    \           rollingMaxValue = rollingMax[rollingMaxIndex];\n            }\n  \
    \      }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueValue = currentMaxValue;\n\
    \        long currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValueIndex;\n                currentMaxValue = currentMaxValueValue;\n\
    \                currentMaxValueIndex = currentMaxValueValueIndex;\n         \
    \       currentMaxValue = currentMaxValueValue;\n            }\n            if\
    \ (number > max) {\n                max = number;\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValueIndex;\n       \
    \         currentMaxValue = currentMaxValueValue;\n                currentMaxValueIndex\
    \ = currentMaxValueValueIndex;\n                currentMaxValue = currentMaxValueValue;\n\
    \            }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         result.Add(currentMax);\n                max = currentMax;\n       \
    \         currentMax = number;\n            }\n            else {\n          \
    \      max = Math.Max(number, max);\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = numbers.Max();\n        long current = max;\n        long rollingMax\
    \ = max;\n        long rollingMaxIndex = -1;\n        foreach (long number in\
    \ numbers) {\n            if (number > rollingMax) {\n                result.Add(rollingMax);\n\
    \                rollingMax = number;\n                rollingMaxIndex = result.Count\
    \ - 1;\n            }\n            current = number;\n            if (number >\
    \ rollingMax) {\n                rollingMax = number;\n                rollingMaxIndex\
    \ = result.Count - 1;\n            }\n        }\n        result.Add(rollingMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long\
    \ currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6\
    \ = 0;\n        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n\
    \        long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n   \
    \     long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n     \
    \   long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n       \
    \ long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long\
    \ currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19\
    \ = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 =\
    \ 0;\n        long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n\
    \        long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n  \
    \      long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n    \
    \    long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n      \
    \  long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n        long\
    \ currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34\
    \ = 0;\n        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 =\
    \ 0;\n        long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n\
    \        long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n  \
    \      long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n    \
    \    long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n      \
    \  long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long\
    \ currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49\
    \ = 0;\n        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 =\
    \ 0;\n        long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n\
    \        long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n  \
    \      long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n    \
    \    long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n      \
    \  long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n        long\
    \ current", "        List<long> max = new List<long>();\n        long maxElement\
    \ = numbers.Max();\n        long currentMaxElement = maxElement;\n        long\
    \ currentMaxIndex = numbers.IndexOf(maxElement);\n        long currentMaxIndexInList\
    \ = currentMaxIndex + 1;\n        long currentMaxIndexInListInList = currentMaxIndexInList\
    \ + 1;\n        long currentMaxIndexInListInListInList = currentMaxIndexInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInList = currentMaxIndexInListInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInListInList = currentMaxIndexInListInListInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInListInListInList = currentMaxIndexInListInListInListInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInListInListInListInList\
    \ = currentMaxIndexInListInListInListInListInListInListInList + 1;\n        long\
    \ currentMaxIndexInListInListInListInListInListInListInListInListInList = currentMaxIndexInListInListInListInListInListInListInListInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInListInList\
    \ = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInList\
    \ = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInList\
    \ = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInList\
    \ + 1;\n        long currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInListInListInList\
    \ = currentMaxIndexInListInListInListInListInListInListInListInListInListInListInListInListInListInListInList\
    \ + 1;\n        long current", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentCount = 0;\n        foreach\
    \ (long number in numbers) {\n            currentSum += number;\n            if\
    \ (currentSum > currentMax) {\n                currentMax = currentSum;\n    \
    \            currentCount = 1;\n            } else {\n                currentCount++;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long current", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = numbers.First();\n\
    \        long curMax = numbers.First();\n        foreach (long n in numbers) {\n\
    \            if (n > cur) {\n                result.Add(curMax);\n           \
    \     curMax = cur;\n                cur = n;\n            } else {\n        \
    \        curMax = cur;\n                cur = n;\n            }\n        }\n \
    \       result.Add(curMax);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxValue\
    \ - currentMax;\n            }\n            currentMaxValue = number;\n      \
    \  }\n        result.Add(currentMax);\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxIndex = currentMaxValue - currentMax;\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n                currentMaxIndex = currentMaxValue\
    \ - currentMax;\n            }\n            currentMaxValue = number;\n      \
    \      result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4\
    \ = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n\
    \        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n    \
    \    long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n       \
    \ long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n        long\
    \ currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15\
    \ = 0;\n        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 =\
    \ 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n\
    \        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n  \
    \      long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n    \
    \    long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n      \
    \  long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n        long\
    \ currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30\
    \ = 0;\n        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 =\
    \ 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n\
    \        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n  \
    \      long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n    \
    \    long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n      \
    \  long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n        long\
    \ currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45\
    \ = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 =\
    \ 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n\
    \        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n  \
    \      long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n    \
    \    long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n      \
    \  long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n        long\
    \ currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60\
    \ = 0;\n        long currentMaxIndex61 = 0;\n        long current", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ numbers.First();\n        foreach (long number in numbers) {\n            if\
    \ (number > currentMax) {\n                max = currentMax;\n               \
    \ currentMax = number;\n            }\n            else if (number == currentMax)\
    \ {\n                currentMax = number;\n            }\n            else {\n\
    \                max = Math.Max(max, currentMax);\n                currentMax\
    \ = number;\n            }\n            result.Add(max);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  foreach (long number in numbers) {\n            if (number > max) {\n     \
    \           max = number;\n                currentMax = max;\n               \
    \ currentMaxIndex = result.Count;\n            }\n            else if (number\
    \ == max) {\n                currentMax = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            else {\n                result.Add(max);\n\
    \                max = number;\n                currentMax = max;\n          \
    \      currentMaxIndex = result.Count;\n            }\n        }\n        result.Add(max);\n\
    \        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = numbers.First();\n        long currentMaxIndex\
    \ = -1;\n        foreach (long number in numbers) {\n            if (number >\
    \ currentMax) {\n                currentMax = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number == currentMax) {\n  \
    \              result.Add(number);\n            }\n        }\n        if (currentMaxIndex\
    \ != result.Count) {\n            result.Add(currentMax);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        long\
    \ max = numbers.First();\n        long maxIndex = 0;\n        long maxValue =\
    \ numbers.First();\n        foreach (long number in numbers) {\n            if\
    \ (number > maxValue) {\n                maxValue = number;\n                maxIndex\
    \ = result.Count;\n            }\n            if (number == maxValue) {\n    \
    \            result.Add(number);\n            }\n            else {\n        \
    \        result.Add(maxValue);\n            }\n        }\n        result.Add(maxValue);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = numbers.Max();\n        long currentMax = max;\n        long\
    \ currentSum = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfCubes\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n   \
    \     long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n  \
    \      long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPower", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex2 = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4\
    \ = -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 =\
    \ -1;\n        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n\
    \        long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n \
    \       long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n \
    \       long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n \
    \       long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n \
    \       long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n \
    \       long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n \
    \       long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n \
    \       long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n \
    \       long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n \
    \       long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n \
    \       long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n \
    \       long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n \
    \       long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n \
    \       long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n \
    \       long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n \
    \       long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n \
    \       long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n \
    \       long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n \
    \       long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n \
    \       long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n \
    \       long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n \
    \       long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n \
    \       long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n \
    \       long currentMaxIndex55 = -1;\n        long currentMax", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentSum = 0;\n        long currentCount\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            if (currentSum > currentMax) {\n                currentMax\
    \ = currentSum;\n                currentCount = 1;\n            } else {\n   \
    \             currentCount++;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = numbers.First();\n        long currentMax\
    \ = max;\n        long currentMaxIndex = -1;\n        foreach (long number in\
    \ numbers) {\n            if (number > max) {\n                currentMax = max;\n\
    \                currentMaxIndex = result.Count;\n            }\n            max\
    \ = number;\n            result.Add(max);\n        }\n        if (currentMaxIndex\
    \ == result.Count) {\n            result.Add(max);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentSum = 0;\n        long\
    \ currentSum2 = 0;\n        long currentSum3 = 0;\n        long currentSum4 =\
    \ 0;\n        long currentSum5 = 0;\n        long currentSum6 = 0;\n        long\
    \ currentSum7 = 0;\n        long currentSum8 = 0;\n        long currentSum9 =\
    \ 0;\n        long currentSum10 = 0;\n        long currentSum11 = 0;\n       \
    \ long currentSum12 = 0;\n        long currentSum13 = 0;\n        long currentSum14\
    \ = 0;\n        long currentSum15 = 0;\n        long currentSum16 = 0;\n     \
    \   long currentSum17 = 0;\n        long currentSum18 = 0;\n        long currentSum19\
    \ = 0;\n        long currentSum20 = 0;\n        long currentSum21 = 0;\n     \
    \   long currentSum22 = 0;\n        long currentSum23 = 0;\n        long currentSum24\
    \ = 0;\n        long currentSum25 = 0;\n        long currentSum26 = 0;\n     \
    \   long currentSum27 = 0;\n        long currentSum28 = 0;\n        long currentSum29\
    \ = 0;\n        long currentSum30 = 0;\n        long currentSum31 = 0;\n     \
    \   long currentSum32 = 0;\n        long currentSum33 = 0;\n        long currentSum34\
    \ = 0;\n        long currentSum35 = 0;\n        long currentSum36 = 0;\n     \
    \   long currentSum37 = 0;\n        long currentSum38 = 0;\n        long currentSum39\
    \ = 0;\n        long currentSum40 = 0;\n        long currentSum41 = 0;\n     \
    \   long currentSum42 = 0;\n        long currentSum43 = 0;\n        long currentSum44\
    \ = 0;\n        long currentSum45 = 0;\n        long currentSum46 = 0;\n     \
    \   long currentSum47 = 0;\n        long currentSum48 = 0;\n        long currentSum49\
    \ = 0;\n        long currentSum50 = 0;\n        long currentSum51 = 0;\n     \
    \   long currentSum52 = 0;\n        long currentSum53 = 0;\n        long currentSum54\
    \ = 0;\n        long currentSum55 = 0;\n        long currentSum56 = 0;\n     \
    \   long currentSum57 = 0;\n        long currentSum58 = 0;\n        long currentSum59\
    \ = 0;\n        long currentSum60 = 0;\n        long currentSum61 = 0;\n     \
    \   long currentSum62 = 0;\n        long currentSum63 = 0;\n        long currentSum64\
    \ = 0;\n        long currentSum65 = 0;\n        long currentSum66 = 0;\n     \
    \   long currentSum67 = 0;\n        long currentSum68 = 0;\n        long currentSum69\
    \ = 0;\n        long currentSum70 = 0;\n        long currentSum71 = 0;", "   \
    \     List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > max) {\n                result.Add(currentMax);\n\
    \                currentMax = currentNumber;\n                currentNumber =\
    \ numbers.Skip(numbers.IndexOf(currentMax)).First();\n            }\n        \
    \    max = currentMax;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long current = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number > max) {\n              \
    \  max = number;\n                current = number;\n            }\n         \
    \   else {\n                current = current > number ? current : number;\n \
    \           }\n            result.Add(current);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ cur = 0;\n        foreach (long n in numbers) {\n            cur = n;\n    \
    \        max = Math.Max(max, cur);\n            result.Add(max);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = number;\n   \
    \             currentMaxIndex = result.Count;\n            }\n            else\
    \ {\n                if (number == max) {\n                    currentMax = number;\n\
    \                    currentMaxIndex = result.Count;\n                }\n    \
    \            else {\n                    result.Add(max);\n                  \
    \  max = number;\n                    currentMax = number;\n                 \
    \   currentMaxIndex = result.Count;\n                }\n            }\n      \
    \  }\n        result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        var rollingMax = new List<long>();\n      \
    \  var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxCount = 1;\n        foreach (var number in numbers) {\n\
    \            if (number > rollingMaxValue) {\n                rollingMaxValue\
    \ = number;\n                rollingMaxCount = 1;\n            }\n           \
    \ else if (number == rollingMaxValue) {\n                rollingMaxCount++;\n\
    \            }\n            else {\n                rollingMax.Add(rollingMaxValue);\n\
    \                rollingMaxValue = number;\n                rollingMaxCount =\
    \ 1;\n            }\n            if (rollingMaxIndex == numbers.Count - 1) {\n\
    \                rollingMax.Add(rollingMaxValue);\n            }\n           \
    \ rollingMaxIndex++;\n        }\n        return rollingMax;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long current = 0;\n\
    \        long sum = 0;\n        foreach (long n in numbers) {\n            current\
    \ = n;\n            sum += current;\n            if (sum > max) {\n          \
    \      max = sum;\n            }\n            result.Add(max);\n            sum\
    \ = 0;\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = numbers.First();\n        long maxIndex = 0;\n        long\
    \ currentMax = max;\n        long currentMaxIndex = numbers.IndexOf(max);\n  \
    \      long currentMaxValue = numbers[currentMaxIndex];\n        long currentMaxIndex\
    \ = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n\
    \        long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue\
    \ = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex\
    \ + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long\
    \ currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n\
    \        long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue\
    \ = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex\
    \ + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long\
    \ currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n\
    \        long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue\
    \ = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex\
    \ + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long\
    \ currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n\
    \        long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue\
    \ = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex\
    \ + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long\
    \ currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n\
    \        long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue\
    \ = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex\
    \ + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long\
    \ currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n\
    \        long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue\
    \ = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex\
    \ + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n        long\
    \ currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue = numbers[currentMaxIndex];\n\
    \        long currentMaxIndex = currentMaxIndex + 1;\n        long currentMaxValue\
    \ = numbers[currentMaxIndex];\n        long currentMaxIndex = currentMaxIndex\
    \ + 1;\n        long currentMaxValue = numbers[current", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = -1;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            long\
    \ index = currentMaxIndex + 1;\n            while (index > 0 && number > result[index\
    \ - 1]) {\n                result[index] = result[index - 1];\n              \
    \  index--;\n            }\n            result[index] = number;\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n\
    \        long sum = 0;\n        long currentSum2 = 0;\n        long currentSum3\
    \ = 0;\n        long currentSum4 = 0;\n        long currentSum5 = 0;\n       \
    \ long currentSum6 = 0;\n        long currentSum7 = 0;\n        long currentSum8\
    \ = 0;\n        long currentSum9 = 0;\n        long currentSum10 = 0;\n      \
    \  long currentSum11 = 0;\n        long currentSum12 = 0;\n        long currentSum13\
    \ = 0;\n        long currentSum14 = 0;\n        long currentSum15 = 0;\n     \
    \   long currentSum16 = 0;\n        long currentSum17 = 0;\n        long currentSum18\
    \ = 0;\n        long currentSum19 = 0;\n        long currentSum20 = 0;\n     \
    \   long currentSum21 = 0;\n        long currentSum22 = 0;\n        long currentSum23\
    \ = 0;\n        long currentSum24 = 0;\n        long currentSum25 = 0;\n     \
    \   long currentSum26 = 0;\n        long currentSum27 = 0;\n        long currentSum28\
    \ = 0;\n        long currentSum29 = 0;\n        long currentSum30 = 0;\n     \
    \   long currentSum31 = 0;\n        long currentSum32 = 0;\n        long currentSum33\
    \ = 0;\n        long currentSum34 = 0;\n        long currentSum35 = 0;\n     \
    \   long currentSum36 = 0;\n        long currentSum37 = 0;\n        long currentSum38\
    \ = 0;\n        long currentSum39 = 0;\n        long currentSum40 = 0;\n     \
    \   long currentSum41 = 0;\n        long currentSum42 = 0;\n        long currentSum43\
    \ = 0;\n        long currentSum44 = 0;\n        long currentSum45 = 0;\n     \
    \   long currentSum46 = 0;\n        long currentSum47 = 0;\n        long currentSum48\
    \ = 0;\n        long currentSum49 = 0;\n        long currentSum50 = 0;\n     \
    \   long currentSum51 = 0;\n        long currentSum52 = 0;\n        long currentSum53\
    \ = 0;\n        long currentSum54 = 0;\n        long currentSum55 = 0;\n     \
    \   long currentSum56 = 0;\n        long currentSum57 = 0;\n        long currentSum58\
    \ = 0;\n        long currentSum59 = 0;\n        long currentSum60 = 0;\n     \
    \   long currentSum61 = 0;\n        long currentSum62 = 0;\n        long currentSum63\
    \ = 0;\n        long currentSum64 = 0;\n        long currentSum65 = 0;\n     \
    \   long currentSum66 = 0;\n        long currentSum67 = 0;\n        long currentSum68\
    \ = 0;\n        long currentSum69 = 0;\n        long currentSum70 = 0;\n     \
    \   ", "        List<long> result = new List<long>();\n        long maxValue =\
    \ numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndexInResult = -1;\n        long currentMaxIndexInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResult = -1;\n        long\
    \ currentMaxIndexInResultInResultInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndex", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n\
    \        long currentSumOfProducts = 0;\n        foreach (long number in numbers)\
    \ {\n            currentNumber = number;\n            currentSum = 0;\n      \
    \      currentSumOfSquares = 0;\n            currentSumOfProducts = 0;\n     \
    \       while (currentNumber > 0) {\n                currentSum = currentSum +\
    \ currentNumber;\n                currentSumOfSquares = currentSumOfSquares +\
    \ currentNumber * currentNumber;\n                currentSumOfProducts = currentSumOfProducts\
    \ + currentNumber;\n                currentNumber = currentNumber - 1;\n     \
    \       }\n            if (currentSum > max) {\n                max = currentSum;\n\
    \            }\n            if (currentSumOfSquares > currentMax) {\n        \
    \        currentMax = currentSumOfSquares;\n            }\n            if (currentSumOfProducts\
    \ > currentMax) {\n                currentMax = currentSumOfProducts;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ cur = 0;\n        long prev = 0;\n        foreach (long n in numbers) {\n  \
    \          prev = cur;\n            cur = n;\n            if (cur > max) {\n \
    \               max = cur;\n            }\n            result.Add(max);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                currentMaxValue = number;\n                currentMaxIndex =\
    \ result.Count;\n            }\n            result.Add(number);\n        }\n \
    \       result.Add(max);\n        result.Add(currentMaxValue);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long current = numbers.First();\n        long previous\
    \ = numbers.First();\n        foreach (long number in numbers) {\n           \
    \ if (number > max) {\n                max = number;\n            }\n        \
    \    if (number > current) {\n                result.Add(max);\n             \
    \   max = number;\n            }\n            previous = current;\n          \
    \  current = number;\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long\
    \ currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6\
    \ = 0;\n        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n\
    \        long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n   \
    \     long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n     \
    \   long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n       \
    \ long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long\
    \ currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19\
    \ = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 =\
    \ 0;\n        long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n\
    \        long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n  \
    \      long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n    \
    \    long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n      \
    \  long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n        long\
    \ currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34\
    \ = 0;\n        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 =\
    \ 0;\n        long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n\
    \        long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n  \
    \      long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n    \
    \    long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n      \
    \  long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long\
    \ currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49\
    \ = 0;\n        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 =\
    \ 0;\n        long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n\
    \        long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n  \
    \      long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n    \
    \    long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n      \
    \  long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n        long\
    \ current", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2\
    \ = 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValueIndex;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n            }\n            if (currentMaxIndex\
    \ == currentMaxValueIndex) {\n                currentMaxIndex = 0;\n         \
    \       currentMaxValue = number;\n                result.Add(currentMaxValue);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexInResult\
    \ = 0;\n        long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n  \
    \      long currentMaxIndexInResultInResultInResultInResultInResult = 0;\n   \
    \     long currentMaxIndexInResultInResultInResultInResultInResultInResult = 0;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultIn", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexValue = numbers.First();\n        long currentMaxIndexValueIndex\
    \ = -1;\n        foreach (long number in numbers) {\n            if (number >\
    \ currentMax) {\n                currentMax = number;\n                currentMaxIndex\
    \ = currentMaxIndexValue;\n                currentMaxIndexValue = currentMaxIndexValueIndex;\n\
    \            }\n            if (number == currentMax) {\n                currentMaxIndexValueIndex++;\n\
    \                if (currentMaxIndexValueIndex == numbers.Count) {\n         \
    \           result.Add(currentMax);\n                    currentMaxIndexValueIndex\
    \ = 0;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueCount = 1;\n        long currentMaxValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValue = numbers.Count;\n        long\
    \ currentMaxValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValue);\n\
    \        long currentMaxValueCountValueCount = 1;\n        long currentMaxValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValue = numbers.Count;\n  \
    \      long currentMaxValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCount = 1;\n        long currentMaxValueCountValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValue = numbers.Count;\n\
    \        long currentMaxValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCount = 1;\n      \
    \  long currentMaxValueCountValueCountValueCountValueIndex = 0;\n        long\
    \ currentMaxValueCountValueCountValueCountValueCountValue = numbers.Count;\n \
    \       long currentMaxValueCountValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCount = 1;\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueIndex = 0;\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCount\
    \ = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCount\
    \ = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = 0;\n        long currentMaxValueCountValueCount", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long current = numbers.First();\n\
    \        long previous = numbers.First();\n        long rollingMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > rollingMax)\
    \ {\n                rollingMax = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n            if (number\
    \ == current) {\n                result.Add(number);\n            }\n        \
    \    previous = current;\n            current = number;\n        }\n        result.Add(rollingMax);\n\
    \        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number > max) {\n          \
    \      max = number;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n            }\n            result.Insert(currentMaxIndex,\
    \ number);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInResult\
    \ = -1;\n        foreach (long number in numbers) {\n            if (number >\
    \ currentMax) {\n                currentMax = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number == currentMax) {\n  \
    \              currentMaxIndexInResult = currentMaxIndex;\n            }\n   \
    \         result.Add(number);\n        }\n        if (currentMaxIndexInResult\
    \ == -1) {\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long\
    \ currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6\
    \ = 0;\n        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n\
    \        long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n   \
    \     long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n     \
    \   long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n       \
    \ long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long\
    \ currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19\
    \ = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 =\
    \ 0;\n        long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n\
    \        long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n  \
    \      long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n    \
    \    long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n      \
    \  long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n        long\
    \ currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34\
    \ = 0;\n        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 =\
    \ 0;\n        long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n\
    \        long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n  \
    \      long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n    \
    \    long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n      \
    \  long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long\
    \ currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49\
    \ = 0;\n        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 =\
    \ 0;\n        long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n\
    \        long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n  \
    \      long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n    \
    \    long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n      \
    \  long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n        long\
    \ current", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPower", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n            }\n            if (number > max) {\n\
    \                max = number;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMaxValue = maxValue;\n        long currentMaxIndex = -1;\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();", "   \
    \     List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentSum = 0;\n        long\
    \ currentCount = 0;\n        long currentSumOfSquares = 0;\n        foreach (long\
    \ number in numbers) {\n            currentSum += number;\n            currentCount++;\n\
    \            currentSumOfSquares += number * number;\n            if (currentCount\
    \ > 1) {\n                currentMax = Math.Max(currentMax, currentSum);\n   \
    \             currentSum = 0;\n                currentCount = 0;\n           \
    \     currentSumOfSquares = 0;\n            }\n            if (currentCount ==\
    \ 1 && currentSumOfSquares == currentSum) {\n                result.Add(currentMax);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareOfMax = 0;\n        foreach (long number in numbers) {\n \
    \           currentSum = currentSum + number;\n            currentSumOfSquares\
    \ = currentSumOfSquares + number * number;\n            currentSumOfSquareOfMax\
    \ = currentSumOfSquareOfMax + Math.Max(number, max);\n            max = Math.Max(number,\
    \ max);\n            if (currentSumOfSquareOfMax >= currentSumOfSquares) {\n \
    \               result.Add(currentMax);\n                currentMax = 0;\n   \
    \             currentSum = 0;\n                currentSumOfSquares = 0;\n    \
    \            currentSumOfSquareOfMax = 0;\n            }\n            currentMax\
    \ = number;\n        }\n        if (currentSumOfSquareOfMax >= currentSumOfSquares)\
    \ {\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = -1;\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMaxValue) {\n        \
    \        currentMaxValue = number;\n                currentMaxIndex = currentMaxValue;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ currentMaxIndex++;\n            }\n            if (currentMaxIndex > currentMaxValueIndex)\
    \ {\n                currentMaxValue = numbers[currentMaxIndex];\n           \
    \     currentMaxIndex = currentMaxValue;\n                currentMaxValueIndex\
    \ = currentMaxIndex;\n            }\n            result.Add(currentMaxValue);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long currentMax =\
    \ numbers[0];\n        long currentMaxIndex = numbers[0];\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMax) {\n             \
    \   currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex == numbers.Count) {\n        \
    \        result.Add(currentMax);\n                currentMax = number;\n     \
    \           currentMaxIndex = currentMaxIndex;\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        long currentMax = 0;\n        long currentNumber = 0;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfSquareRoot = 0;\n        long currentSumOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRoot = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRoot = 0;\n   \
    \     long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquares = 0;\n    \
    \    long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquare",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentMax =\
    \ number;\n            while (currentNumber > 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber--;\n \
    \           }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferences = 0;\n        long currentSumOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferences = 0;\n        long\
    \ currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndex = numbers.Count;\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex =\
    \ numbers.Count;\n        long currentMaxValueValue = numbers.Max();\n       \
    \ long currentMaxValueValueIndex = -1;\n        long currentMaxValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValueValueValue = numbers.Max();\n\
    \        long currentMaxValueValueValueIndex = -1;\n        long currentMaxValueValueValueIndex\
    \ = numbers.Count;\n        long currentMaxValueValue", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareRoot = 0;\n        foreach (long number\
    \ in numbers) {\n            currentNumber = number;\n            currentSum =\
    \ 0;\n            currentSumOfSquares = 0;\n            currentSumOfSquareRoot\
    \ = 0;\n            while (currentNumber > 0) {\n                currentSum +=\
    \ currentNumber;\n                currentSumOfSquares += currentNumber * currentNumber;\n\
    \                currentSumOfSquareRoot += Math.Sqrt(currentSumOfSquares);\n \
    \               currentNumber--;\n            }\n            currentMax = currentSum;\n\
    \            if (currentSumOfSquareRoot > max) {\n                max = currentSumOfSquareRoot;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long current = 0;\n        long sum = 0;\n        foreach (var number\
    \ in numbers) {\n            max = Math.Max(max, number);\n            current\
    \ = sum + number;\n            sum = current;\n            result.Add(max);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n\
    \        long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   foreach (long n in numbers) {\n            currentSum += n;\n            if\
    \ (currentSum > max) {\n                max = currentSum;\n                currentMax\
    \ = n;\n            }\n            sum += n;\n            if (sum > currentMax)\
    \ {\n                result.Add(currentMax);\n                currentSum = sum\
    \ - currentMax;\n                currentMax = n;\n            }\n        }\n \
    \       if (currentSum > max) {\n            result.Add(currentMax);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long current = 0;\n\
    \        long sum = 0;\n        foreach (long number in numbers) {\n         \
    \   currentMax = current;\n            current = number;\n            sum += current;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum == currentMax) {\n                result.Add(current);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();", "        List<long> result =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexInResult\
    \ = 0;\n        long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n  \
    \      long currentMaxIndexInResultInResultInResultInResultInResult = 0;\n   \
    \     long currentMaxIndexInResultInResultInResultInResultInResultInResult = 0;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndex", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n   \
    \     long currentMaxValueIndex = -1;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = currentMaxValueIndex;\n                currentMaxValue\
    \ = currentMaxValue;\n                currentMaxValueIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                currentMaxValueIndex++;\n\
    \                if (currentMaxValueIndex == numbers.Count) {\n              \
    \      result.Add(currentMax);\n                }\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.First();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndex2 = numbers.Count\
    \ - 1;\n        long currentMaxIndex3 = numbers.Count - 2;\n        long currentMaxIndex4\
    \ = numbers.Count - 3;\n        long currentMaxIndex5 = numbers.Count - 4;\n \
    \       long currentMaxIndex6 = numbers.Count - 5;\n        long currentMaxIndex7\
    \ = numbers.Count - 6;\n        long currentMaxIndex8 = numbers.Count - 7;\n \
    \       long currentMaxIndex9 = numbers.Count - 8;\n        long currentMaxIndex10\
    \ = numbers.Count - 9;\n        long currentMaxIndex11 = numbers.Count - 10;\n\
    \        long currentMaxIndex12 = numbers.Count - 11;\n        long currentMaxIndex13\
    \ = numbers.Count - 12;\n        long currentMaxIndex14 = numbers.Count - 13;\n\
    \        long currentMaxIndex15 = numbers.Count - 14;\n        long currentMaxIndex16\
    \ = numbers.Count - 15;\n        long currentMaxIndex17 = numbers.Count - 16;\n\
    \        long currentMaxIndex18 = numbers.Count - 17;\n        long currentMaxIndex19\
    \ = numbers.Count - 18;\n        long currentMaxIndex20 = numbers.Count - 19;\n\
    \        long currentMaxIndex21 = numbers.Count - 20;\n        long currentMaxIndex22\
    \ = numbers.Count - 21;\n        long currentMaxIndex23 = numbers.Count - 22;\n\
    \        long currentMaxIndex24 = numbers.Count - 23;\n        long currentMaxIndex25\
    \ = numbers.Count - 24;\n        long currentMaxIndex26 = numbers.Count - 25;\n\
    \        long currentMaxIndex27 = numbers.Count - 26;\n        long currentMaxIndex28\
    \ = numbers.Count - 27;\n        long currentMaxIndex29 = numbers.Count - 28;\n\
    \        long currentMaxIndex30 = numbers.Count - 29;\n        long currentMaxIndex31\
    \ = numbers.Count - 30;\n        long currentMaxIndex32 = numbers.Count - 31;\n\
    \        long currentMaxIndex33 = numbers.Count - 32;\n        long currentMaxIndex34\
    \ = numbers.Count - 33;\n        long currentMaxIndex35 = numbers.Count - 34;\n\
    \        long currentMaxIndex36 = numbers.Count - 35;\n        long currentMaxIndex37\
    \ = numbers.Count - 36;\n        long currentMaxIndex38 = numbers.Count - 37;\n\
    \        long currentMaxIndex39 = numbers.Count - 38;\n        long currentMaxIndex40\
    \ = numbers.Count - 39;\n        long ", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long currentCount = 0;\n        foreach (long number in numbers)\
    \ {\n            currentSum += number;\n            currentCount += 1;\n     \
    \       if (currentCount > max) {\n                max = currentCount;\n     \
    \           currentMax = currentSum;\n            }\n        }\n        result.Add(currentMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n   \
    \     long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n\
    \        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 =\
    \ 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = numbers.Max();\n        long current = max;\n\
    \        long previous = max;\n        foreach (long number in numbers) {\n  \
    \          if (number > max) {\n                max = number;\n            }\n\
    \            current = Math.Max(current, number);\n            if (current ==\
    \ previous) {\n                result.Add(current);\n            }\n         \
    \   previous = current;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n \
    \       long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long current = max;\n        long previous = max;\n        foreach (long\
    \ number in numbers) {\n            if (number > current) {\n                result.Add(current);\n\
    \                current = number;\n            }\n            previous = current;\n\
    \            current = Math.Max(current, number);\n        }\n        result.Add(current);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = -1;\n        foreach (long number in numbers) {\n            if (number >\
    \ currentMaxValue) {\n                currentMaxValue = number;\n            \
    \    currentMaxIndex = currentMaxValue - 1;\n            }\n            if (number\
    \ == currentMaxValue) {\n                currentMaxIndex++;\n            }\n \
    \           if (currentMaxIndex > currentMaxValueIndex) {\n                currentMaxValue\
    \ = numbers[currentMaxIndex];\n                currentMaxIndex = currentMaxValue\
    \ - 1;\n            }\n            result.Add(currentMaxValue);\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n\
    \        long currentSumOfSquares = 0;\n        long currentSumOfSquareRoots =\
    \ 0;\n        foreach (long number in numbers) {\n            currentSum = currentSum\
    \ + number;\n            currentSumOfSquares = currentSumOfSquares + number *\
    \ number;\n            currentSumOfSquareRoots = currentSumOfSquareRoots + Math.Sqrt(number);\n\
    \            if (currentSumOfSquares > currentSumOfSquares) {\n              \
    \  currentMax = currentSum;\n            }\n            if (currentSumOfSquareRoots\
    \ > currentSumOfSquares) {\n                currentMax = currentSumOfSquareRoots;\n\
    \            }\n            if (currentSumOfSquares > currentSum) {\n        \
    \        currentMax = currentSum;\n            }\n            if (currentSumOfSquareRoots\
    \ > currentSum) {\n                currentMax = currentSumOfSquareRoots;\n   \
    \         }\n            result.Add(currentMax);\n        }\n        return result;",
  "        var result = new List<long>();\n        var rollingMax = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        foreach (var number\
    \ in numbers) {\n            rollingMax.Add(number);\n            max = Math.Max(max,\
    \ number);\n            currentMax = Math.Max(currentMax, number);\n        }\n\
    \        result.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(currentMax);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max);\n        rollingMax.Add(max);\n\
    \        rollingMax.Add(max);\n        rollingMax.Add(max", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ numbers.First();\n        long currentMaxIndex = -1;\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMax) {\n             \
    \   currentMax = number;\n                currentMaxIndex = result.Count;\n  \
    \          }\n            else if (number == currentMax) {\n                currentMaxIndex++;\n\
    \            }\n            result.Add(number);\n            if (currentMaxIndex\
    \ == numbers.Count - 1) {\n                result.Add(currentMax);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        long\
    \ currentMaxIndex = -1;\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                currentMax = number;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            if (number\
    \ == currentMax) {\n                result.Add(number);\n            }\n     \
    \   }\n        if (currentMaxIndex < result.Count) {\n            result.RemoveAt(currentMaxIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            while (currentNumber\
    \ != 0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n\
    \                currentNumber = currentNumber / 2;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n  \
    \      foreach (long number in numbers) {\n            currentSum += number;\n\
    \            currentSumOfSquares += number * number;\n            if (currentSum\
    \ > max) {\n                max = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax) {\n                currentMax = currentSumOfSquares;\n       \
    \     }\n            result.Add(number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex = numbers.Count;\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long ", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n       \
    \ long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 = 0;\n \
    \       long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6 =\
    \ 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = numbers.First();\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = numbers.First();\n        long\
    \ currentMaxIndex = -1;\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                currentMax = number;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            if (number\
    \ == currentMax) {\n                result.Add(number);\n            }\n     \
    \   }\n        if (currentMaxIndex != result.Count) {\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long currentSumOfSquares = 0;\n        foreach (long number in\
    \ numbers) {\n            currentSum = currentSum + number;\n            currentSumOfSquares\
    \ = currentSumOfSquares + number * number;\n            if (currentSum > max)\
    \ {\n                max = currentSum;\n                currentMax = currentSum;\n\
    \            }\n            else if (currentSum == max) {\n                currentMax\
    \ = currentMax == 0 ? number : Math.Max(currentMax, number);\n            }\n\
    \            else if (currentSumOfSquares > max * max) {\n                max\
    \ = currentSum;\n                currentMax = currentSum;\n            }\n   \
    \         else if (currentSumOfSquares == max * max) {\n                currentMax\
    \ = currentMax == 0 ? number : Math.Max(currentMax, number);\n            }\n\
    \        }\n        result.Add(currentMax);\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        long currentSum =\
    \ 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfNumbers\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n\
    \            currentSumOfSquareOfNumbers = 0;\n            while (currentNumber\
    \ != 0) {\n                currentSum += currentNumber;\n                currentSumOfSquares\
    \ += currentNumber * currentNumber;\n                currentSumOfSquareOfNumbers\
    \ += currentNumber;\n                currentNumber /= 10;\n            }\n   \
    \         currentMax = currentSum;\n            if (currentMax == currentSum)\
    \ {\n                currentMax = currentSumOfSquareOfNumbers;\n            }\n\
    \            if (currentMax > max) {\n                max = currentMax;\n    \
    \        }\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.First();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndex2 = -1;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = currentMaxIndex2;\n            }\n        \
    \    else if (number == currentMax) {\n                currentMaxIndex++;\n  \
    \          }\n            else {\n                result.Add(currentMax);\n  \
    \              currentMax = number;\n                currentMaxIndex = currentMaxIndex2;\n\
    \            }\n            currentMaxIndex2 = currentMaxIndex;\n        }\n \
    \       result.Add(currentMax);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOf",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexValue = numbers.Count;\n        long currentMaxIndexValueSum\
    \ = 0;\n        long currentMaxIndexValueSum2 = 0;\n        long currentMaxIndexValueSum3\
    \ = 0;\n        long currentMaxIndexValueSum4 = 0;\n        long currentMaxIndexValueSum5\
    \ = 0;\n        long currentMaxIndexValueSum6 = 0;\n        long currentMaxIndexValueSum7\
    \ = 0;\n        long currentMaxIndexValueSum8 = 0;\n        long currentMaxIndexValueSum9\
    \ = 0;\n        long currentMaxIndexValueSum10 = 0;\n        long currentMaxIndexValueSum11\
    \ = 0;\n        long currentMaxIndexValueSum12 = 0;\n        long currentMaxIndexValueSum13\
    \ = 0;\n        long currentMaxIndexValueSum14 = 0;\n        long currentMaxIndexValueSum15\
    \ = 0;\n        long currentMaxIndexValueSum16 = 0;\n        long currentMaxIndexValueSum17\
    \ = 0;\n        long currentMaxIndexValueSum18 = 0;\n        long currentMaxIndexValueSum19\
    \ = 0;\n        long currentMaxIndexValueSum20 = 0;\n        long currentMaxIndexValueSum21\
    \ = 0;\n        long currentMaxIndexValueSum22 = 0;\n        long currentMaxIndexValueSum23\
    \ = 0;\n        long currentMaxIndexValueSum24 = 0;\n        long currentMaxIndexValueSum25\
    \ = 0;\n        long currentMaxIndexValueSum26 = 0;\n        long currentMaxIndexValueSum27\
    \ = 0;\n        long currentMaxIndexValueSum28 = 0;\n        long currentMaxIndexValueSum29\
    \ = 0;\n        long currentMaxIndexValueSum30 = 0;\n        long currentMaxIndexValueSum31\
    \ = 0;\n        long currentMaxIndexValueSum32 = 0;\n        long currentMaxIndexValueSum33\
    \ = 0;\n        long currentMaxIndexValueSum34 = 0;\n        long currentMaxIndexValueSum35\
    \ = 0;\n        long currentMaxIndexValueSum36 = 0;\n        long currentMaxIndexValueSum37\
    \ = 0;\n        long currentMaxIndexValueSum38 = 0;\n        long currentMaxIndexValueSum39\
    \ = 0;\n        long currentMaxIndexValueSum40 = 0;\n        long currentMaxIndexValueSum41\
    \ = 0;\n        long currentMaxIndexValueSum42 = 0;\n        long currentMaxIndexValueSum43\
    \ = 0;\n        long currentMaxIndexValueSum44 = 0;\n        long currentMaxIndexValueSum45\
    \ = 0;\n        long currentMaxIndexValueSum46 = 0;\n        long currentMaxIndexValueSum47\
    \ = 0;\n        long currentMax", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValueIndex;\n       \
    \     }\n            if (number == currentMaxValue) {\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex == currentMaxValueIndex) {\n \
    \               result.Add(currentMaxValue);\n                currentMaxValue\
    \ = numbers[currentMaxIndex];\n                currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var rollingMax = new List<long>();\n        var rollingMaxIndex\
    \ = 0;\n        var rollingMaxValue = numbers.First();\n        rollingMax.Add(rollingMaxValue);\n\
    \        rollingMaxIndex++;\n        foreach (var number in numbers) {\n     \
    \       if (number > rollingMaxValue) {\n                rollingMax.Add(number);\n\
    \                rollingMaxIndex++;\n            }\n            else {\n     \
    \           rollingMaxValue = number;\n                rollingMaxIndex = rollingMax.Count;\n\
    \            }\n        }\n        result.Add(rollingMaxValue);\n        while\
    \ (rollingMaxIndex > 0) {\n            rollingMaxValue = rollingMax[rollingMaxIndex\
    \ - 1];\n            rollingMaxIndex--;\n            foreach (var number in numbers.Where(x\
    \ => x > rollingMaxValue)) {\n                rollingMaxValue = number;\n    \
    \            rollingMaxIndex++;\n                rollingMax.Add(rollingMaxValue);\n\
    \            }\n            result.Add(rollingMaxValue);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n            }\n            if (number == currentMax) {\n        \
    \        result.Add(number);\n            }\n            else {\n            \
    \    result.Add(currentMax);\n                currentMax = number;\n         \
    \   }\n        }\n        result.Add(currentMax);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max = 0;\n       \
    \ long cur = 0;\n        long curMax = 0;\n        foreach (long n in numbers)\
    \ {\n            cur = n;\n            curMax = max;\n            max = Math.Max(max,\
    \ n);\n            if (cur > max) {\n                result.Add(curMax);\n   \
    \             cur = max;\n            }\n        }\n        result.Add(cur);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfProducts = 0;\n        long currentSumOfProductsOfSquares = 0;\n\
    \        long currentSumOfProductsOfProducts = 0;\n        long currentSumOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProducts = 0;\n        long\
    \ currentSumOfProductsOfProductsOfProductsOfSquares = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long ", "        List<long> result = new List<long>();\n     \
    \   long max = 0;\n        long currentMax = 0;\n        long currentNumber =\
    \ 0;\n        long previousNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            currentNumber = number;\n            currentMax = number;\n \
    \           previousNumber = currentNumber;\n            while (currentNumber\
    \ != 0) {\n                currentMax = Math.Max(currentMax, currentNumber);\n\
    \                currentNumber = currentNumber - 1;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number > max) {\n          \
    \      max = number;\n                currentMaxValue = number;\n            \
    \    currentMaxIndex = result.Count;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(max);\n        result.Add(currentMaxValue);\n \
    \       result.Add(currentMaxIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4\
    \ = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n\
    \        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n    \
    \    long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n       \
    \ long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n        long\
    \ currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15\
    \ = 0;\n        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 =\
    \ 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n\
    \        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n  \
    \      long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n    \
    \    long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n      \
    \  long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n        long\
    \ currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30\
    \ = 0;\n        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 =\
    \ 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n\
    \        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n  \
    \      long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n    \
    \    long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n      \
    \  long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n        long\
    \ currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45\
    \ = 0;\n        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 =\
    \ 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n\
    \        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n  \
    \      long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n    \
    \    long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n      \
    \  long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n        long\
    \ currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60\
    \ = 0;\n        long currentMaxIndex61 = 0;\n        long current", "        List<long>\
    \ result = new List<long>();\n        long maxValue = numbers.Max();\n       \
    \ long currentMax = maxValue;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex2 = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4\
    \ = -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 =\
    \ -1;\n        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n\
    \        long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n \
    \       long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n \
    \       long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n \
    \       long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n \
    \       long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n \
    \       long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n \
    \       long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n \
    \       long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n \
    \       long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n \
    \       long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n \
    \       long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n \
    \       long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n \
    \       long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n \
    \       long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n \
    \       long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n \
    \       long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n \
    \       long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n \
    \       long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n \
    \       long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n \
    \       long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n \
    \       long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n \
    \       long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n \
    \       long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n \
    \       long currentMaxIndex55 = -1;\n        long currentMax", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long current = 0;\n\
    \        foreach (long n in numbers) {\n            current = Math.Max(current,\
    \ n);\n            if (current > max) {\n                max = current;\n    \
    \        }\n            result.Add(current);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = 0;\n        long sum = 0;\n        foreach (long n in numbers) {\n\
    \            sum += n;\n            if (sum > max) {\n                max = sum;\n\
    \                current = n;\n            }\n            result.Add(current);\n\
    \        }\n        return result;", "        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.First();\n        long currentMax = maxValue;\n\
    \        foreach (long number in numbers) {\n            if (number > maxValue)\
    \ {\n                max.Add(currentMax);\n                currentMax = number;\n\
    \            } else {\n                currentMax = number;\n            }\n \
    \       }\n        max.Add(currentMax);\n        return max;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueValue = numbers[currentMaxValueIndex];\n        long currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n        long currentMaxValueValueValue\
    \ = numbers[currentMaxValueValueIndex];\n        long currentMaxValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValue);\n        long currentMaxValueValueValueValue\
    \ = numbers[currentMaxValueValueValueIndex];\n        long currentMaxValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueValueValueIndex];\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValue",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long current = 0;\n        long sum = 0;\n        foreach\
    \ (long n in numbers) {\n            currentMax = n;\n            current = 0;\n\
    \            sum = 0;\n            while (current < currentMax) {\n          \
    \      sum += current;\n                current++;\n            }\n          \
    \  max = Math.Max(max, sum);\n            result.Add(max);\n        }\n      \
    \  return result;", "        var rollingMax = new List<long>();\n        var rollingMaxIndex\
    \ = 0;\n        var rollingMaxValue = numbers.First();\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = 0;\n        var rollingMaxMaxIndex2\
    \ = 0;\n        var rollingMaxMaxValue2 = rollingMaxValue;\n        var rollingMaxMaxIndex2\
    \ = 0;\n        var rollingMaxMaxValue3 = rollingMaxValue;\n        var rollingMaxMaxIndex3\
    \ = 0;\n        var rollingMaxMaxValue4 = rollingMaxValue;\n        var rollingMaxMaxIndex4\
    \ = 0;\n        var rollingMaxMaxValue5 = rollingMaxValue;\n        var rollingMaxMaxIndex5\
    \ = 0;\n        var rollingMaxMaxValue6 = rollingMaxValue;\n        var rollingMaxMaxIndex6\
    \ = 0;\n        var rollingMaxMaxValue7 = rollingMaxValue;\n        var rollingMaxMaxIndex7\
    \ = 0;\n        var rollingMaxMaxValue8 = rollingMaxValue;\n        var rollingMaxMaxIndex8\
    \ = 0;\n        var rollingMaxMaxValue9 = rollingMaxValue;\n        var rollingMaxMaxIndex9\
    \ = 0;\n        var rollingMaxMaxValue10 = rollingMaxValue;\n        var rollingMaxMaxIndex10\
    \ = 0;\n        var rollingMaxMaxValue11 = rollingMaxValue;\n        var rollingMaxMaxIndex11\
    \ = 0;\n        var rollingMaxMaxValue12 = rollingMaxValue;\n        var rollingMaxMaxIndex12\
    \ = 0;\n        var rollingMaxMaxValue13 = rollingMaxValue;\n        var rollingMaxMaxIndex13\
    \ = 0;\n        var rollingMaxMaxValue14 = rollingMaxValue;\n        var rollingMaxMaxIndex14\
    \ = 0;\n        var rollingMaxMaxValue15 = rollingMaxValue;\n        var rollingMaxMaxIndex15\
    \ = 0;\n        var rollingMaxMaxValue16 = rollingMaxValue;\n        var rollingMaxMaxIndex16\
    \ = 0;\n        var rollingMaxMaxValue17 = rollingMaxValue;\n        var rollingMaxMaxIndex17\
    \ = 0;\n        var rollingMaxMaxValue18 = rollingMaxValue;\n        var rollingMaxMaxIndex18\
    \ = 0;\n        var rollingMaxMaxValue19 = rollingMaxValue;\n        var rollingMaxMaxIndex19\
    \ = 0;\n        var rollingMaxMaxValue20 = rollingMaxValue;\n        var rollingMaxMaxIndex20\
    \ = 0;\n        var rollingMaxMaxValue21 = rollingMaxValue;\n        var rollingMaxMaxIndex21\
    \ = 0;\n        var rollingMaxMaxValue22 = rollingMaxValue;\n        var rollingMaxMaxIndex22\
    \ = 0;\n        var rollingMaxMaxValue23 = rollingMaxValue;\n", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number > max) {\n          \
    \      max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number == currentMaxValue) {\n\
    \                currentMaxIndex++;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = numbers.Max();\n        long\
    \ currentMax = max;\n        long currentMaxIndex = -1;\n        long currentMaxValue\
    \ = numbers.First();\n        long currentMaxValueIndex = -1;\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \                currentMaxValue = currentMaxValue;\n                currentMaxValueIndex\
    \ = currentMaxValueIndex;\n            }\n            if (number == currentMax)\
    \ {\n                currentMaxIndex++;\n                currentMaxValue = number;\n\
    \                currentMaxValueIndex = currentMaxIndex;\n            }\n    \
    \        if (number > currentMaxValue) {\n                currentMaxValue = number;\n\
    \                currentMaxValueIndex = currentMaxIndex;\n            }\n    \
    \    }\n        result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n\
    \        result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n\
    \        result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n\
    \        result.Add(currentMaxValue);\n        result.Add(currentMaxValue);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.First();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentMax = number;\n            while (currentNumber\
    \ > currentMax) {\n                currentMax = currentNumber;\n             \
    \   currentNumber -= currentMax;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueCount = 1;\n\
    \        long currentMaxValueCountIndex = 0;\n        long currentMaxValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValue);\n\
    \        long currentMaxValueCountValueCount = 1;\n        long currentMaxValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValue = numbers.Count;\n  \
    \      long currentMaxValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCount = 1;\n        long currentMaxValueCountValueCountValueCountIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValue = numbers.Count;\n\
    \        long currentMaxValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCount = 1;\n      \
    \  long currentMaxValueCountValueCountValueCountValueIndex = 0;\n        long\
    \ currentMaxValueCountValueCountValueCountValueCountValue = numbers.Count;\n \
    \       long currentMaxValueCountValueCountValueCountValueCountValueIndex = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCount = 1;\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueIndex = 0;\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCount\
    \ = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = 0;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValue\
    \ = numbers.Count;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = numbers.IndexOf(currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValue);\n\
    \        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueCount\
    \ = 1;\n        long currentMaxValueCountValueCountValueCountValueCountValueCountValueCountValueIndex\
    \ = 0;\n        long currentMaxValueCount", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n            }\n            if (number > max) {\n\
    \                max = number;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long sum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfSquaresOfPowers = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowers = 0;\n\
    \        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares =\
    \ 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = numbers.First();\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxValue = numbers.First();\n        long currentMaxIndexValue = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \                currentMaxValue = currentMaxValue;\n                currentMaxIndexValue\
    \ = currentMaxIndexValue;\n            }\n            if (number == currentMax)\
    \ {\n                currentMaxIndex++;\n                currentMaxIndexValue\
    \ = currentMaxIndex;\n            }\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndexValue\
    \ = currentMaxIndex;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n                currentMaxIndexValue\
    \ = currentMaxIndex;\n            }\n            result.Add(number);\n       \
    \ }\n        result.Add(currentMax);\n        result.Add(currentMaxValue);\n \
    \       result.Add(currentMaxIndex);\n        result.Add(currentMaxIndexValue);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long current = 0;\n        long sum = 0;\n      \
    \  foreach (long number in numbers) {\n            sum += number;\n          \
    \  if (sum > max) {\n                max = sum;\n                current = number;\n\
    \            }\n            result.Add(current);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   foreach (long number in numbers) {\n            currentMax = number;\n   \
    \         currentSum = number;\n            sum = number;\n            while (currentSum\
    \ > 0) {\n                currentSum -= max;\n                currentMax -= max;\n\
    \                result.Add(currentMax);\n                sum += currentMax;\n\
    \            }\n            max = currentMax;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long current = max;\n        long rollingMax = max;\n        foreach\
    \ (long number in numbers) {\n            rollingMax = Math.Max(rollingMax, number);\n\
    \            if (rollingMax > current) {\n                result.Add(rollingMax);\n\
    \                current = rollingMax;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxValue = numbers[0];\n        long currentMaxIndexValue = numbers[0];\n\
    \        long currentMaxIndexValue2 = numbers[0];\n        long currentMaxIndexValue3\
    \ = numbers[0];\n        long currentMaxIndexValue4 = numbers[0];\n        long\
    \ currentMaxIndexValue5 = numbers[0];\n        long currentMaxIndexValue6 = numbers[0];\n\
    \        long currentMaxIndexValue7 = numbers[0];\n        long currentMaxIndexValue8\
    \ = numbers[0];\n        long currentMaxIndexValue9 = numbers[0];\n        long\
    \ currentMaxIndexValue10 = numbers[0];\n        long currentMaxIndexValue11 =\
    \ numbers[0];\n        long currentMaxIndexValue12 = numbers[0];\n        long\
    \ currentMaxIndexValue13 = numbers[0];\n        long currentMaxIndexValue14 =\
    \ numbers[0];\n        long currentMaxIndexValue15 = numbers[0];\n        long\
    \ currentMaxIndexValue16 = numbers[0];\n        long currentMaxIndexValue17 =\
    \ numbers[0];\n        long currentMaxIndexValue18 = numbers[0];\n        long\
    \ currentMaxIndexValue19 = numbers[0];\n        long currentMaxIndexValue20 =\
    \ numbers[0];\n        long currentMaxIndexValue21 = numbers[0];\n        long\
    \ currentMaxIndexValue22 = numbers[0];\n        long currentMaxIndexValue23 =\
    \ numbers[0];\n        long currentMaxIndexValue24 = numbers[0];\n        long\
    \ currentMaxIndexValue25 = numbers[0];\n        long currentMaxIndexValue26 =\
    \ numbers[0];\n        long currentMaxIndexValue27 = numbers[0];\n        long\
    \ currentMaxIndexValue28 = numbers[0];\n        long currentMaxIndexValue29 =\
    \ numbers[0];\n        long currentMaxIndexValue30 = numbers[0];\n        long\
    \ currentMaxIndexValue31 = numbers[0];\n        long currentMaxIndexValue32 =\
    \ numbers[0];\n        long currentMaxIndexValue33 = numbers[0];\n        long\
    \ currentMaxIndexValue34 = numbers[0];\n        long currentMaxIndexValue35 =\
    \ numbers[0];\n        long currentMaxIndexValue36 = numbers[0];\n        long\
    \ currentMaxIndexValue37 = numbers[0];\n        long currentMaxIndexValue38 =\
    \ numbers[0];\n        long currentMaxIndexValue39 = numbers[0];\n        long\
    \ currentMaxIndexValue40 = numbers[0];\n        long currentMaxIndexValue41 =\
    \ numbers[0];\n        long currentMaxIndexValue42 = numbers[0];\n        long\
    \ currentMaxIndexValue43 = numbers[0];\n        long currentMaxIndexValue44 =\
    \ numbers[0];\n        long currentMaxIndex", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long current = 0;\n        foreach\
    \ (long number in numbers) {\n            current = Math.Max(current, number);\n\
    \            if (current > max) {\n                max = current;\n          \
    \  }\n            result.Add(max);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = 0;\n        long sum = 0;\n        foreach (var number in numbers)\
    \ {\n            sum += number;\n            if (sum > max) {\n              \
    \  max = sum;\n                current = number;\n            }\n            result.Add(current);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = numbers.Max();\n        long currentMax = max;\n        long\
    \ currentMaxIndex = -1;\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                currentMax = number;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            if (number\
    \ == currentMax) {\n                result.Add(number);\n            }\n     \
    \   }\n        if (currentMaxIndex != result.Count) {\n            result.Insert(currentMaxIndex,\
    \ currentMax);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue2 = numbers.Last();\n  \
    \      long currentMaxIndexValue3 = numbers.Last();\n        long currentMaxIndexValue4\
    \ = numbers.Last();\n        long currentMaxIndexValue5 = numbers.Last();\n  \
    \      long currentMaxIndexValue6 = numbers.Last();\n        long currentMaxIndexValue7\
    \ = numbers.Last();\n        long currentMaxIndexValue8 = numbers.Last();\n  \
    \      long currentMaxIndexValue9 = numbers.Last();\n        long currentMaxIndexValue10\
    \ = numbers.Last();\n        long currentMaxIndexValue11 = numbers.Last();\n \
    \       long currentMaxIndexValue12 = numbers.Last();\n        long currentMaxIndexValue13\
    \ = numbers.Last();\n        long currentMaxIndexValue14 = numbers.Last();\n \
    \       long currentMaxIndexValue15 = numbers.Last();\n        long currentMaxIndexValue16\
    \ = numbers.Last();\n        long currentMaxIndexValue17 = numbers.Last();\n \
    \       long currentMaxIndexValue18 = numbers.Last();\n        long currentMaxIndexValue19\
    \ = numbers.Last();\n        long currentMaxIndexValue20 = numbers.Last();\n \
    \       long currentMaxIndexValue21 = numbers.Last();\n        long currentMaxIndexValue22\
    \ = numbers.Last();\n        long currentMaxIndexValue23 = numbers.Last();\n \
    \       long currentMaxIndexValue24 = numbers.Last();\n        long currentMaxIndexValue25\
    \ = numbers.Last();\n        long currentMaxIndexValue26 = numbers.Last();\n \
    \       long currentMaxIndexValue27 = numbers.Last();\n        long currentMaxIndexValue28\
    \ = numbers.Last();\n        long currentMaxIndexValue29 = numbers.Last();\n \
    \       long currentMaxIndexValue30 = numbers.Last();\n        long currentMaxIndexValue31\
    \ = numbers.Last();\n        long currentMaxIndexValue32 = numbers.Last();\n \
    \       long currentMaxIndexValue33 = numbers.Last();\n        long currentMaxIndexValue34\
    \ = numbers.Last();\n        long currentMaxIndexValue35 = numbers.Last();\n \
    \       long currentMaxIndexValue36 = numbers.Last();\n        long currentMaxIndexValue37\
    \ = numbers.Last();\n        long currentMaxIndexValue38 = numbers.Last();\n \
    \       long currentMaxIndexValue39 = numbers.Last();\n        long currentMaxIndexValue40\
    \ = numbers.Last();\n        long currentMaxIndexValue41 = numbers.Last();\n",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxValueIndex = -1;\n        foreach (long\
    \ number in numbers) {\n            if (number > currentMaxValue) {\n        \
    \        currentMaxValue = number;\n                currentMaxIndex = currentMaxValue;\n\
    \                currentMaxValueIndex = currentMaxIndex;\n            }\n    \
    \        if (number == currentMaxValue) {\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex == currentMaxValueIndex) {\n \
    \               result.Add(currentMaxValue);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ maxValue = numbers.Max();\n        long currentMax = maxValue;\n        long\
    \ currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2\
    \ = 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = 0;\n        long sum = 0;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            if (sum > max) {\n              \
    \  max = sum;\n                current = number;\n            }\n            result.Add(current);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n   \
    \     long currentMaxIndex3 = -1;\n        long currentMaxIndex4 = -1;\n     \
    \   long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n       \
    \ long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n        long\
    \ currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n        long currentMaxIndex11\
    \ = -1;\n        long currentMaxIndex12 = -1;\n        long currentMaxIndex13\
    \ = -1;\n        long currentMaxIndex14 = -1;\n        long currentMaxIndex15\
    \ = -1;\n        long currentMaxIndex16 = -1;\n        long currentMaxIndex17\
    \ = -1;\n        long currentMaxIndex18 = -1;\n        long currentMaxIndex19\
    \ = -1;\n        long currentMaxIndex20 = -1;\n        long currentMaxIndex21\
    \ = -1;\n        long currentMaxIndex22 = -1;\n        long currentMaxIndex23\
    \ = -1;\n        long currentMaxIndex24 = -1;\n        long currentMaxIndex25\
    \ = -1;\n        long currentMaxIndex26 = -1;\n        long currentMaxIndex27\
    \ = -1;\n        long currentMaxIndex28 = -1;\n        long currentMaxIndex29\
    \ = -1;\n        long currentMaxIndex30 = -1;\n        long currentMaxIndex31\
    \ = -1;\n        long currentMaxIndex32 = -1;\n        long currentMaxIndex33\
    \ = -1;\n        long currentMaxIndex34 = -1;\n        long currentMaxIndex35\
    \ = -1;\n        long currentMaxIndex36 = -1;\n        long currentMaxIndex37\
    \ = -1;\n        long currentMaxIndex38 = -1;\n        long currentMaxIndex39\
    \ = -1;\n        long currentMaxIndex40 = -1;\n        long currentMaxIndex41\
    \ = -1;\n        long currentMaxIndex42 = -1;\n        long currentMaxIndex43\
    \ = -1;\n        long currentMaxIndex44 = -1;\n        long currentMaxIndex45\
    \ = -1;\n        long currentMaxIndex46 = -1;\n        long currentMaxIndex47\
    \ = -1;\n        long currentMaxIndex48 = -1;\n        long currentMaxIndex49\
    \ = -1;\n        long currentMaxIndex50 = -1;\n        long currentMaxIndex51\
    \ = -1;\n        long currentMaxIndex52 = -1;\n        long currentMaxIndex53\
    \ = -1;\n        long currentMaxIndex54 = -1;\n        long currentMaxIndex55\
    \ = -1;\n        long currentMax", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long currentMax =\
    \ numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMax);\n \
    \       long currentMaxValue = currentMax;\n        long currentMaxIndexValue\
    \ = currentMaxIndex;\n        foreach (long number in numbers) {\n           \
    \ if (number > currentMaxValue) {\n                max = currentMaxValue;\n  \
    \              maxIndex = currentMaxIndexValue;\n                currentMaxValue\
    \ = number;\n                currentMaxIndexValue = numbers.IndexOf(currentMaxValue);\n\
    \                currentMaxIndex = currentMaxIndexValue;\n            }\n    \
    \        if (number > max) {\n                max = number;\n                maxIndex\
    \ = numbers.IndexOf(number);\n            }\n        }\n        result.Add(max);\n\
    \        result.Add(maxIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = numbers.First();\n        long maxIndex\
    \ = 0;\n        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > max) {\n                max = numbers[i];\n                maxIndex = i;\n\
    \            }\n        }\n        result.Add(max);\n        for (int i = maxIndex\
    \ + 1; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long current = 0;\n        long sum = 0;\n   \
    \     foreach (long n in numbers) {\n            current = n;\n            sum\
    \ += current;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n            result.Add(max);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long\
    \ currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6\
    \ = 0;\n        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n\
    \        long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n   \
    \     long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n     \
    \   long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n       \
    \ long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long\
    \ currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19\
    \ = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 =\
    \ 0;\n        long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n\
    \        long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n  \
    \      long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n    \
    \    long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n      \
    \  long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n        long\
    \ currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34\
    \ = 0;\n        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 =\
    \ 0;\n        long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n\
    \        long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n  \
    \      long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n    \
    \    long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n      \
    \  long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long\
    \ currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49\
    \ = 0;\n        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 =\
    \ 0;\n        long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n\
    \        long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n  \
    \      long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n    \
    \    long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n      \
    \  long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n        long\
    \ current", "        List<long> result = new List<long>();\n        long maxValue\
    \ = numbers.Max();\n        long currentMax = maxValue;\n        long currentSum\
    \ = 0;\n        long currentCount = 0;\n        long currentSumOfSquares = 0;\n\
    \        foreach (long number in numbers) {\n            currentSum += number;\n\
    \            currentCount += 1;\n            currentSumOfSquares += number * number;\n\
    \            if (currentCount > 1) {\n                currentMax = Math.Max(currentMax,\
    \ currentSum);\n                currentSum = 0;\n                currentCount\
    \ = 0;\n                currentSumOfSquares = 0;\n            }\n            if\
    \ (currentCount == 1) {\n                result.Add(currentMax);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.First();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            if\
    \ (number == currentMax) {\n                result.Add(number);\n            }\n\
    \        }\n        if (currentMaxIndex < result.Count) {\n            result.RemoveAt(currentMaxIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        long\
    \ currentMaxIndex = -1;\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                currentMax = number;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            if (number\
    \ == currentMax) {\n                result.Add(number);\n            }\n     \
    \   }\n        if (currentMaxIndex != result.Count) {\n            result.Insert(currentMaxIndex,\
    \ currentMax);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfSquaresOfDifferenceSquares\
    \ = 0;\n        long currentSumOfSquaresOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfSquaresOfDifferences = 0;\n      \
    \  long currentSumOfSquaresOfSquaresOfDifferenceSquareOfDifferences = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfDifferenceSquareOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfSquares", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                result.Add(currentMax);\n                max = currentMax;\n\
    \                currentMax = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentMax = number;\n            }\n    \
    \        else {\n                currentMax = currentMax + number;\n         \
    \   }\n        }\n        result.Add(currentMax);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexValue = numbers.First();\n        long currentMaxIndexValue2\
    \ = numbers.First();\n        long currentMaxIndexValue3 = numbers.First();\n\
    \        long currentMaxIndexValue4 = numbers.First();\n        long currentMaxIndexValue5\
    \ = numbers.First();\n        long currentMaxIndexValue6 = numbers.First();\n\
    \        long currentMaxIndexValue7 = numbers.First();\n        long currentMaxIndexValue8\
    \ = numbers.First();\n        long currentMaxIndexValue9 = numbers.First();\n\
    \        long currentMaxIndexValue10 = numbers.First();\n        long currentMaxIndexValue11\
    \ = numbers.First();\n        long currentMaxIndexValue12 = numbers.First();\n\
    \        long currentMaxIndexValue13 = numbers.First();\n        long currentMaxIndexValue14\
    \ = numbers.First();\n        long currentMaxIndexValue15 = numbers.First();\n\
    \        long currentMaxIndexValue16 = numbers.First();\n        long currentMaxIndexValue17\
    \ = numbers.First();\n        long currentMaxIndexValue18 = numbers.First();\n\
    \        long currentMaxIndexValue19 = numbers.First();\n        long currentMaxIndexValue20\
    \ = numbers.First();\n        long currentMaxIndexValue21 = numbers.First();\n\
    \        long currentMaxIndexValue22 = numbers.First();\n        long currentMaxIndexValue23\
    \ = numbers.First();\n        long currentMaxIndexValue24 = numbers.First();\n\
    \        long currentMaxIndexValue25 = numbers.First();\n        long currentMaxIndexValue26\
    \ = numbers.First();\n        long currentMaxIndexValue27 = numbers.First();\n\
    \        long currentMaxIndexValue28 = numbers.First();\n        long currentMaxIndexValue29\
    \ = numbers.First();\n        long currentMaxIndexValue30 = numbers.First();\n\
    \        long currentMaxIndexValue31 = numbers.First();\n        long currentMaxIndexValue32\
    \ = numbers.First();\n        long currentMaxIndexValue33 = numbers.First();\n\
    \        long currentMaxIndexValue34 = numbers.First();\n        long currentMaxIndexValue35\
    \ = numbers.First();\n        long currentMaxIndexValue36 = numbers.First();\n\
    \        long currentMaxIndexValue37 = numbers.First();\n        long currentMaxIndexValue38\
    \ = numbers.First();\n        long currentMaxIndexValue39 = numbers.First();\n\
    \        long currentMaxIndexValue40 = numbers.First();\n        long currentMaxIndexValue41\
    \ = numbers.First();\n", "        List<long> result = new List<long>();\n    \
    \    long maxValue = numbers.Max();\n        long currentMax = maxValue;\n   \
    \     long currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxIndexValue = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = currentMaxIndexValue;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ currentMaxIndex++;\n                currentMaxIndexValue = currentMaxIndex;\n\
    \            }\n            if (currentMaxIndex == currentMaxIndexValue) {\n \
    \               result.Add(currentMaxValue);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ maxValue = numbers.Max();\n        long currentMax = maxValue;\n        long\
    \ currentSum = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfProducts\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            currentSumOfSquares += number * number;\n            currentSumOfProducts\
    \ += number * currentSum;\n            if (currentSum > currentMax) {\n      \
    \          currentMax = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                currentMax = currentSumOfSquares;\n\
    \            }\n            if (currentSumOfProducts > currentMax * currentMax)\
    \ {\n                currentMax = currentSumOfProducts;\n            }\n     \
    \       result.Add(currentMax);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = 0;\n    \
    \    long currentMaxIndex2 = 0;\n        long currentMaxIndex3 = 0;\n        long\
    \ currentMaxIndex4 = 0;\n        long currentMaxIndex5 = 0;\n        long currentMaxIndex6\
    \ = 0;\n        long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n\
    \        long currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n   \
    \     long currentMaxIndex11 = 0;\n        long currentMaxIndex12 = 0;\n     \
    \   long currentMaxIndex13 = 0;\n        long currentMaxIndex14 = 0;\n       \
    \ long currentMaxIndex15 = 0;\n        long currentMaxIndex16 = 0;\n        long\
    \ currentMaxIndex17 = 0;\n        long currentMaxIndex18 = 0;\n        long currentMaxIndex19\
    \ = 0;\n        long currentMaxIndex20 = 0;\n        long currentMaxIndex21 =\
    \ 0;\n        long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n\
    \        long currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n  \
    \      long currentMaxIndex26 = 0;\n        long currentMaxIndex27 = 0;\n    \
    \    long currentMaxIndex28 = 0;\n        long currentMaxIndex29 = 0;\n      \
    \  long currentMaxIndex30 = 0;\n        long currentMaxIndex31 = 0;\n        long\
    \ currentMaxIndex32 = 0;\n        long currentMaxIndex33 = 0;\n        long currentMaxIndex34\
    \ = 0;\n        long currentMaxIndex35 = 0;\n        long currentMaxIndex36 =\
    \ 0;\n        long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n\
    \        long currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n  \
    \      long currentMaxIndex41 = 0;\n        long currentMaxIndex42 = 0;\n    \
    \    long currentMaxIndex43 = 0;\n        long currentMaxIndex44 = 0;\n      \
    \  long currentMaxIndex45 = 0;\n        long currentMaxIndex46 = 0;\n        long\
    \ currentMaxIndex47 = 0;\n        long currentMaxIndex48 = 0;\n        long currentMaxIndex49\
    \ = 0;\n        long currentMaxIndex50 = 0;\n        long currentMaxIndex51 =\
    \ 0;\n        long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n\
    \        long currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n  \
    \      long currentMaxIndex56 = 0;\n        long currentMaxIndex57 = 0;\n    \
    \    long currentMaxIndex58 = 0;\n        long currentMaxIndex59 = 0;\n      \
    \  long currentMaxIndex60 = 0;\n        long currentMaxIndex61 = 0;\n        long\
    \ current", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentMaxIndex = 0;\n      \
    \  long currentMaxValue = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueValue = numbers[currentMaxValueIndex];\n        long\
    \ currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n       \
    \ long currentMaxValueValueValue = numbers[currentMaxValueValueIndex];\n     \
    \   long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n\
    \        long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValue = numbers[currentMaxValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueValue = numbers[currentMaxValueValueValueValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValueValue);\n\
    \        long currentMaxValueValue", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.Max();\n\
    \        long currentMaxValue = maxValue;\n        long currentMaxIndex = 0;\n\
    \        long currentMaxIndexValue = 0;\n        long currentMaxIndexValue2 =\
    \ 0;\n        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4\
    \ = 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        long currentMaxIndexValue54",
  "        var rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n\
    \        var rollingMaxValue = numbers.First();\n        var rollingMaxMaxValue\
    \ = rollingMaxValue;\n        var rollingMaxMaxIndex = rollingMaxIndex;\n    \
    \    foreach (var number in numbers) {\n            if (number > rollingMaxValue)\
    \ {\n                rollingMaxValue = number;\n                rollingMaxMaxIndex\
    \ = rollingMaxIndex;\n            }\n            rollingMax.Add(number);\n   \
    \         rollingMaxMaxValue = Math.Max(rollingMaxMaxValue, number);\n       \
    \     rollingMaxMaxIndex++;\n        }\n        rollingMax.Add(rollingMaxValue);\n\
    \        rollingMax.Add(rollingMaxMaxValue);\n        rollingMax.Add(rollingMaxMaxIndex);\n\
    \        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        long\
    \ currentMaxIndex = -1;\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                currentMax = number;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            if (number\
    \ == currentMax) {\n                result.Add(number);\n            }\n     \
    \   }\n        if (currentMaxIndex < result.Count) {\n            result.Insert(currentMaxIndex,\
    \ currentMax);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentSum = currentNumber;\n            while (currentSum <= currentMax) {\n\
    \                currentMax = currentSum;\n                currentSum = 0;\n \
    \               foreach (long number in numbers) {\n                    if (number\
    \ > currentMax) {\n                        currentMax = number;\n            \
    \            currentSum = currentNumber;\n                    }\n            \
    \        currentSum += number;\n                }\n                result.Add(currentMax);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        foreach (long number in numbers) {\n   \
    \         currentSum += number;\n            if (currentSum > max) {\n       \
    \         max = currentSum;\n                currentMax = number;\n          \
    \  }\n        }\n        result.Add(currentMax);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long current = max;\n        long rollingMax = max;\n        foreach\
    \ (long number in numbers) {\n            if (number > rollingMax) {\n       \
    \         rollingMax = number;\n            }\n            if (number == current)\
    \ {\n                result.Add(number);\n            }\n            current =\
    \ number;\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long current = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number > max) {\n              \
    \  max = number;\n                current = 1;\n            }\n            else\
    \ if (number == max) {\n                current++;\n            }\n          \
    \  else {\n                result.Add(max);\n                max = number;\n \
    \               current = 1;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        var rollingMax = new List<long>();\n      \
    \  var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxMaxValue = rollingMaxValue;\n        foreach (var number\
    \ in numbers) {\n            if (number > rollingMaxValue) {\n               \
    \ rollingMaxValue = number;\n                rollingMaxMaxValue = rollingMaxValue;\n\
    \            }\n            if (number == rollingMaxValue) {\n               \
    \ rollingMax.Add(number);\n                rollingMaxIndex++;\n            }\n\
    \            if (rollingMaxIndex == rollingMax.Count) {\n                rollingMax.Add(rollingMaxMaxValue);\n\
    \            }\n        }\n        return rollingMax;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            max = Math.Max(max, n);\n            cur\
    \ = n;\n            result.Add(max);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentNumber = 0;\n        long currentSum =\
    \ 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquareRoots\
    \ = 0;\n        long currentSumOfSquareRootOfSquares = 0;\n        long currentSumOfSquareRootOfSquareRoots\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquares = 0;\n      \
    \  long currentSumOfSquareRootOfSquareRootOfSquareRoots = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ maxValue = numbers.Max();\n        long currentMax = maxValue;\n        long\
    \ currentMaxIndex = 0;\n        long currentMaxIndex = numbers.IndexOf(currentMax);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers.ElementAt(currentMaxIndex);\n        long\
    \ currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue\
    \ = numbers.ElementAt(currentMaxIndex);", "        List<long> max = new List<long>();\n\
    \        long maxElement = numbers.Max();\n        long currentMaxElement = maxElement;\n\
    \        long currentMax = maxElement;\n        long currentMaxIndex = -1;\n \
    \       long currentMaxIndex2 = -1;\n        long currentMaxIndex3 = -1;\n   \
    \     long currentMaxIndex4 = -1;\n        long currentMaxIndex5 = -1;\n     \
    \   long currentMaxIndex6 = -1;\n        long currentMaxIndex7 = -1;\n       \
    \ long currentMaxIndex8 = -1;\n        long currentMaxIndex9 = -1;\n        long\
    \ currentMaxIndex10 = -1;\n        long currentMaxIndex11 = -1;\n        long\
    \ currentMaxIndex12 = -1;\n        long currentMaxIndex13 = -1;\n        long\
    \ currentMaxIndex14 = -1;\n        long currentMaxIndex15 = -1;\n        long\
    \ currentMaxIndex16 = -1;\n        long currentMaxIndex17 = -1;\n        long\
    \ currentMaxIndex18 = -1;\n        long currentMaxIndex19 = -1;\n        long\
    \ currentMaxIndex20 = -1;\n        long currentMaxIndex21 = -1;\n        long\
    \ currentMaxIndex22 = -1;\n        long currentMaxIndex23 = -1;\n        long\
    \ currentMaxIndex24 = -1;\n        long currentMaxIndex25 = -1;\n        long\
    \ currentMaxIndex26 = -1;\n        long currentMaxIndex27 = -1;\n        long\
    \ currentMaxIndex28 = -1;\n        long currentMaxIndex29 = -1;\n        long\
    \ currentMaxIndex30 = -1;\n        long currentMaxIndex31 = -1;\n        long\
    \ currentMaxIndex32 = -1;\n        long currentMaxIndex33 = -1;\n        long\
    \ currentMaxIndex34 = -1;\n        long currentMaxIndex35 = -1;\n        long\
    \ currentMaxIndex36 = -1;\n        long currentMaxIndex37 = -1;\n        long\
    \ currentMaxIndex38 = -1;\n        long currentMaxIndex39 = -1;\n        long\
    \ currentMaxIndex40 = -1;\n        long currentMaxIndex41 = -1;\n        long\
    \ currentMaxIndex42 = -1;\n        long currentMaxIndex43 = -1;\n        long\
    \ currentMaxIndex44 = -1;\n        long currentMaxIndex45 = -1;\n        long\
    \ currentMaxIndex46 = -1;\n        long currentMaxIndex47 = -1;\n        long\
    \ currentMaxIndex48 = -1;\n        long currentMaxIndex49 = -1;\n        long\
    \ currentMaxIndex50 = -1;\n        long currentMaxIndex51 = -1;\n        long\
    \ currentMaxIndex52 = -1;\n        long currentMaxIndex53 = -1;\n        long\
    \ currentMaxIndex54 = -1;\n        long current", "        var result = new List<long>();\n\
    \        var rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n\
    \        var currentMax = numbers.First();\n        rollingMax.Add(currentMax);\n\
    \        foreach (var number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                rollingMax.Add(number);\n\
    \                rollingMaxIndex++;\n            }\n            else {\n     \
    \           rollingMax[rollingMaxIndex] = number;\n            }\n        }\n\
    \        result.AddRange(rollingMax);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long sum = 0;\n        foreach (long\
    \ number in numbers) {\n            currentSum = currentSum + number;\n      \
    \      if (currentSum > max) {\n                max = currentSum;\n          \
    \      currentMax = number;\n            }\n            sum += number;\n     \
    \   }\n        result.Add(currentMax);\n        result.Add(max);\n        result.Add(sum);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMax", "        List<long> result = new List<long>();\n  \
    \      long maxValue = numbers.Max();\n        long currentMax = maxValue;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfProducts = 0;\n        long currentProduct = 1;\n        long currentProductOfSquares\
    \ = 0;\n        long currentProductOfProducts = 0;\n        foreach (long number\
    \ in numbers) {\n            currentSum += number;\n            currentSumOfSquares\
    \ += number * number;\n            currentSumOfProducts += number * currentProduct;\n\
    \            currentProduct *= number;\n            currentProductOfSquares +=\
    \ currentProduct * currentProduct;\n            currentProductOfProducts += currentProduct\
    \ * currentSum;\n        }\n        result.Add(currentMax);\n        result.Add(currentSum);\n\
    \        result.Add(currentSumOfSquares);\n        result.Add(currentSumOfProducts);\n\
    \        result.Add(currentProduct);\n        result.Add(currentProductOfSquares);\n\
    \        result.Add(currentProductOfProducts);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long current = numbers.First();\n        long rollingMax = current;\n\
    \        long rollingMaxIndex = -1;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            long next = numbers[i];\n            if (next > rollingMax)\
    \ {\n                rollingMax = next;\n                rollingMaxIndex = i;\n\
    \            }\n            if (next == max) {\n                result.Add(rollingMax);\n\
    \                rollingMax = current;\n                rollingMaxIndex = i;\n\
    \            }\n            current = next;\n        }\n        result.Add(rollingMax);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long maxIndex = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = numbers.First();\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                max =\
    \ number;\n                maxIndex = currentMaxIndex;\n            }\n      \
    \      currentMax = number;\n            currentMaxIndex++;\n        }\n     \
    \   result.Add(max);\n        result.Add(maxIndex);\n        return result;",
  "        var rollingMax = new List<long>();\n        var currentMax = numbers.First();\n\
    \        var currentMaxIndex = 0;\n        var currentMaxValue = numbers.First();\n\
    \        rollingMax.Add(currentMax);\n        numbers.Remove(currentMax);\n  \
    \      foreach (var number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = rollingMax.Count;\n\
    \                currentMaxValue = number;\n            }\n            rollingMax.Add(number);\n\
    \        }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexInResult = -1;\n\
    \        long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult",
  "        var result = new List<long>();\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxCount = 1;\n        foreach (var number in numbers) {\n\
    \            if (number > rollingMaxValue) {\n                rollingMax.Add(rollingMaxValue);\n\
    \                rollingMaxValue = number;\n                rollingMaxCount =\
    \ 1;\n            } else {\n                rollingMaxCount++;\n            }\n\
    \            if (rollingMaxCount > numbers.Count) {\n                result.Add(rollingMaxValue);\n\
    \                rollingMaxValue = number;\n                rollingMaxCount =\
    \ 1;\n                rollingMaxIndex++;\n            }\n        }\n        if\
    \ (rollingMaxCount > numbers.Count) {\n            result.Add(rollingMaxValue);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentSum\
    \ = 0;\n        long sum = 0;\n        foreach (long number in numbers) {\n  \
    \          currentSum += number;\n            if (currentSum > max) {\n      \
    \          max = currentSum;\n                currentMax = number;\n         \
    \   }\n            sum += number;\n        }\n        result.Add(currentMax);\n\
    \        result.Add(max);\n        result.Add(sum);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValue = numbers[0];\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMax", "        List<long> result = new List<long>();\n  \
    \      long max = numbers.Max();\n        long currentMax = max;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxValue = numbers.First();\n   \
    \     for (int i = 0; i < numbers.Count; i++) {\n            long value = numbers[i];\n\
    \            if (value > currentMax) {\n                currentMax = value;\n\
    \                currentMaxIndex = i;\n                currentMaxValue = numbers[i];\n\
    \            }\n        }\n        result.Add(currentMaxValue);\n        for (int\
    \ i = currentMaxIndex + 1; i < numbers.Count; i++) {\n            long value =\
    \ numbers[i];\n            if (value > currentMax) {\n                currentMax\
    \ = value;\n                currentMaxIndex = i;\n                currentMaxValue\
    \ = numbers[i];\n            }\n            result.Add(currentMaxValue);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            result.Insert(currentMaxIndex, currentMax);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = max;\n      \
    \          currentMaxIndex = result.Count;\n            }\n            else if\
    \ (number == max) {\n                currentMax = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            else if (number < max) {\n     \
    \           result.Add(max);\n                max = number;\n                currentMax\
    \ = max;\n                currentMaxIndex = result.Count;\n            }\n   \
    \     }\n        result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n   \
    \     long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 = 0;\n\
    \        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5 =\
    \ 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 10;\n     \
    \       }\n            result.Add(currentMax);\n        }\n        return result;",
  "        var result = new List<long>();\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        rollingMax.Add(rollingMaxValue);\n        numbers.RemoveAt(0);\n    \
    \    foreach (var number in numbers) {\n            if (number > rollingMaxValue)\
    \ {\n                rollingMaxValue = number;\n                rollingMax.Add(rollingMaxValue);\n\
    \            }\n            else {\n                rollingMaxValue = rollingMax[rollingMaxIndex];\n\
    \                rollingMaxIndex++;\n                rollingMax.Add(rollingMaxValue);\n\
    \            }\n            result.Add(rollingMaxValue);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long cur = 0;\n        long maxIndex = 0;\n        foreach (long\
    \ n in numbers) {\n            if (n > max) {\n                max = n;\n    \
    \            maxIndex = result.Count;\n            }\n            long index =\
    \ maxIndex - 1;\n            while (index >= 0) {\n                if (result[index]\
    \ > n) {\n                    result[index] = n;\n                    break;\n\
    \                }\n                index--;\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long current = 0;\n        long last = 0;\n        foreach\
    \ (long number in numbers) {\n            current = number;\n            if (number\
    \ > max) {\n                max = number;\n            }\n            if (number\
    \ == max) {\n                result.Add(last);\n                last = current;\n\
    \            }\n        }\n        result.Add(last);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = numbers.First();\n        long previous = numbers.First();\n     \
    \   long currentMax = numbers.First();\n        long previousMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > current)\
    \ {\n                currentMax = current;\n                current = 0;\n   \
    \         }\n            if (number > previous) {\n                previousMax\
    \ = previous;\n                previous = 0;\n            }\n            if (number\
    \ > currentMax - previousMax) {\n                currentMax = number;\n      \
    \      }\n            if (number > previousMax - currentMax) {\n             \
    \   previousMax = number;\n            }\n            current = number;\n    \
    \        previous = number;\n            result.Add(number);\n        }\n    \
    \    return result;", "        var rollingMax = new List<long>();\n        var\
    \ rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n     \
    \   var rollingMaxIndexes = new List<int>();\n        rollingMaxIndexes.Add(0);\n\
    \        while (rollingMaxIndex < numbers.Count) {\n            var rollingMaxValue\
    \ = numbers[rollingMaxIndex];\n            var rollingMaxIndexes = new List<int>();\n\
    \            rollingMaxIndexes.Add(rollingMaxIndex);\n            while (rollingMaxIndex\
    \ < numbers.Count && numbers[rollingMaxIndex] < rollingMaxValue) {\n         \
    \       rollingMaxIndexes.Add(rollingMaxIndex);\n                rollingMaxIndex++;\n\
    \            }\n            rollingMaxIndexes.Add(rollingMaxIndex - 1);\n    \
    \        rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n            rollingMaxIndexes.Add(rollingMaxIndex\
    \ - 1);\n            rollingMaxIndex++;\n"]
stop_tokens:
- "\n    }\n"
