name: HumanEval_9_rolling_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>\
  \ RollingMax(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
  \    }\n\n}\n"
completions: ["        var result = new List<long>();\n        var rollingMax = numbers.Max();\n\
    \        var rollingMaxIndex = -1;\n        var rollingMaxValue = rollingMax;\n\
    \        var rollingMaxIndexes = new List<int>();\n        var rollingMaxIndexesCount\
    \ = numbers.Count;\n        var rollingMaxIndexesIndex = 0;\n        var rollingMaxIndexesIndexCount\
    \ = 0;\n        var rollingMaxIndexesIndexCountMax = numbers.Count - 1;\n    \
    \    while (rollingMaxIndexesIndexCount < rollingMaxIndexesIndexCountMax) {\n\
    \            rollingMaxIndexesIndexCount++;\n            rollingMaxIndexesIndex++;\n\
    \            if (rollingMaxIndexesIndex == rollingMaxIndexesCount) {\n       \
    \         rollingMaxIndexesIndex = 0;\n                rollingMaxIndexesIndexCount++;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex = 0;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesIndexCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax--;\n\
    \            }\n            if (rollingMaxIndexesIndex == rollingMaxIndexesCountMax)\
    \ {\n                rollingMaxIndexesIndex++;\n                rollingMaxIndexesIndexCountMax",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   foreach (long number in numbers) {\n            currentSum += number;\n  \
    \          if (currentSum > max) {\n                max = currentSum;\n      \
    \          currentMax = number;\n            }\n            sum += number;\n \
    \           if (sum > currentMax) {\n                currentMax = sum;\n     \
    \           currentSum = number;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n            }\n            if (number ==\
    \ currentMaxValue) {\n                currentMaxIndex++;\n            }\n    \
    \        result.Add(number);\n        }\n        result.Add(max);\n        result.Add(currentMax);\n\
    \        result.Add(currentMaxIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long currentMax =\
    \ 0;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n  \
    \      long currentSumOfSquareOfSum = 0;\n        long currentSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSum = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSum = 0;\n\
    \        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares = 0;\n\
    \        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum =\
    \ 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        long currentSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long currentMax = 0;\n        long currentSum = 0;\n     \
    \   long currentCount = 0;\n        foreach (long number in numbers) {\n     \
    \       currentSum += number;\n            if (currentSum > max) {\n         \
    \       max = currentSum;\n                currentMax = currentCount;\n      \
    \      }\n            currentCount++;\n        }\n        result.Add(max);\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long maxValue = numbers.Max();\n        long currentMax = maxValue;\n   \
    \     long currentSum = 0;\n        long currentCount = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            currentCount += 1;\n            currentSumOfSquares +=\
    \ number * number;\n            if (currentCount > 1) {\n                currentMax\
    \ = Math.Max(currentMax, currentSum);\n                currentSum = 0;\n     \
    \           currentCount = 0;\n                currentSumOfSquares = 0;\n    \
    \        }\n            if (currentCount == 1) {\n                result.Add(currentMax);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInResult\
    \ = -1;\n        long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ current = 0;\n        long last = 0;\n        foreach (long number in numbers)\
    \ {\n            current = number;\n            if (number > max) {\n        \
    \        max = number;\n            }\n            if (number == max) {\n    \
    \            result.Add(last);\n            }\n            last = current;\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = numbers.First();\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMax) {\n       \
    \         currentMax = number;\n            }\n            if (number == currentMax)\
    \ {\n                result.Add(number);\n            }\n            else {\n\
    \                max = Math.Max(max, currentMax);\n                result.Add(max);\n\
    \                currentMax = number;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        long currentMax = 0;\n        long currentSum = 0;\n        long\
    \ sum = 0;\n        foreach (long number in numbers) {\n            currentSum\
    \ += number;\n            if (currentSum > max) {\n                max = currentSum;\n\
    \            }\n            if (currentSum == max) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            cur = n;\n            while (cur > 0) {\n\
    \                result.Add(cur);\n                cur = cur - 1;\n          \
    \  }\n            max = Math.Max(max, n);\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = number;\n   \
    \             currentMaxIndex = result.Count;\n            }\n            else\
    \ if (number == max) {\n                currentMax = number;\n               \
    \ currentMaxIndex = result.Count;\n            }\n            else if (number\
    \ < max) {\n                result.Add(number);\n            }\n        }\n  \
    \      result.Add(max);\n        result.Add(currentMax);\n        result.Add(currentMaxIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long maxValue = numbers.Max();\n        long currentMax = maxValue;\n  \
    \      long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.Count;\n\
    \        long currentMaxIndexInResult = 0;\n        long currentMaxIndexInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResult = 0;\n        long\
    \ currentMaxIndexInResultInResultInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentSum = 0;\n        long sum = 0;\n     \
    \   foreach (long number in numbers) {\n            sum += number;\n         \
    \   if (sum > currentSum) {\n                currentSum = sum;\n             \
    \   currentMax = number;\n            }\n            if (sum == currentSum) {\n\
    \                result.Add(currentMax);\n                currentMax = 0;\n  \
    \              currentSum = 0;\n            }\n        }\n        if (currentMax\
    \ != 0) {\n            result.Add(currentMax);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long maxValue = numbers.First();\n\
    \        long currentMax = maxValue;\n        long currentMaxIndex = -1;\n   \
    \     long currentMaxIndexInResult = -1;\n        bool isMax = true;\n       \
    \ foreach (long number in numbers) {\n            if (number > currentMax) {\n\
    \                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \                currentMaxIndexInResult = currentMaxIndex;\n                isMax\
    \ = true;\n            }\n            else if (number == currentMax) {\n     \
    \           currentMaxIndexInResult++;\n            }\n            else {\n  \
    \              isMax = false;\n            }\n            if (isMax) {\n     \
    \           result.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = numbers.Max();\n\
    \        long currentMax = max;\n        long currentMaxIndex = 0;\n        long\
    \ currentMaxValue = numbers[0];\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueValue = numbers[currentMaxValueIndex];\n        long\
    \ currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n       \
    \ long currentMaxValueValueValue = numbers[currentMaxValueValueIndex];\n     \
    \   long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n\
    \        long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n\
    \        long currentMaxValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValue);\n\
    \        long currentMaxValueValueValueValue = numbers[currentMaxValueValueValueIndex];\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(current",
  "        List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                result.Add(currentMax);\n    \
    \            max = number;\n                currentMax = number;\n           \
    \     currentMaxIndex = numbers.IndexOf(number);\n            }\n        }\n \
    \       result.Add(currentMax);\n        return result;", "        var rollingMax\
    \ = new List<long>();\n        var rollingMaxIndex = 0;\n        var rollingMaxValue\
    \ = numbers.First();\n        rollingMax.Add(rollingMaxValue);\n        foreach\
    \ (var number in numbers) {\n            if (number > rollingMaxValue) {\n   \
    \             rollingMaxValue = number;\n                rollingMax.Add(rollingMaxValue);\n\
    \                rollingMaxIndex++;\n            }\n            else {\n     \
    \           rollingMaxValue = rollingMax[rollingMaxIndex];\n            }\n  \
    \      }\n        return rollingMax;", "        List<long> result = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        long currentSumOfSquares = 0;\n       \
    \ long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSum", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        long currentMaxValue = numbers[0];\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueValue = currentMaxValue;\n\
    \        long currentMaxValueValueIndex = numbers.IndexOf(currentMaxValueValue);\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValueIndex;\n                currentMaxValue = currentMaxValueValue;\n\
    \                currentMaxValueIndex = currentMaxValueValueIndex;\n         \
    \       currentMaxValue = currentMaxValueValue;\n            }\n            if\
    \ (number > max) {\n                max = number;\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValueIndex;\n       \
    \         currentMaxValue = currentMaxValueValue;\n                currentMaxValueIndex\
    \ = currentMaxValueValueIndex;\n                currentMaxValue = currentMaxValueValue;\n\
    \            }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
