language: cs
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1su2123s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        long level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            else if (c == ')') {\n                in_paren = false;\n\
    \                level--;\n            }\n            else if (in_paren) {\n \
    \               sb.Append(c);\n            }\n        }\n        string s = sb.ToString();\n\
    \        char[] chars = s.ToCharArray();\n        foreach (char c in chars) {\n\
    \            if (c == '(') {\n                level++;\n            }\n      \
    \      else if (c == ')') {\n                level--;\n            }\n       \
    \ }\n        levels.Add(level);\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdgx8tst0.cs(23,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppg4vvuu4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Count - 1;\n      \
    \          if (level_of_nesting > level) {\n                    levels.Add(level_of_nesting);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplvmzback.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count > 0 && stack.Peek() == level) {\n\
    \                    levels.Add(level);\n                }\n            } else\
    \ if (c == ' ') {\n                if (stack.Count > 0) {\n                  \
    \  levels.Add(level);\n                }\n            }\n        }\n        if\
    \ (stack.Count > 0) {\n            levels.Add(level);\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppctu4j_6.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long popped = stack.Pop();\n                if (popped\
    \ == level) {\n                    result.Add(level);\n                }\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfctzjnjo.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ levels_stack = new Stack<long>();\n        long level = 0;\n        bool in_paren\
    \ = false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                levels_stack.Push(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (levels_stack.Count > level) {\n             \
    \       levels.Add(levels_stack.Pop());\n                }\n                in_paren\
    \ = false;\n            } else if (in_paren) {\n                level++;\n   \
    \         }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66566c2dda8043d1a60768ca9b5bf82b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66566c2dda8043d1a60768ca9b5bf82b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n            }\n            sb.Append(c);\n        }\n        long level\
    \ = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfm1tgo9.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpdfm1tgo9.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        bool in_group = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.Add(level);\n            } else if (c == ')') {\n              \
    \  in_paren = false;\n                level = (long)stack.Pop();\n           \
    \ } else if (c == '(') {\n                in_group = true;\n            } else\
    \ if (c == ')') {\n                in_group = false;\n            } else if (in_group)\
    \ {\n                level++;\n            } else if (in_paren) {\n          \
    \      level--;\n            }\n            levels.Add(level);\n        }\n  \
    \      return levels;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdpc0drr8.cs(23,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool is_open =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                is_open = true;\n                stack.Add(level);\n    \
    \        } else if (c == ')') {\n                is_open = false;\n          \
    \      level = (stack.Count > 0) ? stack.Pop() : -1;\n            } else if (is_open)\
    \ {\n                level++;\n            }\n            levels.Add(level);\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3iy5rqld.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long new_level = stack.Pop();\n                if\
    \ (new_level > level) {\n                    levels[levels.Count - 1] = new_level;\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1f8ylpfc.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.RemoveAt(stack.Count - 1);\n\
    \            } else if (c == ' ') {\n                level = 0;\n            }\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphcwz6awl.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmphcwz6awl.cs(27,27): error CS1061: ''Stack<long>'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''Stack<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            } else if (c == ' ') {\n                if (level\
    \ > 0) {\n                    levels.Add(stack.Count);\n                }\n  \
    \          }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnknclb14.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                if (level > 0)\n                    stack.Pop();\n\
    \            }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ehcddn0.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            } else if (c == ' ') {\n                if (level\
    \ == 0) {\n                    levels.Add(stack.Count);\n                }\n \
    \           }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpurbi50_l.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long paren_level\
    \ = 0;\n        bool in_paren = false;\n        bool in_bracket = false;\n   \
    \     bool in_brace = false;\n        bool in_curly_bracket = false;\n       \
    \ bool in_curly_brace = false;\n        bool in_square_bracket = false;\n    \
    \    bool in_square_brace = false;\n        bool in_curly_square_bracket = false;\n\
    \        bool in_curly_square_brace = false;\n        bool in_square_curly_bracket\
    \ = false;\n        bool in_square_curly_brace = false;\n        bool in_curly_square_curly_bracket\
    \ = false;\n        bool in_curly_square_curly_brace = false;\n        bool in_square_curly_square_bracket\
    \ = false;\n        bool in_square_curly_square_brace = false;\n        bool in_curly_square_curly_square_bracket\
    \ = false;\n        bool in_curly_square_curly_square_brace = false;\n       \
    \ bool in_square_curly_square_curly_bracket = false;\n        bool in_square_curly_square_curly_brace\
    \ = false;\n        bool in_curly_square_curly_square_curly_bracket = false;\n\
    \        bool in_curly_square_curly_square_curly_brace = false;\n        bool\
    \ in_square_curly_square_curly_square_bracket = false;\n        bool in_square_curly_square_curly_square_brace\
    \ = false;\n        bool in_curly_square_curly_square_curly_square_bracket = false;\n\
    \        bool in_curly_square_curly_square_curly_square_brace = false;\n     \
    \   bool in_square_curly_square_curly_square_curly_bracket = false;\n        bool\
    \ in_square_curly_square_curly_square_curly_brace = false;\n        bool in_curly_square_curly_square_curly_square_curly_bracket\
    \ = false;\n        bool in_square_curly_square_curly_square_curly_brace = false;\n\
    \        bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n\
    \        bool in_square_curly_square_curly_square_curly_brace = false;\n     \
    \   bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n  \
    \      bool in_square_curly_square_curly_square_curly_brace = false;\n       \
    \ bool in_curly_square_curly_square_curly_square_curly_bracket = false;\n    \
    \    bool in_square_curly_square\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw056uups.cs(53,36): error CS1002: ; expected

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Count > 0 ? stack.Pop()\
    \ : -1;\n                if (level_of_nesting > level) {\n                   \
    \ levels.Add(level);\n                }\n            }\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy24dner4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long new_level = stack.Pop();\n                if\
    \ (new_level > level) {\n                    levels.Add(new_level);\n        \
    \        }\n            }\n        }\n        return levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg420s4i7.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long popped = stack.Pop();\n\
    \                if (popped > level) {\n                    result.Add(level);\n\
    \                }\n                level = popped;\n            } else {\n  \
    \              level++;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpck_i2qj6.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool has_opening_paren\
    \ = false;\n        bool has_closing_paren = false;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n                has_opening_paren = true;\n       \
    \     }\n            else if (c == ')') {\n                level--;\n        \
    \        if (level == 0)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -1)\n                   \
    \ throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -2)\n                    throw new Exception(\"Unbalanced parenthesis\");\n\
    \                else if (level == -3)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -4)\n          \
    \          throw new Exception(\"Unbalanced parenthesis\");\n                else\
    \ if (level == -5)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -6)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -7)\n          \
    \          throw new Exception(\"Unbalanced parenthesis\");\n                else\
    \ if (level == -8)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -9)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -10)\n         \
    \           throw new Exception(\"Unbalanced parenthesis\");\n               \
    \ else if (level == -11)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -12)\n                  \
    \  throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -13)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -14)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -15)\n         \
    \           throw new Exception(\"Unbalanced parenthesis\");\n               \
    \ else if (level == -16)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -17)\n                  \
    \  throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -18)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -19)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level == -20)\n         \
    \           throw new Exception(\"Unbalanced parenthesis\");\n               \
    \ else if (level == -21)\n                    throw new Exception(\"Unbalanced\
    \ parenthesis\");\n                else if (level == -22)\n                  \
    \  throw new Exception(\"Unbalanced parenthesis\");\n                else if (level\
    \ == -23)\n                    throw new Exception(\"Unbalanced parenthesis\"\
    );\n                else if (level == -24)\n                    throw new Exception(\"\
    Unbalanced parenthesis\");\n                else if (level\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_qebbdj4.cs(78,31): error CS1026: ) expected

    /tmp/tmp_qebbdj4.cs(78,31): error CS1525: Invalid expression term ''}''

    /tmp/tmp_qebbdj4.cs(78,31): error CS1002: ; expected

    /tmp/tmp_qebbdj4.cs(80,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_qebbdj4.cs(86,2): error CS1513: } expected

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level_count\
    \ = 0;\n        bool in_paren = false;\n        bool in_paren_group = false;\n\
    \        bool in_paren_group_with_paren = false;\n        bool in_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren = false;\n\
    \        bool in_paren_group_with_paren_group_with_paren_group = false;\n    \
    \    bool in_paren_group_with_paren_group_with_paren_group_with_paren = false;\n\
    \        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglqispk2.cs(30,14): error CS0128: A local variable or function named ''in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren''
    is already defined in this scope

    /tmp/tmpglqispk2.cs(33,14): error CS0128: A local variable or function named ''in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren''
    is already defined in this scope

    /tmp/tmpglqispk2.cs(34,14): error CS0128: A local variable or function named ''in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren''
    is already defined in this scope

    /tmp/tmpglqispk2.cs(35,14): error CS0128: A local variable or function named ''in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren''
    is already defined in this scope

    /tmp/tmpglqispk2.cs(36,14): error CS0128: A local variable or function named ''in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren''
    is already defined in this scope

    /tmp/tmpglqispk2.cs(39,14): error CS0128: A local variable or function named ''in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren''
    is already defined in this scope

    /tmp/tmpglqispk2.cs(17,14): warning CS0219: The variable ''level'' is assigned
    but its value is never used

    /tmp/tmpglqispk2.cs(18,14): warning CS0219: The variable ''level_count'' is assigned
    but its value is never used

    /tmp/tmpglqispk2.cs(19,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    /tmp/tmpglqispk2.cs(20,14): warning CS0219: The variable ''in_paren_group'' is
    assigned but its value is never used

    /tmp/tmpglqispk2.cs(21,14): warning CS0219: The variable ''in_paren_group_with_paren''
    is assigned but its value is never used

    /tmp/tmpglqispk2.cs('
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level--;\n            } else if (c == ' ') {\n   \
    \             level++;\n            } else if (c == '(' || c == ')') {\n     \
    \           level++;\n            } else if (c == '(') {\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n            } else\
    \ if (c == '(' || c == ')') {\n                level--;\n            }\n     \
    \       if (in_paren) {\n                level++;\n            }\n        }\n\
    \        levels.Add(level);\n        while (stack.Count > 0) {\n            levels.Add(stack.Pop());\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr3qb9yqw.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.Add(0);\n            } else if (c == ')') {\n                long level\
    \ = stack.Pop();\n                levels.Add(level);\n                in_paren\
    \ = false;\n            } else if (c == ' ') {\n                while (stack.Count\
    \ > 0) {\n                    long level = stack.Pop();\n                    levels.Add(level);\n\
    \                }\n            } else if (c == '(' || c == '[' || c == '{') {\n\
    \                sb.Append(c);\n            } else if (c == '}') {\n         \
    \       while (stack.Count > 0) {\n                    long level = stack.Pop();\n\
    \                    levels.Add(level);\n                }\n                sb.Append(c);\n\
    \            } else if (c == ']') {\n                while (stack.Count > 0) {\n\
    \                    long level = stack.Pop();\n                    levels.Add(level);\n\
    \                }\n                sb.Append(c);\n            } else if (c ==\
    \ ',') {\n                while (stack.Count > 0) {\n                    long\
    \ level = stack.Pop();\n                    levels.Add(level);\n             \
    \   }\n                sb.Append(c);\n            }\n        }\n        while\
    \ (stack.Count > 0) {\n            long level = stack.Pop();\n            levels.Add(level);\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgbg6q51b.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpgbg6q51b.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long paren_level\
    \ = 0;\n        bool in_paren = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       paren_level++;\n                stack.Add(level);\n            } else\
    \ if (c == ')') {\n                in_paren = false;\n                level--;\n\
    \                paren_level--;\n                while (paren_level > 0) {\n \
    \                   level--;\n                    paren_level--;\n           \
    \     }\n                stack.Pop();\n            } else if (c == ' ') {\n  \
    \              level++;\n            }\n        }\n        while (stack.Count\
    \ > 0) {\n            levels.Add(stack.Pop());\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphg4uhrck.cs(24,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmphg4uhrck.cs(19,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level--;\n            } else if (c == ' ' && in_paren)\
    \ {\n                level++;\n            }\n            if (level > 0) {\n \
    \               levels.Add(level);\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsrz27r4.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        bool in_group = false;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.Add(level);\n                level++;\n            }\n         \
    \   else if (c == ')') {\n                in_paren = false;\n                level--;\n\
    \            }\n            else if (c == ' ') {\n                if (in_paren)\
    \ {\n                    level++;\n                }\n            }\n        \
    \    else if (c == '(') {\n                in_group = true;\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               in_group = false;\n                level--;\n            }\n \
    \           else if (c == ' ') {\n                if (in_group) {\n          \
    \          level++;\n                }\n            }\n        }\n        if (stack.Count\
    \ > 0) {\n            levels = stack;\n        }\n        return levels;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk546d50u.cs(23,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpk546d50u.cs(37,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpk546d50u.cs(51,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.Stack<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1su2123s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            }\n            else if (c == ')') {\n    \
    \            in_paren = false;\n                level -= stack.Pop();\n      \
    \      }\n            else if (in_paren) {\n                level++;\n       \
    \     }\n        }\n        levels.Add(level);\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvpek9en9.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Push(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  long popped = stack.Pop();\n                if (popped == level) {\n      \
    \              level--;\n                }\n            }\n        }\n       \
    \ result.Add(level);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8168bc9c91204e29bb12f1248546e1b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8168bc9c91204e29bb12f1248546e1b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        var paren_stack = new Stack<long>();\n        var paren_levels\
    \ = new List<long>();\n        foreach (var paren in paren_string.Split(' '))\n\
    \        {\n            if (paren.Length > 0)\n            {\n               \
    \ paren_stack.Add(paren.Length);\n            }\n            else\n          \
    \  {\n                paren_levels.Add(paren_stack.Last());\n                paren_stack.RemoveAt(paren_stack.Count\
    \ - 1);\n            }\n        }\n        return paren_levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpula_56ml.cs(21,29): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpula_56ml.cs(26,29): error CS1061: ''Stack<long>'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''Stack<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            }\n            else if (c == ')') {\n    \
    \            level--;\n                long new_level = stack.Pop();\n       \
    \         if (level > new_level) {\n                    levels.Add(level);\n \
    \               }\n                in_paren = false;\n            }\n        \
    \    else if (in_paren) {\n                level++;\n            }\n        }\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5waa0zl5.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \     in_paren = true;\n            } else if (c == ')') {\n                level--;\n\
    \                in_paren = false;\n            } else if (c == ' ' && in_paren)\
    \ {\n                level++;\n            }\n            if (level > 0 && level\
    \ < stack.Count) {\n                levels.Add(stack[stack.Count - level]);\n\
    \            }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy1o26iyn.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpy1o26iyn.cs(31,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Stack<long>''

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long popped = stack.Pop();\n\
    \                if (popped > level) {\n                    result.Add(level);\n\
    \                }\n                level = popped;\n            } else {\n  \
    \              level++;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpck_i2qj6.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        var paren_stack = new Stack<long>();\n        var paren_levels\
    \ = new List<long>();\n        paren_levels.Add(0);\n        paren_stack.Add(0);\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            paren_levels[paren_stack.Last()] = paren_levels[paren_stack.Last()]\
    \ + 1;\n                paren_stack.Add(paren_stack.Last());\n            }\n\
    \            else if (c == ')') {\n                paren_levels[paren_stack.Last()]\
    \ = Math.Max(paren_levels[paren_stack.Last()], paren_stack.Last() - 1);\n    \
    \            paren_stack.RemoveAt(paren_stack.Last());\n            }\n      \
    \  }\n        return paren_levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm6mwt4pt.cs(18,21): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpm6mwt4pt.cs(21,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm6mwt4pt.cs(21,65): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm6mwt4pt.cs(22,29): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpm6mwt4pt.cs(25,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm6mwt4pt.cs(25,74): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm6mwt4pt.cs(26,29): error CS1061: ''Stack<long>'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''Stack<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool has_opening_paren\
    \ = false;\n        bool has_closing_paren = false;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                has_opening_paren\
    \ = true;\n                stack.Add(level);\n            } else if (c == ')')\
    \ {\n                has_closing_paren = true;\n                long level_of_nesting\
    \ = stack.Pop();\n                if (level_of_nesting > level) {\n          \
    \          level = level_of_nesting;\n                }\n            } else if\
    \ (c == ' ') {\n                if (has_opening_paren) {\n                   \
    \ level++;\n                } else if (has_closing_paren) {\n                \
    \    level--;\n                }\n            }\n        }\n        levels.Add(level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7mom2l7m.cs(23,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool inParen =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                inParen = true;\n                stack.Add(level);\n    \
    \            level++;\n            }\n            if (c == ')') {\n          \
    \      inParen = false;\n                level--;\n            }\n           \
    \ if (inParen) {\n                level++;\n            }\n        }\n       \
    \ foreach (long l in stack) {\n            levels.Add(l);\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pbpdmng.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppg4vvuu4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                level -= stack.Pop();\n    \
    \            level += 1;\n                in_paren = false;\n            } else\
    \ if (c == ' ') {\n                level += 1;\n            } else if (c == '('\
    \ || c == '[' || c == '{') {\n                level += 1;\n            }\n   \
    \         if (in_paren) {\n                level += 1;\n            }\n      \
    \  }\n        level -= stack.Pop();\n        level += 1;\n        levels.Add(level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnft3ftpa.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               level--;\n                if (level == 0)\n                  \
    \  levels.Add(stack.Count);\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4lm3n9wo.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlrxivr4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  long top = stack.Pop();\n                if (top > level) {\n             \
    \       result.Add(level);\n                }\n                level = top;\n\
    \            } else {\n                level--;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf563fo6z.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1su2123s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long max_level\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \ } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0)\n                    max_level = stack.Pop();\n                else\n\
    \                    stack.Push(level);\n            }\n        }\n        levels.Add(max_level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo0wfbs_x.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            } else if (c == ' ') {\n                level\
    \ = 0;\n            }\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgpx_d79.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long paren_level\
    \ = 0;\n        bool in_paren = false;\n        bool in_brace = false;\n     \
    \   bool in_brace2 = false;\n        bool in_brace3 = false;\n        bool in_brace4\
    \ = false;\n        bool in_brace5 = false;\n        bool in_brace6 = false;\n\
    \        bool in_brace7 = false;\n        bool in_brace8 = false;\n        bool\
    \ in_brace9 = false;\n        bool in_brace10 = false;\n        bool in_brace11\
    \ = false;\n        bool in_brace12 = false;\n        bool in_brace13 = false;\n\
    \        bool in_brace14 = false;\n        bool in_brace15 = false;\n        bool\
    \ in_brace16 = false;\n        bool in_brace17 = false;\n        bool in_brace18\
    \ = false;\n        bool in_brace19 = false;\n        bool in_brace20 = false;\n\
    \        bool in_brace21 = false;\n        bool in_brace22 = false;\n        bool\
    \ in_brace23 = false;\n        bool in_brace24 = false;\n        bool in_brace25\
    \ = false;\n        bool in_brace26 = false;\n        bool in_brace27 = false;\n\
    \        bool in_brace28 = false;\n        bool in_brace29 = false;\n        bool\
    \ in_brace30 = false;\n        bool in_brace31 = false;\n        bool in_brace32\
    \ = false;\n        bool in_brace33 = false;\n        bool in_brace34 = false;\n\
    \        bool in_brace35 = false;\n        bool in_brace36 = false;\n        bool\
    \ in_brace37 = false;\n        bool in_brace38 = false;\n        bool in_brace39\
    \ = false;\n        bool in_brace40 = false;\n        bool in_brace41 = false;\n\
    \        bool in_brace42 = false;\n        bool in_brace43 = false;\n        bool\
    \ in_brace44 = false;\n        bool in_brace45 = false;\n        bool in_brace46\
    \ = false;\n        bool in_brace47 = false;\n        bool in_brace48 = false;\n\
    \        bool in_brace49 = false;\n        bool in_brace50 = false;\n        bool\
    \ in_brace51 = false;\n        bool in_brace52 = false;\n        bool in_brace53\
    \ = false;\n        bool in_brace54 = false;\n        bool in_brace55 = false;\n\
    \        bool in_brace56 = false;\n        bool in_brace57 = false;\n        bool\
    \ in_brace58 = false;\n        bool in_brace59 = false;\n        bool in_brace60\
    \ = false;\n        bool in_brace61 = false;\n        bool in_brace62 = false;\n\
    \        bool in_brace63 = false;\n        bool in_brace64 = false;\n        bool\
    \ in_brace65 = false;\n        bool in_brace66\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpok6oadh8.cs(85,24): error CS1002: ; expected

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        var paren_stack = new Stack<long>();\n        var paren_levels\
    \ = new List<long>();\n        var paren_level = 0;\n        var paren_level_count\
    \ = 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                paren_stack.Add(paren_level);\n                paren_level_count++;\n\
    \            } else if (c == ')') {\n                paren_level_count--;\n  \
    \              if (paren_level_count == 0) {\n                    paren_level_count\
    \ = paren_stack.Pop();\n                    paren_level_count--;\n           \
    \     }\n                paren_level_count++;\n                paren_levels.Add(paren_level_count);\n\
    \            }\n        }\n        return paren_levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprglhs8sz.cs(21,29): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmprglhs8sz.cs(26,41): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                level -= stack.Pop();\n \
    \           } else if (c == ' ') {\n                level++;\n            }\n\
    \            levels.Add(level);\n        }\n        return levels;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxurkg3pj.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.Add(0);\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                long level = stack.Pop();\n                while (level\
    \ > 0) {\n                    level--;\n                    stack.Pop();\n   \
    \             }\n                levels.Add(level);\n            } else if (c\
    \ == ' ') {\n                if (in_paren) {\n                    sb.Append(c);\n\
    \                }\n            } else {\n                sb.Append(c);\n    \
    \        }\n        }\n        string s = sb.ToString();\n        List<long> result\
    \ = new List<long>();\n        foreach (char c in s) {\n            if (c == '(')\
    \ {\n                result.Add(0);\n            } else if (c == ')') {\n    \
    \            long level = stack.Pop();\n                while (level > 0) {\n\
    \                    level--;\n                    stack.Pop();\n            \
    \    }\n                result.Add(level);\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwuy9h9nd.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_group = false;\n        bool\
    \ in_quote = false;\n        bool in_escape = false;\n        bool in_group_bracket\
    \ = false;\n        bool in_group_escape = false;\n        bool in_group_quote\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool in_group_backslash = false;\n        bool in_group_backtick\
    \ = false;\n        bool \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpydl13dfa.cs(79,13): error CS1001: Identifier expected

    /tmp/tmpydl13dfa.cs(79,13): error CS1002: ; expected

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \     in_paren = true;\n            } else if (c == ')') {\n                level--;\n\
    \                in_paren = false;\n            } else if (c == ' ') {\n     \
    \           if (in_paren) {\n                    level++;\n                }\n\
    \            } else {\n                throw new Exception(\"Unexpected character\
    \ \" + c + \" at position \" + paren_string.IndexOf(c));\n            }\n    \
    \    }\n        stack.Pop();\n        levels.Add(level);\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0rkzhzpw.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                level = (long)stack.Pop();\n\
    \                levels.Add(level);\n            }\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz74lne00.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Count > 0 ? stack.Peek()\
    \ : 0L;\n                if (level > level_of_nesting) {\n                   \
    \ levels.Add(level);\n                }\n                stack.Pop();\n      \
    \      }\n        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0p3pexfy.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            }\n            else if (c == ')') {\n    \
    \            level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.RemoveAt(stack.Count - 1);\n\
    \            }\n            else if (in_paren) {\n                level++;\n \
    \           }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaxvablzq.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpaxvablzq.cs(30,27): error CS1061: ''Stack<long>'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''Stack<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            }\n            else if (c == ')') {\n    \
    \            level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          }\n            else if (in_paren) {\n                level++;\n   \
    \         }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwfhxsru.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmplwfhxsru.cs(30,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level_count\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level_count++;\n     \
    \       } else if (c == ')') {\n                level_count--;\n             \
    \   if (level_count == 0) {\n                    level_count = stack.Count;\n\
    \                    level = (long)stack.Pop();\n                }\n         \
    \   }\n        }\n        levels.Add(level);\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplqwidvnd.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                level = (long)stack.Pop();\n\
    \                levels.Add(level);\n            }\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz74lne00.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               level--;\n                if (level == 0)\n                  \
    \  levels.Add(stack.Count);\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4lm3n9wo.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_bracket = false;\n        bool\
    \ in_brace = false;\n        bool in_curly_brace = false;\n        bool in_curly_bracket\
    \ = false;\n        bool in_square_bracket = false;\n        bool in_square_brace\
    \ = false;\n        bool in_curly_square_brace = false;\n        bool in_curly_square_bracket\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n        bool in_square_curly_brace\
    \ = false;\n        bool in_square_curly_bracket = false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ncm4jni.cs(29,14): error CS0128: A local variable or function named ''in_square_curly_bracket''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(30,14): error CS0128: A local variable or function named ''in_square_curly_brace''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(31,14): error CS0128: A local variable or function named ''in_square_curly_bracket''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(32,14): error CS0128: A local variable or function named ''in_square_curly_brace''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(33,14): error CS0128: A local variable or function named ''in_square_curly_bracket''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(34,14): error CS0128: A local variable or function named ''in_square_curly_brace''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(35,14): error CS0128: A local variable or function named ''in_square_curly_bracket''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(36,14): error CS0128: A local variable or function named ''in_square_curly_brace''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(37,14): error CS0128: A local variable or function named ''in_square_curly_bracket''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(38,14): error CS0128: A local variable or function named ''in_square_curly_brace''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(39,14): error CS0128: A local variable or function named ''in_square_curly_bracket''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(40,14): error CS0128: A local variable or function named ''in_square_curly_brace''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(41,14): error CS0128: A local variable or function named ''in_square_curly_bracket''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(42,14): error CS0128: A local variable or function named ''in_square_curly_brace''
    is already defined in this scope

    /tmp/tmp0ncm4jni.cs(43,14): err'
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long popped = stack.Pop();\n                if (level\
    \ > popped) {\n                    levels.Add(level);\n                }\n   \
    \         } else {\n                level++;\n            }\n        }\n     \
    \   return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkoln351.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_group = false;\n        bool\
    \ in_quote = false;\n        bool in_group2 = false;\n        bool in_group3 =\
    \ false;\n        bool in_group4 = false;\n        bool in_group5 = false;\n \
    \       bool in_group6 = false;\n        bool in_group7 = false;\n        bool\
    \ in_group8 = false;\n        bool in_group9 = false;\n        bool in_group10\
    \ = false;\n        bool in_group11 = false;\n        bool in_group12 = false;\n\
    \        bool in_group13 = false;\n        bool in_group14 = false;\n        bool\
    \ in_group15 = false;\n        bool in_group16 = false;\n        bool in_group17\
    \ = false;\n        bool in_group18 = false;\n        bool in_group19 = false;\n\
    \        bool in_group20 = false;\n        bool in_group21 = false;\n        bool\
    \ in_group22 = false;\n        bool in_group23 = false;\n        bool in_group24\
    \ = false;\n        bool in_group25 = false;\n        bool in_group26 = false;\n\
    \        bool in_group27 = false;\n        bool in_group28 = false;\n        bool\
    \ in_group29 = false;\n        bool in_group30 = false;\n        bool in_group31\
    \ = false;\n        bool in_group32 = false;\n        bool in_group33 = false;\n\
    \        bool in_group34 = false;\n        bool in_group35 = false;\n        bool\
    \ in_group36 = false;\n        bool in_group37 = false;\n        bool in_group38\
    \ = false;\n        bool in_group39 = false;\n        bool in_group40 = false;\n\
    \        bool in_group41 = false;\n        bool in_group42 = false;\n        bool\
    \ in_group43 = false;\n        bool in_group44 = false;\n        bool in_group45\
    \ = false;\n        bool in_group46 = false;\n        bool in_group47 = false;\n\
    \        bool in_group48 = false;\n        bool in_group49 = false;\n        bool\
    \ in_group50 = false;\n        bool in_group51 = false;\n        bool in_group52\
    \ = false;\n        bool in_group53 = false;\n        bool in_group54 = false;\n\
    \        bool in_group55 = false;\n        bool in_group56 = false;\n        bool\
    \ in_group57 = false;\n        bool in_group58 = false;\n        bool in_group59\
    \ = false;\n        bool in_group60 = false;\n        bool in_group61 = false;\n\
    \        bool in_group62 = false;\n        bool in_group63 = false;\n        bool\
    \ in_group64 = false;\n        bool in_group65 = false;\n        bool \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t538swm.cs(85,13): error CS1001: Identifier expected

    /tmp/tmp1t538swm.cs(85,13): error CS1002: ; expected

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level--;\n            } else if (c == ' ') {\n   \
    \             if (in_paren) {\n                    level++;\n                }\n\
    \            }\n        }\n        stack.Pop();\n        levels.Add(level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe5mmu9dh.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count == 0) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm9vs1tj4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n                sb.Append(c);\n            } else if (c == ' ') {\n    \
    \            sb.Append(c);\n            } else {\n                sb.Append(c);\n\
    \                stack.Add(sb.Length);\n            }\n        }\n        long\
    \ level = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpejd3bbe7.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpejd3bbe7.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpejd3bbe7.cs(32,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long max_level\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \ } else if (c == ')') {\n                level--;\n                if (level\
    \ == 0)\n                    max_level = stack.Count;\n                else\n\
    \                    stack.Pop();\n            } else if (c == ' ') {\n      \
    \          level = 0;\n            }\n        }\n        levels.Add(max_level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpugk2xwqr.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_quote = false;\n        bool\
    \ in_escape = false;\n        bool in_escaped = false;\n        bool in_escaped_quote\
    \ = false;\n        bool in_escaped_escape = false;\n        bool in_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_quote = false;\n        bool in_escaped_escaped_escape\
    \ = false;\n        bool in_escaped_escaped_escaped = false;\n        bool in_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped = false;\n       \
    \ bool in_escaped_escaped_escaped_escaped = false;\n        bool in_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped = false;\n\
    \        bool in_escaped_escaped_escaped_escaped_escaped = false;\n        bool\
    \ in_escaped_escaped_escaped_escaped_escaped_quote = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped =\
    \ false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped\
    \ = false;\n        bool in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        \n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8vekexp.cs(30,14): error CS0128: A local variable or function named ''in_escaped_escaped_escaped_escaped''
    is already defined in this scope

    /tmp/tmpf8vekexp.cs(33,14): error CS0128: A local variable or function named ''in_escaped_escaped_escaped_escaped_escaped''
    is already defined in this scope

    /tmp/tmpf8vekexp.cs(36,14): error CS0128: A local variable or function named ''in_escaped_escaped_escaped_escaped_escaped_escaped''
    is already defined in this scope

    /tmp/tmpf8vekexp.cs(39,14): error CS0128: A local variable or function named ''in_escaped_escaped_escaped_escaped_escaped_escaped_escaped''
    is already defined in this scope

    /tmp/tmpf8vekexp.cs(42,14): error CS0128: A local variable or function named ''in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped''
    is already defined in this scope

    /tmp/tmpf8vekexp.cs(45,14): error CS0128: A local variable or function named ''in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote''
    is already defined in this scope

    /tmp/tmpf8vekexp.cs(46,14): error CS0128: A local variable or function named ''in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped''
    is already defined in this scope

    /tmp/tmpf8vekexp.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    /tmp/tmpf8vekexp.cs(19,14): warning CS0219: The variable ''in_quote'' is assigned
    but its value is never used

    /tmp/tmpf8vekexp.cs(20,14): warning CS0219: The variable ''in_escape'' is assigned
    but its value is never used

    /tmp/tmpf8vekexp.cs(21,14): warning CS0219: The variable ''in_escaped'' is assigned
    but its value is never used

    /tmp/tmpf8vekexp.cs(22,14): warning CS0219: The variable ''in_escaped_quote''
    is assigned but its value is never used

    /tmp/tmpf8vekexp.cs(23,14): warning CS0219: The variable ''in_escaped_escape''
    is assigned but its value is never used

    /tmp/tmpf8vekexp.cs(24,14): warning CS0219: The variable ''in_escap'
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \     in_paren = true;\n            } else if (c == ')') {\n                level--;\n\
    \                in_paren = false;\n            } else if (c == ' ') {\n     \
    \           if (in_paren) {\n                    level++;\n                }\n\
    \            } else {\n                throw new Exception(\"Unexpected character:\
    \ \" + c);\n            }\n        }\n        stack.Pop();\n        levels.Add(level);\n\
    \        while (stack.Count > 0) {\n            levels.Add(stack.Pop());\n   \
    \     }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu280sbhw.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                    in_paren = false;\n                }\n            } else\
    \ if (c == ' ') {\n                if (in_paren) {\n                    level--;\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqjrufzm6.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long new_level = stack.Pop();\n\
    \                if (new_level > level) {\n                    level = new_level;\n\
    \                }\n            }\n        }\n        result.Add(level);\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz70ieyfh.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                in_paren = false;\n        \
    \        level = (long)stack.Pop();\n            } else if (c == ' ') {\n    \
    \            level++;\n            }\n        }\n        levels.Add(level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1dusw7hy.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmp1dusw7hy.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                in_paren = false;\n        \
    \        level = (long)stack.Pop();\n                levels.Add(level);\n    \
    \        } else if (c == ' ') {\n                level++;\n            }\n   \
    \     }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkd04_r0f.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpkd04_r0f.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1su2123s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level_count\
    \ = 0;\n        bool in_paren = false;\n        bool in_paren_group = false;\n\
    \        bool in_paren_group_open = false;\n        bool in_paren_group_close\
    \ = false;\n        bool in_paren_group_open2 = false;\n        bool in_paren_group_close2\
    \ = false;\n        bool in_paren_group_open3 = false;\n        bool in_paren_group_close3\
    \ = false;\n        bool in_paren_group_open4 = false;\n        bool in_paren_group_close4\
    \ = false;\n        bool in_paren_group_open5 = false;\n        bool in_paren_group_close5\
    \ = false;\n        bool in_paren_group_open6 = false;\n        bool in_paren_group_close6\
    \ = false;\n        bool in_paren_group_open7 = false;\n        bool in_paren_group_close7\
    \ = false;\n        bool in_paren_group_open8 = false;\n        bool in_paren_group_close8\
    \ = false;\n        bool in_paren_group_open9 = false;\n        bool in_paren_group_close9\
    \ = false;\n        bool in_paren_group_open10 = false;\n        bool in_paren_group_close10\
    \ = false;\n        bool in_paren_group_open11 = false;\n        bool in_paren_group_close11\
    \ = false;\n        bool in_paren_group_open12 = false;\n        bool in_paren_group_close12\
    \ = false;\n        bool in_paren_group_open13 = false;\n        bool in_paren_group_close13\
    \ = false;\n        bool in_paren_group_open14 = false;\n        bool in_paren_group_close14\
    \ = false;\n        bool in_paren_group_open15 = false;\n        bool in_paren_group_close15\
    \ = false;\n        bool in_paren_group_open16 = false;\n        bool in_paren_group_close16\
    \ = false;\n        bool in_paren_group_open17 = false;\n        bool in_paren_group_close17\
    \ = false;\n        bool in_paren_group_open18 = false;\n        bool in_paren_group_close18\
    \ = false;\n        bool in_paren_group_open19 = false;\n        bool in_paren_group_close19\
    \ = false;\n        bool in_paren_group_open20 = false;\n        bool in_paren_group_close20\
    \ = false;\n        bool in_paren_group_open21 = false;\n        bool in_paren_group_close21\
    \ = false;\n        bool in_paren_group_open22 = false;\n        bool in_paren_group_close22\
    \ = false;\n        bool in_paren_group_open23 = false;\n        bool in_paren_group_close23\
    \ = false;\n        bool in_paren_\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsez8n387.cs(67,23): error CS1002: ; expected

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        bool in_square = false;\n        bool in_curly_bracket = false;\n\
    \        bool in_square_bracket = false;\n        bool in_curly_bracket2 = false;\n\
    \        bool in_square_bracket2 = false;\n        bool in_curly_bracket3 = false;\n\
    \        bool in_square_bracket3 = false;\n        bool in_curly_bracket4 = false;\n\
    \        bool in_square_bracket4 = false;\n        bool in_curly_bracket5 = false;\n\
    \        bool in_square_bracket5 = false;\n        bool in_curly_bracket6 = false;\n\
    \        bool in_square_bracket6 = false;\n        bool in_curly_bracket7 = false;\n\
    \        bool in_square_bracket7 = false;\n        bool in_curly_bracket8 = false;\n\
    \        bool in_square_bracket8 = false;\n        bool in_curly_bracket9 = false;\n\
    \        bool in_square_bracket9 = false;\n        bool in_curly_bracket10 = false;\n\
    \        bool in_square_bracket10 = false;\n        bool in_curly_bracket11 =\
    \ false;\n        bool in_square_bracket11 = false;\n        bool in_curly_bracket12\
    \ = false;\n        bool in_square_bracket12 = false;\n        bool in_curly_bracket13\
    \ = false;\n        bool in_square_bracket13 = false;\n        bool in_curly_bracket14\
    \ = false;\n        bool in_square_bracket14 = false;\n        bool in_curly_bracket15\
    \ = false;\n        bool in_square_bracket15 = false;\n        bool in_curly_bracket16\
    \ = false;\n        bool in_square_bracket16 = false;\n        bool in_curly_bracket17\
    \ = false;\n        bool in_square_bracket17 = false;\n        bool in_curly_bracket18\
    \ = false;\n        bool in_square_bracket18 = false;\n        bool in_curly_bracket19\
    \ = false;\n        bool in_square_bracket19 = false;\n        bool in_curly_bracket20\
    \ = false;\n        bool in_square_bracket20 = false;\n        bool in_curly_bracket21\
    \ = false;\n        bool in_square_bracket21 = false;\n        bool in_curly_bracket22\
    \ = false;\n        bool in_square_bracket22 = false;\n        bool in_curly_bracket23\
    \ = false;\n        bool in_square_bracket23 = false;\n        bool in_curly_bracket24\
    \ = false;\n        bool in_square_bracket24 = false;\n        bool in_curly_bracket25\
    \ = false;\n        bool in_square_bracket25\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqdmgkwga.cs(69,33): error CS1002: ; expected

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                in_paren = false;\n        \
    \        level = (long)stack.Pop();\n                levels.Add(level);\n    \
    \        } else if (c == ' ') {\n                level++;\n            }\n   \
    \     }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkd04_r0f.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpkd04_r0f.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n            }\n            sb.Append(c);\n        }\n        long level\
    \ = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfm1tgo9.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpdfm1tgo9.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level = (long)stack.Pop();\n                levels.Add(level);\n\
    \            } else if (c == ' ') {\n                if (in_paren) {\n       \
    \             level = (long)stack.Pop();\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr3ux9asd.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long new_level = stack[stack.Count - 1];\n      \
    \          if (new_level > level) {\n                    levels.Add(level);\n\
    \                }\n                stack.Pop();\n            } else if (c ==\
    \ ' ') {\n                level = 0;\n            }\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp03lolivk.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmp03lolivk.cs(24,34): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Stack<long>''

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlrxivr4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               level--;\n                if (stack.Count > 0) {\n           \
    \         result.Add(stack[stack.Count - 1]);\n                }\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz7dx_q71.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpz7dx_q71.cs(26,32): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Stack<long>''

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level_count\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level_count++;\n     \
    \       } else if (c == ')') {\n                level_count--;\n             \
    \   if (level_count == 0) {\n                    level = stack.Pop();\n      \
    \          }\n            }\n        }\n        levels.Add(level);\n        while\
    \ (level_count > 0) {\n            level_count--;\n            level = stack.Pop();\n\
    \            levels.Add(level);\n        }\n        return levels;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4tzlyxhm.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else {\n\
    \                level = 0;\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_cwkxf9.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                while (stack.Count > 0) {\n\
    \                    levels.Add(stack.Pop());\n                }\n           \
    \     level = 0;\n            } else {\n                level++;\n           \
    \ }\n        }\n        while (stack.Count > 0) {\n            levels.Add(stack.Pop());\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp06ohpvsk.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlrxivr4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long level = stack.Pop();\n\
    \                result.Add(level);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgvc5ukvd.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpgvc5ukvd.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                level -= stack.Pop();\n    \
    \            in_paren = false;\n            } else if (c == ' ') {\n         \
    \       level++;\n            }\n            if (in_paren) {\n               \
    \ level++;\n            }\n        }\n        levels.Add(level);\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe06yt3ks.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long popped_level = stack.Pop();\n              \
    \  if (level > popped_level) {\n                    levels.Add(level);\n     \
    \           }\n            }\n        }\n        return levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg4ife2_r.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          } else if (c == ' ') {\n                if (level == 0)\n         \
    \           levels.Add(stack.Count);\n                else\n                 \
    \   stack.Remove(stack.Count - 1);\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbmpt0q00.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpbmpt0q00.cs(27,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    /tmp/tmpbmpt0q00.cs(32,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \     in_paren = true;\n            } else if (c == ')') {\n                level--;\n\
    \                in_paren = false;\n            } else if (c == ' ') {\n     \
    \           level = 0;\n            }\n            if (in_paren) {\n         \
    \       level++;\n            }\n        }\n        stack.Pop();\n        foreach\
    \ (long l in stack) {\n            levels.Add(l);\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp350gzggv.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long new_level = stack.Pop();\n                if\
    \ (new_level > level) {\n                    levels.Add(level);\n            \
    \    }\n            }\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5bkmstqx.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long paren_level\
    \ = 0;\n        long paren_level_max = 0;\n        bool in_paren = false;\n  \
    \      bool in_paren_group = false;\n        bool in_paren_group_max = false;\n\
    \        bool in_paren_group_max_paren = false;\n        bool in_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max = false;\n       \
    \ bool in_paren_group_max_paren_group_max_paren = false;\n        bool in_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max =\
    \ false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren\
    \ = false;\n        bool in_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoj5wiu2t.cs(42,97): error CS1002: ; expected

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlrxivr4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                level\
    \ -= stack.Pop();\n                in_paren = false;\n            } else if (c\
    \ == ' ') {\n                if (in_paren) {\n                    level -= stack.Pop();\n\
    \                }\n            }\n        }\n        levels.Add(level);\n   \
    \     return levels;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprx_tem61.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        bool in_paran = false;\n        bool in_paran2 = false;\n  \
    \      bool in_paran3 = false;\n        bool in_paran4 = false;\n        bool\
    \ in_paran5 = false;\n        bool in_paran6 = false;\n        bool in_paran7\
    \ = false;\n        bool in_paran8 = false;\n        bool in_paran9 = false;\n\
    \        bool in_paran10 = false;\n        bool in_paran11 = false;\n        bool\
    \ in_paran12 = false;\n        bool in_paran13 = false;\n        bool in_paran14\
    \ = false;\n        bool in_paran15 = false;\n        bool in_paran16 = false;\n\
    \        bool in_paran17 = false;\n        bool in_paran18 = false;\n        bool\
    \ in_paran19 = false;\n        bool in_paran20 = false;\n        bool in_paran21\
    \ = false;\n        bool in_paran22 = false;\n        bool in_paran23 = false;\n\
    \        bool in_paran24 = false;\n        bool in_paran25 = false;\n        bool\
    \ in_paran26 = false;\n        bool in_paran27 = false;\n        bool in_paran28\
    \ = false;\n        bool in_paran29 = false;\n        bool in_paran30 = false;\n\
    \        bool in_paran31 = false;\n        bool in_paran32 = false;\n        bool\
    \ in_paran33 = false;\n        bool in_paran34 = false;\n        bool in_paran35\
    \ = false;\n        bool in_paran36 = false;\n        bool in_paran37 = false;\n\
    \        bool in_paran38 = false;\n        bool in_paran39 = false;\n        bool\
    \ in_paran40 = false;\n        bool in_paran41 = false;\n        bool in_paran42\
    \ = false;\n        bool in_paran43 = false;\n        bool in_paran44 = false;\n\
    \        bool in_paran45 = false;\n        bool in_paran46 = false;\n        bool\
    \ in_paran47 = false;\n        bool in_paran48 = false;\n        bool in_paran49\
    \ = false;\n        bool in_paran50 = false;\n        bool in_paran51 = false;\n\
    \        bool in_paran52 = false;\n        bool in_paran53 = false;\n        bool\
    \ in_paran54 = false;\n        bool in_paran55 = false;\n        bool in_paran56\
    \ = false;\n        bool in_paran57 = false;\n        bool in_paran58 = false;\n\
    \        bool in_paran59\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprij2z76p.cs(77,24): error CS1002: ; expected

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                level = (long)stack.Pop();\n\
    \                levels.Add(level);\n            }\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz74lne00.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long new_level = stack.Pop();\n                if\
    \ (new_level > level) {\n                    levels.Add(new_level);\n        \
    \        }\n            }\n        }\n        return levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg420s4i7.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  long level_at_top = stack.Pop();\n                if (level_at_top != level)\
    \ {\n                    throw new Exception(\"Mismatched parentheses at \" +\
    \ level);\n                }\n                level--;\n            } else {\n\
    \                throw new Exception(\"Unexpected character \" + c);\n       \
    \     }\n        }\n        result.Add(level);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0sqtf97j.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else {\n\
    \                level = 0;\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_cwkxf9.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level -= stack.Pop();\n            } else if (c == ' ') {\n               \
    \ level = 0;\n            }\n            levels.Add(level);\n        }\n     \
    \   return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdihm7c_n.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long level = stack.Pop();\n\
    \                if (level > result.Count) {\n                    result.Add(level);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbi4r6jdz.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpbi4r6jdz.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n            } else if (c == '(') {\n                stack.Add(1);\n    \
    \        } else if (c == ')') {\n                long level = stack.Pop();\n \
    \               while (level > 0) {\n                    levels.Add(level);\n\
    \                    level--;\n                }\n            }\n            sb.Append(c);\n\
    \        }\n        long level = stack.Pop();\n        while (level > 0) {\n \
    \           levels.Add(level);\n            level--;\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppbqtnkb7.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmppbqtnkb7.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmppbqtnkb7.cs(28,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmppbqtnkb7.cs(30,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long popped_level = stack.Pop();\n              \
    \  if (level != popped_level) {\n                    throw new Exception(\"Mismatched\
    \ parentheses\");\n                }\n                levels.Add(level);\n   \
    \         } else {\n                throw new Exception(\"Invalid parentheses\"\
    );\n            }\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4cw445yd.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool inParen = false;\n        bool inBracket = false;\n        bool\
    \ inBrace = false;\n        bool inQuote = false;\n        bool inSpace = false;\n\
    \        bool inComma = false;\n        bool inCommaOrSpace = false;\n       \
    \ bool inCommaOrQuote = false;\n        bool inCommaOrBracket = false;\n     \
    \   bool inCommaOrBrace = false;\n        bool inCommaOrSpaceOrQuote = false;\n\
    \        bool inCommaOrSpaceOrBracket = false;\n        bool inCommaOrSpaceOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracket = false;\n        bool\
    \ inCommaOrSpaceOrQuoteOrBrace = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBrace = false;\n    \
    \    bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpace = false;\n        bool\
    \ inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpace = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuote\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracket\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuote\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracket\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBrace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpace\
    \ = false;\n        bool inCommaOrSpaceOrQuoteOrBracketOrBraceOrSpaceOrQuoteOrBracketOrBraceOrSpace\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe1gm047z.cs(45,88): error CS1002: ; expected

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_quote = false;\n        bool\
    \ in_escape = false;\n        foreach (char c in paren_string) {\n           \
    \ if (c == '(') {\n                in_paren = true;\n                stack.Add(0);\n\
    \            }\n            else if (c == ')') {\n                in_paren = false;\n\
    \                long level = stack.Pop();\n                while (level > 0)\
    \ {\n                    level--;\n                    stack.Push(level);\n  \
    \              }\n            }\n            else if (c == '\"') {\n         \
    \       in_quote = true;\n            }\n            else if (c == '\\\\') {\n\
    \                in_escape = true;\n            }\n            else if (in_quote\
    \ && c == '\"') {\n                in_quote = false;\n            }\n        \
    \    else if (in_escape && c == '\\\\') {\n                in_escape = false;\n\
    \            }\n            else if (in_paren) {\n                if (c == '(')\
    \ {\n                    stack.Add(0);\n                }\n                else\
    \ if (c == ')') {\n                    long level = stack.Pop();\n           \
    \         while (level > 0) {\n                        level--;\n            \
    \            stack.Push(level);\n                    }\n                }\n  \
    \              else if (c == '\"') {\n                    in_quote = true;\n \
    \               }\n                else if (c == '\\\\') {\n                 \
    \   in_escape = true;\n                }\n                else if (in_quote &&\
    \ c == '\"') {\n                    in_quote = false;\n                }\n   \
    \             else if (in_escape && c == '\\\\') {\n                    in_escape\
    \ = false;\n                }\n            }\n            else {\n           \
    \     sb.Append(c);\n            }\n        }\n        string s = sb.ToString();\n\
    \        char[] chars = s.ToCharArray();\n        List<long> result = new List<long>();\n\
    \        foreach (char c in chars) {\n            if (c == '(') {\n          \
    \      result.Add(0);\n            }\n            else if (c == ')') {\n     \
    \           long level = stack.Pop();\n                while (level > 0) {\n \
    \                   level--;\n                    stack.Push(level);\n       \
    \         }\n            }\n            else if (c == '\"') {\n              \
    \  in_quote = true;\n            }\n            else if (c == '\\\\') {\n    \
    \            in_escape = true;\n            }\n            else if (in_quote &&\
    \ c == '\"') {\n                in_quote = false;\n            }\n           \
    \ else if (in_escape && c == '\\\\') {\n                in_escape = false;\n \
    \           }\n            else {\n                result.Add(long.Parse(s.Substring(0,\
    \ s.IndexOf(c))));\n                s = s.Substring(s.IndexOf(c) + 1);\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp94vw3n05.cs(24,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmp94vw3n05.cs(48,27): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                    stack.Pop();\n                }\n            }\n        }\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4tmwlxxb.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                in_paren = false;\n        \
    \        long new_level = stack.Pop();\n                if (new_level > level)\
    \ {\n                    level = new_level;\n                }\n            }\
    \ else if (in_paren) {\n                level++;\n            }\n        }\n \
    \       result.Add(level);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzilj_kxx.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long nesting_level\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \ } else if (c == ')') {\n                level--;\n                nesting_level\
    \ = stack.Pop();\n                levels.Add(nesting_level);\n            }\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuu184cko.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Pop();\n          \
    \      if (level_of_nesting > level) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcklmwf9x.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level -= stack.Pop();\n            }\n        }\n        levels.Add(level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpofk9f57s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.RemoveAt(stack.Count - 1);\n\
    \            }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvipk77tz.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpvipk77tz.cs(27,27): error CS1061: ''Stack<long>'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''Stack<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long paren_level\
    \ = 0;\n        bool in_paren = false;\n        bool in_group = false;\n     \
    \   bool in_group_open = false;\n        bool in_group_close = false;\n      \
    \  bool in_group_open_brace = false;\n        bool in_group_close_brace = false;\n\
    \        bool in_group_open_brace_or_close_brace = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_brace_or_close\
    \ = false;\n        bool in_group_open_brace_or_close_brace_or_close = false;\n\
    \        bool in_group_open_brace_or_close_brace_or_close = false;\n        bool\
    \ in_group_open_brace_or_close_brace_or_close = false;\n        bool in_group_open_brace_or_close_bra\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplpdl5t2y.cs(50,46): error CS1002: ; expected

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1su2123s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        long level = 0;\n        bool in_paren = false;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       }\n            if (c == ')') {\n                in_paren = false;\n  \
    \              level--;\n            }\n            if (in_paren) {\n        \
    \        sb.Append(c);\n            }\n        }\n        level = 0;\n       \
    \ foreach (char c in sb.ToString()) {\n            if (c == '(') {\n         \
    \       level++;\n            }\n            if (c == ')') {\n               \
    \ level--;\n            }\n            levels.Add(level);\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp15i0igsb.cs(23,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0) {\n                    levels.Add(stack.Last());\n\
    \                    stack.Pop();\n                }\n            } else if (c\
    \ == ' ') {\n                if (in_paren) {\n                    stack.Pop();\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaqxxwtv0.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        var paren_stack = new Stack<long>();\n        var levels\
    \ = new List<long>();\n        var level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.Push(level);\n \
    \               level++;\n            } else if (c == ')') {\n               \
    \ level--;\n                if (paren_stack.Count > 0 && paren_stack.Peek() ==\
    \ level) {\n                    levels.Add(level);\n                }\n      \
    \      }\n        }\n        if (paren_stack.Count > 0) {\n            levels.Add(level);\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <048559ccf9ea4d27a485bff97a3b470e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <048559ccf9ea4d27a485bff97a3b470e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_group = false;\n        bool\
    \ in_group2 = false;\n        bool in_group3 = false;\n        bool in_group4\
    \ = false;\n        bool in_group5 = false;\n        bool in_group6 = false;\n\
    \        bool in_group7 = false;\n        bool in_group8 = false;\n        bool\
    \ in_group9 = false;\n        bool in_group10 = false;\n        bool in_group11\
    \ = false;\n        bool in_group12 = false;\n        bool in_group13 = false;\n\
    \        bool in_group14 = false;\n        bool in_group15 = false;\n        bool\
    \ in_group16 = false;\n        bool in_group17 = false;\n        bool in_group18\
    \ = false;\n        bool in_group19 = false;\n        bool in_group20 = false;\n\
    \        bool in_group21 = false;\n        bool in_group22 = false;\n        bool\
    \ in_group23 = false;\n        bool in_group24 = false;\n        bool in_group25\
    \ = false;\n        bool in_group26 = false;\n        bool in_group27 = false;\n\
    \        bool in_group28 = false;\n        bool in_group29 = false;\n        bool\
    \ in_group30 = false;\n        bool in_group31 = false;\n        bool in_group32\
    \ = false;\n        bool in_group33 = false;\n        bool in_group34 = false;\n\
    \        bool in_group35 = false;\n        bool in_group36 = false;\n        bool\
    \ in_group37 = false;\n        bool in_group38 = false;\n        bool in_group39\
    \ = false;\n        bool in_group40 = false;\n        bool in_group41 = false;\n\
    \        bool in_group42 = false;\n        bool in_group43 = false;\n        bool\
    \ in_group44 = false;\n        bool in_group45 = false;\n        bool in_group46\
    \ = false;\n        bool in_group47 = false;\n        bool in_group48 = false;\n\
    \        bool in_group49 = false;\n        bool in_group50 = false;\n        bool\
    \ in_group51 = false;\n        bool in_group52 = false;\n        bool in_group53\
    \ = false;\n        bool in_group54 = false;\n        bool in_group55 = false;\n\
    \        bool in_group56 = false;\n        bool in_group57 = false;\n        bool\
    \ in_group58 = false;\n        bool in_group59 = false;\n        bool in_group60\
    \ = false;\n        bool in_group61 = false;\n        bool in_group62 = false;\n\
    \        bool in_group63 = false;\n        bool in_group64 = false;\n        bool\
    \ in_group65 = false;\n        bool in_group66 = false;\n        \n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph1w4jqkf.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(19,14): warning CS0219: The variable ''in_group'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(20,14): warning CS0219: The variable ''in_group2'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(21,14): warning CS0219: The variable ''in_group3'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(22,14): warning CS0219: The variable ''in_group4'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(23,14): warning CS0219: The variable ''in_group5'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(24,14): warning CS0219: The variable ''in_group6'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(25,14): warning CS0219: The variable ''in_group7'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(26,14): warning CS0219: The variable ''in_group8'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(27,14): warning CS0219: The variable ''in_group9'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(28,14): warning CS0219: The variable ''in_group10'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(29,14): warning CS0219: The variable ''in_group11'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(30,14): warning CS0219: The variable ''in_group12'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(31,14): warning CS0219: The variable ''in_group13'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(32,14): warning CS0219: The variable ''in_group14'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(33,14): warning CS0219: The variable ''in_group15'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(34,14): warning CS0219: The variable ''in_group16'' is assigned
    but its value is never used

    /tmp/tmph1w4jqkf.cs(35,14): warning CS0219: The variable ''in_gr'
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \         } else if (c == ')') {\n                in_paren = false;\n        \
    \        level = (long)Math.Max(stack.Pop(), level);\n            } else if (c\
    \ == ' ') {\n                level++;\n            }\n        }\n        level\
    \ = (long)Math.Max(stack.Pop(), level);\n        levels.Add(level);\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjz_rjamq.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpjz_rjamq.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1su2123s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    result.Add(stack.Count);\n\
    \                else\n                    result.Add(stack.Count - stack.Peek());\n\
    \                stack.Pop();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpol08eel2.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          } else if (c == ' ') {\n                level = 0;\n            }\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpia5m9o7r.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpia5m9o7r.cs(27,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level--;\n            } else if (c == ' ' && in_paren)\
    \ {\n                level++;\n            }\n        }\n        stack.Pop();\n\
    \        levels.Add(level);\n        while (stack.Count > 0) {\n            levels.Add(stack.Pop());\n\
    \        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lly4s6w.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level_of_nesting\
    \ = 0;\n        bool in_paren = false;\n        bool in_paren_group = false;\n\
    \        bool in_paren_group_with_paren = false;\n        bool in_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren = false;\n\
    \        bool in_paren_group_with_paren_group_with_paren_group = false;\n    \
    \    bool in_paren_group_with_paren_group_with_paren_group_with_paren = false;\n\
    \        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        bool in_\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1m7m1ib5.cs(39,17): error CS1002: ; expected

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level -= stack.Pop();\n            } else if (c ==\
    \ ' ') {\n                if (in_paren) {\n                    level--;\n    \
    \            }\n            }\n        }\n        levels.Add(level);\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppmvknz7k.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Count > 0 ? stack.Pop()\
    \ : -1;\n                levels.Add(level_of_nesting);\n            }\n      \
    \  }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpolwjyksk.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        var paren_stack = new Stack<long>();\n        var paren_levels\
    \ = new List<long>();\n        foreach (var c in paren_string) {\n           \
    \ if (c == '(') {\n                paren_stack.Push(paren_levels.Count);\n   \
    \             paren_levels.Add(0);\n            } else if (c == ')') {\n     \
    \           var level = paren_stack.Pop();\n                paren_levels.RemoveAt(level);\n\
    \            }\n        }\n        return paren_levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqx823r4m.cs(23,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               level--;\n                if (level == 0)\n                  \
    \  levels.Add(stack.Count);\n                else\n                    stack.Pop();\n\
    \            }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18q8f85e.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool inParen =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                inParen = true;\n                stack.Add(level);\n    \
    \        } else if (c == ')') {\n                inParen = false;\n          \
    \      long level = stack.Pop();\n                if (level > 0) {\n         \
    \           result.Add(level);\n                }\n            } else if (inParen)\
    \ {\n                level++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglgdu76h.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpglgdu76h.cs(25,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.Add(0);\n            }\n            else if (c == ')') {\n         \
    \       long level = stack.Pop();\n                while (level > 0) {\n     \
    \               level--;\n                    stack.Push(level);\n           \
    \     }\n                in_paren = false;\n            }\n            else if\
    \ (in_paren) {\n                sb.Append(c);\n            }\n        }\n    \
    \    string s = sb.ToString();\n        long level = 0;\n        foreach (char\
    \ c in s) {\n            if (c == '(') {\n                level++;\n         \
    \   }\n            else if (c == ')') {\n                level--;\n          \
    \  }\n            else if (level == 0) {\n                levels.Add(level);\n\
    \            }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4yvuwk5u.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmp4yvuwk5u.cs(25,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool inParen =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                inParen = true;\n                stack.Add(level);\n    \
    \        } else if (c == ')') {\n                inParen = false;\n          \
    \      level = (long)stack.Pop();\n            } else if (inParen) {\n       \
    \         level++;\n            }\n        }\n        levels.Add(level);\n   \
    \     return levels;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3b9q3hxo.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool inParen =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                inParen = true;\n                stack.Add(level);\n    \
    \            level++;\n            } else if (c == ')') {\n                inParen\
    \ = false;\n                long level = stack.Pop();\n                while (level\
    \ > 0) {\n                    result.Add(level);\n                    level--;\n\
    \                }\n            } else if (c == ' ') {\n                inParen\
    \ = false;\n            } else if (c == '(' || c == ')') {\n                inParen\
    \ = false;\n            } else if (c == '[') {\n                inParen = true;\n\
    \            } else if (c == ']') {\n                inParen = false;\n      \
    \      } else if (c == '{') {\n                inParen = true;\n            }\
    \ else if (c == '}') {\n                inParen = false;\n            } else if\
    \ (c == '+') {\n                inParen = true;\n            } else if (c == '-')\
    \ {\n                inParen = true;\n            } else if (c == '*') {\n   \
    \             inParen = true;\n            } else if (c == '/') {\n          \
    \      inParen = true;\n            } else if (c == '%') {\n                inParen\
    \ = true;\n            } else if (c == '!') {\n                inParen = true;\n\
    \            } else if (c == '=') {\n                inParen = true;\n       \
    \     } else if (c == '<') {\n                inParen = true;\n            } else\
    \ if (c == '>') {\n                inParen = true;\n            } else if (c ==\
    \ '|') {\n                inParen = true;\n            } else if (c == '&') {\n\
    \                inParen = true;\n            } else if (c == '~') {\n       \
    \         inParen = true;\n            } else if (c == '^') {\n              \
    \  inParen = true;\n            } else if (c == '%') {\n                inParen\
    \ = true;\n            } else if (c == '~') {\n                inParen = true;\n\
    \            } else if (c == '=') {\n                inParen = true;\n       \
    \     } else if (c == '<') {\n                inParen = true;\n            } else\
    \ if (c == '>') {\n                inParen = true;\n            } else if (c ==\
    \ '|') {\n                inParen = true;\n            } else if (c == '&') {\n\
    \                inParen = true;\n            } else if (c == '~') {\n       \
    \         inParen = true;\n            } else if (c == '^') {\n              \
    \  inParen = true;\n            } else if (c == '%') {\n                inParen\
    \ = true;\n            } else if (c == '~') {\n                inParen = true;\n\
    \            } else if (c == '=') {\n                inParen = true;\n       \
    \     } else if (c == '<') {\n                inParen = true;\n            } else\
    \ if (c == '>') {\n                inParen = true;\n            } else if (c ==\
    \ '|') {\n                inParen = true;\n            } else if (c == '&') {\n\
    \                inParen = true;\n            } else if (c == '~') {\n       \
    \         inParen = true;\n            } else if (c == '^') {\n              \
    \  inParen = true;\n            } else if (c == '%') {\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9mswwu3d.cs(108,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp9mswwu3d.cs(114,2): error CS1513: } expected

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level2 = 0;\n\
    \        bool inParen = false;\n        bool inBrace = false;\n        bool inBracket\
    \ = false;\n        bool inBrace2 = false;\n        bool inBracket2 = false;\n\
    \        bool inBrace3 = false;\n        bool inBracket3 = false;\n        bool\
    \ inBrace4 = false;\n        bool inBracket4 = false;\n        bool inBrace5 =\
    \ false;\n        bool inBracket5 = false;\n        bool inBrace6 = false;\n \
    \       bool inBracket6 = false;\n        bool inBrace7 = false;\n        bool\
    \ inBracket7 = false;\n        bool inBrace8 = false;\n        bool inBracket8\
    \ = false;\n        bool inBrace9 = false;\n        bool inBracket9 = false;\n\
    \        bool inBrace10 = false;\n        bool inBracket10 = false;\n        bool\
    \ inBrace11 = false;\n        bool inBracket11 = false;\n        bool inBrace12\
    \ = false;\n        bool inBracket12 = false;\n        bool inBrace13 = false;\n\
    \        bool inBracket13 = false;\n        bool inBrace14 = false;\n        bool\
    \ inBracket14 = false;\n        bool inBrace15 = false;\n        bool inBracket15\
    \ = false;\n        bool inBrace16 = false;\n        bool inBracket16 = false;\n\
    \        bool inBrace17 = false;\n        bool inBracket17 = false;\n        bool\
    \ inBrace18 = false;\n        bool inBracket18 = false;\n        bool inBrace19\
    \ = false;\n        bool inBracket19 = false;\n        bool inBrace20 = false;\n\
    \        bool inBracket20 = false;\n        bool inBrace21 = false;\n        bool\
    \ inBracket21 = false;\n        bool inBrace22 = false;\n        bool inBracket22\
    \ = false;\n        bool inBrace23 = false;\n        bool inBracket23 = false;\n\
    \        bool inBrace24 = false;\n        bool inBracket24 = false;\n        bool\
    \ inBrace25 = false;\n        bool inBracket25 = false;\n        bool inBrace26\
    \ = false;\n        bool inBracket26 = false;\n        bool inBrace27 = false;\n\
    \        bool inBracket27 = false;\n        bool inBrace28 = false;\n        bool\
    \ inBracket28 = false;\n        bool inBrace29 = false;\n        bool inBracket29\
    \ = false;\n        bool inBrace30 = false;\n        bool \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph9rs5d04.cs(79,13): error CS1001: Identifier expected

    /tmp/tmph9rs5d04.cs(79,13): error CS1002: ; expected

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level -= stack.Pop();\n            }\n            levels.Add(level);\n    \
    \    }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6hxmae8f.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Push(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long popped = stack.Pop();\n                if (popped\
    \ == level) {\n                    result.Add(level);\n                }\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e665ab8ef314766b002190d89a2bca3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e665ab8ef314766b002190d89a2bca3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                levels.Add(stack.Pop());\n\
    \            }\n            level++;\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw_tb_3fw.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long new_level = stack.Pop();\n                if\
    \ (new_level > level) {\n                    levels.Add(level);\n            \
    \    }\n            }\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5bkmstqx.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level--;\n            }\n        }\n        return\
    \ levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7dguqbuj.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.RemoveAt(stack.Count - 1);\n\
    \            }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvipk77tz.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpvipk77tz.cs(27,27): error CS1061: ''Stack<long>'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''Stack<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long popped_level = stack.Pop();\n              \
    \  if (level > popped_level) {\n                    levels.Add(level);\n     \
    \           }\n            }\n        }\n        return levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg4ife2_r.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        long level = 0;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                stack.Add(level);\n                level++;\n\
    \            } else if (c == ')') {\n                level--;\n              \
    \  if (level == 0)\n                    levels.Add(stack.Count);\n           \
    \     else\n                    stack.Pop();\n            } else if (c == ' ')\
    \ {\n                if (stack.Count > 0)\n                    stack.Pop();\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        if (stack.Count > 0)\n            stack.Pop();\n        if (sb.Length\
    \ > 0)\n            levels.Add(stack.Count);\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp34stb4ej.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Add(level);\n                level++;\n           \
    \     in_paren = true;\n            } else if (c == ')') {\n                level--;\n\
    \                in_paren = false;\n            } else if (in_paren) {\n     \
    \           level++;\n            }\n        }\n        stack.Pop();\n       \
    \ levels.Add(level);\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy90xqwsl.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlrxivr4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.Add(0);\n            } else if (c == ')') {\n                long level\
    \ = stack.Pop();\n                levels.Add(level);\n                in_paren\
    \ = false;\n            } else if (c == ' ') {\n                if (in_paren)\
    \ {\n                    sb.Append(c);\n                } else {\n           \
    \         long level = stack.Pop();\n                    levels.Add(level);\n\
    \                    sb.Append(c);\n                }\n            } else if (c\
    \ == '(') {\n                stack.Add(0);\n            } else if (c == ')') {\n\
    \                long level = stack.Pop();\n                levels.Add(level);\n\
    \                sb.Append(c);\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp74sgzj87.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmp74sgzj87.cs(36,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool inParen =\
    \ false;\n        bool inBrace = false;\n        bool inBracket = false;\n   \
    \     foreach (char c in paren_string) {\n            if (c == '(') {\n      \
    \          inParen = true;\n                stack.Add(level);\n              \
    \  level++;\n            }\n            if (c == ')') {\n                inParen\
    \ = false;\n                level--;\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    level--;\n         \
    \           levels.Add(level);\n                }\n            }\n           \
    \ if (c == '[') {\n                inBracket = true;\n                stack.Add(level);\n\
    \                level++;\n            }\n            if (c == ']') {\n      \
    \          inBracket = false;\n                level--;\n                long\
    \ level = stack.Pop();\n                while (level > 0) {\n                \
    \    level--;\n                    levels.Add(level);\n                }\n   \
    \         }\n            if (c == '{') {\n                inBrace = true;\n  \
    \              stack.Add(level);\n                level++;\n            }\n  \
    \          if (c == '}') {\n                inBrace = false;\n               \
    \ level--;\n                long level = stack.Pop();\n                while (level\
    \ > 0) {\n                    level--;\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv0_dncfr.cs(24,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpv0_dncfr.cs(29,17): error CS0841: Cannot use local variable ''level''
    before it is declared

    /tmp/tmpv0_dncfr.cs(30,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpv0_dncfr.cs(38,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpv0_dncfr.cs(43,17): error CS0841: Cannot use local variable ''level''
    before it is declared

    /tmp/tmpv0_dncfr.cs(44,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpv0_dncfr.cs(52,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpv0_dncfr.cs(57,17): error CS0841: Cannot use local variable ''level''
    before it is declared

    /tmp/tmpv0_dncfr.cs(58,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpv0_dncfr.cs(18,14): warning CS0219: The variable ''inParen'' is assigned
    but its value is never used

    /tmp/tmpv0_dncfr.cs(19,14): warning CS0219: The variable ''inBrace'' is assigned
    but its value is never used

    /tmp/tmpv0_dncfr.cs(20,14): warning CS0'
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n            }\n            sb.Append(c);\n        }\n        long level\
    \ = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfm1tgo9.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpdfm1tgo9.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            }\n            else if (c == ')') {\n    \
    \            in_paren = false;\n                level--;\n            }\n    \
    \        else if (in_paren) {\n                level++;\n            }\n     \
    \       else {\n                level--;\n            }\n            if (level\
    \ == 0) {\n                levels.Add(stack.Count);\n            }\n        }\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi6wbrlit.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n\
    \                }\n            } else {\n                level = 0;\n       \
    \     }\n        }\n        return levels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\")).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"\
    (()(())((())))\")).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnutevumw.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else {\n\
    \                stack.Pop();\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt0rws_m2.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack[stack.Count - 1];\n\
    \                if (level_of_nesting > level) {\n                    levels.Add(level);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxm1mlvti.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpxm1mlvti.cs(24,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Stack<long>''

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppg4vvuu4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level2 = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(level);\n                level++;\n            } else\
    \ if (c == ')') {\n                level2 = stack.Pop();\n                if (level2\
    \ > level) {\n                    result.Add(level2);\n                }\n   \
    \             level--;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_grdn52.cs(21,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1su2123s.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Count - 1;\n      \
    \          if (level_of_nesting > levels.Count) {\n                    levels.Add(level_of_nesting);\n\
    \                }\n                stack.Pop();\n            }\n        }\n \
    \       return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav6_98nl.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                level -= stack.Pop();\n            } else if (c ==\
    \ ' ') {\n                level = 0;\n            } else if (c == '(' || c ==\
    \ '[' || c == '{') {\n                level++;\n            }\n        }\n   \
    \     levels[level] = stack.Count;\n        return levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4b1jxqdh.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmp4b1jxqdh.cs(33,16): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4b1jxqdh.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        long level_count\
    \ = 0;\n        bool in_paren = false;\n        bool in_group = false;\n     \
    \   bool in_group_open = false;\n        bool in_group_close = false;\n      \
    \  bool in_group_closed = false;\n        bool in_group_opener = false;\n    \
    \    bool in_group_closer = false;\n        bool in_group_opener_close = false;\n\
    \        bool in_group_closer_close = false;\n        bool in_group_opener_closed\
    \ = false;\n        bool in_group_closer_open = false;\n        bool in_group_closer_closed\
    \ = false;\n        bool in_group_opener_open = false;\n        bool in_group_closer_opener\
    \ = false;\n        bool in_group_closer_closer = false;\n        bool in_group_opener_opener\
    \ = false;\n        bool in_group_closer_opener_close = false;\n        bool in_group_closer_closer_close\
    \ = false;\n        bool in_group_opener_opener_close = false;\n        bool in_group_closer_opener_open\
    \ = false;\n        bool in_group_closer_closer_opener = false;\n        bool\
    \ in_group_closer_closer_closer = false;\n        bool in_group_opener_opener_open\
    \ = false;\n        bool in_group_closer_opener_opener = false;\n        bool\
    \ in_group_closer_closer_opener_close = false;\n        bool in_group_closer_closer_closer_close\
    \ = false;\n        bool in_group_opener_opener_open = false;\n        bool in_group_closer_opener_opener\
    \ = false;\n        bool in_group_closer_closer_opener_open = false;\n       \
    \ bool in_group_closer_closer_closer_opener = false;\n        bool in_group_closer_closer_closer_closer\
    \ = false;\n        bool in_group_opener_opener_opener = false;\n        bool\
    \ in_group_closer_opener_opener_open = false;\n        bool in_group_closer_closer_opener_opener\
    \ = false;\n        bool in_group_closer_closer_closer_opener_close = false;\n\
    \        bool in_group_closer_closer_closer_closer_close = false;\n        bool\
    \ in_group_opener_opener_opener = false;\n        bool in_group_closer_opener_opener_open\
    \ = false;\n        bool in_group_closer_closer_opener_opener = false;\n     \
    \   bool in_group_closer_closer_closer_opener_close = false;\n        bool in_group_closer_closer_closer_closer_close\
    \ = false;\n        bool in_group_opener_opener_opener_close = false;\n      \
    \  bool in_group_closer_opener_opener_opener = false;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkjr6nka3.cs(45,14): error CS0128: A local variable or function named ''in_group_opener_opener_open''
    is already defined in this scope

    /tmp/tmpkjr6nka3.cs(46,14): error CS0128: A local variable or function named ''in_group_closer_opener_opener''
    is already defined in this scope

    /tmp/tmpkjr6nka3.cs(55,14): error CS0128: A local variable or function named ''in_group_opener_opener_opener''
    is already defined in this scope

    /tmp/tmpkjr6nka3.cs(56,14): error CS0128: A local variable or function named ''in_group_closer_opener_opener_open''
    is already defined in this scope

    /tmp/tmpkjr6nka3.cs(57,14): error CS0128: A local variable or function named ''in_group_closer_closer_opener_opener''
    is already defined in this scope

    /tmp/tmpkjr6nka3.cs(58,14): error CS0128: A local variable or function named ''in_group_closer_closer_closer_opener_close''
    is already defined in this scope

    /tmp/tmpkjr6nka3.cs(59,14): error CS0128: A local variable or function named ''in_group_closer_closer_closer_closer_close''
    is already defined in this scope

    /tmp/tmpkjr6nka3.cs(17,14): warning CS0219: The variable ''level'' is assigned
    but its value is never used

    /tmp/tmpkjr6nka3.cs(18,14): warning CS0219: The variable ''level_count'' is assigned
    but its value is never used

    /tmp/tmpkjr6nka3.cs(19,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    /tmp/tmpkjr6nka3.cs(20,14): warning CS0219: The variable ''in_group'' is assigned
    but its value is never used

    /tmp/tmpkjr6nka3.cs(21,14): warning CS0219: The variable ''in_group_open'' is
    assigned but its value is never used

    /tmp/tmpkjr6nka3.cs(22,14): warning CS0219: The variable ''in_group_close'' is
    assigned but its value is never used

    /tmp/tmpkjr6nka3.cs(23,14): warning CS0219: The variable ''in_group_closed'' is
    assigned but its value is never used

    /tmp/tmpkjr6nka3.cs(24,14): warning CS0219: The variable ''in_group_opener'' is
    assigned but its value is never used

    /t'
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (stack.Count > 0) {\n                    levels.Add(stack.Pop());\n\
    \                }\n            } else if (c == ' ') {\n                level\
    \ = 0;\n            }\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx9fo_ejs.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpslqiw0dm.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpslqiw0dm.cs(27,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Pop();\n          \
    \      if (level_of_nesting > level) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcklmwf9x.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        long level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                in_paren\
    \ = true;\n                stack.Add(level);\n                level++;\n     \
    \       } else if (c == ')') {\n                in_paren = false;\n          \
    \      level--;\n            } else if (c == ' ') {\n                if (in_paren)\
    \ {\n                    sb.Append(c);\n                }\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        string s\
    \ = sb.ToString();\n        char[] chars = s.ToCharArray();\n        long max_level\
    \ = 0;\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i]\
    \ == '(') {\n                level++;\n            } else if (chars[i] == ')')\
    \ {\n                level--;\n            }\n            if (level > max_level)\
    \ {\n                max_level = level;\n            }\n        }\n        levels.Add(max_level);\n\
    \        return levels;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptds3pm4f.cs(23,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhasqin1.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                long level_of_nesting = stack.Pop();\n          \
    \      if (level_of_nesting > level) {\n                    levels.Add(level);\n\
    \                }\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcklmwf9x.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            }\n            if (c == ')') {\n         \
    \       level--;\n                if (level == 0) {\n                    levels.Add(stack.Count);\n\
    \                    in_paren = false;\n                }\n            }\n   \
    \     }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi_tqkugv.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpi_tqkugv.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n            }\n            sb.Append(c);\n        }\n        long level\
    \ = stack.Pop();\n        while (level > 0) {\n            levels.Add(level);\n\
    \            level--;\n        }\n        return levels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfm1tgo9.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpdfm1tgo9.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798083
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            }\n            if (c == ')') {\n         \
    \       in_paren = false;\n                level--;\n            }\n         \
    \   if (in_paren) {\n                level++;\n            }\n        }\n    \
    \    levels.Add(level);\n        while (stack.Count > 0) {\n            levels[stack.Count-1]--;\n\
    \            stack.Pop();\n        }\n        return levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaz64u2z1.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             stack.Add(0);\n            } else if (c == ')') {\n            \
    \    long level = stack.Pop();\n                while (level > 0) {\n        \
    \            levels.Add(level);\n                    level--;\n              \
    \  }\n                sb.Append(c);\n            } else if (c == '(') {\n    \
    \            stack.Add(1);\n            } else if (c == ')') {\n             \
    \   long level = stack.Pop();\n                while (level > 0) {\n         \
    \           levels.Add(level);\n                    level--;\n               \
    \ }\n                sb.Append(c);\n            } else {\n                sb.Append(c);\n\
    \            }\n        }\n        long level = stack.Pop();\n        while (level\
    \ > 0) {\n            levels.Add(level);\n            level--;\n        }\n  \
    \      return levels;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppxz7sri3.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmppxz7sri3.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmppxz7sri3.cs(29,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmppxz7sri3.cs(31,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        bool in_brace = false;\n        bool\
    \ in_brace2 = false;\n        bool in_brace3 = false;\n        bool in_brace4\
    \ = false;\n        bool in_brace5 = false;\n        bool in_brace6 = false;\n\
    \        bool in_brace7 = false;\n        bool in_brace8 = false;\n        bool\
    \ in_brace9 = false;\n        bool in_brace10 = false;\n        bool in_brace11\
    \ = false;\n        bool in_brace12 = false;\n        bool in_brace13 = false;\n\
    \        bool in_brace14 = false;\n        bool in_brace15 = false;\n        bool\
    \ in_brace16 = false;\n        bool in_brace17 = false;\n        bool in_brace18\
    \ = false;\n        bool in_brace19 = false;\n        bool in_brace20 = false;\n\
    \        bool in_brace21 = false;\n        bool in_brace22 = false;\n        bool\
    \ in_brace23 = false;\n        bool in_brace24 = false;\n        bool in_brace25\
    \ = false;\n        bool in_brace26 = false;\n        bool in_brace27 = false;\n\
    \        bool in_brace28 = false;\n        bool in_brace29 = false;\n        bool\
    \ in_brace30 = false;\n        bool in_brace31 = false;\n        bool in_brace32\
    \ = false;\n        bool in_brace33 = false;\n        bool in_brace34 = false;\n\
    \        bool in_brace35 = false;\n        bool in_brace36 = false;\n        bool\
    \ in_brace37 = false;\n        bool in_brace38 = false;\n        bool in_brace39\
    \ = false;\n        bool in_brace40 = false;\n        bool in_brace41 = false;\n\
    \        bool in_brace42 = false;\n        bool in_brace43 = false;\n        bool\
    \ in_brace44 = false;\n        bool in_brace45 = false;\n        bool in_brace46\
    \ = false;\n        bool in_brace47 = false;\n        bool in_brace48 = false;\n\
    \        bool in_brace49 = false;\n        bool in_brace50 = false;\n        bool\
    \ in_brace51 = false;\n        bool in_brace52 = false;\n        bool in_brace53\
    \ = false;\n        bool in_brace54 = false;\n        bool in_brace55 = false;\n\
    \        bool in_brace56 = false;\n        bool in_brace57 = false;\n        bool\
    \ in_brace58 = false;\n        bool in_brace59 = false;\n        bool in_brace60\
    \ = false;\n        bool in_brace61 = false;\n        bool in_brace62 = false;\n\
    \        bool in_brace63 = false;\n        bool in_brace64 = false;\n        bool\
    \ in_brace65 = false;\n        bool in_brace66 = false;\n        \n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptaokxe0l.cs(18,14): warning CS0219: The variable ''in_paren'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(19,14): warning CS0219: The variable ''in_brace'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(20,14): warning CS0219: The variable ''in_brace2'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(21,14): warning CS0219: The variable ''in_brace3'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(22,14): warning CS0219: The variable ''in_brace4'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(23,14): warning CS0219: The variable ''in_brace5'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(24,14): warning CS0219: The variable ''in_brace6'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(25,14): warning CS0219: The variable ''in_brace7'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(26,14): warning CS0219: The variable ''in_brace8'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(27,14): warning CS0219: The variable ''in_brace9'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(28,14): warning CS0219: The variable ''in_brace10'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(29,14): warning CS0219: The variable ''in_brace11'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(30,14): warning CS0219: The variable ''in_brace12'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(31,14): warning CS0219: The variable ''in_brace13'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(32,14): warning CS0219: The variable ''in_brace14'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(33,14): warning CS0219: The variable ''in_brace15'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(34,14): warning CS0219: The variable ''in_brace16'' is assigned
    but its value is never used

    /tmp/tmptaokxe0l.cs(35,14): warning CS0219: The variable ''in_br'
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        StringBuilder sb = new StringBuilder();\n\
    \        bool in_paren = false;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.Add(0);\n            }\n            else if (c == ')') {\n         \
    \       long level = stack.Pop();\n                while (level > 0) {\n     \
    \               level--;\n                    stack.Push(level);\n           \
    \     }\n                in_paren = false;\n            }\n            else if\
    \ (in_paren) {\n                sb.Append(c);\n            }\n        }\n    \
    \    string s = sb.ToString();\n        char[] chars = s.ToCharArray();\n    \
    \    List<long> result = new List<long>();\n        foreach (char c in chars)\
    \ {\n            if (c == '(') {\n                result.Add(0);\n           \
    \ }\n            else if (c == ')') {\n                long level = stack.Pop();\n\
    \                while (level > 0) {\n                    level--;\n         \
    \           stack.Push(level);\n                }\n            }\n           \
    \ else {\n                long level = stack.Pop();\n                while (level\
    \ > 0) {\n                    level--;\n                    stack.Push(level);\n\
    \                }\n                result.Add(1);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6m4ne01.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            }\n            else if (c == ')') {\n \
    \               level--;\n                if (level == 0) {\n                \
    \    levels.Add(stack.Count);\n                }\n                stack.Pop();\n\
    \            }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ojrhnba.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            }\n     \
    \   }\n        return levels;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) () ((())()())\")).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"\
    () (()) ((())) (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\"\
    )).Equals((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl13vlm75.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798083
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        var levels = new List<long>();\n        var stack =\
    \ new Stack<long>();\n        var level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                stack.Push(level);\n       \
    \         level++;\n            } else if (c == ')') {\n                level--;\n\
    \                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                stack.Pop();\n            }\n        }\n        return levels;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20a49b6a9d384efb952cd2394edde037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20a49b6a9d384efb952cd2394edde037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ level = new Stack<long>();\n        long level_count = 0;\n        bool is_open\
    \ = false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                is_open = true;\n                level.Add(level_count);\n\
    \                level_count++;\n            } else if (c == ')') {\n        \
    \        is_open = false;\n                long level_top = level.Count;\n   \
    \             while (level_top > 0 && level[level_top - 1] == level_top) {\n \
    \                   level_top--;\n                }\n                level_count\
    \ = level[level_top];\n                levels.Add(level_count);\n            \
    \    level.RemoveAt(level_top);\n            } else if (is_open) {\n         \
    \       level_count++;\n            }\n        }\n        return levels;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw_vlm1_t.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpw_vlm1_t.cs(27,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Stack<long>''

    /tmp/tmpw_vlm1_t.cs(30,31): error CS0021: Cannot apply indexing with [] to an
    expression of type ''Stack<long>''

    /tmp/tmpw_vlm1_t.cs(32,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''Stack<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else if (level == stack.Count)\n                    levels.Add(level);\n\
    \                else\n                    levels.Add(stack.Count);\n        \
    \        stack.Pop();\n            }\n        }\n        return levels;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbyr9pzy5.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Pop();\n            } else if\
    \ (c == ' ') {\n                level = 0;\n            }\n        }\n       \
    \ return levels;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlrxivr4.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798084
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \                level++;\n            } else if (c == ')') {\n              \
    \  level--;\n                if (level == 0)\n                    levels.Add(stack.Count);\n\
    \                else\n                    stack.Remove(stack.Count - 1);\n  \
    \          }\n        }\n        return levels;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((())) (((())))\"\
    )).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
    \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
    \ long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpslqiw0dm.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpslqiw0dm.cs(27,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''value'' of ''CollectionExtensions.Remove<TKey,
    TValue>(IDictionary<TKey, TValue>, TKey, out TValue)''

    '
  timestamp: 1659798087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> result = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                stack.Add(level);\n\
    \            } else if (c == ')') {\n                long level = stack.Pop();\n\
    \                if (level > result.Count) {\n                    result.Add(level);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
    (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbi4r6jdz.cs(20,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpbi4r6jdz.cs(22,22): error CS0136: A local or parameter named ''level''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659798085
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static List<long> ParseNestedParens(string\
    \ paren_string) {\n        List<long> levels = new List<long>();\n        Stack<long>\
    \ stack = new Stack<long>();\n        long level = 0;\n        bool in_paren =\
    \ false;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.Add(level);\n   \
    \             level++;\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                long new_level = stack.Pop();\n                if\
    \ (new_level != level) {\n                    throw new Exception(\"Mismatched\
    \ parentheses\");\n                }\n                level--;\n            }\
    \ else if (c == ' ') {\n                if (in_paren) {\n                    throw\
    \ new Exception(\"Mismatched parentheses\");\n                }\n            }\
    \ else {\n                throw new Exception(\"Invalid character\");\n      \
    \      }\n        }\n        if (stack.Count != 0) {\n            throw new Exception(\"\
    Mismatched parentheses\");\n        }\n        return levels;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
    \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new\
    \ List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkg9ylwiq.cs(22,23): error CS1061: ''Stack<long>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659798087
