name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    public\
  \ static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        char[] charArray = str.ToCharArray();\n        char[] flippedCharArray\
    \ = new char[charArray.Length];\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            flippedCharArray[i] = charArray[i];\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                flippedCharArray[i] = charArray[i]\
    \ - 32;\n            }\n            if (charArray[i] >= 'A' && charArray[i] <=\
    \ 'Z') {\n                flippedCharArray[i] = charArray[i] + 32;\n         \
    \   }\n        }\n        return new string(flippedCharArray);", "        char[]\
    \ chars = str.ToCharArray();\n        char[] flipped = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            flipped[i] = (char)(chars[i]\
    \ - 32);\n        }\n        return new string(flipped);", "        char[] chars\
    \ = str.ToCharArray();\n        Array.Sort(chars);\n        return new string(chars);",
  "        char[] charArray = str.ToCharArray();\n        char[] newCharArray = new\
    \ char[charArray.Length];\n        for (int i = 0; i < charArray.Length; i++)\
    \ {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n         \
    \       newCharArray[i] = (char)(charArray[i] - 32);\n            } else if (charArray[i]\
    \ >= 'A' && charArray[i] <= 'Z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);", "      \
    \  char[] charArray = str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);", "        char[] chars = str.ToCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in chars)\
    \ {\n            if (Char.IsLower(c)) {\n                sb.Append(char.ToUpperInvariant(c));\n\
    \            } else {\n                sb.Append(char.ToLowerInvariant(c));\n\
    \            }\n        }\n        return sb.ToString();", "        char[] charArray\
    \ = str.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++) {\n\
    \            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n             \
    \   charArray[i] = (char)(charArray[i] + 32);\n            } else if (charArray[i]\
    \ >= 'A' && charArray[i] <= 'Z') {\n                charArray[i] = (char)(charArray[i]\
    \ - 32);\n            }\n        }\n        return new string(charArray);", " \
    \       StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\
    \ {\n            if (Char.IsLower(c)) {\n                sb.Append(char.ToUpper(c));\n\
    \            } else {\n                sb.Append(char.ToLower(c));\n         \
    \   }\n        }\n        return sb.ToString();", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ 'a') {\n                chars[i] = 'A';\n            } else if (chars[i] ==\
    \ 'A') {\n                chars[i] = 'a';\n            }\n        }\n        return\
    \ new string(chars);", "        char[] chars = str.ToCharArray();\n        char[]\
    \ flipped = new char[chars.Length];\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            flipped[chars.Length - 1 - i] = chars[i];\n        }\n \
    \       return new string(flipped);", "        StringBuilder sb = new StringBuilder(str);\n\
    \        for (int i = 0; i < sb.Length; i++) {\n            char c = sb[i];\n\
    \            if (Char.IsLower(c)) {\n                sb[i] = Char.ToUpper(c);\n\
    \            }\n            else if (Char.IsUpper(c)) {\n                sb[i]\
    \ = Char.ToLower(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in str) {\n            if\
    \ (Char.IsLower(c)) {\n                result += Char.ToUpper(c);\n          \
    \  } else {\n                result += Char.ToLower(c);\n            }\n     \
    \   }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n     \
    \           sb.Append(char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();",
  "        char[] charArray = str.ToCharArray();\n        char[] flippedCharArray\
    \ = new char[charArray.Length];\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            flippedCharArray[i] = (char)(charArray[i] - 32);\n            } else\
    \ {\n                flippedCharArray[i] = charArray[i];\n            }\n    \
    \    }\n        return new string(flippedCharArray);", "        char[] charArray\
    \ = str.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++) {\n\
    \            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n             \
    \   charArray[i] = (char)(charArray[i] + 'A' - 'a');\n            } else if (charArray[i]\
    \ >= 'A' && charArray[i] <= 'Z') {\n                charArray[i] = (char)(charArray[i]\
    \ + 'a' - 'A');\n            }\n        }\n        return new string(charArray);",
  "        string result = \"\";\n        foreach (char c in str) {\n            if\
    \ (Char.IsLower(c)) {\n                result += Char.ToUpper(c);\n          \
    \  } else {\n                result += Char.ToLower(c);\n            }\n     \
    \   }\n        return result;", "        char[] chars = str.ToCharArray();\n \
    \       Array.Sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in chars) {\n            if (char.IsLower(c)) {\n   \
    \             sb.Append(char.ToUpper(c));\n            } else {\n            \
    \    sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in str) {\n            if\
    \ (Char.IsLower(c)) {\n                result += Char.ToUpper(c);\n          \
    \  } else {\n                result += Char.ToLower(c);\n            }\n     \
    \   }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in str) {\n            if (char.IsLower(c)) {\n     \
    \           sb.Append(char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();",
  "        char[] chars = str.ToCharArray();\n        char[] flipped = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            flipped[i] = chars[i]\
    \ != chars.ToLower()[i] ? chars[i] : chars.ToUpper()[i];\n        }\n        return\
    \ new string(flipped);"]
stop_tokens:
- "\n    }\n"
