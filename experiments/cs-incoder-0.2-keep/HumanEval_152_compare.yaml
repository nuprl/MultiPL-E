name: HumanEval_152_compare
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // I think we all remember that feeling when the result of some\
  \ long-awaited\n    // event is finally known. The feelings and thoughts you have\
  \ at that moment are\n    // definitely worth noting down and comparing.\n    //\
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    // You are given two arrays of scores and guesses of equal length,\
  \ where each index shows a match. \n    // Return an array of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    // the value\
  \ is 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
  \    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    public static\
  \ List<long> Compare(List<long> game, List<long> guess) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
  \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
  \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
  \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,\
  \ (long)1L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long score =\
    \ 0;\n        long diff = 0;\n        foreach (long g in game) {\n           \
    \ score += g;\n        }\n        foreach (long g in guess) {\n            diff\
    \ += g - score;\n        }\n        result.Add(diff);\n        return result;",
  "        List<long> result = new List<long>();\n        long total = 0;\n      \
    \  long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long\
    \ diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7\
    \ = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10\
    \ = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13\
    \ = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16\
    \ = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19\
    \ = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22\
    \ = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25\
    \ = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28\
    \ = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31\
    \ = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34\
    \ = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37\
    \ = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40\
    \ = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43\
    \ = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46\
    \ = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49\
    \ = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52\
    \ = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55\
    \ = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58\
    \ = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61\
    \ = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n        long diff64\
    \ = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n        long diff67\
    \ = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n        long diff70\
    \ = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n        long diff73\
    \ = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n        long diff76\
    \ = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n        long diff79\
    \ = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n        long diff82\
    \ = 0;\n        long diff83 = 0;\n        long diff84", "        List<long> result\
    \ = new List<long>();\n        long score = 0;\n        long guess = 0;\n    \
    \    long difference = 0;\n        foreach (var item in game) {\n            score\
    \ += item;\n        }\n        foreach (var item in guess) {\n            guess\
    \ += item;\n        }\n        difference = guess - score;\n        result.Add(difference);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long score\
    \ = 0;\n        long difference = 0;\n        bool correct = false;\n        foreach\
    \ (long g in game) {\n            score += g;\n            foreach (long g in\
    \ guess) {\n                difference = Math.Abs(g - score);\n              \
    \  if (difference == 0) {\n                    correct = true;\n             \
    \       break;\n                }\n            }\n            result.Add(difference);\n\
    \        }\n        if (!correct) {\n            foreach (long g in guess) {\n\
    \                difference = Math.Abs(g - score);\n                result.Add(difference);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        game.ForEach(x => result.Add(0));\n        guess.ForEach(x\
    \ => result.Add(0));\n        game.ForEach(x => result.Add(Math.Abs(x - guess[game.IndexOf(x)])));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long score = 0;\n        long difference = 0;\n        long guess = 0;\n\
    \        long game = 0;\n        foreach (var item in guess) {\n            guess\
    \ = item;\n            game = game[game.Count - 1];\n            difference =\
    \ Math.Abs(guess - game);\n            result.Add(difference);\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long score = 0;\n        long diff = 0;\n        long guess = 0;\n       \
    \ long game = 0;\n        foreach (var item in guess) {\n            guess = item;\n\
    \            game = game[game.Count - 1];\n            diff = guess - game;\n\
    \            result.Add(diff);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long difference = 0;\n        long scoreDifference = 0;\n        long\
    \ scoreDifference2 = 0;\n        long scoreDifference3 = 0;\n        long scoreDifference4\
    \ = 0;\n        long scoreDifference5 = 0;\n        long scoreDifference6 = 0;\n\
    \        long scoreDifference7 = 0;\n        long scoreDifference8 = 0;\n    \
    \    long scoreDifference9 = 0;\n        long scoreDifference10 = 0;\n       \
    \ long scoreDifference11 = 0;\n        long scoreDifference12 = 0;\n        long\
    \ scoreDifference13 = 0;\n        long scoreDifference14 = 0;\n        long scoreDifference15\
    \ = 0;\n        long scoreDifference16 = 0;\n        long scoreDifference17 =\
    \ 0;\n        long scoreDifference18 = 0;\n        long scoreDifference19 = 0;\n\
    \        long scoreDifference20 = 0;\n        long scoreDifference21 = 0;\n  \
    \      long scoreDifference22 = 0;\n        long scoreDifference23 = 0;\n    \
    \    long scoreDifference24 = 0;\n        long scoreDifference25 = 0;\n      \
    \  long scoreDifference26 = 0;\n        long scoreDifference27 = 0;\n        long\
    \ scoreDifference28 = 0;\n        long scoreDifference29 = 0;\n        long scoreDifference30\
    \ = 0;\n        long scoreDifference31 = 0;\n        long scoreDifference32 =\
    \ 0;\n        long scoreDifference33 = 0;\n        long scoreDifference34 = 0;\n\
    \        long scoreDifference35 = 0;\n        long scoreDifference36 = 0;\n  \
    \      long scoreDifference37 = 0;\n        long scoreDifference38 = 0;\n    \
    \    long scoreDifference39 = 0;\n        long scoreDifference40 = 0;\n      \
    \  long scoreDifference41 = 0;\n        long scoreDifference42 = 0;\n        long\
    \ scoreDifference43 = 0;\n        long scoreDifference44 = 0;\n        long scoreDifference45\
    \ = 0;\n        long scoreDifference46 = 0;\n        long scoreDifference47 =\
    \ 0;\n        long scoreDifference48 = 0;\n        long scoreDifference49 = 0;\n\
    \        long scoreDifference50 = 0;\n        long scoreDifference51 = 0;\n  \
    \      long scoreDifference52 = 0;\n        long scoreDifference53 = 0;\n    \
    \    long scoreDifference54 = 0;\n        long scoreDifference55 = 0;\n      \
    \  long scoreDifference56 = 0;\n        long scoreDifference57 = 0;\n        long\
    \ scoreDifference58 = 0;\n        long scoreDifference59 = 0;\n        long scoreDifference60\
    \ = 0;\n        long scoreDifference61 = 0;\n        long scoreDifference62 =\
    \ 0;\n        long scoreDifference63 = 0;\n        long scoreDifference64 = 0;\n\
    \        long scoreDifference65 = 0;\n        long scoreDifference66 = 0;\n  \
    \      long scoreDifference67 = 0;\n        long scoreDifference68 = 0;\n    \
    \    long scoreDifference69 = 0;\n        long scoreDifference70 = 0;\n      \
    \  long ", "        var result = new List<long>();\n        var scores = new List<long>();\n\
    \        var guesses = new List<long>();\n        foreach (var g in game) {\n\
    \            scores.Add(g);\n        }\n        foreach (var g in guess) {\n \
    \           guesses.Add(g);\n        }\n        var scoreCount = scores.Count;\n\
    \        var guesseCount = guesses.Count;\n        var scoreSum = scores.Sum();\n\
    \        var guesseSum = guesses.Sum();\n        var scoreDiff = scoreSum - guesseSum;\n\
    \        var guesseDiff = guesseSum - scoreSum;\n        var scoreDiffAbs = Math.Abs(scoreDiff);\n\
    \        var guesseDiffAbs = Math.Abs(guesseDiff);\n        var scoreDiffPercent\
    \ = scoreDiff / scoreSum;\n        var guesseDiffPercent = guesseDiff / guesseSum;\n\
    \        var scoreDiffPercentAbs = Math.Abs(scoreDiffPercent);\n        var guesseDiffPercentAbs\
    \ = Math.Abs(guesseDiffPercent);\n        var scoreDiffPercentPercent = scoreDiffPercent\
    \ / scoreCount;\n        var guesseDiffPercentPercent = guesseDiffPercent / guesseCount;\n\
    \        var scoreDiffPercentPercentAbs = Math.Abs(scoreDiffPercentPercent);\n\
    \        var guesseDiffPercentPercentAbs = Math.Abs(guesseDiffPercentPercent);\n\
    \        var scoreDiffPercentPercentPercent = scoreDiffPercent / scoreCount *\
    \ guesseDiffPercent / guesseCount;\n        var guesseDiffPercentPercent = guesseDiffPercent\
    \ / guesseCount * scoreDiffPercent / scoreCount;\n        var scoreDiffPercentPercentPercentAbs\
    \ = Math.Abs(scoreDiffPercentPercent);\n        var guesseDiffPercentPercentAbs\
    \ = Math.Abs(guesseDiffPercentPercent);\n        var scoreDiffPercentPercentPercent\
    \ = scoreDiffPercent / scoreCount * guesseDiffPercent / guesseCount * scoreDiffPercent\
    \ / scoreCount;\n        var guesseDiffPercentPercentPercent = guesseDiffPercent\
    \ / guesseCount * scoreDiffPercent / scoreCount * guesseDiffPercent / guesseCount;\n\
    \        var scoreDiffPercentPercentPercentAbs = Math.Abs(scoreDiffPercentPercent);\n\
    \        var guesseDiffPercentPercentAbs = Math.Abs(guesseDiffPercentPercent);\n\
    \        var scoreDiffPercentPercentPercent = scoreDiffPercent / scoreCount *\
    \ guesseDiffPercent / guesseCount * scoreDiffPercent / scoreCount * guesseDiffPer",
  "        List<long> result = new List<long>();\n        long score = 0;\n      \
    \  long diff = 0;\n        foreach (var g in game) {\n            score = g;\n\
    \            foreach (var g in guess) {\n                diff = g - score;\n \
    \               if (diff < 0) {\n                    diff = -diff;\n         \
    \       }\n                result.Add(diff);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ score = 0;\n        long guess = 0;\n        long difference = 0;\n        foreach\
    \ (var item in game) {\n            score = score * item + item;\n        }\n\
    \        foreach (var item in guess) {\n            guess = guess * item + item;\n\
    \        }\n        foreach (var item in game) {\n            difference = guess\
    \ - score;\n            result.Add(difference);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long score = 0;\n      \
    \  long guess = 0;\n        foreach (var item in game) {\n            score +=\
    \ item;\n        }\n        foreach (var item in guess) {\n            guess +=\
    \ item;\n        }\n        if (guess == score) {\n            result.Add(0);\n\
    \        } else {\n            result.Add(Math.Abs(guess - score));\n        }\n\
    \        return result;", "        var result = new List<long>();\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));\n        game.ForEach(x\
    \ => result.Add(0));\n        guess.ForEach(x => result.Add(0));", "        List<long>\
    \ result = new List<long>();\n        long diff = 0;\n        foreach (var g in\
    \ game) {\n            diff = g - guess[game.IndexOf(g)];\n            result.Add(diff);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score = g;\n            foreach (long g in guess) {\n       \
    \         diff = g - score;\n                if (diff < 0) {\n               \
    \     diff = -diff;\n                }\n                if (diff == 0) {\n   \
    \                 result.Add(0);\n                } else {\n                 \
    \   result.Add(diff);\n                }\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long score\
    \ = 0;\n        long difference = 0;\n        foreach (long g in game) {\n   \
    \         score += g;\n        }\n        foreach (long g in guess) {\n      \
    \      difference += g - score;\n        }\n        result.Add(difference);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        foreach (long g in game) {\n            score = g;\n            foreach\
    \ (long g in guess) {\n                guess = g;\n                difference\
    \ = Math.Abs(guess - score);\n                result.Add(difference);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long score = 0;\n        long guessed = 0;\n        long\
    \ difference = 0;\n        foreach (long g in game) {\n            guessed = g;\n\
    \            foreach (long g in guess) {\n                difference = Math.Abs(g\
    \ - guessed);\n                if (difference == 0) {\n                    score\
    \ = 0;\n                    break;\n                }\n                else {\n\
    \                    score = difference;\n                    break;\n       \
    \         }\n            }\n            result.Add(score);\n        }\n      \
    \  return result;", "        var result = new List<long>();\n        game.ForEach(x\
    \ => result.Add(Math.Abs(x - guess[game.IndexOf(x)])));\n        return result;"]
stop_tokens:
- "\n    }\n"
