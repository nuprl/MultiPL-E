name: HumanEval_143_words_in_sentence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string representing a sentence,\n    // the\
  \ sentence contains some words separated by a space,\n    // and you have to return\
  \ a string that contains the words from the original sentence,\n    // whose lengths\
  \ are prime numbers,\n    // the order of the words in the new string should be\
  \ the same as the original one.\n    // Example 1:\n    // Input: sentence = \"\
  This is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
  \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n \
  \   // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n  \
  \  public static string WordsInSentence(string sentence) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
  This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
  \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
  there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
  Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
  go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\"\
  )).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
  is\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        bool isPrime = true;\n     \
    \   string word = \"\";\n        foreach (char c in sentence) {\n            if\
    \ (char.IsLetter(c)) {\n                word += c;\n            } else {\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        char[] charArray = word.ToCharArray();\n        Array.Sort(charArray);\n\
    \        foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n\
    \                for (int i = 2; i <= Math.Sqrt(char.MaxValue); i++) {\n     \
    \               if (c % i == 0) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        if (isPrime) {\n            foreach (char c in\
    \ charArray) {\n                result += c;\n            }\n        }\n     \
    \   return result;", "        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ chars) {\n            if (char.IsLetter(c)) {\n                string word =\
    \ c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        List<int> lengths = new List<int>();\n        foreach (string word in\
    \ words) {\n            int length = word.Length;\n            lengths.Add(length);\n\
    \        }\n        List<int> primes = new List<int>();\n        foreach (int\
    \ length in lengths) {\n            bool isPrime = true;\n            for (int\
    \ i = 2; i <= length / 2; i++) {\n                if (length % i == 0) {\n   \
    \                 isPrime = false;\n                    break;\n             \
    \   }\n            }\n            if (isPrime) {\n                primes.Add(length);\n\
    \            }\n        }\n        foreach (int length in primes) {\n        \
    \    string word = \"\";\n            foreach (string word in words) {\n     \
    \           if (word.Length == length) {\n                    result += \" \"\
    \ + word;\n                }\n            }\n        }\n        return result.Trim();",
  "        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;", "        string result = \"\";\n        List<string> list\
    \ = new List<string>();\n        foreach (string word in sentence.Split(' '))\n\
    \        {\n            list.Add(word);\n        }\n        list.Sort();\n   \
    \     foreach (string word in list)\n        {\n            int length = word.Length;\n\
    \            if (IsPrime(length))\n            {\n                result += \"\
    \ \" + word;\n            }\n        }\n        return result.Trim();", "    \
    \    string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            int length = word.Length;\n            int count = 0;\n     \
    \       int start = 0;\n            int end = 0;\n            int prime = 0;\n\
    \            while (end < length) {\n                prime = Convert.ToInt32(Math.Sqrt(Convert.ToDouble(length)));\n\
    \                for (int i = start; i <= prime; i++) {\n                    if\
    \ (word.Substring(i, 1).Equals(word.Substring(i - 1, 1))) {\n                \
    \        count++;\n                    }\n                }\n                if\
    \ (count == prime) {\n                    result = result + word.Substring(start,\
    \ end - start);\n                    start = end + 1;\n                    count\
    \ = 0;\n                }\n                end++;\n            }\n        }\n\
    \        return result;", "        string result = \"\";\n        char[] chars\
    \ = sentence.ToCharArray();\n        List<int> primes = new List<int>();\n   \
    \     foreach (char c in chars) {\n            int prime = PrimeNumber(c);\n \
    \           if (prime > 0)\n                primes.Add(prime);\n        }\n  \
    \      primes.Sort();\n        foreach (int prime in primes) {\n            string\
    \ temp = string.Empty;\n            for (int i = 0; i < chars.Length; i++) {\n\
    \                if (chars[i] == ' ') {\n                    temp += chars[i];\n\
    \                }\n            }\n            if (temp.Length == prime) {\n \
    \               result += temp;\n            }\n        }\n        return result;",
  "        string result = \"\";\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        string wordsInSentence = sentence.Split(\"\
    \ \").ToList();\n        List<int> primeNumbers = new List<int>();\n        for\
    \ (int i = 2; i <= Math.Sqrt(wordsInSentence.Count); i++) {\n            if (wordsInSentence.All(x\
    \ => x % i == 0)) {\n                primeNumbers.Add(i);\n            }\n   \
    \     }\n        foreach (int primeNumber in primeNumbers) {\n            int\
    \ count = 0;\n            foreach (string word in wordsInSentence) {\n       \
    \         if (word.Length == primeNumber) {\n                    count++;\n  \
    \              }\n            }\n            if (count == wordsInSentence.Count)\
    \ {\n                result += \" \" + word;\n            }\n        }\n     \
    \   return result;", "        string result = \"\";\n        string word = \"\"\
    ;\n        string temp = \"\";\n        foreach (char c in sentence) {\n     \
    \       if (char.IsLetter(c)) {\n                word += c;\n            } else\
    \ {\n                if (word.Length > 0) {\n                    temp = word;\n\
    \                    word = \"\";\n                    result += temp;\n     \
    \           }\n            }\n        }\n        if (word.Length > 0) {\n    \
    \        temp = word;\n            word = \"\";\n            result += temp;\n\
    \        }\n        return result;", "        string result = \"\";\n        string\
    \ word = \"\";\n        string temp = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n            }\n\
    \        }\n        char[] charArray2 = word.ToCharArray();\n        Array.Sort(charArray2);\n\
    \        foreach (char c in charArray2) {\n            if (char.IsLetter(c)) {\n\
    \                temp += c;\n            }\n        }\n        char[] charArray3\
    \ = temp.ToCharArray();\n        Array.Sort(charArray3);\n        foreach (char\
    \ c in charArray3) {\n            if (char.IsLetter(c)) {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        string result\
    \ = \"\";\n        string word = \"\";\n        bool isPrime = true;\n       \
    \ int n = sentence.Length;\n        string newWord = \"\";\n        for (int i\
    \ = 0; i < n; i++) {\n            word = sentence[i];\n            int count =\
    \ 0;\n            while (word != \" \") {\n                count++;\n        \
    \        word = word.Substring(1);\n            }\n            if (isPrime) {\n\
    \                for (int j = 2; j < count; j++) {\n                    if (count\
    \ % j == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \     if (isPrime) {\n                newWord = word + \" \" + newWord;\n    \
    \        }\n        }\n        result = newWord;\n        return result;", " \
    \       string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  if (length == 1) {\n                result += word;\n            }\n      \
    \      else if (length == 2 && word[0] != word[1]) {\n                result +=\
    \ word;\n            }\n            else if (length == 3 && word[0] != word[1]\
    \ && word[0] != word[2] && word[1] != word[2]) {\n                result += word;\n\
    \            }\n            else if (length == 4 && word[0] != word[1] && word[0]\
    \ != word[2] && word[0] != word[3] && word[1] != word[2] && word[1] != word[3]\
    \ && word[2] != word[3]) {\n                result += word;\n            }\n \
    \           else if (length == 5 && word[0] != word[1] && word[0] != word[2] &&\
    \ word[0] != word[3] && word[0] != word[4] && word[1] != word[2] && word[1] !=\
    \ word[3] && word[1] != word[4] && word[2] != word[3] && word[2] != word[4] &&\
    \ word[3] != word[4]) {\n                result += word;\n            }\n    \
    \        else if (length == 6 && word[0] != word[1] && word[0] != word[2] && word[0]\
    \ != word[3] && word[0] != word[4] && word[0] != word[5] && word[1] != word[2]\
    \ && word[1] != word[3] && word[1] != word[4] && word[1] != word[5] && word[2]\
    \ != word[3] && word[2] != word[4] && word[2] != word[5] && word[3] != word[4]\
    \ && word[3] != word[5]) {\n                result += word;\n            }\n \
    \           else if (length == 7 && word[0] != word[1] && word[0] != word[2] &&\
    \ word[0] != word[3] && word[0] != word[4] && word[0] != word[5] && word[0] !=\
    \ word[6] && word[1] != word[2] && word[1] != word[3] && word[1] != word[4] &&\
    \ word[1] != word[5] && word[1] != word[6] && word[2] != word[3] && word[2] !=\
    \ word[4] && word[2] != word[5] && word[2] != word[6] && word[3] != word[4] &&\
    \ word[3] != word[5] && word[3] != word[6]) {\n                result += word;\n\
    \            }\n            else if (length == 8 && word[0] != word[1] && word[0]\
    \ != word[2] && word[0] != word[3] && word[0] != word[4] && word[0] != word[5]\
    \ && word[0] != word[6] && word[0] != word[7] && word[1] != word[2] && word[1]\
    \ != word[3] && word[1] != word[4] && word[1] != word[5] && word[1] != word[6]\
    \ && word[1] != word[7] && ", "        string result = \"\";\n        string word\
    \ = \"\";\n        string temp = \"\";\n        bool isPrime = true;\n       \
    \ foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n      \
    \          word += c;\n            }\n        }\n        foreach (char c in word)\
    \ {\n            temp = c + temp;\n        }\n        foreach (char c in temp)\
    \ {\n            isPrime = isPrime && IsPrime(Convert.ToInt32(c));\n        }\n\
    \        if (isPrime) {\n            foreach (char c in word) {\n            \
    \    result += c;\n            }\n        }\n        return result;", "      \
    \  string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n   \
    \     }\n        primes.Sort();\n        foreach (int n in primes) {\n       \
    \     if (n % 2 == 0) {\n                for (int i = 3; i <= Math.Sqrt(n); i\
    \ += 2) {\n                    if (n % i == 0) {\n                        for\
    \ (int j = 3; j <= Math.Sqrt(n); j += 2) {\n                            if (n\
    \ % j == 0) {\n                                result = result + charArray[primes.IndexOf(j)];\n\
    \                                break;\n                            }\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        List<string>\
    \ words = new List<string>();\n        foreach (char c in sentence) {\n      \
    \      if (char.IsLetter(c)) {\n                words.Add(c.ToString());\n   \
    \         }\n        }\n        foreach (string word in words) {\n           \
    \ int length = word.Length;\n            if (length == 1) {\n                result\
    \ += word;\n            }\n            else if (length == 2 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 3 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 4 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 5 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 6 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 7 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 8 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 9 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 10 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 11 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 12 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 13 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 14 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 15 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 16 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 17 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 18 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 19 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 20 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 21 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 22 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 23 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 24 && IsPrime(length)) {\n                result += word;", "        string\
    \ result = \"\";\n        string word = \"\";\n        string temp = \"\";\n \
    \       bool isPrime = true;\n        foreach (char c in sentence) {\n       \
    \     word = word + c;\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int num = Convert.ToInt32(c);\n            primes.Add(num);\n\
    \        }\n        primes.Sort();\n        for (int i = 0; i < primes.Count;\
    \ i++) {\n            if (primes[i] != i) {\n                isPrime = false;\n\
    \            }\n        }\n        if (isPrime) {\n            foreach (char c\
    \ in charArray) {\n                int num = Convert.ToInt32(c);\n           \
    \     if (num % 2 == 0) {\n                    temp = temp + c;\n            \
    \    }\n            }\n            result = temp;\n        }\n        return result;",
  "        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            int i = 2;\n            while (i <= length)\n         \
    \   {\n                if (length%i == 0)\n                {\n               \
    \     isPrime = false;\n                    break;\n                }\n      \
    \          i++;\n            }\n            if (isPrime)\n            {\n    \
    \            result += word;\n            }\n        }\n        return result;",
  "        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int len = word.Length;\n            if (IsPrime(len))\n\
    \            {\n                result += \" \" + word;\n            }\n     \
    \   }\n        return result.Trim();", "        string result = \"\";\n      \
    \  foreach (string word in sentence.Split(' '))\n        {\n            int length\
    \ = word.Length;\n            if (IsPrime(length))\n            {\n          \
    \      result += word;\n            }\n        }\n        return result;", " \
    \       string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        List<int> primes = new List<int>();\n\
    \        foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n\
    \                primes.Add(c);\n            }\n        }\n        foreach (int\
    \ prime in primes) {\n            if (primes.Contains(prime)) {\n            \
    \    for (int i = 2; i <= Math.Sqrt(prime); i++) {\n                    if (prime\
    \ % i == 0) {\n                        break;\n                    }\n       \
    \         }\n                if (i == Math.Sqrt(prime)) {\n                  \
    \  result += \" \" + prime;\n                }\n            }\n        }\n   \
    \     return result;", "        string result = \"\";\n        bool isPrime =\
    \ true;\n        string temp = \"\";\n        foreach (char c in sentence) {\n\
    \            if (char.IsLetter(c)) {\n                temp = temp + c;\n     \
    \       }\n        }\n        char[] arr = temp.ToCharArray();\n        Array.Sort(arr);\n\
    \        foreach (char c in arr) {\n            int n = Convert.ToInt32(c);\n\
    \            if (isPrime) {\n                for (int i = 2; i <= Math.Sqrt(n);\
    \ i++) {\n                    if (n % i == 0) {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n            }\n            if (isPrime) {\n                result +=\
    \ \" \" + c;\n            }\n        }\n        return result.Trim();"]
stop_tokens:
- "\n    }\n"
