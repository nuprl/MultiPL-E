name: HumanEval_5_intersperse
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n    // >>> intersperse([], 4)\n    // []\n    // >>>\
  \ intersperse([1, 2, 3], 4)\n    // [1, 4, 2, 4, 3]\n    public static List<long>\
  \ Intersperse(List<long> numbers, long delimeter) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new\
  \ List<long>()), (7L)).Equals((new List<long>())));\n    Debug.Assert(Intersperse((new\
  \ List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L,\
  \ (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)2L})), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
  \ (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"
completions: ["        if (numbers.Count == 0) {\n            return new List<long>();\n\
    \        }\n        var result = new List<long>();\n        var first = numbers.First();\n\
    \        result.Add(first);\n        var last = numbers.Last();\n        result.Add(last);\n\
    \        numbers.RemoveAt(0);\n        numbers.RemoveAt(numbers.Count - 1);\n\
    \        foreach (var number in numbers) {\n            result.Add(number);\n\
    \            result.Add(delimeter);\n        }\n        result.Add(last);\n  \
    \      return result;", "        if (numbers.Count == 0) return new List<long>();\n\
    \        var result = new List<long>();\n        var current = numbers.First();\n\
    \        result.Add(current);\n        foreach (var number in numbers.Skip(1))\
    \ {\n            result.Add(number);\n            result.Add(delimeter);\n   \
    \         result.Add(number);\n        }\n        return result;", "        if\
    \ (numbers.Count == 0) {\n            return new List<long>();\n        }\n  \
    \      var result = new List<long>();\n        var current = numbers.First();\n\
    \        result.Add(current);\n        var previous = numbers.First();\n     \
    \   foreach (var number in numbers.Skip(1)) {\n            result.Add(delimeter);\n\
    \            result.Add(number);\n            previous = number;\n        }\n\
    \        return result;", "        if (numbers.Count < 2)\n            return\
    \ numbers;\n        var result = new List<long>();\n        var first = true;\n\
    \        foreach (var number in numbers) {\n            if (first)\n         \
    \       first = false;\n            else\n                result.Add(delimeter);\n\
    \            result.Add(number);\n        }\n        return result;", "      \
    \  if (numbers.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        long lastNumber = numbers.Last();\n\
    \        result.Add(lastNumber);\n        numbers.RemoveAt(0);\n        foreach\
    \ (long number in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \        }\n        result.Add(lastNumber);\n        return result;", "      \
    \  var result = new List<long>();\n        var current = new List<long>();\n \
    \       foreach (var number in numbers) {\n            current.Add(number);\n\
    \            if (current.Count > 1) {\n                result.Add(delimeter);\n\
    \                result.AddRange(current);\n                current = new List<long>();\n\
    \            }\n        }\n        if (current.Count > 0)\n            result.Add(delimeter);\n\
    \        result.AddRange(current);\n        return result;", "        if (numbers.Count\
    \ < 2)\n            return numbers;\n        var result = new List<long>();\n\
    \        var first = true;\n        foreach (var n in numbers) {\n           \
    \ if (first)\n                first = false;\n            else\n             \
    \   result.Add(delimeter);\n            result.Add(n);\n        }\n        return\
    \ result;", "        if (numbers.Count < 2)\n            return numbers;\n   \
    \     var result = new List<long>();\n        var current = numbers.First();\n\
    \        result.Add(current);\n        numbers.RemoveAt(0);\n        foreach (var\
    \ number in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var number in numbers) {\n            result.Add(number);\n\
    \            result.Add(delimeter);\n        }\n        return result;", "   \
    \     if (numbers.Count == 0) {\n            return new List<long>();\n      \
    \  }\n        var result = new List<long>();\n        var current = numbers.First();\n\
    \        result.Add(current);\n        numbers.RemoveAt(0);\n        foreach (var\
    \ number in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \            result.Add(current);\n            current = number;\n        }\n\
    \        result.Add(current);\n        return result;", "        if (numbers.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long lastNumber = numbers.Last();\n    \
    \    long currentNumber = numbers.First();\n        result.Add(currentNumber);\n\
    \        while (currentNumber != lastNumber) {\n            result.Add(currentNumber);\n\
    \            currentNumber = numbers.Skip(1).First();\n            result.Add(delimeter);\n\
    \        }\n        return result;", "        if (numbers.Count == 0) {\n    \
    \        return new List<long>();\n        }\n        var result = new List<long>();\n\
    \        var current = numbers.First();\n        result.Add(current);\n      \
    \  numbers.RemoveAt(0);\n        foreach (var number in numbers) {\n         \
    \   result.Add(number);\n            result.Add(delimeter);\n        }\n     \
    \   return result;", "        if (numbers.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        var result = new List<long>();\n        var\
    \ lastNumber = numbers.First();\n        result.Add(lastNumber);\n        var\
    \ currentNumber = numbers.First();\n        while (currentNumber != numbers.Last())\
    \ {\n            result.Add(currentNumber);\n            currentNumber = numbers.Skip(1).First();\n\
    \        }\n        result.Add(currentNumber);\n        result.Add(lastNumber);\n\
    \        return result;", "        if (numbers.Count == 0) return new List<long>();\n\
    \        var result = new List<long>();\n        var current = numbers.First();\n\
    \        result.Add(current);\n        numbers.RemoveAt(0);\n        foreach (var\
    \ number in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \        }\n        return result;", "        if (numbers.Count == 0) {\n    \
    \        return new List<long>();\n        }\n        var result = new List<long>();\n\
    \        var first = true;\n        foreach (var number in numbers) {\n      \
    \      if (first) {\n                result.Add(number);\n                first\
    \ = false;\n            }\n            else {\n                result.Add(delimeter);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var number\
    \ in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \        }\n        return result;", "        if (numbers == null || numbers.Count\
    \ == 0) return numbers;\n        var result = new List<long>();\n        var current\
    \ = numbers.First();\n        result.Add(current);\n        for (var i = 1; i\
    \ < numbers.Count; i++) {\n            result.Add(current);\n            result.Add(delimeter);\n\
    \            current = numbers[i];\n        }\n        result.Add(current);\n\
    \        return result;", "        if (numbers.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var result = new List<long>();\n     \
    \   var current = numbers.First();\n        result.Add(current);\n        foreach\
    \ (var number in numbers.Skip(1)) {\n            result.Add(delimeter);\n    \
    \        result.Add(number);\n        }\n        return result;", "        if\
    \ (numbers.Count == 0) return new List<long>();\n        var result = new List<long>();\n\
    \        var firstNumber = numbers.First();\n        result.Add(firstNumber);\n\
    \        var lastNumber = numbers.Last();\n        result.Add(lastNumber);\n \
    \       var currentNumber = firstNumber;\n        foreach (var nextNumber in numbers.Skip(1).Take(numbers.Count\
    \ - 1)) {\n            result.Add(currentNumber);\n            result.Add(delimeter);\n\
    \            currentNumber = nextNumber;\n        }\n        result.Add(currentNumber);\n\
    \        return result;", "        if (numbers.Count == 0) return new List<long>();\n\
    \        var result = new List<long>();\n        var first = true;\n        foreach\
    \ (var number in numbers) {\n            if (first) {\n                result.Add(number);\n\
    \                first = false;\n            }\n            else {\n         \
    \       result.Add(delimeter);\n                result.Add(number);\n        \
    \    }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
