name: HumanEval_135_can_arrange
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which returns the largest index of an element\
  \ which\n    // is not greater than or equal to the element immediately preceding\
  \ it. If\n    // no such element exists then return -1. The given array will not\
  \ contain\n    // duplicate values.\n    // Examples:\n    // can_arrange([1,2,4,3,5])\
  \ = 3\n    // can_arrange([1,2,3]) = -1\n    public static long CanArrange(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==\
  \ (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new\
  \ long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,\
  \ (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,\
  \ (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new\
  \ List<long>())) == (-1L));\n    }\n\n}\n"
completions: ["        long maxIndex = -1;\n        long maxValue = arr[0];\n    \
    \    for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr[i];\n     \
    \       }\n        }\n        return maxIndex;", "        long max = arr.Max();\n\
    \        long maxIndex = arr.IndexOf(max);\n        if (maxIndex == -1) return\
    \ -1;\n        long maxPrev = arr.ElementAtOrDefault(maxIndex - 1);\n        if\
    \ (maxPrev >= max) return -1;\n        return maxIndex + 1;", "        long largest\
    \ = arr.First();\n        long smallest = arr.First();\n        foreach (long\
    \ i in arr) {\n            if (i > largest) {\n                largest = i;\n\
    \            }\n            if (i < smallest) {\n                smallest = i;\n\
    \            }\n        }\n        if (largest == smallest) {\n            return\
    \ -1;\n        }\n        return arr.IndexOf(largest);", "        long maxIndex\
    \ = -1;\n        long maxValue = arr[0];\n        long currentIndex = 0;\n   \
    \     foreach (long value in arr) {\n            if (value >= maxValue) {\n  \
    \              maxIndex = currentIndex;\n                maxValue = value;\n \
    \           }\n            currentIndex++;\n        }\n        return maxIndex;",
  "        long largest = arr.First();\n        long current = arr.First();\n    \
    \    long index = 0;\n        long previous = arr.First();\n        foreach (long\
    \ num in arr) {\n            if (num > largest) {\n                index = arr.IndexOf(current);\n\
    \                largest = num;\n            }\n            current = num;\n \
    \           previous = num;\n        }\n        return index;", "        long\
    \ largest = arr.First();\n        long current = arr.First();\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest) {\n        \
    \        largest = current;\n            }\n            current = arr[i];\n  \
    \      }\n        return largest;", "        long max = arr.First();\n       \
    \ long maxIndex = -1;\n        for (int i = 1; i < arr.Count; i++) {\n       \
    \     if (arr[i] > max) {\n                max = arr[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        return maxIndex;", "        long largest\
    \ = arr.First();\n        long current = arr.First();\n        for (int i = 1;\
    \ i < arr.Count; i++) {\n            if (arr[i] > largest) {\n               \
    \ largest = current;\n                current = arr[i];\n            }\n     \
    \   }\n        return largest;", "        long maxIndex = -1;\n        long currentIndex\
    \ = arr.First();\n        long previousIndex = arr.First();\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] < currentIndex) {\n   \
    \             currentIndex = arr[i];\n                previousIndex = currentIndex;\n\
    \            }\n            if (arr[i] > currentIndex && arr[i] > previousIndex)\
    \ {\n                maxIndex = i;\n            }\n        }\n        return maxIndex;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long maxIndex = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = arr[0];\n        long previousValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > currentValue) {\n                currentIndex = i;\n                currentValue\
    \ = arr[i];\n            }\n            if (arr[i] < previousValue) {\n      \
    \          maxIndex = i;\n                previousValue = arr[i];\n          \
    \  }\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long current = arr.First();\n        long previous = arr.First();\n \
    \       foreach (long i in arr) {\n            if (i > largest) {\n          \
    \      largest = current;\n                previous = current;\n             \
    \   current = i;\n            } else if (i > current) {\n                previous\
    \ = current;\n                current = i;\n            }\n        }\n       \
    \ if (current > largest) {\n            largest = current;\n        }\n      \
    \  return largest;", "        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue)\
    \ {\n                maxValue = arr[i];\n                maxIndex = i;\n     \
    \       }\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long index = 0;\n        foreach (long i in arr) {\n            if (i\
    \ > largest) {\n                index = i;\n                largest = i;\n   \
    \         }\n        }\n        return index;", "        long max = arr.First();\n\
    \        long maxIndex = arr.IndexOf(max);\n        long minIndex = arr.IndexOf(arr.First());\n\
    \        long mid = maxIndex - minIndex + 1;\n        if (mid > 0) {\n       \
    \     max = arr.ElementAt(mid);\n            maxIndex = arr.IndexOf(max);\n  \
    \          minIndex = arr.IndexOf(arr.First());\n            mid = maxIndex -\
    \ minIndex + 1;\n        }\n        if (mid == 0) {\n            return maxIndex;\n\
    \        }\n        if (mid > 1) {\n            max = arr.ElementAt(mid);\n  \
    \          maxIndex = arr.IndexOf(max);\n            minIndex = arr.IndexOf(arr.First());\n\
    \            mid = maxIndex - minIndex + 1;\n        }\n        if (mid == 1)\
    \ {\n            return minIndex;\n        }\n        if (mid < arr.Count) {\n\
    \            max = arr.ElementAt(mid);\n            maxIndex = arr.IndexOf(max);\n\
    \            minIndex = arr.IndexOf(arr.First());\n            mid = maxIndex\
    \ - minIndex + 1;\n        }\n        return -1;", "        long max = arr.First();\n\
    \        long maxIndex = -1;\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] > max) {\n                max = arr[i];\n            \
    \    maxIndex = i;\n            }\n        }\n        return maxIndex;", "   \
    \     long largest = arr.First();\n        long current = arr.First();\n     \
    \   long previous = arr.First();\n        foreach (var item in arr.Skip(1))\n\
    \        {\n            if (item > largest)\n            {\n                largest\
    \ = item;\n            }\n            if (item < current)\n            {\n   \
    \             current = item;\n            }\n            if (item < previous)\n\
    \            {\n                previous = item;\n            }\n        }\n \
    \       return largest;", "        long maxIndex = -1;\n        long maxValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = arr[i];\n\
    \            }\n        }\n        return maxIndex;", "        long max = arr.First();\n\
    \        long maxIndex = -1;\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] > max) {\n                max = arr[i];\n            \
    \    maxIndex = i;\n            }\n        }\n        return maxIndex;", "   \
    \     long largest = arr.First();\n        long index = arr.IndexOf(largest);\n\
    \        long prevIndex = index - 1;\n        long nextIndex = index + 1;\n  \
    \      while (index != -1) {\n            if (arr[prevIndex] >= arr[index]) {\n\
    \                largest = index;\n                index = prevIndex;\n      \
    \          prevIndex = nextIndex;\n                nextIndex = index + 1;\n  \
    \          } else {\n                index = arr.IndexOf(arr[nextIndex]);\n  \
    \              nextIndex = index + 1;\n            }\n        }\n        return\
    \ largest;", "        long largest = arr.First();\n        long largestIndex =\
    \ 0;\n        foreach (long i in arr) {\n            if (i > largest) {\n    \
    \            largest = i;\n                largestIndex = i;\n            }\n\
    \        }\n        return largestIndex;", "        long maxIndex = -1;\n    \
    \    long maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] > maxValue) {\n                maxIndex = i;\n       \
    \         maxValue = arr[i];\n            }\n        }\n        return maxIndex;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long largest = arr.First();\n \
    \       long index = 0;\n        foreach (long i in arr) {\n            if (i\
    \ > largest) {\n                index = arr.IndexOf(largest);\n              \
    \  largest = i;\n            }\n        }\n        return index;", "        long\
    \ largest = arr.First();\n        long smallest = arr.First();\n        foreach\
    \ (long i in arr.Skip(1)) {\n            if (i > largest) {\n                largest\
    \ = i;\n            }\n            if (i < smallest) {\n                smallest\
    \ = i;\n            }\n        }\n        return largest - smallest;", "     \
    \   long maxIndex = -1;\n        long maxValue = arr[0];\n        long currentValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (currentValue\
    \ <= arr[i]) {\n                currentValue = arr[i];\n            }\n      \
    \      if (currentValue > maxValue) {\n                maxIndex = i;\n       \
    \         maxValue = currentValue;\n            }\n        }\n        return maxIndex;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long max = arr.First();\n     \
    \   long min = arr.First();\n        foreach (long i in arr.Skip(1))\n       \
    \     if (i > max)\n                max = i;\n            else if (i < min)\n\
    \                min = i;\n        if (max < min)\n            return -1;\n  \
    \      else\n            return max;", "        long largest = arr.First();\n\
    \        long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] > largest) {\n                largest = arr[i];\n        \
    \        index = i;\n            }\n        }\n        return index;", "     \
    \   long largest = arr.First();\n        long current = arr.First();\n       \
    \ long previous = arr.First();\n        foreach (long i in arr) {\n          \
    \  if (i > current) {\n                current = i;\n                previous\
    \ = current;\n            }\n            if (i > largest) {\n                largest\
    \ = i;\n            }\n        }\n        if (largest == arr.First()) {\n    \
    \        return -1;\n        }\n        return largest;", "        long maxIndex\
    \ = -1;\n        long maxValue = arr[0];\n        long currentIndex = -1;\n  \
    \      foreach (long value in arr) {\n            if (value >= maxValue) {\n \
    \               currentIndex = maxIndex;\n                maxValue = value;\n\
    \            }\n            if (value >= currentIndex) {\n                currentIndex\
    \ = value;\n            }\n            if (currentIndex != -1) {\n           \
    \     maxIndex = currentIndex;\n            }\n        }\n        return maxIndex;",
  "        long largest = arr.First();\n        long index = 0;\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest) {\n        \
    \        index = i;\n                largest = arr[i];\n            }\n      \
    \  }\n        return index;", "        long maxIndex = -1;\n        long maxValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = arr[i];\n\
    \            }\n        }\n        return maxIndex;", "        long maxIndex =\
    \ -1;\n        long currentIndex = 0;\n        long maxValue = arr[0];\n     \
    \   foreach (long value in arr) {\n            if (value <= maxValue) {\n    \
    \            currentIndex++;\n            }\n            if (currentIndex > maxIndex)\
    \ {\n                maxIndex = currentIndex;\n                maxValue = value;\n\
    \            }\n        }\n        return maxIndex;", "        long maxIndex =\
    \ -1;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n\
    \                maxValue = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        long maxIndex = -1;\n        long maxValue = arr[0];\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr[i];\n     \
    \       }\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long current = arr.First();\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > largest) {\n                largest = current;\n\
    \                current = arr[i];\n            }\n        }\n        return largest;",
  "        long max = arr.First();\n        long maxIndex = -1;\n        long maxIndex2\
    \ = -1;\n        long maxIndex3 = -1;\n        foreach (long i in arr) {\n   \
    \         if (i > max) {\n                maxIndex = i;\n                max =\
    \ i;\n            }\n            if (i > maxIndex2) {\n                maxIndex2\
    \ = i;\n                maxIndex3 = maxIndex;\n            }\n            if (i\
    \ > maxIndex3) {\n                maxIndex3 = i;\n            }\n        }\n \
    \       return maxIndex;", "        long largest = arr.First();\n        long\
    \ index = arr.IndexOf(largest);\n        long previous = arr.ElementAtOrDefault(index\
    \ - 1);\n        if (previous >= largest) {\n            return -1;\n        }\n\
    \        foreach (var item in arr.Skip(index + 1)) {\n            if (item > largest)\
    \ {\n                return -1;\n            }\n            if (item < previous)\
    \ {\n                return index;\n            }\n            previous = item;\n\
    \        }\n        return -1;", "        long maxIndex = -1;\n        long maxValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = arr[i];\n\
    \            }\n        }\n        return maxIndex;", "        long maxIndex =\
    \ -1;\n        long maxValue = arr[0];\n        long currentIndex = arr.Count\
    \ - 1;\n        long currentValue = arr[currentIndex];\n        while (currentIndex\
    \ > 0) {\n            if (currentValue <= maxValue) {\n                currentIndex--;\n\
    \                currentValue = arr[currentIndex];\n            } else {\n   \
    \             maxIndex = currentIndex;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;", "        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long mid = max / 2;\n        long left\
    \ = 0;\n        long right = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     while (left <= right) {\n            long midIndex = (left + right) / 2;\n\
    \            if (arr[midIndex] >= mid) {\n                right = midIndex - 1;\n\
    \            } else {\n                left = midIndex + 1;\n            }\n \
    \       }\n        if (left > max) {\n            maxIndex = left;\n        }\
    \ else if (right < max) {\n            maxIndex = right;\n        } else {\n \
    \           maxIndex = max;\n        }\n        return maxIndex;", "        long\
    \ maxIndex = -1;\n        long maxValue = arr[0];\n        long currentIndex =\
    \ arr.Count - 1;\n        long currentValue = arr[currentIndex];\n        while\
    \ (currentIndex >= 0) {\n            if (currentValue >= maxValue) {\n       \
    \         maxIndex = currentIndex;\n                maxValue = currentValue;\n\
    \            }\n            currentIndex--;\n            currentValue = arr[currentIndex];\n\
    \        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] > largest) {\n                index = i;\n               \
    \ largest = arr[i];\n            }\n        }\n        return index;", "     \
    \   long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int i =\
    \ 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n           \
    \     maxIndex = i;\n                maxValue = arr[i];\n            }\n     \
    \   }\n        return maxIndex;", "        long maxIndex = -1;\n        long maxValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = arr[i];\n\
    \            }\n        }\n        return maxIndex;", "        long max = arr.First();\n\
    \        long min = arr.First();\n        long index = 0;\n        foreach (var\
    \ item in arr.Skip(1))\n        {\n            if (item > max)\n            {\n\
    \                max = item;\n                index = arr.IndexOf(max);\n    \
    \        }\n            if (item < min)\n            {\n                min =\
    \ item;\n                index = arr.IndexOf(min);\n            }\n        }\n\
    \        return index;", "        long maxIndex = -1;\n        long maxValue =\
    \ arr[0];\n        long currentIndex = arr.Count - 1;\n        while (currentIndex\
    \ >= 0) {\n            if (arr[currentIndex] > maxValue) {\n                maxIndex\
    \ = currentIndex;\n                maxValue = arr[currentIndex];\n           \
    \ }\n            currentIndex--;\n        }\n        return maxIndex;", "    \
    \    long max = arr.Max();\n        long min = arr.Min();\n        long maxIndex\
    \ = arr.IndexOf(max);\n        long minIndex = arr.IndexOf(min);\n        if (maxIndex\
    \ == minIndex) {\n            return -1;\n        }\n        if (maxIndex < minIndex)\
    \ {\n            return maxIndex;\n        }\n        return minIndex;", "   \
    \     long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n         \
    \       maxIndex = i;\n                maxValue = arr[i];\n            }\n   \
    \     }\n        return maxIndex;", "        long largest = arr.First();\n   \
    \     long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n       \
    \     if (arr[i] > largest) {\n                index = i;\n                largest\
    \ = arr[i];\n            }\n        }\n        return index;", "        long largest\
    \ = arr.First();\n        long index = 0;\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] >= largest) {\n                index = i;\n \
    \               largest = arr[i];\n            }\n        }\n        return index;",
  "        long largest = arr.First();\n        long current = arr.First();\n    \
    \    for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest)\
    \ {\n                largest = current;\n                current = arr[i];\n \
    \           }\n        }\n        return largest;", "        long maxIndex = -1;\n\
    \        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n   \
    \             maxValue = arr[i];\n            }\n        }\n        return maxIndex;",
  "        long largest = arr.First();\n        long smallest = arr.First();\n   \
    \     foreach (long i in arr) {\n            if (i > largest) {\n            \
    \    largest = i;\n            }\n            if (i < smallest) {\n          \
    \      smallest = i;\n            }\n        }\n        if (largest == smallest)\
    \ {\n            return -1;\n        }\n        return largest;", "        long\
    \ largest = arr.First();\n        long current = arr.First();\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest) {\n        \
    \        largest = current;\n                current = arr[i];\n            }\n\
    \        }\n        return largest;", "        long max = arr.Max();\n       \
    \ long min = arr.Min();\n        long result = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] <= max && arr[i] >= min) {\n   \
    \             result = i;\n                break;\n            }\n        }\n\
    \        return result;", "        long max = arr.Max();\n        long min = arr.Min();\n\
    \        long mid = max / 2;\n        long left = 0;\n        long right = 0;\n\
    \        long maxIndex = 0;\n        long minIndex = 0;\n        bool found =\
    \ false;\n        foreach (long i in arr) {\n            if (i == mid) {\n   \
    \             found = true;\n            }\n            if (i == max) {\n    \
    \            maxIndex = i;\n            }\n            if (i == min) {\n     \
    \           minIndex = i;\n            }\n            if (found == true) {\n \
    \               left = i;\n            }\n            if (i == max) {\n      \
    \          right = i;\n            }\n        }\n        if (maxIndex == minIndex)\
    \ {\n            return -1;\n        }\n        if (maxIndex > minIndex) {\n \
    \           return maxIndex;\n        }\n        if (maxIndex < minIndex) {\n\
    \            return minIndex;\n        }\n        if (maxIndex == mid) {\n   \
    \         return maxIndex + 1;\n        }\n        if (maxIndex == min) {\n  \
    \          return minIndex - 1;\n        }\n        if (maxIndex == left) {\n\
    \            return maxIndex - 1;\n        }\n        if (maxIndex == right) {\n\
    \            return minIndex + 1;\n        }\n        return -1;", "        long\
    \ maxIndex = -1;\n        long maxValue = arr[0];\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            if (arr[i] > maxValue) {\n                maxIndex\
    \ = i;\n                maxValue = arr[i];\n            }\n        }\n       \
    \ return maxIndex;", "        long largest = arr.First();\n        long index\
    \ = arr.IndexOf(largest);\n        if (index > 0) {\n            while (index\
    \ > 0 && arr[index - 1] >= largest) {\n                largest = arr[index - 1];\n\
    \                index--;\n            }\n        }\n        return index;", " \
    \       long maxIndex = 0;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long max = arr.Max();\n       \
    \ long min = arr.Min();\n        long mid = max / 2;\n        long left = 0;\n\
    \        long right = 0;\n        long largest = -1;\n        long smallest =\
    \ -1;\n        foreach (long i in arr) {\n            if (i > mid) {\n       \
    \         if (left < i) {\n                    left = i;\n                }\n\
    \                if (right < i) {\n                    right = i;\n          \
    \      }\n            }\n            if (i == mid) {\n                if (left\
    \ < i) {\n                    left = i;\n                }\n                if\
    \ (right < i) {\n                    right = i;\n                }\n         \
    \   }\n            if (i < mid) {\n                if (left > i) {\n         \
    \           left = i;\n                }\n                if (right > i) {\n \
    \                   right = i;\n                }\n            }\n           \
    \ if (largest < i) {\n                largest = i;\n            }\n          \
    \  if (smallest > i) {\n                smallest = i;\n            }\n       \
    \ }\n        if (largest == -1) {\n            return -1;\n        }\n       \
    \ if (smallest == -1) {\n            return -1;\n        }\n        if (largest\
    \ > smallest && largest != min) {\n            return -1;\n        }\n       \
    \ return largest;", "        long max = arr.First();\n        long maxIndex =\
    \ arr.IndexOf(max);\n        long minIndex = arr.IndexOf(arr.First());\n     \
    \   long minValue = arr.First();\n        long maxValue = arr.First();\n     \
    \   long minValueIndex = arr.IndexOf(minValue);\n        long maxValueIndex =\
    \ arr.IndexOf(maxValue);\n        long minValueIndex = arr.IndexOf(minValue);\n\
    \        long maxValueIndex = arr.IndexOf(maxValue);\n        long minValueIndex\
    \ = arr.IndexOf(minValue);\n        long maxValueIndex = arr.IndexOf(maxValue);\n\
    \        long minValueIndex = arr.IndexOf(minValue);\n        long maxValueIndex\
    \ = arr.IndexOf(maxValue);\n        long minValueIndex = arr.IndexOf(minValue);\n\
    \        long maxValueIndex = arr.IndexOf(maxValue);\n        long minValueIndex\
    \ = arr.IndexOf(minValue);\n        long maxValueIndex = arr.IndexOf(maxValue);\n\
    \        long minValueIndex = arr.IndexOf(minValue);\n        long maxValueIndex\
    \ = arr.IndexOf(maxValue);\n        long minValueIndex = arr.IndexOf(minValue);\n\
    \        long maxValueIndex = arr.IndexOf(maxValue);\n        long minValueIndex\
    \ = arr.IndexOf(minValue);\n        long maxValueIndex = arr.IndexOf(maxValue);\n\
    \        long minValueIndex = arr.IndexOf(minValue);\n        long maxValueIndex\
    \ = arr.IndexOf(maxValue);\n        long minValueIndex = arr.IndexOf(minValue);\n\
    \        long maxValueIndex = arr.IndexOf(maxValue);\n        long minValueIndex\
    \ = arr.IndexOf(minValue);\n        long maxValueIndex = arr.IndexOf(maxValue);\n\
    \        long minValueIndex = arr.IndexOf(minValue);\n        long maxValueIndex\
    \ = arr.IndexOf(maxValue);\n        long minValueIndex = arr.IndexOf(minValue);\n\
    \        long maxValueIndex = arr.IndexOf(maxValue);\n        long minValueIndex\
    \ = arr.IndexOf(minValue);\n        long maxValueIndex = arr.IndexOf(maxValue);\n\
    \        long minValueIndex = arr.IndexOf(minValue);\n        long maxValueIndex\
    \ = arr.IndexOf(maxValue);\n        long minValueIndex = arr.IndexOf(minValue);\n\
    \        long maxValueIndex = arr.IndexOf(maxValue);\n        long minValueIndex\
    \ = arr.IndexOf(minValue);\n        long maxValueIndex = arr.IndexOf(maxValue);\n\
    \        long minValueIndex = arr.IndexOf(minValue);\n        long maxValueIndex\
    \ = arr.IndexOf(maxValue);\n        long minValueIndex = arr.IndexOf(minValue);\n\
    \        long maxValueIndex = arr.IndexOf(maxValue);\n        long minValueIndex\
    \ = arr.IndexOf(minValue);\n        long maxValueIndex = arr.IndexOf(maxValue);\n\
    \        long minValueIndex = arr.", "        long largest = arr.First();\n  \
    \      long current = arr.First();\n        long previous = arr.First();\n   \
    \     for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest)\
    \ {\n                largest = current;\n                previous = current;\n\
    \                current = arr[i];\n            } else if (arr[i] < largest) {\n\
    \                previous = current;\n                current = arr[i];\n    \
    \        }\n        }\n        if (current > largest) {\n            return -1;\n\
    \        }\n        return largest;", "        long largest = arr.First();\n \
    \       long index = 0;\n        foreach (long i in arr) {\n            if (i\
    \ > largest) {\n                index = arr.IndexOf(largest);\n            }\n\
    \            if (i > largest) {\n                largest = i;\n            }\n\
    \        }\n        return index;", "        long maxIndex = -1;\n        long\
    \ maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n        \
    \    if (arr[i] > maxValue) {\n                maxIndex = i;\n               \
    \ maxValue = arr[i];\n            }\n        }\n        return maxIndex;", " \
    \       long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long max = -1;\n        long maxIndex\
    \ = -1;\n        long currentMax = arr[0];\n        long currentMaxIndex = -1;\n\
    \        foreach (long i in arr) {\n            if (i > currentMax) {\n      \
    \          currentMax = i;\n                currentMaxIndex = i;\n           \
    \ }\n            if (i < currentMax) {\n                currentMaxIndex = i;\n\
    \            }\n        }\n        if (currentMaxIndex == -1) {\n            return\
    \ -1;\n        }\n        foreach (long i in arr) {\n            if (i == currentMaxIndex)\
    \ {\n                continue;\n            }\n            if (i > currentMax)\
    \ {\n                max = i;\n                maxIndex = i;\n            }\n\
    \            if (i < currentMax) {\n                max = i;\n               \
    \ maxIndex = i;\n            }\n        }\n        return maxIndex;", "      \
    \  long largest = arr.First();\n        long index = 0;\n        foreach (long\
    \ i in arr) {\n            if (i > largest) {\n                index = i;\n  \
    \              largest = i;\n            }\n        }\n        return index;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long largest = arr.First();\n \
    \       long index = 0;\n        foreach (long i in arr) {\n            if (i\
    \ > largest) {\n                index = arr.IndexOf(largest);\n              \
    \  largest = i;\n            }\n        }\n        return index;", "        long\
    \ largest = arr.First();\n        long previous = arr.First();\n        foreach\
    \ (long i in arr) {\n            if (i > largest) {\n                largest =\
    \ i;\n            }\n            if (i < previous) {\n                previous\
    \ = i;\n            }\n        }\n        return largest == arr.First() ? -1 :\
    \ largest;", "        long maxIndex = -1;\n        long currentIndex = arr.First();\n\
    \        long previousIndex = arr.First();\n        foreach (long i in arr) {\n\
    \            if (i > currentIndex) {\n                currentIndex = i;\n    \
    \        }\n            if (i > previousIndex) {\n                previousIndex\
    \ = i;\n            }\n            if (currentIndex > maxIndex) {\n          \
    \      maxIndex = currentIndex;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.First();\n        long maxIndex = -1;\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > max) {\n            \
    \    max = arr[i];\n                maxIndex = i;\n            }\n        }\n\
    \        return maxIndex;", "        long max = arr.First();\n        long maxIndex\
    \ = -1;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max) {\n                max = arr[i];\n                maxIndex = i;\n   \
    \         }\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long index = 0;\n        foreach (var item in arr.Skip(1))\n        {\n\
    \            if (item > largest)\n            {\n                largest = item;\n\
    \                index = arr.IndexOf(item);\n            }\n        }\n      \
    \  return index;", "        long max = arr.Max();\n        long min = arr.Min();\n\
    \        long maxIndex = -1;\n        long minIndex = -1;\n        foreach (long\
    \ i in arr) {\n            if (i > max) {\n                maxIndex = i;\n   \
    \             max = i;\n            }\n            if (i < min) {\n          \
    \      minIndex = i;\n                min = i;\n            }\n        }\n   \
    \     if (maxIndex == minIndex) {\n            return maxIndex;\n        }\n \
    \       if (maxIndex > minIndex) {\n            return maxIndex;\n        }\n\
    \        return minIndex;", "        long maxIndex = -1;\n        long maxValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = arr[i];\n\
    \            }\n        }\n        return maxIndex;", "        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long maxIndex = -1;\n        long minIndex\
    \ = -1;\n        foreach (long i in arr) {\n            if (i > max && maxIndex\
    \ == -1) {\n                maxIndex = i;\n            }\n            if (i <\
    \ min && minIndex == -1) {\n                minIndex = i;\n            }\n   \
    \     }\n        if (maxIndex == -1 && minIndex == -1) {\n            return -1;\n\
    \        }\n        if (maxIndex == minIndex) {\n            return maxIndex;\n\
    \        }\n        if (maxIndex < minIndex) {\n            return maxIndex;\n\
    \        }\n        return minIndex;", "        long max = arr.Max();\n      \
    \  long min = arr.Min();\n        long maxIndex = -1;\n        long minIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <\
    \ min) {\n                minIndex = i;\n                min = arr[i];\n     \
    \       }\n            if (arr[i] > max) {\n                maxIndex = i;\n  \
    \              max = arr[i];\n            }\n        }\n        if (maxIndex ==\
    \ -1 && minIndex == -1) {\n            return -1;\n        }\n        if (maxIndex\
    \ == -1 || minIndex == -1) {\n            return maxIndex;\n        }\n      \
    \  if (maxIndex < minIndex) {\n            return maxIndex;\n        }\n     \
    \   return minIndex;", "        long largest = arr.First();\n        long previous\
    \ = arr.First();\n        foreach (long i in arr) {\n            if (i > largest)\
    \ {\n                largest = i;\n            }\n            if (i < previous)\
    \ {\n                previous = i;\n            }\n        }\n        return largest\
    \ == arr.Last() ? -1 : largest;", "        long maxIndex = -1;\n        long maxValue\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxValue = arr[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        return maxIndex;", "        long largest\
    \ = arr.First();\n        long current = arr.First();\n        long previous =\
    \ arr.First();\n        foreach (long i in arr) {\n            if (i > largest)\
    \ {\n                largest = i;\n            }\n            if (i < current)\
    \ {\n                current = i;\n            }\n            if (i > previous)\
    \ {\n                previous = i;\n            }\n        }\n        return largest;",
  "        long largest = arr.First();\n        long current = arr.First();\n    \
    \    long previous = arr.First();\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > largest) {\n                largest = current;\n\
    \                previous = current;\n                current = arr[i];\n    \
    \        } else if (arr[i] < current) {\n                previous = current;\n\
    \                current = arr[i];\n            }\n        }\n        if (current\
    \ > largest) {\n            largest = current;\n        }\n        return largest;",
  "        long maxIndex = -1;\n        long currentIndex = 0;\n        long largestIndex\
    \ = 0;\n        foreach (long i in arr) {\n            if (currentIndex < maxIndex)\
    \ {\n                if (i > arr[currentIndex]) {\n                    currentIndex\
    \ = maxIndex;\n                }\n            } else {\n                currentIndex\
    \ = i;\n                maxIndex = i;\n            }\n            if (currentIndex\
    \ > largestIndex) {\n                largestIndex = currentIndex;\n          \
    \  }\n        }\n        return largestIndex;", "        long largest = arr.First();\n\
    \        long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] > largest) {\n                index = i;\n               \
    \ largest = arr[i];\n            }\n        }\n        return index;", "     \
    \   long largest = arr.First();\n        long current = arr.First();\n       \
    \ long previous = arr.First();\n        foreach (long i in arr) {\n          \
    \  if (i > largest) {\n                largest = i;\n            }\n         \
    \   if (i < current) {\n                current = i;\n            }\n        \
    \    if (i > previous) {\n                previous = i;\n            }\n     \
    \   }\n        return largest;", "        long max = -1;\n        long maxIndex\
    \ = 0;\n        long currentMax = arr[0];\n        foreach (long i in arr) {\n\
    \            if (i > currentMax) {\n                currentMax = i;\n        \
    \        maxIndex = i;\n            }\n        }\n        if (maxIndex < arr.Count\
    \ - 1) {\n            max = maxIndex;\n        }\n        return max;", "    \
    \    long maxIndex = -1;\n        long currentIndex = arr.First();\n        long\
    \ currentValue = arr.First();\n        foreach (long i in arr) {\n           \
    \ if (i > currentValue) {\n                currentIndex = i;\n               \
    \ currentValue = i;\n            }\n        }\n        if (currentIndex > maxIndex)\
    \ {\n            maxIndex = currentIndex;\n        }\n        return maxIndex;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long maxIndex = -1;\n        long\
    \ currentIndex = arr.First();\n        long maxValue = arr.First();\n        foreach\
    \ (long value in arr.Skip(1))\n        {\n            if (value > maxValue)\n\
    \            {\n                maxValue = value;\n                maxIndex =\
    \ currentIndex;\n            }\n            currentIndex++;\n        }\n     \
    \   return maxIndex;", "        long largest = arr.First();\n        long index\
    \ = arr.IndexOf(largest);\n        long previous = arr.First();\n        long\
    \ previousIndex = arr.IndexOf(previous);\n        while (index > previousIndex)\
    \ {\n            largest = previous;\n            index = previousIndex;\n   \
    \         previous = arr.ElementAt(index);\n            previousIndex = arr.IndexOf(previous);\n\
    \        }\n        return largest;", "        long largest = arr.First();\n \
    \       long index = arr.IndexOf(largest);\n        long previous = arr.First();\n\
    \        while (index > 0) {\n            previous = index;\n            index\
    \ = arr.IndexOf(previous);\n        }\n        return index;", "        long largest\
    \ = arr.First();\n        long largestIndex = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > largest) {\n                largest = i;\n          \
    \      largestIndex = i;\n            } else if (i < largest) {\n            \
    \    largestIndex = arr.IndexOf(largest);\n                break;\n          \
    \  }\n        }\n        return largestIndex;", "        long maxIndex = -1;\n\
    \        long maxValue = arr[0];\n        long currentIndex = -1;\n        long\
    \ currentValue = arr[0];\n        foreach (long i in arr) {\n            if (i\
    \ > maxValue) {\n                maxIndex = currentIndex;\n                maxValue\
    \ = currentValue;\n            }\n            if (i < currentValue) {\n      \
    \          currentIndex = arr.IndexOf(i);\n                currentValue = i;\n\
    \            }\n        }\n        return maxIndex;", "        long maxIndex =\
    \ -1;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n\
    \                maxValue = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        long maxIndex = -1;\n        long maxValue = arr[0];\n\
    \        long currentIndex = 0;\n        foreach (long value in arr) {\n     \
    \       if (value >= maxValue) {\n                maxIndex = currentIndex;\n \
    \               maxValue = value;\n            }\n            currentIndex++;\n\
    \        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long current = arr.First();\n        long index = 0;\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest) {\n        \
    \        largest = current;\n                index = i;\n            }\n     \
    \       current = arr[i];\n        }\n        return index;", "        long maxIndex\
    \ = -1;\n        long maxValue = arr[0];\n        long currentIndex = 0;\n   \
    \     foreach (long value in arr) {\n            if (value <= maxValue) {\n  \
    \              currentIndex++;\n                if (currentIndex > maxIndex) {\n\
    \                    maxIndex = currentIndex;\n                    maxValue =\
    \ value;\n                }\n            } else {\n                currentIndex\
    \ = 0;\n            }\n        }\n        return maxIndex;", "        long maxIndex\
    \ = -1;\n        long currentIndex = 0;\n        long largest = arr.First();\n\
    \        foreach (long i in arr) {\n            if (i <= largest) {\n        \
    \        currentIndex++;\n                if (currentIndex > maxIndex) {\n   \
    \                 maxIndex = currentIndex;\n                }\n            } else\
    \ {\n                currentIndex = 0;\n            }\n            largest = i;\n\
    \        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] > largest) {\n                index = i;\n               \
    \ largest = arr[i];\n            }\n        }\n        return index;", "     \
    \   long max = arr.First();\n        long maxIndex = -1;\n        for (int i =\
    \ 1; i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max\
    \ = arr[i];\n                maxIndex = i;\n            }\n        }\n       \
    \ return maxIndex;", "        long max = arr.Max();\n        long min = 0;\n \
    \       long maxIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] <= max) {\n                max = Math.Max(max, arr[i]);\n\
    \                min = Math.Min(min, arr[i]);\n                maxIndex = i;\n\
    \            }\n        }\n        if (maxIndex == arr.Count - 1) {\n        \
    \    return -1;\n        }\n        return maxIndex;", "        long max = arr.First();\n\
    \        long min = 0;\n        foreach (long i in arr) {\n            if (i >\
    \ max) {\n                max = i;\n            }\n            if (i < min) {\n\
    \                min = i;\n            }\n        }\n        if (max > min) {\n\
    \            return -1;\n        }\n        return arr.IndexOf(max);", "     \
    \   long max = arr.Max();\n        long min = arr.Min();\n        long index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <=\
    \ min || arr[i] >= max) {\n                index = i;\n                break;\n\
    \            }\n        }\n        return index;", "        long maxIndex = -1;\n\
    \        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n   \
    \             maxValue = arr[i];\n            }\n        }\n        return maxIndex;",
  "        long largest = arr.First();\n        long current = arr.First();\n    \
    \    long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n        \
    \    if (arr[i] > largest) {\n                largest = current;\n           \
    \     index = i;\n            }\n            current = arr[i];\n        }\n  \
    \      return index;", "        long largest = arr.First();\n        long index\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > largest) {\n                index = i;\n                largest = arr[i];\n\
    \            }\n        }\n        return index;", "        long max = arr.First();\n\
    \        long min = arr.First();\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i];\n        \
    \    }\n            if (arr[i] < min) {\n                min = arr[i];\n     \
    \       }\n        }\n        if (max >= min) {\n            return -1;\n    \
    \    }\n        return arr.IndexOf(max);", "        long largest = arr.First();\n\
    \        long index = arr.IndexOf(largest);\n        long previous = arr.First();\n\
    \        while (index != -1) {\n            if (arr.ElementAt(index) < previous)\
    \ {\n                largest = arr.ElementAt(index);\n                index =\
    \ arr.IndexOf(largest);\n            } else {\n                previous = arr.ElementAt(index);\n\
    \                index = arr.IndexOf(previous);\n            }\n        }\n  \
    \      return largest;", "        long maxIndex = -1;\n        long maxValue =\
    \ arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = arr[i];\n\
    \            }\n        }\n        return maxIndex;", "        long maxIndex =\
    \ -1;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n\
    \                maxValue = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        long maxIndex = -1;\n        long maxValue = arr[0];\n\
    \        long currentIndex = 0;\n        foreach (long value in arr) {\n     \
    \       if (value >= maxValue) {\n                currentIndex++;\n          \
    \      if (currentIndex == maxIndex) {\n                    maxIndex = currentIndex;\n\
    \                    maxValue = value;\n                }\n            }\n   \
    \     }\n        return maxIndex;", "        long maxIndex = -1;\n        long\
    \ maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n        \
    \    if (arr[i] > maxValue) {\n                maxIndex = i;\n               \
    \ maxValue = arr[i];\n            }\n        }\n        return maxIndex;", " \
    \       long maxIndex = -1;\n        long maxValue = arr[0];\n        long currentIndex\
    \ = -1;\n        long currentValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > currentValue) {\n                currentIndex\
    \ = i;\n                currentValue = arr[i];\n            }\n        }\n   \
    \     if (currentIndex > maxIndex) {\n            maxIndex = currentIndex;\n \
    \           maxValue = currentValue;\n        }\n        return maxIndex;", " \
    \       long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long maxIndex = -1;\n        long\
    \ currentIndex = -1;\n        long currentValue = -1;\n        long previousValue\
    \ = -1;\n        foreach (long i in arr) {\n            if (currentIndex == -1)\
    \ {\n                currentIndex = i;\n                currentValue = i;\n  \
    \          }\n            if (currentValue > i) {\n                currentValue\
    \ = i;\n                currentIndex = i;\n            }\n            if (currentValue\
    \ == i) {\n                currentIndex = i;\n            }\n            if (currentValue\
    \ > previousValue) {\n                maxIndex = currentIndex;\n            }\n\
    \            previousValue = currentValue;\n        }\n        return maxIndex;",
  "        long maxIndex = 0;\n        long maxValue = arr[0];\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n         \
    \       maxValue = arr[i];\n                maxIndex = i;\n            }\n   \
    \     }\n        return maxIndex;", "        long maxIndex = -1;\n        long\
    \ maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n        \
    \    if (arr[i] > maxValue) {\n                maxIndex = i;\n               \
    \ maxValue = arr[i];\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.First();\n        long min = 0;\n        long maxIndex\
    \ = -1;\n        foreach (long i in arr) {\n            if (i > max) {\n     \
    \           max = i;\n                maxIndex = i;\n            }\n         \
    \   if (i < min) {\n                min = i;\n            }\n        }\n     \
    \   if (maxIndex == -1) {\n            return -1;\n        }\n        if (maxIndex\
    \ < min) {\n            return -1;\n        }\n        long mid = min + (max -\
    \ min) / 2;\n        long leftMax = CanArrange(arr.Where(i => i < mid));\n   \
    \     long rightMax = CanArrange(arr.Where(i => i > mid));\n        if (leftMax\
    \ > rightMax) {\n            return leftMax;\n        }\n        return rightMax;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxValue = arr[i];\n                maxIndex = i;\n            }\n \
    \       }\n        return maxIndex;", "        long maxIndex = 0;\n        long\
    \ maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n        \
    \    if (arr[i] > maxValue) {\n                maxValue = arr[i];\n          \
    \      maxIndex = i;\n            }\n        }\n        return maxIndex;", " \
    \       long maxIndex = -1;\n        long currentIndex = 0;\n        long largest\
    \ = arr.First();\n        foreach (long i in arr) {\n            if (i > largest)\
    \ {\n                currentIndex = i;\n                largest = i;\n       \
    \     }\n            else if (i == largest) {\n                currentIndex++;\n\
    \            }\n            if (currentIndex > maxIndex) {\n                maxIndex\
    \ = currentIndex;\n            }\n        }\n        return maxIndex;", "    \
    \    long largest = arr.First();\n        long index = 0;\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            if (arr[i] > largest) {\n          \
    \      index = i;\n                largest = arr[i];\n            }\n        }\n\
    \        return index;", "        long maxIndex = -1;\n        long maxValue =\
    \ arr[0];\n        long currentIndex = 0;\n        foreach (long value in arr)\
    \ {\n            if (value > maxValue) {\n                maxValue = value;\n\
    \                maxIndex = currentIndex;\n            }\n            currentIndex++;\n\
    \        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long index = -1;\n        for (int i = 1; i < arr.Count; i++) {\n   \
    \         if (arr[i] > largest) {\n                largest = arr[i];\n       \
    \         index = i;\n            }\n        }\n        return index;", "    \
    \    long largest = arr.First();\n        long previous = arr.First();\n     \
    \   foreach (long i in arr) {\n            if (i > largest) {\n              \
    \  largest = i;\n            }\n            if (i < previous) {\n            \
    \    return -1;\n            }\n            previous = i;\n        }\n       \
    \ return largest;", "        long max = -1;\n        long maxIndex = 0;\n    \
    \    long minIndex = 0;\n        long minValue = arr[0];\n        foreach (long\
    \ i in arr) {\n            if (i > maxValue) {\n                maxValue = i;\n\
    \                maxIndex = i;\n            }\n            if (i < minValue) {\n\
    \                minValue = i;\n                minIndex = i;\n            }\n\
    \        }\n        if (maxIndex == minIndex) {\n            return -1;\n    \
    \    }\n        if (maxIndex > minIndex) {\n            return maxIndex;\n   \
    \     }\n        return minIndex;", "        long largest = arr.First();\n   \
    \     long previous = arr.First();\n        foreach (long i in arr) {\n      \
    \      if (i > largest) {\n                largest = i;\n            }\n     \
    \       if (i < previous) {\n                return -1;\n            }\n     \
    \       previous = i;\n        }\n        return largest;", "        long largest\
    \ = arr.First();\n        long current = arr.First();\n        long previous =\
    \ arr.First();\n        foreach (long i in arr) {\n            if (i > current)\
    \ {\n                current = i;\n            }\n            if (i > previous)\
    \ {\n                previous = i;\n            }\n            if (current > largest)\
    \ {\n                largest = current;\n            }\n        }\n        return\
    \ largest;", "        long largest = arr.First();\n        long smallest = arr.First();\n\
    \        foreach (long i in arr) {\n            if (i > largest) {\n         \
    \       largest = i;\n            }\n            if (i < smallest) {\n       \
    \         smallest = i;\n            }\n        }\n        if (largest == smallest)\
    \ {\n            return -1;\n        }\n        return largest;", "        long\
    \ max = arr.Max();\n        long min = arr.Min();\n        long mid = max / 2;\n\
    \        long left = 0;\n        long right = 0;\n        long maxIndex = -1;\n\
    \        long minIndex = -1;\n        foreach (long i in arr) {\n            if\
    \ (i <= mid) {\n                left++;\n            }\n            else if (i\
    \ > mid) {\n                right++;\n            }\n            if (left > right)\
    \ {\n                if (i == mid) {\n                    maxIndex = i;\n    \
    \            }\n                else if (i > mid) {\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n        if (maxIndex == -1)\
    \ {\n            return -1;\n        }\n        if (minIndex == -1) {\n      \
    \      return maxIndex;\n        }\n        if (maxIndex < minIndex) {\n     \
    \       return maxIndex;\n        }\n        return minIndex;", "        long\
    \ maxIndex = -1;\n        long maxValue = arr[0];\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            if (arr[i] > maxValue) {\n                maxIndex\
    \ = i;\n                maxValue = arr[i];\n            }\n        }\n       \
    \ return maxIndex;", "        long largest = arr.First();\n        long smallest\
    \ = arr.First();\n        foreach (long i in arr) {\n            if (i > largest)\
    \ {\n                largest = i;\n            }\n            if (i < smallest)\
    \ {\n                smallest = i;\n            }\n        }\n        if (smallest\
    \ > largest) {\n            return -1;\n        }\n        return largest;", " \
    \       long largest = arr.First();\n        long current = arr.First();\n   \
    \     long previous = arr.First();\n        foreach (long i in arr) {\n      \
    \      if (i > current) {\n                current = i;\n            }\n     \
    \       if (i > previous) {\n                previous = i;\n            }\n  \
    \          if (current > largest) {\n                largest = current;\n    \
    \        }\n        }\n        return largest;", "        long maxIndex = -1;\n\
    \        long currentIndex = -1;\n        long currentValue = -1;\n        foreach\
    \ (long i in arr) {\n            if (currentIndex == -1) {\n                currentIndex\
    \ = i;\n                currentValue = i;\n            }\n            if (currentValue\
    \ > i) {\n                currentIndex = i;\n                currentValue = i;\n\
    \            }\n            if (currentIndex > maxIndex) {\n                maxIndex\
    \ = currentIndex;\n            }\n        }\n        return maxIndex;", "    \
    \    long largest = arr.First();\n        long current = arr.First();\n      \
    \  for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest) {\n\
    \                largest = current;\n                current = arr[i];\n     \
    \       }\n        }\n        return largest;", "        long largest = arr.First();\n\
    \        long smallest = arr.First();\n        foreach (long i in arr) {\n   \
    \         if (i > largest) {\n                largest = i;\n            }\n  \
    \          if (i < smallest) {\n                smallest = i;\n            }\n\
    \        }\n        if (largest == smallest) {\n            return -1;\n     \
    \   }\n        return arr.IndexOf(largest);", "        long largest = arr.First();\n\
    \        long smallest = arr.First();\n        foreach (long i in arr.Skip(1))\n\
    \        {\n            if (i > largest)\n            {\n                largest\
    \ = i;\n            }\n            if (i < smallest)\n            {\n        \
    \        smallest = i;\n            }\n        }\n        if (largest == smallest)\n\
    \        {\n            return -1;\n        }\n        return largest;", "   \
    \     long max = arr.First();\n        long maxIndex = -1;\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            if (arr[i] > max) {\n              \
    \  max = arr[i];\n                maxIndex = i;\n            }\n        }\n  \
    \      return maxIndex;", "        long maxIndex = -1;\n        long maxValue\
    \ = arr[0];\n        long currentIndex = 0;\n        foreach (long value in arr)\
    \ {\n            if (value > maxValue) {\n                maxIndex = currentIndex;\n\
    \                maxValue = value;\n            }\n            currentIndex++;\n\
    \        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long previous = arr.First();\n        foreach (long num in arr.Skip(1))\n\
    \        {\n            if (num > largest)\n            {\n                largest\
    \ = num;\n            }\n            if (num < previous)\n            {\n    \
    \            return -1;\n            }\n            previous = num;\n        }\n\
    \        return largest;", "        long largest = arr.First();\n        long\
    \ index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ >= largest) {\n                index = i;\n                largest = arr[i];\n\
    \            }\n        }\n        return index;", "        long maxIndex = -1;\n\
    \        long maxValue = arr[0];\n        long currentValue = arr[0];\n      \
    \  long previousValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] > maxValue) {\n                maxIndex = i;\n       \
    \         maxValue = arr[i];\n            }\n            if (arr[i] < currentValue)\
    \ {\n                currentValue = arr[i];\n            }\n            if (arr[i]\
    \ != previousValue) {\n                previousValue = arr[i];\n            }\n\
    \        }\n        return maxIndex;", "        long max = arr.First();\n    \
    \    long maxIndex = -1;\n        foreach (long i in arr) {\n            if (i\
    \ > max) {\n                max = i;\n                maxIndex = i;\n        \
    \    }\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long current = arr.First();\n        long previous = arr.First();\n \
    \       for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > largest)\
    \ {\n                largest = current;\n                previous = current;\n\
    \                current = arr[i];\n            } else if (arr[i] < largest) {\n\
    \                current = arr[i];\n            }\n        }\n        return largest;",
  "        long maxIndex = -1;\n        long currentIndex = 0;\n        long currentValue\
    \ = arr[0];\n        long previousValue = arr[0];\n        foreach (long value\
    \ in arr) {\n            if (value > currentValue) {\n                currentIndex\
    \ = currentValue;\n                currentValue = value;\n            }\n    \
    \        if (value > previousValue) {\n                maxIndex = currentIndex;\n\
    \                previousValue = currentValue;\n            }\n        }\n   \
    \     return maxIndex;", "        long maxIndex = -1;\n        long currentIndex\
    \ = arr.First();\n        long previousIndex = arr.First();\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > currentIndex) {\n   \
    \             maxIndex = i;\n                currentIndex = arr[i];\n        \
    \    }\n            if (arr[i] < previousIndex) {\n                maxIndex =\
    \ -1;\n                break;\n            }\n            previousIndex = arr[i];\n\
    \        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long smallest = arr.First();\n        foreach (long i in arr) {\n   \
    \         if (i > largest) {\n                largest = i;\n            }\n  \
    \          if (i < smallest) {\n                smallest = i;\n            }\n\
    \        }\n        if (largest == smallest) {\n            return -1;\n     \
    \   }\n        return largest;", "        long largest = arr.First();\n      \
    \  long current = arr.First();\n        long previous = arr.First();\n       \
    \ long index = 0;\n        foreach (long i in arr) {\n            if (i > largest)\
    \ {\n                index = arr.IndexOf(current);\n                largest =\
    \ current;\n                current = i;\n                previous = current;\n\
    \            } else if (i == largest) {\n                current = i;\n      \
    \          previous = current;\n            } else {\n                previous\
    \ = current;\n                current = i;\n            }\n        }\n       \
    \ return index;", "        long max = arr.First();\n        long min = arr.First();\n\
    \        foreach (long i in arr) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n            if (i < min) {\n                min =\
    \ i;\n            }\n        }\n        if (max >= min) {\n            return\
    \ -1;\n        }\n        return arr.IndexOf(max);", "        long maxIndex =\
    \ -1;\n        long maxValue = arr[0];\n        long currentValue = arr[0];\n\
    \        foreach (long i in arr) {\n            if (i <= currentValue) {\n   \
    \             currentValue = i;\n            }\n            else {\n         \
    \       maxIndex = Math.Max(maxIndex, currentValue - i);\n                maxValue\
    \ = Math.Max(maxValue, currentValue);\n                currentValue = i;\n   \
    \         }\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] > largest) {\n                index = i;\n               \
    \ largest = arr[i];\n            }\n        }\n        return index;", "     \
    \   long largest = arr.First();\n        long index = arr.IndexOf(largest);\n\
    \        long previous = arr.ElementAtOrDefault(index - 1);\n        if (previous\
    \ >= largest) {\n            return -1;\n        }\n        return index;", " \
    \       long largest = arr.First();\n        long current = arr.First();\n   \
    \     long previous = arr.First();\n        foreach (var item in arr.Skip(1))\n\
    \        {\n            if (item > largest)\n            {\n                largest\
    \ = item;\n                current = previous;\n            }\n            else\n\
    \            {\n                previous = item;\n            }\n        }\n \
    \       return largest;", "        long max = arr.First();\n        long maxIndex\
    \ = -1;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= max) {\n                max = Math.Max(max, arr[i]);\n                maxIndex\
    \ = i;\n            }\n        }\n        return maxIndex;", "        long largest\
    \ = arr.First();\n        long current = arr.First();\n        long previous =\
    \ arr.First();\n        foreach (long i in arr) {\n            if (i > largest)\
    \ {\n                largest = i;\n            }\n            if (i < current)\
    \ {\n                current = i;\n            }\n            if (i > previous)\
    \ {\n                previous = i;\n            }\n        }\n        return largest;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long maxIndex = -1;\n        long\
    \ maxValue = arr[0];\n        long currentIndex = arr.Count - 1;\n        long\
    \ currentValue = arr[currentIndex];\n        while (currentIndex >= 0) {\n   \
    \         if (currentValue <= maxValue) {\n                currentIndex--;\n \
    \               currentValue = arr[currentIndex];\n            } else {\n    \
    \            maxIndex = currentIndex;\n                maxValue = currentValue;\n\
    \            }\n        }\n        return maxIndex;", "        long maxIndex =\
    \ -1;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n\
    \                maxValue = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        long largest = arr.First();\n        long smallest = arr.First();\n\
    \        long largestIndex = 0;\n        long smallestIndex = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > largest) {\n                largest =\
    \ i;\n                largestIndex = i;\n            }\n            if (i < smallest)\
    \ {\n                smallest = i;\n                smallestIndex = i;\n     \
    \       }\n        }\n        if (largest == smallest) {\n            return -1;\n\
    \        }\n        if (largest == arr[arr.Count - 1]) {\n            return arr.Count\
    \ - 1;\n        }\n        if (smallest == arr[arr.Count - 1]) {\n           \
    \ return arr.Count - 1;\n        }\n        if (largest == arr[arr.Count - 2])\
    \ {\n            return arr.Count - 2;\n        }\n        if (smallest == arr[arr.Count\
    \ - 2]) {\n            return arr.Count - 2;\n        }\n        if (largest ==\
    \ arr[arr.Count - 3]) {\n            return arr.Count - 3;\n        }\n      \
    \  if (smallest == arr[arr.Count - 3]) {\n            return arr.Count - 3;\n\
    \        }\n        if (largest == arr[arr.Count - 4]) {\n            return arr.Count\
    \ - 4;\n        }\n        if (smallest == arr[arr.Count - 4]) {\n           \
    \ return arr.Count - 4;\n        }\n        if (largest == arr[arr.Count - 5])\
    \ {\n            return arr.Count - 5;\n        }\n        if (smallest == arr[arr.Count\
    \ - 5]) {\n            return arr.Count - 5;\n        }\n        if (largest ==\
    \ arr[arr.Count - 6]) {\n            return arr.Count - 6;\n        }\n      \
    \  if (smallest == arr[arr.Count - 6]) {\n            return arr.Count - 6;\n\
    \        }\n        if (largest == arr[arr.Count - 7]) {\n            return arr.Count\
    \ - 7;\n        }\n        if (smallest == arr[arr.Count - 7]) {\n           \
    \ return arr.Count - 7;\n        }\n        if (largest == arr[arr.Count - 8])\
    \ {\n            return arr.Count - 8;\n        }\n        if (smallest == arr[arr.Count\
    \ - 8]) {\n            return arr.Count - 8;\n        }\n        if (largest ==\
    \ arr[arr.Count - 9]) {\n            return arr.Count - 9;\n        }\n      \
    \  if (smallest == arr[arr.Count - 9]) {\n            return arr.Count - 9;\n\
    \        }\n        if (largest == arr[arr.Count - 10]) {\n            return\
    \ arr.Count - 10;\n        }\n        if (smallest == arr[arr.Count - 10]) {\n\
    \            return arr.Count - 10;\n        }\n        if (largest == arr[arr.Count\
    \ - 11]) {\n            return arr.Count - 11;\n        }\n        if (smallest\
    \ == arr[arr.Count - 11]) {\n            return arr.Count - 11;\n        }\n \
    \       if (largest == arr[arr.Count - 12]) {\n            return arr.Count -\
    \ 12;\n        }\n        if (smallest == arr[arr.Count - ", "        long largest\
    \ = arr.First();\n        long current = arr.First();\n        long previous =\
    \ arr.First();\n        foreach (long i in arr) {\n            if (i > current)\
    \ {\n                current = i;\n            }\n            if (i < previous)\
    \ {\n                previous = i;\n            }\n        }\n        if (current\
    \ > largest) {\n            largest = current;\n        }\n        if (previous\
    \ > largest) {\n            largest = previous;\n        }\n        return largest;",
  "        long largest = arr.First();\n        long index = 0;\n        long temp\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > largest) {\n                temp = largest;\n                largest = arr[i];\n\
    \                index = i;\n            }\n        }\n        return index;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        long currentIndex\
    \ = 0;\n        foreach (long value in arr) {\n            if (value > maxValue)\
    \ {\n                maxIndex = currentIndex;\n                maxValue = value;\n\
    \            }\n            currentIndex++;\n        }\n        return maxIndex;",
  "        long largest = arr.First();\n        long index = arr.IndexOf(largest);\n\
    \        if (index == -1) {\n            return -1;\n        }\n        long previous\
    \ = arr.ElementAtOrDefault(index - 1);\n        if (previous >= largest) {\n \
    \           return -1;\n        }\n        return index;", "        long largest\
    \ = arr.First();\n        long index = arr.IndexOf(largest);\n        while (index\
    \ > 0) {\n            long current = arr[index];\n            if (current > largest)\
    \ {\n                largest = current;\n                index = arr.IndexOf(largest);\n\
    \            } else {\n                index--;\n            }\n        }\n  \
    \      return largest;", "        long largest = arr.First();\n        long largestIndex\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > largest) {\n                largest = arr[i];\n                largestIndex\
    \ = i;\n            }\n        }\n        return largestIndex;", "        long\
    \ largest = arr.First();\n        long smallest = arr.First();\n        long index\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallest) {\n                index = i;\n                smallest = arr[i];\n\
    \            }\n            if (arr[i] > largest) {\n                index = i;\n\
    \                largest = arr[i];\n            }\n        }\n        return index;",
  "        long max = arr.First();\n        long min = 0;\n        long maxIndex =\
    \ 0;\n        foreach (long i in arr) {\n            if (i > max) {\n        \
    \        max = i;\n                maxIndex = i;\n            }\n            if\
    \ (i < min) {\n                min = i;\n            }\n        }\n        if\
    \ (maxIndex == arr.First()) {\n            return -1;\n        }\n        if (maxIndex\
    \ == arr.Last()) {\n            return arr.Last();\n        }\n        if (maxIndex\
    \ - min == arr.Count - 1) {\n            return arr.Last();\n        }\n     \
    \   return maxIndex;", "        long largest = arr.First();\n        long index\
    \ = 0;\n        foreach (long i in arr) {\n            if (i > largest) {\n  \
    \              index = arr.IndexOf(largest);\n                largest = i;\n \
    \           }\n        }\n        return index;", "        long largest = arr.First();\n\
    \        long current = arr.First();\n        long previous = arr.First();\n \
    \       foreach (long i in arr) {\n            if (i > largest) {\n          \
    \      largest = i;\n            }\n            if (i < current) {\n         \
    \       current = i;\n            }\n            if (i > previous) {\n       \
    \         previous = i;\n            }\n        }\n        return largest;", " \
    \       long maxIndex = -1;\n        long currentIndex = 0;\n        long largest\
    \ = arr.First();\n        foreach (long i in arr) {\n            if (i <= largest)\
    \ {\n                currentIndex++;\n                if (currentIndex > maxIndex)\
    \ {\n                    maxIndex = currentIndex;\n                }\n       \
    \     }\n            else {\n                currentIndex = 0;\n            }\n\
    \            largest = i;\n        }\n        return maxIndex;", "        long\
    \ maxIndex = -1;\n        long maxValue = arr[0];\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            if (arr[i] > maxValue) {\n                maxValue\
    \ = arr[i];\n                maxIndex = i;\n            }\n        }\n       \
    \ return maxIndex;", "        long maxIndex = -1;\n        long currentIndex =\
    \ 0;\n        long currentValue = arr[0];\n        long previousValue = currentValue;\n\
    \        foreach (long value in arr) {\n            if (value > currentValue)\
    \ {\n                currentIndex = currentValue;\n                currentValue\
    \ = value;\n            }\n            if (value > previousValue) {\n        \
    \        maxIndex = currentIndex;\n            }\n            previousValue =\
    \ value;\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long current = arr.First();\n        long index = 0;\n        while (current\
    \ <= arr.Last()) {\n            current = arr.ElementAtOrDefault(index++);\n \
    \           if (current > largest) {\n                largest = current;\n   \
    \         }\n        }\n        return largest;", "        long largest = arr.First();\n\
    \        long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] > largest) {\n                index = i;\n               \
    \ largest = arr[i];\n            }\n        }\n        return index;", "     \
    \   long max = arr.First();\n        long maxIndex = arr.IndexOf(max);\n     \
    \   for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > max) {\n \
    \               max = arr[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long largestIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] > largest) {\n                largest = arr[i];\n    \
    \            largestIndex = i;\n            }\n        }\n        return largestIndex;",
  "        long max = arr.Max();\n        long min = arr.Min();\n        long mid\
    \ = max / 2;\n        long left = 0;\n        long right = 0;\n        long maxIndex\
    \ = 0;\n        long minIndex = 0;\n        bool found = false;\n        foreach\
    \ (long i in arr) {\n            if (i > mid) {\n                right++;\n  \
    \              if (right > max) {\n                    maxIndex = max;\n     \
    \               max = right;\n                }\n                if (i == mid)\
    \ {\n                    found = true;\n                }\n            }\n   \
    \         if (i < mid) {\n                left++;\n                if (left >\
    \ min) {\n                    minIndex = min;\n                    min = left;\n\
    \                }\n                if (i == mid) {\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (!found) {\n\
    \            return -1;\n        }\n        if (maxIndex < minIndex) {\n     \
    \       return -1;\n        }\n        return maxIndex;", "        long maxIndex\
    \ = -1;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n\
    \                maxValue = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        long maxIndex = -1;\n        long maxValue = arr[0];\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue)\
    \ {\n                maxIndex = i;\n                maxValue = arr[i];\n     \
    \       }\n        }\n        return maxIndex;", "        long largest = arr.First();\n\
    \        long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n    \
    \        if (arr[i] > largest) {\n                largest = arr[i];\n        \
    \        index = i;\n            }\n        }\n        return index;", "     \
    \   long largest = arr.First();\n        long current = arr.First();\n       \
    \ long previous = arr.First();\n        foreach (long i in arr) {\n          \
    \  if (i > largest) {\n                largest = i;\n            }\n         \
    \   if (i < current) {\n                current = i;\n            }\n        \
    \    if (i == previous) {\n                previous = i;\n            }\n    \
    \    }\n        return largest;", "        long largest = arr.First();\n     \
    \   long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n         \
    \   if (arr[i] > largest) {\n                index = i;\n                largest\
    \ = arr[i];\n            }\n        }\n        return index;", "        long maxIndex\
    \ = -1;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n\
    \                maxValue = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        long largest = arr.First();\n        long smallest = arr.First();\n\
    \        foreach (long i in arr) {\n            if (i > largest) {\n         \
    \       largest = i;\n            }\n            if (i < smallest) {\n       \
    \         smallest = i;\n            }\n        }\n        if (largest == smallest)\
    \ {\n            return -1;\n        }\n        return arr.IndexOf(largest);",
  "        long largest = arr.First();\n        long smallest = arr.Last();\n    \
    \    long largestIndex = arr.IndexOf(largest);\n        long smallestIndex = arr.IndexOf(smallest);\n\
    \        if (largestIndex < smallestIndex) {\n            return -1;\n       \
    \ }\n        long currentIndex = largestIndex;\n        while (currentIndex <\
    \ arr.Count - 1) {\n            if (arr[currentIndex] <= arr[currentIndex + 1])\
    \ {\n                currentIndex++;\n            } else {\n                return\
    \ currentIndex;\n            }\n        }\n        return currentIndex;", "  \
    \      long largest = arr.First();\n        long smallest = arr.First();\n   \
    \     foreach (var item in arr.Skip(1))\n        {\n            if (item < smallest\
    \ || item > largest)\n            {\n                return -1;\n            }\n\
    \            else if (item < smallest)\n            {\n                smallest\
    \ = item;\n            }\n            else if (item > largest)\n            {\n\
    \                largest = item;\n            }\n        }\n        return largest;",
  "        long maxIndex = 0;\n        long maxValue = arr[0];\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n         \
    \       maxValue = arr[i];\n                maxIndex = i;\n            }\n   \
    \     }\n        return maxIndex;", "        long largest = arr.First();\n   \
    \     long index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n       \
    \     if (arr[i] > largest) {\n                index = i;\n                largest\
    \ = arr[i];\n            }\n        }\n        return index;", "        long maxIndex\
    \ = -1;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n\
    \                maxValue = arr[i];\n            }\n        }\n        return\
    \ maxIndex;", "        long largest = arr.First();\n        long index = 0;\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < largest)\
    \ {\n                index = i;\n                largest = arr[i];\n         \
    \   }\n        }\n        return index;", "        long largest = arr.First();\n\
    \        long index = 0;\n        foreach (long i in arr) {\n            if (i\
    \ > largest) {\n                index = i;\n                largest = i;\n   \
    \         }\n        }\n        return index;", "        long maxIndex = -1;\n\
    \        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > maxValue) {\n                maxIndex = i;\n   \
    \             maxValue = arr[i];\n            }\n        }\n        return maxIndex;",
  "        long maxIndex = -1;\n        long maxValue = arr[0];\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxIndex = i;\n                maxValue = arr[i];\n            }\n \
    \       }\n        return maxIndex;", "        long maxIndex = -1;\n        long\
    \ maxValue = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n        \
    \    if (arr[i] > maxValue) {\n                maxValue = arr[i];\n          \
    \      maxIndex = i;\n            }\n        }\n        return maxIndex;", " \
    \       long largest = arr.First();\n        long index = 0;\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] >= largest) {\n       \
    \         index = i;\n                largest = arr[i];\n            }\n     \
    \   }\n        return index;", "        long max = arr.First();\n        long\
    \ maxIndex = -1;\n        for (int i = 1; i < arr.Count; i++) {\n            if\
    \ (arr[i] > max) {\n                max = arr[i];\n                maxIndex =\
    \ i;\n            }\n        }\n        return maxIndex;", "        long largest\
    \ = arr.First();\n        long smallest = arr.First();\n        long largestIndex\
    \ = 0;\n        long smallestIndex = 0;\n        foreach (long i in arr) {\n \
    \           if (i > largest) {\n                largest = i;\n               \
    \ largestIndex = i;\n            }\n            if (i < smallest) {\n        \
    \        smallest = i;\n                smallestIndex = i;\n            }\n  \
    \      }\n        if (largest == smallest) {\n            return -1;\n       \
    \ }\n        if (largest == arr[arr.Count - 1]) {\n            return arr.Count\
    \ - 1;\n        }\n        if (smallest == arr[0]) {\n            return 0;\n\
    \        }\n        if (smallest == arr[arr.Count - 1]) {\n            return\
    \ arr.Count - 1;\n        }\n        if (largest == arr[arr.Count - 2]) {\n  \
    \          return arr.Count - 2;\n        }\n        if (largest == arr[arr.Count\
    \ - 3]) {\n            return arr.Count - 3;\n        }\n        if (largest ==\
    \ arr[arr.Count - 4]) {\n            return arr.Count - 4;\n        }\n      \
    \  if (largest == arr[arr.Count - 5]) {\n            return arr.Count - 5;\n \
    \       }\n        if (largest == arr[arr.Count - 6]) {\n            return arr.Count\
    \ - 6;\n        }\n        if (largest == arr[arr.Count - 7]) {\n            return\
    \ arr.Count - 7;\n        }\n        if (largest == arr[arr.Count - 8]) {\n  \
    \          return arr.Count - 8;\n        }\n        if (largest == arr[arr.Count\
    \ - 9]) {\n            return arr.Count - 9;\n        }\n        if (largest ==\
    \ arr[arr.Count - 10]) {\n            return arr.Count - 10;\n        }\n    \
    \    if (largest == arr[arr.Count - 11]) {\n            return arr.Count - 11;\n\
    \        }\n        if (largest == arr[arr.Count - 12]) {\n            return\
    \ arr.Count - 12;\n        }\n        if (largest == arr[arr.Count - 13]) {\n\
    \            return arr.Count - 13;\n        }\n        if (largest == arr[arr.Count\
    \ - 14]) {\n            return arr.Count - 14;\n        }\n        if (largest\
    \ == arr[arr.Count - 15]) {\n            return arr.Count - 15;\n        }\n \
    \       if (largest == arr[arr.Count - 16]) {\n            return arr.Count -\
    \ 16;\n        }\n        if (largest == arr[arr.Count - 17]) {\n            return\
    \ arr.Count - 17;\n        }\n        if (largest == arr[arr.Count - 18]) {\n\
    \            return arr.Count - 18;\n        }\n        if (largest == arr[arr.Count\
    \ - 19]) {\n            return arr.Count - 19;\n        }\n        if (largest\
    \ == arr[arr.Count - 20]) {\n            return arr.Count - 20;\n        }\n \
    \       if (largest == arr[arr.Count - 21]) {\n            return arr.Count -\
    \ 21;\n        }\n        if (largest == arr[arr.Count - 22", "        long max\
    \ = -1;\n        long maxIndex = -1;\n        long currentIndex = -1;\n      \
    \  long currentValue = -1;\n        foreach (long i in arr) {\n            if\
    \ (currentValue < i) {\n                currentIndex = currentValue;\n       \
    \         currentValue = i;\n            }\n            if (currentValue > i)\
    \ {\n                currentIndex = currentValue;\n                currentValue\
    \ = i;\n            }\n            if (currentValue == i) {\n                currentIndex\
    \ = currentValue;\n                currentValue = i;\n            }\n        \
    \    if (currentValue > max) {\n                max = currentValue;\n        \
    \        maxIndex = currentIndex;\n            }\n        }\n        return maxIndex;"]
stop_tokens:
- "\n    }\n"
