name: HumanEval_100_make_a_pile
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    // The first level has n stones.\n    // The number of stones\
  \ in the next level is:\n    // - the next odd number if n is odd.\n    // - the\
  \ next even number if n is even.\n    // Return the number of stones in each level\
  \ in a list, where element at index\n    // i represents the number of stones in\
  \ the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3, 5, 7]\n\
  \    public static List<long> MakeAPile(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakeAPile((3L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(MakeAPile((4L)).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(MakeAPile((5L)).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)11L, (long)13L}))));\n\
  \    Debug.Assert(MakeAPile((6L)).Equals((new List<long>(new long[]{(long)6L, (long)8L,\
  \ (long)10L, (long)12L, (long)14L, (long)16L}))));\n    Debug.Assert(MakeAPile((8L)).Equals((new\
  \ List<long>(new long[]{(long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)18L,\
  \ (long)20L, (long)22L}))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
