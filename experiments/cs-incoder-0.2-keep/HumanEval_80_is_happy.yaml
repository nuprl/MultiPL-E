name: HumanEval_80_is_happy
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string s.\n    // Your task is to check if the\
  \ string is happy or not.\n    // A string is happy if its length is at least 3\
  \ and every 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a)\
  \ => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    //\
  \ is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy) =>\
  \ False\n    public static bool IsHappy(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsHappy((\"\
  a\")) == (false));\n    Debug.Assert(IsHappy((\"aa\")) == (false));\n    Debug.Assert(IsHappy((\"\
  abcd\")) == (true));\n    Debug.Assert(IsHappy((\"aabb\")) == (false));\n    Debug.Assert(IsHappy((\"\
  adb\")) == (true));\n    Debug.Assert(IsHappy((\"xyy\")) == (false));\n    Debug.Assert(IsHappy((\"\
  iopaxpoi\")) == (true));\n    Debug.Assert(IsHappy((\"iopaxioi\")) == (false));\n\
  \    }\n\n}\n"
completions: ["        bool happy = true;\n        foreach (char c in s) {\n     \
    \       if (happy_check(c)) {\n                happy = false;\n              \
    \  break;\n            }\n        }\n        return happy;", "        bool happy\
    \ = true;\n        if (s.Length < 3)\n            happy = false;\n        else\n\
    \        {\n            int count = 0;\n            foreach (char c in s)\n  \
    \          {\n                if (c == 'a')\n                {\n             \
    \       count++;\n                }\n                if (c == 'b')\n         \
    \       {\n                    count++;\n                }\n                if\
    \ (c == 'c')\n                {\n                    count++;\n              \
    \  }\n                if (c == 'd')\n                {\n                    count++;\n\
    \                }\n                if (c == 'e')\n                {\n       \
    \             count++;\n                }\n                if (c == 'f')\n   \
    \             {\n                    count++;\n                }\n           \
    \     if (c == 'g')\n                {\n                    count++;\n       \
    \         }\n                if (c == 'h')\n                {\n              \
    \      count++;\n                }\n                if (c == 'i')\n          \
    \      {\n                    count++;\n                }\n                if\
    \ (c == 'j')\n                {\n                    count++;\n              \
    \  }\n                if (c == 'k')\n                {\n                    count++;\n\
    \                }\n                if (c == 'l')\n                {\n       \
    \             count++;\n                }\n                if (c == 'm')\n   \
    \             {\n                    count++;\n                }\n           \
    \     if (c == 'n')\n                {\n                    count++;\n       \
    \         }\n                if (c == 'o')\n                {\n              \
    \      count++;\n                }\n                if (c == 'p')\n          \
    \      {\n                    count++;\n                }\n                if\
    \ (c == 'q')\n                {\n                    count++;\n              \
    \  }\n                if (c == 'r')\n                {\n                    count++;\n\
    \                }\n                if (c == 's')\n                {\n       \
    \             count++;\n                }\n                if (c == 't')\n   \
    \             {\n                    count++;\n                }\n           \
    \     if (c == 'u')\n                {\n                    count++;\n       \
    \         }\n                if (c == 'v')\n                {\n              \
    \      count++;\n                }\n                if (c == 'w')\n          \
    \      {\n                    count++;\n                }\n                if\
    \ (c == 'x')\n                {\n                    count++;\n              \
    \  }\n                if (c == 'y')\n                {\n                    count++;\n\
    \                }\n                if (c == 'z')\n                {\n       \
    \             count++;\n                }\n            }\n            if (count\
    \ == 3)\n            {\n                happy = false;\n            }\n      \
    \  }\n        return happy;", "        bool result = true;\n        if (s.Length\
    \ < 3)\n            return false;\n        char[] chars = s.ToCharArray();\n \
    \       HashSet<char> set = new HashSet<char>();\n        foreach (char c in chars)\
    \ {\n            if (set.Contains(c))\n                return false;\n       \
    \     set.Add(c);\n        }\n        return true;", "        if (s == null ||\
    \ s.Length < 3)\n            return false;\n        HashSet<string> hs = new HashSet<string>();\n\
    \        foreach (char c in s)\n            hs.Add(c.ToString());\n        return\
    \ hs.Count >= 3;", "        bool happy = true;\n        if (s.Length < 3)\n  \
    \          happy = false;\n        else\n        {\n            int count = 0;\n\
    \            foreach (char c in s)\n            {\n                if (char.IsLetter(c))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            if (count < 3)\n            {\n                happy = false;\n\
    \            }\n        }\n        return happy;", "        if (s == null || s.Length\
    \ < 3)\n            return false;\n        HashSet<char> set = new HashSet<char>();\n\
    \        for (int i = 0; i < s.Length; i++)\n            set.Add(s[i]);\n    \
    \    return set.Count == s.Length;", "        if (s == null || s.Length < 3)\n\
    \            return false;\n        HashSet<string> set = new HashSet<string>();\n\
    \        for (int i = 0; i < s.Length - 3; i++)\n        {\n            string\
    \ temp = s.Substring(i, 3);\n            if (!set.Contains(temp))\n          \
    \  {\n                set.Add(temp);\n            }\n        }\n        return\
    \ set.Count == s.Length / 3;", "        if (s == null || s.Length < 3)\n     \
    \       return false;\n        var distinctLetters = new HashSet<char>();\n  \
    \      for (int i = 0; i < s.Length - 2; i++) {\n            distinctLetters.Add(s[i]);\n\
    \        }\n        return distinctLetters.Count == s.Length - 2;", "        if\
    \ (s == null || s.Length < 3)\n            return false;\n        var distinctLetters\
    \ = new HashSet<char>();\n        for (int i = 0; i < s.Length; i++) {\n     \
    \       char c = s[i];\n            if (!distinctLetters.Contains(c))\n      \
    \          distinctLetters.Add(c);\n        }\n        return s.Length >= 3 &&\
    \ distinctLetters.Count == s.Length;", "        if (s == null || s.Length < 3)\n\
    \            return false;\n        var distinctLetters = new HashSet<char>();\n\
    \        foreach (var letter in s)\n        {\n            if (!distinctLetters.Contains(letter))\n\
    \            {\n                distinctLetters.Add(letter);\n            }\n\
    \        }\n        return s.Length >= 3 && distinctLetters.Count == s.Length;",
  "        bool happy = true;\n        if (s.Length < 3)\n            happy = false;\n\
    \        else\n        {\n            int count = 0;\n            foreach (char\
    \ c in s)\n            {\n                if (s.IndexOf(c) == 0)\n           \
    \     {\n                    count++;\n                }\n                else\n\
    \                {\n                    count--;\n                }\n        \
    \        if (count == 3)\n                {\n                    happy = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return happy;", "        if (s == null || s.Length < 3)\n            return\
    \ false;\n        var distinctLetters = new HashSet<char>();\n        for (int\
    \ i = 0; i < s.Length - 2; i++)\n            distinctLetters.Add(s[i]);\n    \
    \    return distinctLetters.Count == s.Length - 2;", "        if (s == null ||\
    \ s.Length < 3)\n            return false;\n        var distinctLetters = new\
    \ HashSet<char>(s.ToCharArray());\n        var distinctLettersCount = distinctLetters.Count;\n\
    \        if (distinctLettersCount < 3)\n            return false;\n        var\
    \ firstThreeLetters = s.Take(3);\n        var firstThreeLettersCount = firstThreeLetters.Count;\n\
    \        if (firstThreeLettersCount != distinctLettersCount)\n            return\
    \ false;\n        var lastThreeLetters = s.Skip(3);\n        var lastThreeLettersCount\
    \ = lastThreeLetters.Count;\n        if (lastThreeLettersCount != distinctLettersCount)\n\
    \            return false;\n        return true;", "        if (s.Length < 3)\n\
    \            return false;\n        HashSet<char> set = new HashSet<char>();\n\
    \        foreach (char c in s)\n            set.Add(c);\n        return set.Count\
    \ == s.Length;", "        if (s == null || s.Length < 3)\n            return false;\n\
    \        HashSet<string> set = new HashSet<string>();\n        for (int i = 0;\
    \ i < s.Length; i++)\n        {\n            if (set.Contains(s[i]))\n       \
    \         return false;\n            set.Add(s[i]);\n        }\n        return\
    \ true;", "        if (s == null || s.Length < 3)\n            return false;\n\
    \        HashSet<char> chars = new HashSet<char>(s.ToCharArray());\n        return\
    \ chars.Count == 3 && chars.Distinct().Count() == 3;", "        if (s == null\
    \ || s.Length < 3)\n            return false;\n        HashSet<string> set = new\
    \ HashSet<string>();\n        foreach (char c in s)\n            set.Add(c.ToString());\n\
    \        return set.Count == s.Length;", "        if (s == null || s.Length <\
    \ 3)\n            return false;\n        var distinctLetters = new HashSet<char>(s.ToCharArray());\n\
    \        return s.Length >= 3 && distinctLetters.Count >= 3;", "        if (s\
    \ == null || s.Length < 3)\n            return false;\n        HashSet<char> set\
    \ = new HashSet<char>();\n        foreach (char c in s)\n            set.Add(c);\n\
    \        return set.Count == s.Length;", "        if (s == null || s.Length <\
    \ 3)\n            return false;\n        HashSet<char> set = new HashSet<char>();\n\
    \        foreach (char c in s)\n            set.Add(c);\n        return set.Count\
    \ == s.Length;"]
stop_tokens:
- "\n    }\n"
