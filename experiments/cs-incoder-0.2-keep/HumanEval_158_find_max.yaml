name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // find_max([\"\
  name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\"\
  , \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"\
  aaaaaaa\"\n    public static string FindMax(List<string> words) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        string maxWord = \"\";\n        int maxCount = 0;\n       \
    \ foreach (string word in words) {\n            int count = 0;\n            foreach\
    \ (char c in word) {\n                count++;\n            }\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        string\
    \ maxWord = \"\";\n        int maxCount = 0;\n        foreach (string word in\
    \ words) {\n            int count = word.Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        string maxWord\
    \ = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n\
    \            int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = \"\"\
    ;\n        int maxCount = 0;\n        foreach (string word in words) {\n     \
    \       int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        int max = 0;\n     \
    \   string maxWord = \"\";\n        foreach (string word in words) {\n       \
    \     int uniqueChars = word.Distinct().Count();\n            if (uniqueChars\
    \ > max) {\n                max = uniqueChars;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;", "        int max = 0;\n \
    \       string maxWord = \"\";\n        foreach (string word in words) {\n   \
    \         int count = 0;\n            foreach (char c in word) {\n           \
    \     count++;\n            }\n            if (count > max) {\n              \
    \  max = count;\n                maxWord = word;\n            }\n        }\n \
    \       return maxWord;", "        string maxWord = \"\";\n        int maxCount\
    \ = 0;\n        foreach (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = word.Distinct().Count();\n       \
    \     if (count > maxCount) {\n                maxCount = count;\n           \
    \     maxWord = word;\n            }\n        }\n        return maxWord;", " \
    \       string maxWord = \"\";\n        string maxCount = \"\";\n        foreach\
    \ (string word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount.Length) {\n                maxCount = count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string max = \"\";\n        foreach (string word in words) {\n        \
    \    int maxCount = 0;\n            foreach (char c in word) {\n             \
    \   maxCount = maxCount + 1;\n            }\n            if (maxCount > max.Length)\
    \ {\n                max = word;\n            }\n        }\n        return max;",
  "        string max = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = word.Distinct().Count();\n       \
    \     if (count > maxCount) {\n                max = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return max;", "        string maxWord\
    \ = \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n\
    \            int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string max = \"\";\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        max = word;\n                maxCount = count;\n            }\n     \
    \   }\n        return max;", "        string result = \"\";\n        HashSet<string>\
    \ uniqueChars = new HashSet<string>();\n        foreach (string word in words)\
    \ {\n            foreach (char c in word) {\n                if (!uniqueChars.Contains(c))\
    \ {\n                    uniqueChars.Add(c);\n                }\n            }\n\
    \        }\n        if (uniqueChars.Count > words.Count) {\n            result\
    \ = \"\";\n        }\n        else {\n            result = words.OrderByDescending(x\
    \ => x.Length).First();\n        }\n        return result;", "        string max\
    \ = \"\";\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.Distinct().Count();\n            if (uniqueChars > max.Length) {\n  \
    \              max = word;\n            }\n        }\n        return max;", " \
    \       string maxWord = \"\";\n        string maxCount = \"\";\n        foreach\
    \ (string word in words) {\n            int count = word.Length;\n           \
    \ if (maxCount.Length > count) {\n                maxCount = maxCount.Substring(0,\
    \ count);\n            }\n            if (maxCount.Length < count) {\n       \
    \         maxCount = maxCount + word.Substring(0, count);\n            }\n   \
    \         if (maxCount.Length == count) {\n                maxWord = word;\n \
    \           }\n        }\n        return maxWord;", "        string maxWord =\
    \ \"\";\n        int maxCount = 0;\n        foreach (string word in words) {\n\
    \            int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string maxWord = \"\"\
    ;\n        int maxCount = 0;\n        foreach (string word in words) {\n     \
    \       int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;", "        string max = \"\";\n\
    \        string max2 = \"\";\n        foreach (string word in words) {\n     \
    \       int count = 0;\n            foreach (char c in word) {\n             \
    \   if (char.IsLetter(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max2.Length) {\n                max =\
    \ word;\n                max2 = max;\n            } else if (count < max2.Length)\
    \ {\n                max2 = word;\n            }\n        }\n        if (max2.Length\
    \ > max.Length) {\n            return max2;\n        } else {\n            return\
    \ max;\n        }", "        string max = \"\";\n        int maxCount = 0;\n \
    \       foreach (string word in words) {\n            int count = word.ToCharArray().Distinct().Count();\n\
    \            if (count > maxCount) {\n                max = word;\n          \
    \      maxCount = count;\n            }\n        }\n        return max;"]
stop_tokens:
- "\n    }\n"
